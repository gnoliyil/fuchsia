// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Generated by ./bindgen.sh using bindgen 0.60.1

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

mod tss2_tpm2_types;

pub use crate::tss2_tpm2_types::*;

pub const ESYS_TR_NONE: u32 = 4095;
pub const ESYS_TR_PASSWORD: u32 = 255;
pub const ESYS_TR_PCR0: u32 = 0;
pub const ESYS_TR_PCR1: u32 = 1;
pub const ESYS_TR_PCR2: u32 = 2;
pub const ESYS_TR_PCR3: u32 = 3;
pub const ESYS_TR_PCR4: u32 = 4;
pub const ESYS_TR_PCR5: u32 = 5;
pub const ESYS_TR_PCR6: u32 = 6;
pub const ESYS_TR_PCR7: u32 = 7;
pub const ESYS_TR_PCR8: u32 = 8;
pub const ESYS_TR_PCR9: u32 = 9;
pub const ESYS_TR_PCR10: u32 = 10;
pub const ESYS_TR_PCR11: u32 = 11;
pub const ESYS_TR_PCR12: u32 = 12;
pub const ESYS_TR_PCR13: u32 = 13;
pub const ESYS_TR_PCR14: u32 = 14;
pub const ESYS_TR_PCR15: u32 = 15;
pub const ESYS_TR_PCR16: u32 = 16;
pub const ESYS_TR_PCR17: u32 = 17;
pub const ESYS_TR_PCR18: u32 = 18;
pub const ESYS_TR_PCR19: u32 = 19;
pub const ESYS_TR_PCR20: u32 = 20;
pub const ESYS_TR_PCR21: u32 = 21;
pub const ESYS_TR_PCR22: u32 = 22;
pub const ESYS_TR_PCR23: u32 = 23;
pub const ESYS_TR_PCR24: u32 = 24;
pub const ESYS_TR_PCR25: u32 = 25;
pub const ESYS_TR_PCR26: u32 = 26;
pub const ESYS_TR_PCR27: u32 = 27;
pub const ESYS_TR_PCR28: u32 = 28;
pub const ESYS_TR_PCR29: u32 = 29;
pub const ESYS_TR_PCR30: u32 = 30;
pub const ESYS_TR_PCR31: u32 = 31;
pub const ESYS_TR_RH_OWNER: u32 = 257;
pub const ESYS_TR_RH_NULL: u32 = 263;
pub const ESYS_TR_RH_LOCKOUT: u32 = 266;
pub const ESYS_TR_RH_ENDORSEMENT: u32 = 267;
pub const ESYS_TR_RH_PLATFORM: u32 = 268;
pub const ESYS_TR_RH_PLATFORM_NV: u32 = 269;
pub const ESYS_TR_RH_AUTH_FIRST: u32 = 272;
pub const ESYS_TR_RH_ACT_FIRST: u32 = 288;
pub const ESYS_TR_RH_ACT_LAST: u32 = 303;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type UINT8 = u8;
pub type BYTE = u8;
pub type INT8 = i8;
pub type UINT16 = u16;
pub type INT16 = i16;
pub type UINT32 = u32;
pub type INT32 = i32;
pub type UINT64 = u64;
pub type INT64 = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSS2_ABI_VERSION {
    pub tssCreator: u32,
    pub tssFamily: u32,
    pub tssLevel: u32,
    pub tssVersion: u32,
}
pub type TSS2_RC = u32;
pub type TPM2_ALG_ID = UINT16;
pub type TPM2_ECC_CURVE = UINT16;
pub type TPM2_CC = UINT32;
pub type TPM2_KEY_BITS = UINT16;
pub type TPM2_GENERATED = UINT32;
pub type TPM2_RC = UINT32;
pub type TPM2_CLOCK_ADJUST = INT8;
pub type TPM2_EO = UINT16;
pub type TPM2_ST = UINT16;
pub type TPM2_SU = UINT16;
pub type TPM2_SE = UINT8;
pub type TPM2_CAP = UINT32;
pub type TPM2_PT = UINT32;
pub type TPM2_PT_PCR = UINT32;
pub type TPM2_HANDLE = UINT32;
pub type TPMA_ALGORITHM = u32;
pub type TPMA_OBJECT = u32;
pub type TPMA_SESSION = UINT8;
pub type TPMA_LOCALITY = UINT8;
pub type TPMA_PERMANENT = u32;
pub type TPMA_STARTUP_CLEAR = u32;
pub type TPMA_CC = u32;
pub type TPMA_ACT = u32;
pub type TPMI_YES_NO = BYTE;
pub type TPMI_DH_OBJECT = TPM2_HANDLE;
pub type TPMI_DH_PERSISTENT = TPM2_HANDLE;
pub type TPMI_DH_ENTITY = TPM2_HANDLE;
pub type TPMI_DH_PCR = TPM2_HANDLE;
pub type TPMI_SH_AUTH_SESSION = TPM2_HANDLE;
pub type TPMI_SH_HMAC = TPM2_HANDLE;
pub type TPMI_SH_POLICY = TPM2_HANDLE;
pub type TPMI_DH_CONTEXT = TPM2_HANDLE;
pub type TPMI_RH_HIERARCHY = TPM2_HANDLE;
pub type TPMI_RH_ENABLES = TPM2_HANDLE;
pub type TPMI_RH_HIERARCHY_AUTH = TPM2_HANDLE;
pub type TPMI_RH_PLATFORM = TPM2_HANDLE;
pub type TPMI_RH_ENDORSEMENT = TPM2_HANDLE;
pub type TPMI_RH_PROVISION = TPM2_HANDLE;
pub type TPMI_RH_CLEAR = TPM2_HANDLE;
pub type TPMI_RH_NV_AUTH = TPM2_HANDLE;
pub type TPMI_RH_LOCKOUT = TPM2_HANDLE;
pub type TPMI_RH_NV_INDEX = TPM2_HANDLE;
pub type TPMI_RH_AC = TPM2_HANDLE;
pub type TPMI_RH_ACT = TPM2_HANDLE;
pub type TPMI_ALG_HASH = TPM2_ALG_ID;
pub type TPMI_ALG_SYM = TPM2_ALG_ID;
pub type TPMI_ALG_SYM_OBJECT = TPM2_ALG_ID;
pub type TPMI_ALG_SYM_MODE = TPM2_ALG_ID;
pub type TPMI_ALG_KDF = TPM2_ALG_ID;
pub type TPMI_ALG_SIG_SCHEME = TPM2_ALG_ID;
pub type TPMI_ECC_KEY_EXCHANGE = TPM2_ALG_ID;
pub type TPMI_ALG_CIPHER_MODE = TPM2_ALG_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_EMPTY {
    pub empty: [BYTE; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ALGORITHM_DESCRIPTION {
    pub alg: TPM2_ALG_ID,
    pub attributes: TPMA_ALGORITHM,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_HA {
    pub sha1: [BYTE; 20usize],
    pub sha256: [BYTE; 32usize],
    pub sha384: [BYTE; 48usize],
    pub sha512: [BYTE; 64usize],
    pub sm3_256: [BYTE; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_HA {
    pub hashAlg: TPMI_ALG_HASH,
    pub digest: TPMU_HA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_DIGEST {
    pub size: UINT16,
    pub buffer: [BYTE; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_DATA {
    pub size: UINT16,
    pub buffer: [BYTE; 64usize],
}
pub type TPM2B_NONCE = TPM2B_DIGEST;
pub type TPM2B_AUTH = TPM2B_DIGEST;
pub type TPM2B_OPERAND = TPM2B_DIGEST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_EVENT {
    pub size: UINT16,
    pub buffer: [BYTE; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_MAX_BUFFER {
    pub size: UINT16,
    pub buffer: [BYTE; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_MAX_NV_BUFFER {
    pub size: UINT16,
    pub buffer: [BYTE; 2048usize],
}
pub type TPM2B_TIMEOUT = TPM2B_DIGEST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_IV {
    pub size: UINT16,
    pub buffer: [BYTE; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_NAME {
    pub digest: TPMT_HA,
    pub handle: TPM2_HANDLE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_NAME {
    pub size: UINT16,
    pub name: [BYTE; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_PCR_SELECT {
    pub sizeofSelect: UINT8,
    pub pcrSelect: [BYTE; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_PCR_SELECTION {
    pub hash: TPMI_ALG_HASH,
    pub sizeofSelect: UINT8,
    pub pcrSelect: [BYTE; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMT_TK_CREATION {
    pub tag: TPM2_ST,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub digest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMT_TK_VERIFIED {
    pub tag: TPM2_ST,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub digest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMT_TK_AUTH {
    pub tag: TPM2_ST,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub digest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMT_TK_HASHCHECK {
    pub tag: TPM2_ST,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub digest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ALG_PROPERTY {
    pub alg: TPM2_ALG_ID,
    pub algProperties: TPMA_ALGORITHM,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_TAGGED_PROPERTY {
    pub property: TPM2_PT,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_TAGGED_PCR_SELECT {
    pub tag: TPM2_PT_PCR,
    pub sizeofSelect: UINT8,
    pub pcrSelect: [BYTE; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_TAGGED_POLICY {
    pub handle: TPM2_HANDLE,
    pub policyHash: TPMT_HA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ACT_DATA {
    pub handle: TPM2_HANDLE,
    pub timeout: UINT32,
    pub attributes: TPMA_ACT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_CC {
    pub count: UINT32,
    pub commandCodes: [TPM2_CC; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_CCA {
    pub count: UINT32,
    pub commandAttributes: [TPMA_CC; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_ALG {
    pub count: UINT32,
    pub algorithms: [TPM2_ALG_ID; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_HANDLE {
    pub count: UINT32,
    pub handle: [TPM2_HANDLE; 254usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_DIGEST {
    pub count: UINT32,
    pub digests: [TPM2B_DIGEST; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPML_DIGEST_VALUES {
    pub count: UINT32,
    pub digests: [TPMT_HA; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_PCR_SELECTION {
    pub count: UINT32,
    pub pcrSelections: [TPMS_PCR_SELECTION; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_ALG_PROPERTY {
    pub count: UINT32,
    pub algProperties: [TPMS_ALG_PROPERTY; 127usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_TAGGED_TPM_PROPERTY {
    pub count: UINT32,
    pub tpmProperty: [TPMS_TAGGED_PROPERTY; 127usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_TAGGED_PCR_PROPERTY {
    pub count: UINT32,
    pub pcrProperty: [TPMS_TAGGED_PCR_SELECT; 84usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_ECC_CURVE {
    pub count: UINT32,
    pub eccCurves: [TPM2_ECC_CURVE; 508usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPML_TAGGED_POLICY {
    pub count: UINT32,
    pub policies: [TPMS_TAGGED_POLICY; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_ACT_DATA {
    pub count: UINT32,
    pub actData: [TPMS_ACT_DATA; 84usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_INTEL_PTT_PROPERTY {
    pub count: UINT32,
    pub property: [UINT32; 256usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_CAPABILITIES {
    pub algorithms: TPML_ALG_PROPERTY,
    pub handles: TPML_HANDLE,
    pub command: TPML_CCA,
    pub ppCommands: TPML_CC,
    pub auditCommands: TPML_CC,
    pub assignedPCR: TPML_PCR_SELECTION,
    pub tpmProperties: TPML_TAGGED_TPM_PROPERTY,
    pub pcrProperties: TPML_TAGGED_PCR_PROPERTY,
    pub eccCurves: TPML_ECC_CURVE,
    pub authPolicies: TPML_TAGGED_POLICY,
    pub actData: TPML_ACT_DATA,
    pub intelPttProperty: TPML_INTEL_PTT_PROPERTY,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_CAPABILITY_DATA {
    pub capability: TPM2_CAP,
    pub data: TPMU_CAPABILITIES,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CLOCK_INFO {
    pub clock: UINT64,
    pub resetCount: UINT32,
    pub restartCount: UINT32,
    pub safe: TPMI_YES_NO,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_TIME_INFO {
    pub time: UINT64,
    pub clockInfo: TPMS_CLOCK_INFO,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_TIME_ATTEST_INFO {
    pub time: TPMS_TIME_INFO,
    pub firmwareVersion: UINT64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CERTIFY_INFO {
    pub name: TPM2B_NAME,
    pub qualifiedName: TPM2B_NAME,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_QUOTE_INFO {
    pub pcrSelect: TPML_PCR_SELECTION,
    pub pcrDigest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_COMMAND_AUDIT_INFO {
    pub auditCounter: UINT64,
    pub digestAlg: TPM2_ALG_ID,
    pub auditDigest: TPM2B_DIGEST,
    pub commandDigest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SESSION_AUDIT_INFO {
    pub exclusiveSession: TPMI_YES_NO,
    pub sessionDigest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CREATION_INFO {
    pub objectName: TPM2B_NAME,
    pub creationHash: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_NV_CERTIFY_INFO {
    pub indexName: TPM2B_NAME,
    pub offset: UINT16,
    pub nvContents: TPM2B_MAX_NV_BUFFER,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_NV_DIGEST_CERTIFY_INFO {
    pub indexName: TPM2B_NAME,
    pub nvDigest: TPM2B_DIGEST,
}
pub type TPMI_ST_ATTEST = TPM2_ST;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_ATTEST {
    pub certify: TPMS_CERTIFY_INFO,
    pub creation: TPMS_CREATION_INFO,
    pub quote: TPMS_QUOTE_INFO,
    pub commandAudit: TPMS_COMMAND_AUDIT_INFO,
    pub sessionAudit: TPMS_SESSION_AUDIT_INFO,
    pub time: TPMS_TIME_ATTEST_INFO,
    pub nv: TPMS_NV_CERTIFY_INFO,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_ATTEST {
    pub magic: TPM2_GENERATED,
    pub type_: TPMI_ST_ATTEST,
    pub qualifiedSigner: TPM2B_NAME,
    pub extraData: TPM2B_DATA,
    pub clockInfo: TPMS_CLOCK_INFO,
    pub firmwareVersion: UINT64,
    pub attested: TPMU_ATTEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ATTEST {
    pub size: UINT16,
    pub attestationData: [BYTE; 2304usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_AUTH_COMMAND {
    pub sessionHandle: TPMI_SH_AUTH_SESSION,
    pub nonce: TPM2B_NONCE,
    pub sessionAttributes: TPMA_SESSION,
    pub hmac: TPM2B_AUTH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_AUTH_RESPONSE {
    pub nonce: TPM2B_NONCE,
    pub sessionAttributes: TPMA_SESSION,
    pub hmac: TPM2B_AUTH,
}
pub type TPMI_AES_KEY_BITS = TPM2_KEY_BITS;
pub type TPMI_SM4_KEY_BITS = TPM2_KEY_BITS;
pub type TPMI_CAMELLIA_KEY_BITS = TPM2_KEY_BITS;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SYM_KEY_BITS {
    pub aes: TPMI_AES_KEY_BITS,
    pub sm4: TPMI_SM4_KEY_BITS,
    pub camellia: TPMI_CAMELLIA_KEY_BITS,
    pub sym: TPM2_KEY_BITS,
    pub exclusiveOr: TPMI_ALG_HASH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SYM_MODE {
    pub aes: TPMI_ALG_SYM_MODE,
    pub sm4: TPMI_ALG_SYM_MODE,
    pub camellia: TPMI_ALG_SYM_MODE,
    pub sym: TPMI_ALG_SYM_MODE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SYM_DEF {
    pub algorithm: TPMI_ALG_SYM,
    pub keyBits: TPMU_SYM_KEY_BITS,
    pub mode: TPMU_SYM_MODE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SYM_DEF_OBJECT {
    pub algorithm: TPMI_ALG_SYM_OBJECT,
    pub keyBits: TPMU_SYM_KEY_BITS,
    pub mode: TPMU_SYM_MODE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_SYM_KEY {
    pub size: UINT16,
    pub buffer: [BYTE; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_SYMCIPHER_PARMS {
    pub sym: TPMT_SYM_DEF_OBJECT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_SENSITIVE_DATA {
    pub size: UINT16,
    pub buffer: [BYTE; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SENSITIVE_CREATE {
    pub userAuth: TPM2B_AUTH,
    pub data: TPM2B_SENSITIVE_DATA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_SENSITIVE_CREATE {
    pub size: UINT16,
    pub sensitive: TPMS_SENSITIVE_CREATE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SCHEME_HASH {
    pub hashAlg: TPMI_ALG_HASH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SCHEME_ECDAA {
    pub hashAlg: TPMI_ALG_HASH,
    pub count: UINT16,
}
pub type TPMI_ALG_KEYEDHASH_SCHEME = TPM2_ALG_ID;
pub type TPMS_SCHEME_HMAC = TPMS_SCHEME_HASH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SCHEME_XOR {
    pub hashAlg: TPMI_ALG_HASH,
    pub kdf: TPMI_ALG_KDF,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SCHEME_KEYEDHASH {
    pub hmac: TPMS_SCHEME_HMAC,
    pub exclusiveOr: TPMS_SCHEME_XOR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_KEYEDHASH_SCHEME {
    pub scheme: TPMI_ALG_KEYEDHASH_SCHEME,
    pub details: TPMU_SCHEME_KEYEDHASH,
}
pub type TPMS_SIG_SCHEME_RSASSA = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_RSAPSS = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_ECDSA = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_SM2 = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_ECSCHNORR = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_ECDAA = TPMS_SCHEME_ECDAA;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SIG_SCHEME {
    pub rsassa: TPMS_SIG_SCHEME_RSASSA,
    pub rsapss: TPMS_SIG_SCHEME_RSAPSS,
    pub ecdsa: TPMS_SIG_SCHEME_ECDSA,
    pub ecdaa: TPMS_SIG_SCHEME_ECDAA,
    pub sm2: TPMS_SIG_SCHEME_SM2,
    pub ecschnorr: TPMS_SIG_SCHEME_ECSCHNORR,
    pub hmac: TPMS_SCHEME_HMAC,
    pub any: TPMS_SCHEME_HASH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SIG_SCHEME {
    pub scheme: TPMI_ALG_SIG_SCHEME,
    pub details: TPMU_SIG_SCHEME,
}
pub type TPMS_ENC_SCHEME_OAEP = TPMS_SCHEME_HASH;
pub type TPMS_ENC_SCHEME_RSAES = TPMS_EMPTY;
pub type TPMS_KEY_SCHEME_ECDH = TPMS_SCHEME_HASH;
pub type TPMS_KEY_SCHEME_ECMQV = TPMS_SCHEME_HASH;
pub type TPMS_SCHEME_MGF1 = TPMS_SCHEME_HASH;
pub type TPMS_SCHEME_KDF1_SP800_56A = TPMS_SCHEME_HASH;
pub type TPMS_SCHEME_KDF2 = TPMS_SCHEME_HASH;
pub type TPMS_SCHEME_KDF1_SP800_108 = TPMS_SCHEME_HASH;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_KDF_SCHEME {
    pub mgf1: TPMS_SCHEME_MGF1,
    pub kdf1_sp800_56a: TPMS_SCHEME_KDF1_SP800_56A,
    pub kdf2: TPMS_SCHEME_KDF2,
    pub kdf1_sp800_108: TPMS_SCHEME_KDF1_SP800_108,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_KDF_SCHEME {
    pub scheme: TPMI_ALG_KDF,
    pub details: TPMU_KDF_SCHEME,
}
pub type TPMI_ALG_ASYM_SCHEME = TPM2_ALG_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_ASYM_SCHEME {
    pub ecdh: TPMS_KEY_SCHEME_ECDH,
    pub ecmqv: TPMS_KEY_SCHEME_ECMQV,
    pub rsassa: TPMS_SIG_SCHEME_RSASSA,
    pub rsapss: TPMS_SIG_SCHEME_RSAPSS,
    pub ecdsa: TPMS_SIG_SCHEME_ECDSA,
    pub ecdaa: TPMS_SIG_SCHEME_ECDAA,
    pub sm2: TPMS_SIG_SCHEME_SM2,
    pub ecschnorr: TPMS_SIG_SCHEME_ECSCHNORR,
    pub rsaes: TPMS_ENC_SCHEME_RSAES,
    pub oaep: TPMS_ENC_SCHEME_OAEP,
    pub anySig: TPMS_SCHEME_HASH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_ASYM_SCHEME {
    pub scheme: TPMI_ALG_ASYM_SCHEME,
    pub details: TPMU_ASYM_SCHEME,
}
pub type TPMI_ALG_RSA_SCHEME = TPM2_ALG_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_RSA_SCHEME {
    pub scheme: TPMI_ALG_RSA_SCHEME,
    pub details: TPMU_ASYM_SCHEME,
}
pub type TPMI_ALG_RSA_DECRYPT = TPM2_ALG_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_RSA_DECRYPT {
    pub scheme: TPMI_ALG_RSA_DECRYPT,
    pub details: TPMU_ASYM_SCHEME,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_PUBLIC_KEY_RSA {
    pub size: UINT16,
    pub buffer: [BYTE; 512usize],
}
pub type TPMI_RSA_KEY_BITS = TPM2_KEY_BITS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_PRIVATE_KEY_RSA {
    pub size: UINT16,
    pub buffer: [BYTE; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ECC_PARAMETER {
    pub size: UINT16,
    pub buffer: [BYTE; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ECC_POINT {
    pub x: TPM2B_ECC_PARAMETER,
    pub y: TPM2B_ECC_PARAMETER,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ECC_POINT {
    pub size: UINT16,
    pub point: TPMS_ECC_POINT,
}
pub type TPMI_ALG_ECC_SCHEME = TPM2_ALG_ID;
pub type TPMI_ECC_CURVE = TPM2_ECC_CURVE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_ECC_SCHEME {
    pub scheme: TPMI_ALG_ECC_SCHEME,
    pub details: TPMU_ASYM_SCHEME,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_ALGORITHM_DETAIL_ECC {
    pub curveID: TPM2_ECC_CURVE,
    pub keySize: UINT16,
    pub kdf: TPMT_KDF_SCHEME,
    pub sign: TPMT_ECC_SCHEME,
    pub p: TPM2B_ECC_PARAMETER,
    pub a: TPM2B_ECC_PARAMETER,
    pub b: TPM2B_ECC_PARAMETER,
    pub gX: TPM2B_ECC_PARAMETER,
    pub gY: TPM2B_ECC_PARAMETER,
    pub n: TPM2B_ECC_PARAMETER,
    pub h: TPM2B_ECC_PARAMETER,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SIGNATURE_RSA {
    pub hash: TPMI_ALG_HASH,
    pub sig: TPM2B_PUBLIC_KEY_RSA,
}
pub type TPMS_SIGNATURE_RSASSA = TPMS_SIGNATURE_RSA;
pub type TPMS_SIGNATURE_RSAPSS = TPMS_SIGNATURE_RSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SIGNATURE_ECC {
    pub hash: TPMI_ALG_HASH,
    pub signatureR: TPM2B_ECC_PARAMETER,
    pub signatureS: TPM2B_ECC_PARAMETER,
}
pub type TPMS_SIGNATURE_ECDSA = TPMS_SIGNATURE_ECC;
pub type TPMS_SIGNATURE_ECDAA = TPMS_SIGNATURE_ECC;
pub type TPMS_SIGNATURE_SM2 = TPMS_SIGNATURE_ECC;
pub type TPMS_SIGNATURE_ECSCHNORR = TPMS_SIGNATURE_ECC;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SIGNATURE {
    pub rsassa: TPMS_SIGNATURE_RSASSA,
    pub rsapss: TPMS_SIGNATURE_RSAPSS,
    pub ecdsa: TPMS_SIGNATURE_ECDSA,
    pub ecdaa: TPMS_SIGNATURE_ECDAA,
    pub sm2: TPMS_SIGNATURE_SM2,
    pub ecschnorr: TPMS_SIGNATURE_ECSCHNORR,
    pub hmac: TPMT_HA,
    pub any: TPMS_SCHEME_HASH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SIGNATURE {
    pub sigAlg: TPMI_ALG_SIG_SCHEME,
    pub signature: TPMU_SIGNATURE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_ENCRYPTED_SECRET {
    pub ecc: [BYTE; 260usize],
    pub rsa: [BYTE; 512usize],
    pub symmetric: [BYTE; 66usize],
    pub keyedHash: [BYTE; 66usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ENCRYPTED_SECRET {
    pub size: UINT16,
    pub secret: [BYTE; 512usize],
}
pub type TPMI_ALG_PUBLIC = TPM2_ALG_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_PUBLIC_ID {
    pub keyedHash: TPM2B_DIGEST,
    pub sym: TPM2B_DIGEST,
    pub rsa: TPM2B_PUBLIC_KEY_RSA,
    pub ecc: TPMS_ECC_POINT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_KEYEDHASH_PARMS {
    pub scheme: TPMT_KEYEDHASH_SCHEME,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_ASYM_PARMS {
    pub symmetric: TPMT_SYM_DEF_OBJECT,
    pub scheme: TPMT_ASYM_SCHEME,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_RSA_PARMS {
    pub symmetric: TPMT_SYM_DEF_OBJECT,
    pub scheme: TPMT_RSA_SCHEME,
    pub keyBits: TPMI_RSA_KEY_BITS,
    pub exponent: UINT32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_ECC_PARMS {
    pub symmetric: TPMT_SYM_DEF_OBJECT,
    pub scheme: TPMT_ECC_SCHEME,
    pub curveID: TPMI_ECC_CURVE,
    pub kdf: TPMT_KDF_SCHEME,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_PUBLIC_PARMS {
    pub keyedHashDetail: TPMS_KEYEDHASH_PARMS,
    pub symDetail: TPMS_SYMCIPHER_PARMS,
    pub rsaDetail: TPMS_RSA_PARMS,
    pub eccDetail: TPMS_ECC_PARMS,
    pub asymDetail: TPMS_ASYM_PARMS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_PUBLIC_PARMS {
    pub type_: TPMI_ALG_PUBLIC,
    pub parameters: TPMU_PUBLIC_PARMS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_PUBLIC {
    pub type_: TPMI_ALG_PUBLIC,
    pub nameAlg: TPMI_ALG_HASH,
    pub objectAttributes: TPMA_OBJECT,
    pub authPolicy: TPM2B_DIGEST,
    pub parameters: TPMU_PUBLIC_PARMS,
    pub unique: TPMU_PUBLIC_ID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPM2B_PUBLIC {
    pub size: UINT16,
    pub publicArea: TPMT_PUBLIC,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_TEMPLATE {
    pub size: UINT16,
    pub buffer: [BYTE; 612usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_PRIVATE_VENDOR_SPECIFIC {
    pub size: UINT16,
    pub buffer: [BYTE; 1280usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SENSITIVE_COMPOSITE {
    pub rsa: TPM2B_PRIVATE_KEY_RSA,
    pub ecc: TPM2B_ECC_PARAMETER,
    pub bits: TPM2B_SENSITIVE_DATA,
    pub sym: TPM2B_SYM_KEY,
    pub any: TPM2B_PRIVATE_VENDOR_SPECIFIC,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SENSITIVE {
    pub sensitiveType: TPMI_ALG_PUBLIC,
    pub authValue: TPM2B_AUTH,
    pub seedValue: TPM2B_DIGEST,
    pub sensitive: TPMU_SENSITIVE_COMPOSITE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPM2B_SENSITIVE {
    pub size: UINT16,
    pub sensitiveArea: TPMT_SENSITIVE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_PRIVATE {
    pub size: UINT16,
    pub buffer: [BYTE; 1550usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ID_OBJECT {
    pub integrityHMAC: TPM2B_DIGEST,
    pub encIdentity: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ID_OBJECT {
    pub size: UINT16,
    pub credential: [BYTE; 132usize],
}
pub type TPM2_NT = UINT8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_NV_PIN_COUNTER_PARAMETERS {
    pub pinCount: UINT32,
    pub pinLimit: UINT32,
}
pub type TPMA_NV = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_NV_PUBLIC {
    pub nvIndex: TPMI_RH_NV_INDEX,
    pub nameAlg: TPMI_ALG_HASH,
    pub attributes: TPMA_NV,
    pub authPolicy: TPM2B_DIGEST,
    pub dataSize: UINT16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_NV_PUBLIC {
    pub size: UINT16,
    pub nvPublic: TPMS_NV_PUBLIC,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_CONTEXT_SENSITIVE {
    pub size: UINT16,
    pub buffer: [BYTE; 5120usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CONTEXT_DATA {
    pub integrity: TPM2B_DIGEST,
    pub encrypted: TPM2B_CONTEXT_SENSITIVE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_CONTEXT_DATA {
    pub size: UINT16,
    pub buffer: [BYTE; 5188usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CONTEXT {
    pub sequence: UINT64,
    pub savedHandle: TPMI_DH_CONTEXT,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub contextBlob: TPM2B_CONTEXT_DATA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CREATION_DATA {
    pub pcrSelect: TPML_PCR_SELECTION,
    pub pcrDigest: TPM2B_DIGEST,
    pub locality: TPMA_LOCALITY,
    pub parentNameAlg: TPM2_ALG_ID,
    pub parentName: TPM2B_NAME,
    pub parentQualifiedName: TPM2B_NAME,
    pub outsideInfo: TPM2B_DATA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_CREATION_DATA {
    pub size: UINT16,
    pub creationData: TPMS_CREATION_DATA,
}
pub type TPM_AT = UINT32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_AC_OUTPUT {
    pub tag: TPM_AT,
    pub data: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_AC_CAPABILITIES {
    pub count: UINT32,
    pub acCapabilities: [TPMS_AC_OUTPUT; 128usize],
}
pub type size_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn Tss2_MU_INT8_Marshal(
        src: INT8,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_INT8_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut INT8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_INT16_Marshal(
        src: INT16,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_INT16_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut INT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_INT32_Marshal(
        src: INT32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_INT32_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut INT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_INT64_Marshal(
        src: INT64,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_INT64_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut INT64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_UINT8_Marshal(
        src: UINT8,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_UINT8_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut UINT8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_UINT16_Marshal(
        src: UINT16,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_UINT16_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_UINT32_Marshal(
        src: UINT32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_UINT32_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_UINT64_Marshal(
        src: UINT64,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_UINT64_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut UINT64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_CC_Marshal(
        src: TPM2_CC,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_CC_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_ST_Marshal(
        src: TPM2_ST,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_ST_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2_ST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_ALGORITHM_Marshal(
        src: TPMA_ALGORITHM,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_ALGORITHM_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMA_ALGORITHM,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_CC_Marshal(
        src: TPMA_CC,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_CC_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMA_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_LOCALITY_Marshal(
        src: TPMA_LOCALITY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_LOCALITY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMA_LOCALITY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_NV_Marshal(
        src: TPMA_NV,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_NV_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMA_NV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_OBJECT_Marshal(
        src: TPMA_OBJECT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_OBJECT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMA_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_PERMANENT_Marshal(
        src: TPMA_PERMANENT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_PERMANENT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMA_PERMANENT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_SESSION_Marshal(
        src: TPMA_SESSION,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_SESSION_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMA_SESSION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_STARTUP_CLEAR_Marshal(
        src: TPMA_STARTUP_CLEAR,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMA_STARTUP_CLEAR_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMA_STARTUP_CLEAR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_DIGEST_Marshal(
        src: *const TPM2B_DIGEST,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_DIGEST_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ATTEST_Marshal(
        src: *const TPM2B_ATTEST,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ATTEST_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_ATTEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_NAME_Marshal(
        src: *const TPM2B_NAME,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_NAME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_MAX_NV_BUFFER_Marshal(
        src: *const TPM2B_MAX_NV_BUFFER,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_MAX_NV_BUFFER_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_MAX_NV_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_SENSITIVE_DATA_Marshal(
        src: *const TPM2B_SENSITIVE_DATA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_SENSITIVE_DATA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_SENSITIVE_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ECC_PARAMETER_Marshal(
        src: *const TPM2B_ECC_PARAMETER,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_ECC_PARAMETER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_PUBLIC_KEY_RSA_Marshal(
        src: *const TPM2B_PUBLIC_KEY_RSA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_PUBLIC_KEY_RSA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_PUBLIC_KEY_RSA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_PRIVATE_KEY_RSA_Marshal(
        src: *const TPM2B_PRIVATE_KEY_RSA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_PRIVATE_KEY_RSA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_PRIVATE_KEY_RSA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_PRIVATE_Marshal(
        src: *const TPM2B_PRIVATE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_PRIVATE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_PRIVATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_CONTEXT_SENSITIVE_Marshal(
        src: *const TPM2B_CONTEXT_SENSITIVE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_CONTEXT_SENSITIVE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_CONTEXT_SENSITIVE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_CONTEXT_DATA_Marshal(
        src: *const TPM2B_CONTEXT_DATA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_CONTEXT_DATA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_CONTEXT_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_DATA_Marshal(
        src: *const TPM2B_DATA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_DATA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_SYM_KEY_Marshal(
        src: *const TPM2B_SYM_KEY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_SYM_KEY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_SYM_KEY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ECC_POINT_Marshal(
        src: *const TPM2B_ECC_POINT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ECC_POINT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_NV_PUBLIC_Marshal(
        src: *const TPM2B_NV_PUBLIC,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_NV_PUBLIC_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_NV_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_SENSITIVE_Marshal(
        src: *const TPM2B_SENSITIVE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_SENSITIVE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_SENSITIVE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_SENSITIVE_CREATE_Marshal(
        src: *const TPM2B_SENSITIVE_CREATE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_SENSITIVE_CREATE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_SENSITIVE_CREATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_CREATION_DATA_Marshal(
        src: *const TPM2B_CREATION_DATA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_CREATION_DATA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_CREATION_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_PUBLIC_Marshal(
        src: *const TPM2B_PUBLIC,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_PUBLIC_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ENCRYPTED_SECRET_Marshal(
        src: *const TPM2B_ENCRYPTED_SECRET,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ENCRYPTED_SECRET_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ID_OBJECT_Marshal(
        src: *const TPM2B_ID_OBJECT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_ID_OBJECT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_ID_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_IV_Marshal(
        src: *const TPM2B_IV,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_IV_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_IV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_AUTH_Marshal(
        src: *const TPM2B_AUTH,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_AUTH_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_EVENT_Marshal(
        src: *const TPM2B_EVENT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_EVENT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_EVENT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_MAX_BUFFER_Marshal(
        src: *const TPM2B_MAX_BUFFER,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_MAX_BUFFER_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_NONCE_Marshal(
        src: *const TPM2B_NONCE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_NONCE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_NONCE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_OPERAND_Marshal(
        src: *const TPM2B_OPERAND,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_OPERAND_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_OPERAND,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_TIMEOUT_Marshal(
        src: *const TPM2B_TIMEOUT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_TIMEOUT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_TIMEOUT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_TEMPLATE_Marshal(
        src: *const TPM2B_TEMPLATE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2B_TEMPLATE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPM2B_TEMPLATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CONTEXT_Marshal(
        src: *const TPMS_CONTEXT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CONTEXT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TIME_INFO_Marshal(
        src: *const TPMS_TIME_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TIME_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_TIME_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ECC_POINT_Marshal(
        src: *const TPMS_ECC_POINT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ECC_POINT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_NV_PUBLIC_Marshal(
        src: *const TPMS_NV_PUBLIC,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_NV_PUBLIC_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_NV_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ALG_PROPERTY_Marshal(
        src: *const TPMS_ALG_PROPERTY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ALG_PROPERTY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_ALG_PROPERTY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ALGORITHM_DESCRIPTION_Marshal(
        src: *const TPMS_ALGORITHM_DESCRIPTION,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ALGORITHM_DESCRIPTION_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_ALGORITHM_DESCRIPTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TAGGED_PROPERTY_Marshal(
        src: *const TPMS_TAGGED_PROPERTY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TAGGED_PROPERTY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_TAGGED_PROPERTY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TAGGED_POLICY_Marshal(
        src: *const TPMS_TAGGED_POLICY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TAGGED_POLICY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_TAGGED_POLICY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CLOCK_INFO_Marshal(
        src: *const TPMS_CLOCK_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CLOCK_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_CLOCK_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TIME_ATTEST_INFO_Marshal(
        src: *const TPMS_TIME_ATTEST_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TIME_ATTEST_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_TIME_ATTEST_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CERTIFY_INFO_Marshal(
        src: *const TPMS_CERTIFY_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CERTIFY_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_CERTIFY_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_COMMAND_AUDIT_INFO_Marshal(
        src: *const TPMS_COMMAND_AUDIT_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_COMMAND_AUDIT_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_COMMAND_AUDIT_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SESSION_AUDIT_INFO_Marshal(
        src: *const TPMS_SESSION_AUDIT_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SESSION_AUDIT_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_SESSION_AUDIT_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CREATION_INFO_Marshal(
        src: *const TPMS_CREATION_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CREATION_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_CREATION_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_NV_CERTIFY_INFO_Marshal(
        src: *const TPMS_NV_CERTIFY_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_NV_CERTIFY_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_NV_CERTIFY_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_AUTH_COMMAND_Marshal(
        src: *const TPMS_AUTH_COMMAND,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_AUTH_COMMAND_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_AUTH_COMMAND,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_AUTH_RESPONSE_Marshal(
        src: *const TPMS_AUTH_RESPONSE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_AUTH_RESPONSE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SENSITIVE_CREATE_Marshal(
        src: *const TPMS_SENSITIVE_CREATE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SENSITIVE_CREATE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_SENSITIVE_CREATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SCHEME_HASH_Marshal(
        src: *const TPMS_SCHEME_HASH,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SCHEME_HASH_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_SCHEME_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SCHEME_ECDAA_Marshal(
        src: *const TPMS_SCHEME_ECDAA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SCHEME_ECDAA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_SCHEME_ECDAA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SCHEME_XOR_Marshal(
        src: *const TPMS_SCHEME_XOR,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SCHEME_XOR_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_SCHEME_XOR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SIGNATURE_RSA_Marshal(
        src: *const TPMS_SIGNATURE_RSA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SIGNATURE_RSA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_SIGNATURE_RSA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SIGNATURE_ECC_Marshal(
        src: *const TPMS_SIGNATURE_ECC,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SIGNATURE_ECC_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_SIGNATURE_ECC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_NV_PIN_COUNTER_PARAMETERS_Marshal(
        src: *const TPMS_NV_PIN_COUNTER_PARAMETERS,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_NV_PIN_COUNTER_PARAMETERS_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_NV_PIN_COUNTER_PARAMETERS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CONTEXT_DATA_Marshal(
        src: *const TPMS_CONTEXT_DATA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CONTEXT_DATA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_CONTEXT_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_PCR_SELECT_Marshal(
        src: *const TPMS_PCR_SELECT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_PCR_SELECT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_PCR_SELECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_PCR_SELECTION_Marshal(
        src: *const TPMS_PCR_SELECTION,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_PCR_SELECTION_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TAGGED_PCR_SELECT_Marshal(
        src: *const TPMS_TAGGED_PCR_SELECT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_TAGGED_PCR_SELECT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_TAGGED_PCR_SELECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_QUOTE_INFO_Marshal(
        src: *const TPMS_QUOTE_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_QUOTE_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_QUOTE_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CREATION_DATA_Marshal(
        src: *const TPMS_CREATION_DATA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CREATION_DATA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_CREATION_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ECC_PARMS_Marshal(
        src: *const TPMS_ECC_PARMS,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ECC_PARMS_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_ECC_PARMS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ATTEST_Marshal(
        src: *const TPMS_ATTEST,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ATTEST_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_ATTEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ALGORITHM_DETAIL_ECC_Marshal(
        src: *const TPMS_ALGORITHM_DETAIL_ECC,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ALGORITHM_DETAIL_ECC_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_ALGORITHM_DETAIL_ECC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CAPABILITY_DATA_Marshal(
        src: *const TPMS_CAPABILITY_DATA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_CAPABILITY_DATA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_CAPABILITY_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_KEYEDHASH_PARMS_Marshal(
        src: *const TPMS_KEYEDHASH_PARMS,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_KEYEDHASH_PARMS_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_KEYEDHASH_PARMS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_RSA_PARMS_Marshal(
        src: *const TPMS_RSA_PARMS,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_RSA_PARMS_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_RSA_PARMS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SYMCIPHER_PARMS_Marshal(
        src: *const TPMS_SYMCIPHER_PARMS,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_SYMCIPHER_PARMS_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_SYMCIPHER_PARMS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_AC_OUTPUT_Marshal(
        src: *const TPMS_AC_OUTPUT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_AC_OUTPUT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_AC_OUTPUT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ID_OBJECT_Marshal(
        src: *const TPMS_ID_OBJECT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ID_OBJECT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_ID_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ACT_DATA_Marshal(
        src: *const TPMS_ACT_DATA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_ACT_DATA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_ACT_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_NV_DIGEST_CERTIFY_INFO_Marshal(
        src: *const TPMS_NV_DIGEST_CERTIFY_INFO,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_NV_DIGEST_CERTIFY_INFO_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMS_NV_DIGEST_CERTIFY_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_CC_Marshal(
        src: *const TPML_CC,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_CC_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_CCA_Marshal(
        src: *const TPML_CCA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_CCA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_CCA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_ALG_Marshal(
        src: *const TPML_ALG,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_ALG_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_ALG,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_HANDLE_Marshal(
        src: *const TPML_HANDLE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_HANDLE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_HANDLE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_DIGEST_Marshal(
        src: *const TPML_DIGEST,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_DIGEST_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_DIGEST_VALUES_Marshal(
        src: *const TPML_DIGEST_VALUES,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_DIGEST_VALUES_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_PCR_SELECTION_Marshal(
        src: *const TPML_PCR_SELECTION,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_PCR_SELECTION_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_ALG_PROPERTY_Marshal(
        src: *const TPML_ALG_PROPERTY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_ALG_PROPERTY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_ALG_PROPERTY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_ECC_CURVE_Marshal(
        src: *const TPML_ECC_CURVE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_ECC_CURVE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_ECC_CURVE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_TAGGED_PCR_PROPERTY_Marshal(
        src: *const TPML_TAGGED_PCR_PROPERTY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_TAGGED_PCR_PROPERTY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_TAGGED_PCR_PROPERTY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_TAGGED_TPM_PROPERTY_Marshal(
        src: *const TPML_TAGGED_TPM_PROPERTY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_TAGGED_TPM_PROPERTY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_TAGGED_TPM_PROPERTY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_INTEL_PTT_PROPERTY_Marshal(
        src: *const TPML_INTEL_PTT_PROPERTY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_INTEL_PTT_PROPERTY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_INTEL_PTT_PROPERTY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_AC_CAPABILITIES_Marshal(
        src: *const TPML_AC_CAPABILITIES,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_AC_CAPABILITIES_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_AC_CAPABILITIES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_TAGGED_POLICY_Marshal(
        src: *const TPML_TAGGED_POLICY,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_TAGGED_POLICY_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_TAGGED_POLICY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_ACT_DATA_Marshal(
        src: *const TPML_ACT_DATA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPML_ACT_DATA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPML_ACT_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_HA_Marshal(
        src: *const TPMU_HA,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_HA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_HA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_CAPABILITIES_Marshal(
        src: *const TPMU_CAPABILITIES,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_CAPABILITIES_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_CAPABILITIES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_ATTEST_Marshal(
        src: *const TPMU_ATTEST,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_ATTEST_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_ATTEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SYM_KEY_BITS_Marshal(
        src: *const TPMU_SYM_KEY_BITS,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SYM_KEY_BITS_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_SYM_KEY_BITS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SYM_MODE_Marshal(
        src: *const TPMU_SYM_MODE,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SYM_MODE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_SYM_MODE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SIG_SCHEME_Marshal(
        src: *const TPMU_SIG_SCHEME,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SIG_SCHEME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_KDF_SCHEME_Marshal(
        src: *const TPMU_KDF_SCHEME,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_KDF_SCHEME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_KDF_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_ASYM_SCHEME_Marshal(
        src: *const TPMU_ASYM_SCHEME,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_ASYM_SCHEME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_ASYM_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SCHEME_KEYEDHASH_Marshal(
        src: *const TPMU_SCHEME_KEYEDHASH,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SCHEME_KEYEDHASH_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_SCHEME_KEYEDHASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SIGNATURE_Marshal(
        src: *const TPMU_SIGNATURE,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SIGNATURE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SENSITIVE_COMPOSITE_Marshal(
        src: *const TPMU_SENSITIVE_COMPOSITE,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_SENSITIVE_COMPOSITE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_SENSITIVE_COMPOSITE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_ENCRYPTED_SECRET_Marshal(
        src: *const TPMU_ENCRYPTED_SECRET,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_ENCRYPTED_SECRET_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_PUBLIC_PARMS_Marshal(
        src: *const TPMU_PUBLIC_PARMS,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_PUBLIC_PARMS_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_PUBLIC_PARMS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_PUBLIC_ID_Marshal(
        src: *const TPMU_PUBLIC_ID,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_PUBLIC_ID_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_PUBLIC_ID,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_NAME_Marshal(
        src: *const TPMU_NAME,
        selector_value: u32,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMU_NAME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        selector_value: u32,
        dest: *mut TPMU_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_HA_Marshal(
        src: *const TPMT_HA,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_HA_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_HA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SYM_DEF_Marshal(
        src: *const TPMT_SYM_DEF,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SYM_DEF_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_SYM_DEF,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SYM_DEF_OBJECT_Marshal(
        src: *const TPMT_SYM_DEF_OBJECT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SYM_DEF_OBJECT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_SYM_DEF_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_KEYEDHASH_SCHEME_Marshal(
        src: *const TPMT_KEYEDHASH_SCHEME,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_KEYEDHASH_SCHEME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_KEYEDHASH_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SIG_SCHEME_Marshal(
        src: *const TPMT_SIG_SCHEME,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SIG_SCHEME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_KDF_SCHEME_Marshal(
        src: *const TPMT_KDF_SCHEME,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_KDF_SCHEME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_KDF_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_ASYM_SCHEME_Marshal(
        src: *const TPMT_ASYM_SCHEME,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_ASYM_SCHEME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_ASYM_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_RSA_SCHEME_Marshal(
        src: *const TPMT_RSA_SCHEME,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_RSA_SCHEME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_RSA_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_RSA_DECRYPT_Marshal(
        src: *const TPMT_RSA_DECRYPT,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_RSA_DECRYPT_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_RSA_DECRYPT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_ECC_SCHEME_Marshal(
        src: *const TPMT_ECC_SCHEME,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_ECC_SCHEME_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_ECC_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SIGNATURE_Marshal(
        src: *const TPMT_SIGNATURE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SIGNATURE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SENSITIVE_Marshal(
        src: *const TPMT_SENSITIVE,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_SENSITIVE_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_SENSITIVE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_PUBLIC_Marshal(
        src: *const TPMT_PUBLIC,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_PUBLIC_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_PUBLIC_PARMS_Marshal(
        src: *const TPMT_PUBLIC_PARMS,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_PUBLIC_PARMS_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_PUBLIC_PARMS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_TK_CREATION_Marshal(
        src: *const TPMT_TK_CREATION,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_TK_CREATION_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_TK_CREATION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_TK_VERIFIED_Marshal(
        src: *const TPMT_TK_VERIFIED,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_TK_VERIFIED_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_TK_VERIFIED,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_TK_AUTH_Marshal(
        src: *const TPMT_TK_AUTH,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_TK_AUTH_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_TK_HASHCHECK_Marshal(
        src: *const TPMT_TK_HASHCHECK,
        buffer: *mut u8,
        buffer_size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMT_TK_HASHCHECK_Unmarshal(
        buffer: *const u8,
        buffer_size: size_t,
        offset: *mut size_t,
        dest: *mut TPMT_TK_HASHCHECK,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_HANDLE_Marshal(
        in_: TPM2_HANDLE,
        buffer: *mut u8,
        size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_HANDLE_Unmarshal(
        buffer: *const u8,
        size: size_t,
        offset: *mut size_t,
        out: *mut TPM2_HANDLE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMI_ALG_HASH_Marshal(
        in_: TPMI_ALG_HASH,
        buffer: *mut u8,
        size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMI_ALG_HASH_Unmarshal(
        buffer: *const u8,
        size: size_t,
        offset: *mut size_t,
        out: *mut TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_BYTE_Marshal(
        in_: BYTE,
        buffer: *mut u8,
        size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_BYTE_Unmarshal(
        buffer: *const u8,
        size: size_t,
        offset: *mut size_t,
        out: *mut BYTE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_SE_Marshal(
        in_: TPM2_SE,
        buffer: *mut u8,
        size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_SE_Unmarshal(
        buffer: *const u8,
        size: size_t,
        offset: *mut size_t,
        out: *mut TPM2_SE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_NT_Marshal(
        in_: TPM2_NT,
        buffer: *mut u8,
        size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPM2_NT_Unmarshal(
        buffer: *const u8,
        size: size_t,
        offset: *mut size_t,
        out: *mut TPM2_NT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_EMPTY_Marshal(
        in_: *const TPMS_EMPTY,
        buffer: *mut u8,
        size: size_t,
        offset: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_MU_TPMS_EMPTY_Unmarshal(
        buffer: *const u8,
        size: size_t,
        offset: *mut size_t,
        out: *mut TPMS_EMPTY,
    ) -> TSS2_RC;
}
pub type TSS2_RC_HANDLER =
    ::std::option::Option<unsafe extern "C" fn(rc: TSS2_RC) -> *const ::std::os::raw::c_char>;
extern "C" {
    pub fn Tss2_RC_Decode(rc: TSS2_RC) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tss2_RC_SetHandler(
        layer: u8,
        name: *const ::std::os::raw::c_char,
        handler: TSS2_RC_HANDLER,
    ) -> TSS2_RC_HANDLER;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
pub type TSS2_TCTI_POLL_HANDLE = pollfd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSS2_TCTI_OPAQUE_CONTEXT_BLOB {
    _unused: [u8; 0],
}
pub type TSS2_TCTI_CONTEXT = TSS2_TCTI_OPAQUE_CONTEXT_BLOB;
extern "C" {
    #[doc = " Default TCTI initializer compatible with the function pointer required"]
    #[doc = " by TSS2. Any configuration value will be ignored."]
    pub fn Tss2_Tcti_Fuchsia_Init(
        tctiContext: *mut TSS2_TCTI_CONTEXT,
        size: *mut size_t,
        conf: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    #[doc = " A convenience function that handles allocation internally. This is used by"]
    #[doc = " the Rust bindings to simplify the memory management."]
    pub fn Tss2_Tcti_Fuchsia_Init_Ex(
        tctiContext: *mut *mut TSS2_TCTI_CONTEXT,
        conf: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    #[doc = " Finalizes and frees the underlying Fuchsia context. This symbol is exposed"]
    #[doc = " so that Rust Bindgen can correctly include it in the Rust bindings."]
    pub fn Tss2_Tcti_Fuchsia_Finalize(tctiContext: *mut TSS2_TCTI_CONTEXT);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TSS2_SYS_OPAQUE_CONTEXT_BLOB {
    _unused: [u8; 0],
}
pub type TSS2_SYS_CONTEXT = _TSS2_SYS_OPAQUE_CONTEXT_BLOB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSS2L_SYS_AUTH_COMMAND {
    pub count: u16,
    pub auths: [TPMS_AUTH_COMMAND; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSS2L_SYS_AUTH_RESPONSE {
    pub count: u16,
    pub auths: [TPMS_AUTH_RESPONSE; 3usize],
}
extern "C" {
    pub fn Tss2_Sys_GetContextSize(maxCommandResponseSize: size_t) -> size_t;
}
extern "C" {
    pub fn Tss2_Sys_Initialize(
        sysContext: *mut TSS2_SYS_CONTEXT,
        contextSize: size_t,
        tctiContext: *mut TSS2_TCTI_CONTEXT,
        abiVersion: *mut TSS2_ABI_VERSION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Finalize(sysContext: *mut TSS2_SYS_CONTEXT);
}
extern "C" {
    pub fn Tss2_Sys_GetTctiContext(
        sysContext: *mut TSS2_SYS_CONTEXT,
        tctiContext: *mut *mut TSS2_TCTI_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetDecryptParam(
        sysContext: *mut TSS2_SYS_CONTEXT,
        decryptParamSize: *mut size_t,
        decryptParamBuffer: *mut *const u8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetDecryptParam(
        sysContext: *mut TSS2_SYS_CONTEXT,
        decryptParamSize: size_t,
        decryptParamBuffer: *const u8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetCpBuffer(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cpBufferUsedSize: *mut size_t,
        cpBuffer: *mut *const u8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetCmdAuths(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ExecuteAsync(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ExecuteFinish(sysContext: *mut TSS2_SYS_CONTEXT, timeout: i32) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Execute(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetCommandCode(
        sysContext: *mut TSS2_SYS_CONTEXT,
        commandCode: *mut UINT8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetRspAuths(
        sysContext: *mut TSS2_SYS_CONTEXT,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetEncryptParam(
        sysContext: *mut TSS2_SYS_CONTEXT,
        encryptParamSize: *mut size_t,
        encryptParamBuffer: *mut *const u8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetEncryptParam(
        sysContext: *mut TSS2_SYS_CONTEXT,
        encryptParamSize: size_t,
        encryptParamBuffer: *const u8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetRpBuffer(
        sysContext: *mut TSS2_SYS_CONTEXT,
        rpBufferUsedSize: *mut size_t,
        rpBuffer: *mut *const u8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Startup_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        startupType: TPM2_SU,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Startup_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Startup(sysContext: *mut TSS2_SYS_CONTEXT, startupType: TPM2_SU) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Shutdown_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        shutdownType: TPM2_SU,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Shutdown_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Shutdown(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        shutdownType: TPM2_SU,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SelfTest_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        fullTest: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SelfTest_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SelfTest(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        fullTest: TPMI_YES_NO,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_IncrementalSelfTest_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        toTest: *const TPML_ALG,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_IncrementalSelfTest_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        toDoList: *mut TPML_ALG,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_IncrementalSelfTest(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        toTest: *const TPML_ALG,
        toDoList: *mut TPML_ALG,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetTestResult_Prepare(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetTestResult_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outData: *mut TPM2B_MAX_BUFFER,
        testResult: *mut TPM2_RC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetTestResult(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        outData: *mut TPM2B_MAX_BUFFER,
        testResult: *mut TPM2_RC,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_StartAuthSession_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        tpmKey: TPMI_DH_OBJECT,
        bind: TPMI_DH_ENTITY,
        nonceCaller: *const TPM2B_NONCE,
        encryptedSalt: *const TPM2B_ENCRYPTED_SECRET,
        sessionType: TPM2_SE,
        symmetric: *const TPMT_SYM_DEF,
        authHash: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_StartAuthSession_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sessionHandle: *mut TPMI_SH_AUTH_SESSION,
        nonceTPM: *mut TPM2B_NONCE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_StartAuthSession(
        sysContext: *mut TSS2_SYS_CONTEXT,
        tpmKey: TPMI_DH_OBJECT,
        bind: TPMI_DH_ENTITY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        nonceCaller: *const TPM2B_NONCE,
        encryptedSalt: *const TPM2B_ENCRYPTED_SECRET,
        sessionType: TPM2_SE,
        symmetric: *const TPMT_SYM_DEF,
        authHash: TPMI_ALG_HASH,
        sessionHandle: *mut TPMI_SH_AUTH_SESSION,
        nonceTPM: *mut TPM2B_NONCE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyRestart_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sessionHandle: TPMI_SH_POLICY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyRestart_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyRestart(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sessionHandle: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Create_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parentHandle: TPMI_DH_OBJECT,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_PUBLIC,
        outsideInfo: *const TPM2B_DATA,
        creationPCR: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Create_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outPrivate: *mut TPM2B_PRIVATE,
        outPublic: *mut TPM2B_PUBLIC,
        creationData: *mut TPM2B_CREATION_DATA,
        creationHash: *mut TPM2B_DIGEST,
        creationTicket: *mut TPMT_TK_CREATION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Create(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parentHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_PUBLIC,
        outsideInfo: *const TPM2B_DATA,
        creationPCR: *const TPML_PCR_SELECTION,
        outPrivate: *mut TPM2B_PRIVATE,
        outPublic: *mut TPM2B_PUBLIC,
        creationData: *mut TPM2B_CREATION_DATA,
        creationHash: *mut TPM2B_DIGEST,
        creationTicket: *mut TPMT_TK_CREATION,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Load_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parentHandle: TPMI_DH_OBJECT,
        inPrivate: *const TPM2B_PRIVATE,
        inPublic: *const TPM2B_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Load_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: *mut TPM2_HANDLE,
        name: *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Load(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parentHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inPrivate: *const TPM2B_PRIVATE,
        inPublic: *const TPM2B_PUBLIC,
        objectHandle: *mut TPM2_HANDLE,
        name: *mut TPM2B_NAME,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_LoadExternal_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        inPrivate: *const TPM2B_SENSITIVE,
        inPublic: *const TPM2B_PUBLIC,
        hierarchy: TPMI_RH_HIERARCHY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_LoadExternal_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: *mut TPM2_HANDLE,
        name: *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_LoadExternal(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inPrivate: *const TPM2B_SENSITIVE,
        inPublic: *const TPM2B_PUBLIC,
        hierarchy: TPMI_RH_HIERARCHY,
        objectHandle: *mut TPM2_HANDLE,
        name: *mut TPM2B_NAME,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ReadPublic_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ReadPublic_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outPublic: *mut TPM2B_PUBLIC,
        name: *mut TPM2B_NAME,
        qualifiedName: *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ReadPublic(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        outPublic: *mut TPM2B_PUBLIC,
        name: *mut TPM2B_NAME,
        qualifiedName: *mut TPM2B_NAME,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ActivateCredential_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        activateHandle: TPMI_DH_OBJECT,
        keyHandle: TPMI_DH_OBJECT,
        credentialBlob: *const TPM2B_ID_OBJECT,
        secret: *const TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ActivateCredential_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        certInfo: *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ActivateCredential(
        sysContext: *mut TSS2_SYS_CONTEXT,
        activateHandle: TPMI_DH_OBJECT,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        credentialBlob: *const TPM2B_ID_OBJECT,
        secret: *const TPM2B_ENCRYPTED_SECRET,
        certInfo: *mut TPM2B_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_MakeCredential_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        handle: TPMI_DH_OBJECT,
        credential: *const TPM2B_DIGEST,
        objectName: *const TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_MakeCredential_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        credentialBlob: *mut TPM2B_ID_OBJECT,
        secret: *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_MakeCredential(
        sysContext: *mut TSS2_SYS_CONTEXT,
        handle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        credential: *const TPM2B_DIGEST,
        objectName: *const TPM2B_NAME,
        credentialBlob: *mut TPM2B_ID_OBJECT,
        secret: *mut TPM2B_ENCRYPTED_SECRET,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Unseal_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        itemHandle: TPMI_DH_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Unseal_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outData: *mut TPM2B_SENSITIVE_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Unseal(
        sysContext: *mut TSS2_SYS_CONTEXT,
        itemHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        outData: *mut TPM2B_SENSITIVE_DATA,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ObjectChangeAuth_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
        parentHandle: TPMI_DH_OBJECT,
        newAuth: *const TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ObjectChangeAuth_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outPrivate: *mut TPM2B_PRIVATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ObjectChangeAuth(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
        parentHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        newAuth: *const TPM2B_AUTH,
        outPrivate: *mut TPM2B_PRIVATE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Duplicate_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
        newParentHandle: TPMI_DH_OBJECT,
        encryptionKeyIn: *const TPM2B_DATA,
        symmetricAlg: *const TPMT_SYM_DEF_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Duplicate_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        encryptionKeyOut: *mut TPM2B_DATA,
        duplicate: *mut TPM2B_PRIVATE,
        outSymSeed: *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Duplicate(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
        newParentHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        encryptionKeyIn: *const TPM2B_DATA,
        symmetricAlg: *const TPMT_SYM_DEF_OBJECT,
        encryptionKeyOut: *mut TPM2B_DATA,
        duplicate: *mut TPM2B_PRIVATE,
        outSymSeed: *mut TPM2B_ENCRYPTED_SECRET,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Rewrap_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        oldParent: TPMI_DH_OBJECT,
        newParent: TPMI_DH_OBJECT,
        inDuplicate: *const TPM2B_PRIVATE,
        name: *const TPM2B_NAME,
        inSymSeed: *const TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Rewrap_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outDuplicate: *mut TPM2B_PRIVATE,
        outSymSeed: *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Rewrap(
        sysContext: *mut TSS2_SYS_CONTEXT,
        oldParent: TPMI_DH_OBJECT,
        newParent: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inDuplicate: *const TPM2B_PRIVATE,
        name: *const TPM2B_NAME,
        inSymSeed: *const TPM2B_ENCRYPTED_SECRET,
        outDuplicate: *mut TPM2B_PRIVATE,
        outSymSeed: *mut TPM2B_ENCRYPTED_SECRET,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Import_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parentHandle: TPMI_DH_OBJECT,
        encryptionKey: *const TPM2B_DATA,
        objectPublic: *const TPM2B_PUBLIC,
        duplicate: *const TPM2B_PRIVATE,
        inSymSeed: *const TPM2B_ENCRYPTED_SECRET,
        symmetricAlg: *const TPMT_SYM_DEF_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Import_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outPrivate: *mut TPM2B_PRIVATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Import(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parentHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        encryptionKey: *const TPM2B_DATA,
        objectPublic: *const TPM2B_PUBLIC,
        duplicate: *const TPM2B_PRIVATE,
        inSymSeed: *const TPM2B_ENCRYPTED_SECRET,
        symmetricAlg: *const TPMT_SYM_DEF_OBJECT,
        outPrivate: *mut TPM2B_PRIVATE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_RSA_Encrypt_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        message: *const TPM2B_PUBLIC_KEY_RSA,
        inScheme: *const TPMT_RSA_DECRYPT,
        label: *const TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_RSA_Encrypt_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outData: *mut TPM2B_PUBLIC_KEY_RSA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_RSA_Encrypt(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        message: *const TPM2B_PUBLIC_KEY_RSA,
        inScheme: *const TPMT_RSA_DECRYPT,
        label: *const TPM2B_DATA,
        outData: *mut TPM2B_PUBLIC_KEY_RSA,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_RSA_Decrypt_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        cipherText: *const TPM2B_PUBLIC_KEY_RSA,
        inScheme: *const TPMT_RSA_DECRYPT,
        label: *const TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_RSA_Decrypt_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        message: *mut TPM2B_PUBLIC_KEY_RSA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_RSA_Decrypt(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        cipherText: *const TPM2B_PUBLIC_KEY_RSA,
        inScheme: *const TPMT_RSA_DECRYPT,
        label: *const TPM2B_DATA,
        message: *mut TPM2B_PUBLIC_KEY_RSA,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ECDH_KeyGen_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ECDH_KeyGen_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        zPoint: *mut TPM2B_ECC_POINT,
        pubPoint: *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ECDH_KeyGen(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        zPoint: *mut TPM2B_ECC_POINT,
        pubPoint: *mut TPM2B_ECC_POINT,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ECDH_ZGen_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        inPoint: *const TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ECDH_ZGen_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outPoint: *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ECDH_ZGen(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inPoint: *const TPM2B_ECC_POINT,
        outPoint: *mut TPM2B_ECC_POINT,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ECC_Parameters_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        curveID: TPMI_ECC_CURVE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ECC_Parameters_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parameters: *mut TPMS_ALGORITHM_DETAIL_ECC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ECC_Parameters(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        curveID: TPMI_ECC_CURVE,
        parameters: *mut TPMS_ALGORITHM_DETAIL_ECC,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ZGen_2Phase_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyA: TPMI_DH_OBJECT,
        inQsB: *const TPM2B_ECC_POINT,
        inQeB: *const TPM2B_ECC_POINT,
        inScheme: TPMI_ECC_KEY_EXCHANGE,
        counter: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ZGen_2Phase_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outZ1: *mut TPM2B_ECC_POINT,
        outZ2: *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ZGen_2Phase(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyA: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inQsB: *const TPM2B_ECC_POINT,
        inQeB: *const TPM2B_ECC_POINT,
        inScheme: TPMI_ECC_KEY_EXCHANGE,
        counter: UINT16,
        outZ1: *mut TPM2B_ECC_POINT,
        outZ2: *mut TPM2B_ECC_POINT,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EncryptDecrypt_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        decrypt: TPMI_YES_NO,
        mode: TPMI_ALG_CIPHER_MODE,
        ivIn: *const TPM2B_IV,
        inData: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EncryptDecrypt_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outData: *mut TPM2B_MAX_BUFFER,
        ivOut: *mut TPM2B_IV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EncryptDecrypt(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        decrypt: TPMI_YES_NO,
        mode: TPMI_ALG_CIPHER_MODE,
        ivIn: *const TPM2B_IV,
        inData: *const TPM2B_MAX_BUFFER,
        outData: *mut TPM2B_MAX_BUFFER,
        ivOut: *mut TPM2B_IV,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EncryptDecrypt2_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        inData: *const TPM2B_MAX_BUFFER,
        decrypt: TPMI_YES_NO,
        mode: TPMI_ALG_CIPHER_MODE,
        ivIn: *const TPM2B_IV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EncryptDecrypt2_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outData: *mut TPM2B_MAX_BUFFER,
        ivOut: *mut TPM2B_IV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EncryptDecrypt2(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inData: *const TPM2B_MAX_BUFFER,
        decrypt: TPMI_YES_NO,
        mode: TPMI_ALG_CIPHER_MODE,
        ivIn: *const TPM2B_IV,
        outData: *mut TPM2B_MAX_BUFFER,
        ivOut: *mut TPM2B_IV,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Hash_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        data: *const TPM2B_MAX_BUFFER,
        hashAlg: TPMI_ALG_HASH,
        hierarchy: TPMI_RH_HIERARCHY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Hash_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outHash: *mut TPM2B_DIGEST,
        validation: *mut TPMT_TK_HASHCHECK,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Hash(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        data: *const TPM2B_MAX_BUFFER,
        hashAlg: TPMI_ALG_HASH,
        hierarchy: TPMI_RH_HIERARCHY,
        outHash: *mut TPM2B_DIGEST,
        validation: *mut TPMT_TK_HASHCHECK,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HMAC_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        handle: TPMI_DH_OBJECT,
        buffer: *const TPM2B_MAX_BUFFER,
        hashAlg: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HMAC_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outHMAC: *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HMAC(
        sysContext: *mut TSS2_SYS_CONTEXT,
        handle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        buffer: *const TPM2B_MAX_BUFFER,
        hashAlg: TPMI_ALG_HASH,
        outHMAC: *mut TPM2B_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetRandom_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        bytesRequested: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetRandom_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        randomBytes: *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetRandom(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        bytesRequested: UINT16,
        randomBytes: *mut TPM2B_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_StirRandom_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        inData: *const TPM2B_SENSITIVE_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_StirRandom_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_StirRandom(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inData: *const TPM2B_SENSITIVE_DATA,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HMAC_Start_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        handle: TPMI_DH_OBJECT,
        auth: *const TPM2B_AUTH,
        hashAlg: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HMAC_Start_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sequenceHandle: *mut TPMI_DH_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HMAC_Start(
        sysContext: *mut TSS2_SYS_CONTEXT,
        handle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        auth: *const TPM2B_AUTH,
        hashAlg: TPMI_ALG_HASH,
        sequenceHandle: *mut TPMI_DH_OBJECT,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HashSequenceStart_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: *const TPM2B_AUTH,
        hashAlg: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HashSequenceStart_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sequenceHandle: *mut TPMI_DH_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HashSequenceStart(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        auth: *const TPM2B_AUTH,
        hashAlg: TPMI_ALG_HASH,
        sequenceHandle: *mut TPMI_DH_OBJECT,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SequenceUpdate_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sequenceHandle: TPMI_DH_OBJECT,
        buffer: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SequenceUpdate_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SequenceUpdate(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sequenceHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        buffer: *const TPM2B_MAX_BUFFER,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SequenceComplete_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sequenceHandle: TPMI_DH_OBJECT,
        buffer: *const TPM2B_MAX_BUFFER,
        hierarchy: TPMI_RH_HIERARCHY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SequenceComplete_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        result: *mut TPM2B_DIGEST,
        validation: *mut TPMT_TK_HASHCHECK,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SequenceComplete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sequenceHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        buffer: *const TPM2B_MAX_BUFFER,
        hierarchy: TPMI_RH_HIERARCHY,
        result: *mut TPM2B_DIGEST,
        validation: *mut TPMT_TK_HASHCHECK,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EventSequenceComplete_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
        sequenceHandle: TPMI_DH_OBJECT,
        buffer: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EventSequenceComplete_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        results: *mut TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EventSequenceComplete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
        sequenceHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        buffer: *const TPM2B_MAX_BUFFER,
        results: *mut TPML_DIGEST_VALUES,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Certify_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
        signHandle: TPMI_DH_OBJECT,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Certify_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        certifyInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Certify(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
        signHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        certifyInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CertifyX509_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
        signHandle: TPMI_DH_OBJECT,
        reserved: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        partialCertificate: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CertifyX509_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        addedToCertificate: *mut TPM2B_MAX_BUFFER,
        tbsDigest: *mut TPM2B_DIGEST,
        signature: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CertifyX509(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: TPMI_DH_OBJECT,
        signHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        reserved: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        partialCertificate: *const TPM2B_MAX_BUFFER,
        addedToCertificate: *mut TPM2B_MAX_BUFFER,
        tbsDigest: *mut TPM2B_DIGEST,
        signature: *mut TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CertifyCreation_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        signHandle: TPMI_DH_OBJECT,
        objectHandle: TPMI_DH_OBJECT,
        qualifyingData: *const TPM2B_DATA,
        creationHash: *const TPM2B_DIGEST,
        inScheme: *const TPMT_SIG_SCHEME,
        creationTicket: *const TPMT_TK_CREATION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CertifyCreation_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        certifyInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CertifyCreation(
        sysContext: *mut TSS2_SYS_CONTEXT,
        signHandle: TPMI_DH_OBJECT,
        objectHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        qualifyingData: *const TPM2B_DATA,
        creationHash: *const TPM2B_DIGEST,
        inScheme: *const TPMT_SIG_SCHEME,
        creationTicket: *const TPMT_TK_CREATION,
        certifyInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Quote_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        signHandle: TPMI_DH_OBJECT,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        PCRselect: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Quote_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        quoted: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Quote(
        sysContext: *mut TSS2_SYS_CONTEXT,
        signHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        PCRselect: *const TPML_PCR_SELECTION,
        quoted: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetSessionAuditDigest_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        privacyAdminHandle: TPMI_RH_ENDORSEMENT,
        signHandle: TPMI_DH_OBJECT,
        sessionHandle: TPMI_SH_HMAC,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetSessionAuditDigest_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auditInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetSessionAuditDigest(
        sysContext: *mut TSS2_SYS_CONTEXT,
        privacyAdminHandle: TPMI_RH_ENDORSEMENT,
        signHandle: TPMI_DH_OBJECT,
        sessionHandle: TPMI_SH_HMAC,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        auditInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetCommandAuditDigest_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        privacyHandle: TPMI_RH_ENDORSEMENT,
        signHandle: TPMI_DH_OBJECT,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetCommandAuditDigest_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auditInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetCommandAuditDigest(
        sysContext: *mut TSS2_SYS_CONTEXT,
        privacyHandle: TPMI_RH_ENDORSEMENT,
        signHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        auditInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetTime_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        privacyAdminHandle: TPMI_RH_ENDORSEMENT,
        signHandle: TPMI_DH_OBJECT,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetTime_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        timeInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetTime(
        sysContext: *mut TSS2_SYS_CONTEXT,
        privacyAdminHandle: TPMI_RH_ENDORSEMENT,
        signHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        timeInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Commit_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        signHandle: TPMI_DH_OBJECT,
        P1: *const TPM2B_ECC_POINT,
        s2: *const TPM2B_SENSITIVE_DATA,
        y2: *const TPM2B_ECC_PARAMETER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Commit_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        K: *mut TPM2B_ECC_POINT,
        L: *mut TPM2B_ECC_POINT,
        E: *mut TPM2B_ECC_POINT,
        counter: *mut UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Commit(
        sysContext: *mut TSS2_SYS_CONTEXT,
        signHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        P1: *const TPM2B_ECC_POINT,
        s2: *const TPM2B_SENSITIVE_DATA,
        y2: *const TPM2B_ECC_PARAMETER,
        K: *mut TPM2B_ECC_POINT,
        L: *mut TPM2B_ECC_POINT,
        E: *mut TPM2B_ECC_POINT,
        counter: *mut UINT16,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EC_Ephemeral_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        curveID: TPMI_ECC_CURVE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EC_Ephemeral_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        Q: *mut TPM2B_ECC_POINT,
        counter: *mut UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EC_Ephemeral(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        curveID: TPMI_ECC_CURVE,
        Q: *mut TPM2B_ECC_POINT,
        counter: *mut UINT16,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_VerifySignature_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        digest: *const TPM2B_DIGEST,
        signature: *const TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_VerifySignature_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        validation: *mut TPMT_TK_VERIFIED,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_VerifySignature(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        digest: *const TPM2B_DIGEST,
        signature: *const TPMT_SIGNATURE,
        validation: *mut TPMT_TK_VERIFIED,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Sign_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        digest: *const TPM2B_DIGEST,
        inScheme: *const TPMT_SIG_SCHEME,
        validation: *const TPMT_TK_HASHCHECK,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Sign_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        signature: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Sign(
        sysContext: *mut TSS2_SYS_CONTEXT,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        digest: *const TPM2B_DIGEST,
        inScheme: *const TPMT_SIG_SCHEME,
        validation: *const TPMT_TK_HASHCHECK,
        signature: *mut TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetCommandCodeAuditStatus_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PROVISION,
        auditAlg: TPMI_ALG_HASH,
        setList: *const TPML_CC,
        clearList: *const TPML_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetCommandCodeAuditStatus_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetCommandCodeAuditStatus(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PROVISION,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        auditAlg: TPMI_ALG_HASH,
        setList: *const TPML_CC,
        clearList: *const TPML_CC,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Extend_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
        digests: *const TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Extend_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Extend(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        digests: *const TPML_DIGEST_VALUES,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Event_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
        eventData: *const TPM2B_EVENT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Event_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        digests: *mut TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Event(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        eventData: *const TPM2B_EVENT,
        digests: *mut TPML_DIGEST_VALUES,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Read_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrSelectionIn: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Read_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrUpdateCounter: *mut UINT32,
        pcrSelectionOut: *mut TPML_PCR_SELECTION,
        pcrValues: *mut TPML_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Read(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        pcrSelectionIn: *const TPML_PCR_SELECTION,
        pcrUpdateCounter: *mut UINT32,
        pcrSelectionOut: *mut TPML_PCR_SELECTION,
        pcrValues: *mut TPML_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Allocate_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
        pcrAllocation: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Allocate_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        allocationSuccess: *mut TPMI_YES_NO,
        maxPCR: *mut UINT32,
        sizeNeeded: *mut UINT32,
        sizeAvailable: *mut UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Allocate(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        pcrAllocation: *const TPML_PCR_SELECTION,
        allocationSuccess: *mut TPMI_YES_NO,
        maxPCR: *mut UINT32,
        sizeNeeded: *mut UINT32,
        sizeAvailable: *mut UINT32,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_SetAuthPolicy_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
        authPolicy: *const TPM2B_DIGEST,
        hashAlg: TPMI_ALG_HASH,
        pcrNum: TPMI_DH_PCR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_SetAuthPolicy_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_SetAuthPolicy(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        authPolicy: *const TPM2B_DIGEST,
        hashAlg: TPMI_ALG_HASH,
        pcrNum: TPMI_DH_PCR,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_SetAuthValue_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
        auth: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_SetAuthValue_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_SetAuthValue(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        auth: *const TPM2B_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Reset_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Reset_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PCR_Reset(
        sysContext: *mut TSS2_SYS_CONTEXT,
        pcrHandle: TPMI_DH_PCR,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicySigned_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authObject: TPMI_DH_OBJECT,
        policySession: TPMI_SH_POLICY,
        nonceTPM: *const TPM2B_NONCE,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        expiration: INT32,
        auth: *const TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicySigned_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        timeout: *mut TPM2B_TIMEOUT,
        policyTicket: *mut TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicySigned(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authObject: TPMI_DH_OBJECT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        nonceTPM: *const TPM2B_NONCE,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        expiration: INT32,
        auth: *const TPMT_SIGNATURE,
        timeout: *mut TPM2B_TIMEOUT,
        policyTicket: *mut TPMT_TK_AUTH,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicySecret_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_DH_ENTITY,
        policySession: TPMI_SH_POLICY,
        nonceTPM: *const TPM2B_NONCE,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        expiration: INT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicySecret_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        timeout: *mut TPM2B_TIMEOUT,
        policyTicket: *mut TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicySecret(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_DH_ENTITY,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        nonceTPM: *const TPM2B_NONCE,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        expiration: INT32,
        timeout: *mut TPM2B_TIMEOUT,
        policyTicket: *mut TPMT_TK_AUTH,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyTicket_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        timeout: *const TPM2B_TIMEOUT,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        authName: *const TPM2B_NAME,
        ticket: *const TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyTicket_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyTicket(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        timeout: *const TPM2B_TIMEOUT,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        authName: *const TPM2B_NAME,
        ticket: *const TPMT_TK_AUTH,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyOR_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        pHashList: *const TPML_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyOR_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyOR(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        pHashList: *const TPML_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyPCR_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        pcrDigest: *const TPM2B_DIGEST,
        pcrs: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyPCR_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyPCR(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        pcrDigest: *const TPM2B_DIGEST,
        pcrs: *const TPML_PCR_SELECTION,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyLocality_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        locality: TPMA_LOCALITY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyLocality_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyLocality(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        locality: TPMA_LOCALITY,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyNV_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        policySession: TPMI_SH_POLICY,
        operandB: *const TPM2B_OPERAND,
        offset: UINT16,
        operation: TPM2_EO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyNV_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyNV(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        operandB: *const TPM2B_OPERAND,
        offset: UINT16,
        operation: TPM2_EO,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyCounterTimer_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        operandB: *const TPM2B_OPERAND,
        offset: UINT16,
        operation: TPM2_EO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyCounterTimer_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyCounterTimer(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        operandB: *const TPM2B_OPERAND,
        offset: UINT16,
        operation: TPM2_EO,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyCommandCode_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        code: TPM2_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyCommandCode_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyCommandCode(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        code: TPM2_CC,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyPhysicalPresence_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyPhysicalPresence_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyPhysicalPresence(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyCpHash_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cpHashA: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyCpHash_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyCpHash(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        cpHashA: *const TPM2B_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyNameHash_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        nameHash: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyNameHash_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyNameHash(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        nameHash: *const TPM2B_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyDuplicationSelect_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        objectName: *const TPM2B_NAME,
        newParentName: *const TPM2B_NAME,
        includeObject: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyDuplicationSelect_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyDuplicationSelect(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        objectName: *const TPM2B_NAME,
        newParentName: *const TPM2B_NAME,
        includeObject: TPMI_YES_NO,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyAuthorize_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        approvedPolicy: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        keySign: *const TPM2B_NAME,
        checkTicket: *const TPMT_TK_VERIFIED,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyAuthorize_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyAuthorize(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        approvedPolicy: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        keySign: *const TPM2B_NAME,
        checkTicket: *const TPMT_TK_VERIFIED,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyAuthValue_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyAuthValue_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyAuthValue(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyPassword_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyPassword_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyPassword(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyGetDigest_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyGetDigest_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policyDigest: *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyGetDigest(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        policyDigest: *mut TPM2B_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyNvWritten_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        writtenSet: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyNvWritten_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyNvWritten(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        writtenSet: TPMI_YES_NO,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CreatePrimary_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        primaryHandle: TPMI_RH_HIERARCHY,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_PUBLIC,
        outsideInfo: *const TPM2B_DATA,
        creationPCR: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CreatePrimary_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: *mut TPM2_HANDLE,
        outPublic: *mut TPM2B_PUBLIC,
        creationData: *mut TPM2B_CREATION_DATA,
        creationHash: *mut TPM2B_DIGEST,
        creationTicket: *mut TPMT_TK_CREATION,
        name: *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CreatePrimary(
        sysContext: *mut TSS2_SYS_CONTEXT,
        primaryHandle: TPMI_RH_HIERARCHY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_PUBLIC,
        outsideInfo: *const TPM2B_DATA,
        creationPCR: *const TPML_PCR_SELECTION,
        objectHandle: *mut TPM2_HANDLE,
        outPublic: *mut TPM2B_PUBLIC,
        creationData: *mut TPM2B_CREATION_DATA,
        creationHash: *mut TPM2B_DIGEST,
        creationTicket: *mut TPMT_TK_CREATION,
        name: *mut TPM2B_NAME,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HierarchyControl_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_HIERARCHY,
        enable: TPMI_RH_ENABLES,
        state: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HierarchyControl_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HierarchyControl(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_HIERARCHY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        enable: TPMI_RH_ENABLES,
        state: TPMI_YES_NO,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetPrimaryPolicy_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_HIERARCHY_AUTH,
        authPolicy: *const TPM2B_DIGEST,
        hashAlg: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetPrimaryPolicy_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetPrimaryPolicy(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_HIERARCHY_AUTH,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        authPolicy: *const TPM2B_DIGEST,
        hashAlg: TPMI_ALG_HASH,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ChangePPS_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ChangePPS_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ChangePPS(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ChangeEPS_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ChangeEPS_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ChangeEPS(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Clear_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_CLEAR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Clear_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Clear(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_CLEAR,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ClearControl_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_CLEAR,
        disable: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ClearControl_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ClearControl(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_CLEAR,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        disable: TPMI_YES_NO,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HierarchyChangeAuth_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_HIERARCHY_AUTH,
        newAuth: *const TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HierarchyChangeAuth_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_HierarchyChangeAuth(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_HIERARCHY_AUTH,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        newAuth: *const TPM2B_AUTH,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_DictionaryAttackLockReset_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        lockHandle: TPMI_RH_LOCKOUT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_DictionaryAttackLockReset_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_DictionaryAttackLockReset(
        sysContext: *mut TSS2_SYS_CONTEXT,
        lockHandle: TPMI_RH_LOCKOUT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_DictionaryAttackParameters_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        lockHandle: TPMI_RH_LOCKOUT,
        newMaxTries: UINT32,
        newRecoveryTime: UINT32,
        lockoutRecovery: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_DictionaryAttackParameters_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_DictionaryAttackParameters(
        sysContext: *mut TSS2_SYS_CONTEXT,
        lockHandle: TPMI_RH_LOCKOUT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        newMaxTries: UINT32,
        newRecoveryTime: UINT32,
        lockoutRecovery: UINT32,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PP_Commands_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PLATFORM,
        setList: *const TPML_CC,
        clearList: *const TPML_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PP_Commands_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PP_Commands(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PLATFORM,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        setList: *const TPML_CC,
        clearList: *const TPML_CC,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetAlgorithmSet_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
        algorithmSet: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetAlgorithmSet_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_SetAlgorithmSet(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PLATFORM,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        algorithmSet: UINT32,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FieldUpgradeStart_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authorization: TPMI_RH_PLATFORM,
        keyHandle: TPMI_DH_OBJECT,
        fuDigest: *const TPM2B_DIGEST,
        manifestSignature: *const TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FieldUpgradeStart_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FieldUpgradeStart(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authorization: TPMI_RH_PLATFORM,
        keyHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        fuDigest: *const TPM2B_DIGEST,
        manifestSignature: *const TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FieldUpgradeData_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        fuData: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FieldUpgradeData_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        nextDigest: *mut TPMT_HA,
        firstDigest: *mut TPMT_HA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FieldUpgradeData(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        fuData: *const TPM2B_MAX_BUFFER,
        nextDigest: *mut TPMT_HA,
        firstDigest: *mut TPMT_HA,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FirmwareRead_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sequenceNumber: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FirmwareRead_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        fuData: *mut TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FirmwareRead(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        sequenceNumber: UINT32,
        fuData: *mut TPM2B_MAX_BUFFER,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ContextSave_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        saveHandle: TPMI_DH_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ContextSave_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        context: *mut TPMS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ContextSave(
        sysContext: *mut TSS2_SYS_CONTEXT,
        saveHandle: TPMI_DH_CONTEXT,
        context: *mut TPMS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ContextLoad_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        context: *const TPMS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ContextLoad_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        loadedHandle: *mut TPMI_DH_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ContextLoad(
        sysContext: *mut TSS2_SYS_CONTEXT,
        context: *const TPMS_CONTEXT,
        loadedHandle: *mut TPMI_DH_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FlushContext_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        flushHandle: TPMI_DH_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FlushContext_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_FlushContext(
        sysContext: *mut TSS2_SYS_CONTEXT,
        flushHandle: TPMI_DH_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EvictControl_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PROVISION,
        objectHandle: TPMI_DH_OBJECT,
        persistentHandle: TPMI_DH_PERSISTENT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EvictControl_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_EvictControl(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PROVISION,
        objectHandle: TPMI_DH_OBJECT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        persistentHandle: TPMI_DH_PERSISTENT,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ReadClock_Prepare(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ReadClock_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        currentTime: *mut TPMS_TIME_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ReadClock(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        currentTime: *mut TPMS_TIME_INFO,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ClockSet_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PROVISION,
        newTime: UINT64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ClockSet_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ClockSet(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PROVISION,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        newTime: UINT64,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ClockRateAdjust_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PROVISION,
        rateAdjust: TPM2_CLOCK_ADJUST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ClockRateAdjust_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ClockRateAdjust(
        sysContext: *mut TSS2_SYS_CONTEXT,
        auth: TPMI_RH_PROVISION,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rateAdjust: TPM2_CLOCK_ADJUST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetCapability_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        capability: TPM2_CAP,
        property: UINT32,
        propertyCount: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetCapability_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        moreData: *mut TPMI_YES_NO,
        capabilityData: *mut TPMS_CAPABILITY_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_GetCapability(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        capability: TPM2_CAP,
        property: UINT32,
        propertyCount: UINT32,
        moreData: *mut TPMI_YES_NO,
        capabilityData: *mut TPMS_CAPABILITY_DATA,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_TestParms_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parameters: *const TPMT_PUBLIC_PARMS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_TestParms_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_TestParms(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        parameters: *const TPMT_PUBLIC_PARMS,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_DefineSpace_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PROVISION,
        auth: *const TPM2B_AUTH,
        publicInfo: *const TPM2B_NV_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_DefineSpace_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_DefineSpace(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PROVISION,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        auth: *const TPM2B_AUTH,
        publicInfo: *const TPM2B_NV_PUBLIC,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_UndefineSpace_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PROVISION,
        nvIndex: TPMI_RH_NV_INDEX,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_UndefineSpace_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_UndefineSpace(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PROVISION,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_UndefineSpaceSpecial_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        nvIndex: TPMI_RH_NV_INDEX,
        platform: TPMI_RH_PLATFORM,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_UndefineSpaceSpecial_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_UndefineSpaceSpecial(
        sysContext: *mut TSS2_SYS_CONTEXT,
        nvIndex: TPMI_RH_NV_INDEX,
        platform: TPMI_RH_PLATFORM,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_ReadPublic_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        nvIndex: TPMI_RH_NV_INDEX,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_ReadPublic_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        nvPublic: *mut TPM2B_NV_PUBLIC,
        nvName: *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_ReadPublic(
        sysContext: *mut TSS2_SYS_CONTEXT,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        nvPublic: *mut TPM2B_NV_PUBLIC,
        nvName: *mut TPM2B_NAME,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Write_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        data: *const TPM2B_MAX_NV_BUFFER,
        offset: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Write_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Write(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        data: *const TPM2B_MAX_NV_BUFFER,
        offset: UINT16,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Increment_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Increment_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Increment(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Extend_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        data: *const TPM2B_MAX_NV_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Extend_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Extend(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        data: *const TPM2B_MAX_NV_BUFFER,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_SetBits_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        bits: UINT64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_SetBits_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_SetBits(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        bits: UINT64,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_WriteLock_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_WriteLock_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_WriteLock(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_GlobalWriteLock_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PROVISION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_GlobalWriteLock_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_GlobalWriteLock(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_PROVISION,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Read_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        size: UINT16,
        offset: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Read_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        data: *mut TPM2B_MAX_NV_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Read(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        size: UINT16,
        offset: UINT16,
        data: *mut TPM2B_MAX_NV_BUFFER,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_ReadLock_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_ReadLock_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_ReadLock(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_ChangeAuth_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        nvIndex: TPMI_RH_NV_INDEX,
        newAuth: *const TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_ChangeAuth_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_ChangeAuth(
        sysContext: *mut TSS2_SYS_CONTEXT,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        newAuth: *const TPM2B_AUTH,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Certify_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        signHandle: TPMI_DH_OBJECT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        size: UINT16,
        offset: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Certify_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        certifyInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_NV_Certify(
        sysContext: *mut TSS2_SYS_CONTEXT,
        signHandle: TPMI_DH_OBJECT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        size: UINT16,
        offset: UINT16,
        certifyInfo: *mut TPM2B_ATTEST,
        signature: *mut TPMT_SIGNATURE,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Vendor_TCG_Test_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        inputData: *const TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Vendor_TCG_Test_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        outputData: *mut TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Vendor_TCG_Test(
        sysContext: *mut TSS2_SYS_CONTEXT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inputData: *const TPM2B_DATA,
        outputData: *mut TPM2B_DATA,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_AC_GetCapability_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        ac: TPMI_RH_AC,
        capability: TPM_AT,
        count: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_AC_GetCapability_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        moreData: *mut TPMI_YES_NO,
        capabilityData: *mut TPML_AC_CAPABILITIES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_AC_GetCapability(
        sysContext: *mut TSS2_SYS_CONTEXT,
        ac: TPMI_RH_AC,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        capability: TPM_AT,
        count: UINT32,
        moreData: *mut TPMI_YES_NO,
        capabilityData: *mut TPML_AC_CAPABILITIES,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_AC_Send_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sendObject: TPMI_DH_OBJECT,
        authHandle: TPMI_RH_NV_AUTH,
        ac: TPMI_RH_AC,
        acDataIn: *mut TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_AC_Send_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        acDataOut: *mut TPMS_AC_OUTPUT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_AC_Send(
        sysContext: *mut TSS2_SYS_CONTEXT,
        sendObject: TPMI_DH_OBJECT,
        authHandle: TPMI_RH_NV_AUTH,
        ac: TPMI_RH_AC,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        acDataIn: *mut TPM2B_MAX_BUFFER,
        acDataOut: *mut TPMS_AC_OUTPUT,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Policy_AC_SendSelect_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        objectName: *mut TPM2B_NAME,
        authHandleName: *mut TPM2B_NAME,
        acName: *mut TPM2B_NAME,
        includeObject: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Policy_AC_SendSelect_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_Policy_AC_SendSelect(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        objectName: *mut TPM2B_NAME,
        authHandleName: *mut TPM2B_NAME,
        acName: *mut TPM2B_NAME,
        includeObject: TPMI_YES_NO,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ACT_SetTimeout_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        actHandle: TPMI_RH_ACT,
        startTimeout: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ACT_SetTimeout_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_ACT_SetTimeout(
        sysContext: *mut TSS2_SYS_CONTEXT,
        actHandle: TPMI_RH_ACT,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        startTimeout: UINT32,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyTemplate_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        templateHash: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyTemplate_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyTemplate(
        sysContext: *mut TSS2_SYS_CONTEXT,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        templateHash: *const TPM2B_DIGEST,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CreateLoaded_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parentHandle: TPMI_RH_HIERARCHY,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_TEMPLATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CreateLoaded_Complete(
        sysContext: *mut TSS2_SYS_CONTEXT,
        objectHandle: *mut TPM2_HANDLE,
        outPrivate: *mut TPM2B_PRIVATE,
        outPublic: *mut TPM2B_PUBLIC,
        name: *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_CreateLoaded(
        sysContext: *mut TSS2_SYS_CONTEXT,
        parentHandle: TPMI_RH_HIERARCHY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_TEMPLATE,
        objectHandle: *mut TPM2_HANDLE,
        outPrivate: *mut TPM2B_PRIVATE,
        outPublic: *mut TPM2B_PUBLIC,
        name: *mut TPM2B_NAME,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyAuthorizeNV_Prepare(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        policySession: TPMI_SH_POLICY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyAuthorizeNV_Complete(sysContext: *mut TSS2_SYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Tss2_Sys_PolicyAuthorizeNV(
        sysContext: *mut TSS2_SYS_CONTEXT,
        authHandle: TPMI_RH_NV_AUTH,
        nvIndex: TPMI_RH_NV_INDEX,
        policySession: TPMI_SH_POLICY,
        cmdAuthsArray: *const TSS2L_SYS_AUTH_COMMAND,
        rspAuthsArray: *mut TSS2L_SYS_AUTH_RESPONSE,
    ) -> TSS2_RC;
}
pub type ESYS_TR = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ESYS_CONTEXT {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Esys_Initialize(
        esys_context: *mut *mut ESYS_CONTEXT,
        tcti: *mut TSS2_TCTI_CONTEXT,
        abiVersion: *mut TSS2_ABI_VERSION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Finalize(context: *mut *mut ESYS_CONTEXT);
}
extern "C" {
    pub fn Esys_GetTcti(
        esys_context: *mut ESYS_CONTEXT,
        tcti: *mut *mut TSS2_TCTI_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetPollHandles(
        esys_context: *mut ESYS_CONTEXT,
        handles: *mut *mut TSS2_TCTI_POLL_HANDLE,
        count: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetTimeout(esys_context: *mut ESYS_CONTEXT, timeout: i32) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TR_Serialize(
        esys_context: *mut ESYS_CONTEXT,
        object: ESYS_TR,
        buffer: *mut *mut u8,
        buffer_size: *mut size_t,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TR_Deserialize(
        esys_context: *mut ESYS_CONTEXT,
        buffer: *const u8,
        buffer_size: size_t,
        esys_handle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TR_FromTPMPublic_Async(
        esysContext: *mut ESYS_CONTEXT,
        tpm_handle: TPM2_HANDLE,
        optionalSession1: ESYS_TR,
        optionalSession2: ESYS_TR,
        optionalSession3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TR_FromTPMPublic_Finish(
        esysContext: *mut ESYS_CONTEXT,
        object: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TR_FromTPMPublic(
        esysContext: *mut ESYS_CONTEXT,
        tpm_handle: TPM2_HANDLE,
        optionalSession1: ESYS_TR,
        optionalSession2: ESYS_TR,
        optionalSession3: ESYS_TR,
        object: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TR_Close(esys_context: *mut ESYS_CONTEXT, rsrc_handle: *mut ESYS_TR) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TR_SetAuth(
        esysContext: *mut ESYS_CONTEXT,
        handle: ESYS_TR,
        authValue: *const TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TR_GetName(
        esysContext: *mut ESYS_CONTEXT,
        handle: ESYS_TR,
        name: *mut *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TRSess_GetAttributes(
        esysContext: *mut ESYS_CONTEXT,
        session: ESYS_TR,
        flags: *mut TPMA_SESSION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TRSess_SetAttributes(
        esysContext: *mut ESYS_CONTEXT,
        session: ESYS_TR,
        flags: TPMA_SESSION,
        mask: TPMA_SESSION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TRSess_GetNonceTPM(
        esysContext: *mut ESYS_CONTEXT,
        session: ESYS_TR,
        nonceTPM: *mut *mut TPM2B_NONCE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TR_GetTpmHandle(
        esys_context: *mut ESYS_CONTEXT,
        esys_handle: ESYS_TR,
        tpm_handle: *mut TPM2_HANDLE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TRSess_GetAuthRequired(
        esys_context: *mut ESYS_CONTEXT,
        esys_handle: ESYS_TR,
        auth_needed: *mut TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Startup(esysContext: *mut ESYS_CONTEXT, startupType: TPM2_SU) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Startup_Async(esysContext: *mut ESYS_CONTEXT, startupType: TPM2_SU) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Startup_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Shutdown(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        shutdownType: TPM2_SU,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Shutdown_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        shutdownType: TPM2_SU,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Shutdown_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SelfTest(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        fullTest: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SelfTest_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        fullTest: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SelfTest_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_IncrementalSelfTest(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        toTest: *const TPML_ALG,
        toDoList: *mut *mut TPML_ALG,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_IncrementalSelfTest_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        toTest: *const TPML_ALG,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_IncrementalSelfTest_Finish(
        esysContext: *mut ESYS_CONTEXT,
        toDoList: *mut *mut TPML_ALG,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetTestResult(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        outData: *mut *mut TPM2B_MAX_BUFFER,
        testResult: *mut TPM2_RC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetTestResult_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetTestResult_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outData: *mut *mut TPM2B_MAX_BUFFER,
        testResult: *mut TPM2_RC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_StartAuthSession(
        esysContext: *mut ESYS_CONTEXT,
        tpmKey: ESYS_TR,
        bind: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        nonceCaller: *const TPM2B_NONCE,
        sessionType: TPM2_SE,
        symmetric: *const TPMT_SYM_DEF,
        authHash: TPMI_ALG_HASH,
        sessionHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_StartAuthSession_Async(
        esysContext: *mut ESYS_CONTEXT,
        tpmKey: ESYS_TR,
        bind: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        nonceCaller: *const TPM2B_NONCE,
        sessionType: TPM2_SE,
        symmetric: *const TPMT_SYM_DEF,
        authHash: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_StartAuthSession_Finish(
        esysContext: *mut ESYS_CONTEXT,
        sessionHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyRestart(
        esysContext: *mut ESYS_CONTEXT,
        sessionHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyRestart_Async(
        esysContext: *mut ESYS_CONTEXT,
        sessionHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyRestart_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Create(
        esysContext: *mut ESYS_CONTEXT,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_PUBLIC,
        outsideInfo: *const TPM2B_DATA,
        creationPCR: *const TPML_PCR_SELECTION,
        outPrivate: *mut *mut TPM2B_PRIVATE,
        outPublic: *mut *mut TPM2B_PUBLIC,
        creationData: *mut *mut TPM2B_CREATION_DATA,
        creationHash: *mut *mut TPM2B_DIGEST,
        creationTicket: *mut *mut TPMT_TK_CREATION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Create_Async(
        esysContext: *mut ESYS_CONTEXT,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_PUBLIC,
        outsideInfo: *const TPM2B_DATA,
        creationPCR: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Create_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outPrivate: *mut *mut TPM2B_PRIVATE,
        outPublic: *mut *mut TPM2B_PUBLIC,
        creationData: *mut *mut TPM2B_CREATION_DATA,
        creationHash: *mut *mut TPM2B_DIGEST,
        creationTicket: *mut *mut TPMT_TK_CREATION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Load(
        esysContext: *mut ESYS_CONTEXT,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inPrivate: *const TPM2B_PRIVATE,
        inPublic: *const TPM2B_PUBLIC,
        objectHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Load_Async(
        esysContext: *mut ESYS_CONTEXT,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inPrivate: *const TPM2B_PRIVATE,
        inPublic: *const TPM2B_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Load_Finish(esysContext: *mut ESYS_CONTEXT, objectHandle: *mut ESYS_TR) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_LoadExternal(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inPrivate: *const TPM2B_SENSITIVE,
        inPublic: *const TPM2B_PUBLIC,
        hierarchy: ESYS_TR,
        objectHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_LoadExternal_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inPrivate: *const TPM2B_SENSITIVE,
        inPublic: *const TPM2B_PUBLIC,
        hierarchy: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_LoadExternal_Finish(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ReadPublic(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        outPublic: *mut *mut TPM2B_PUBLIC,
        name: *mut *mut TPM2B_NAME,
        qualifiedName: *mut *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ReadPublic_Async(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ReadPublic_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outPublic: *mut *mut TPM2B_PUBLIC,
        name: *mut *mut TPM2B_NAME,
        qualifiedName: *mut *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ActivateCredential(
        esysContext: *mut ESYS_CONTEXT,
        activateHandle: ESYS_TR,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        credentialBlob: *const TPM2B_ID_OBJECT,
        secret: *const TPM2B_ENCRYPTED_SECRET,
        certInfo: *mut *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ActivateCredential_Async(
        esysContext: *mut ESYS_CONTEXT,
        activateHandle: ESYS_TR,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        credentialBlob: *const TPM2B_ID_OBJECT,
        secret: *const TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ActivateCredential_Finish(
        esysContext: *mut ESYS_CONTEXT,
        certInfo: *mut *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ACT_SetTimeout(
        esysContext: *mut ESYS_CONTEXT,
        actHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        startTimeout: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ACT_SetTimeout_Async(
        esysContext: *mut ESYS_CONTEXT,
        actHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        startTimeout: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ACT_SetTimeout_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_MakeCredential(
        esysContext: *mut ESYS_CONTEXT,
        handle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        credential: *const TPM2B_DIGEST,
        objectName: *const TPM2B_NAME,
        credentialBlob: *mut *mut TPM2B_ID_OBJECT,
        secret: *mut *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_MakeCredential_Async(
        esysContext: *mut ESYS_CONTEXT,
        handle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        credential: *const TPM2B_DIGEST,
        objectName: *const TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_MakeCredential_Finish(
        esysContext: *mut ESYS_CONTEXT,
        credentialBlob: *mut *mut TPM2B_ID_OBJECT,
        secret: *mut *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Unseal(
        esysContext: *mut ESYS_CONTEXT,
        itemHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        outData: *mut *mut TPM2B_SENSITIVE_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Unseal_Async(
        esysContext: *mut ESYS_CONTEXT,
        itemHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Unseal_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outData: *mut *mut TPM2B_SENSITIVE_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ObjectChangeAuth(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newAuth: *const TPM2B_AUTH,
        outPrivate: *mut *mut TPM2B_PRIVATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ObjectChangeAuth_Async(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newAuth: *const TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ObjectChangeAuth_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outPrivate: *mut *mut TPM2B_PRIVATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CreateLoaded(
        esysContext: *mut ESYS_CONTEXT,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_TEMPLATE,
        objectHandle: *mut ESYS_TR,
        outPrivate: *mut *mut TPM2B_PRIVATE,
        outPublic: *mut *mut TPM2B_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CreateLoaded_Async(
        esysContext: *mut ESYS_CONTEXT,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_TEMPLATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CreateLoaded_Finish(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: *mut ESYS_TR,
        outPrivate: *mut *mut TPM2B_PRIVATE,
        outPublic: *mut *mut TPM2B_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Duplicate(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        newParentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        encryptionKeyIn: *const TPM2B_DATA,
        symmetricAlg: *const TPMT_SYM_DEF_OBJECT,
        encryptionKeyOut: *mut *mut TPM2B_DATA,
        duplicate: *mut *mut TPM2B_PRIVATE,
        outSymSeed: *mut *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Duplicate_Async(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        newParentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        encryptionKeyIn: *const TPM2B_DATA,
        symmetricAlg: *const TPMT_SYM_DEF_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Duplicate_Finish(
        esysContext: *mut ESYS_CONTEXT,
        encryptionKeyOut: *mut *mut TPM2B_DATA,
        duplicate: *mut *mut TPM2B_PRIVATE,
        outSymSeed: *mut *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Rewrap(
        esysContext: *mut ESYS_CONTEXT,
        oldParent: ESYS_TR,
        newParent: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inDuplicate: *const TPM2B_PRIVATE,
        name: *const TPM2B_NAME,
        inSymSeed: *const TPM2B_ENCRYPTED_SECRET,
        outDuplicate: *mut *mut TPM2B_PRIVATE,
        outSymSeed: *mut *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Rewrap_Async(
        esysContext: *mut ESYS_CONTEXT,
        oldParent: ESYS_TR,
        newParent: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inDuplicate: *const TPM2B_PRIVATE,
        name: *const TPM2B_NAME,
        inSymSeed: *const TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Rewrap_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outDuplicate: *mut *mut TPM2B_PRIVATE,
        outSymSeed: *mut *mut TPM2B_ENCRYPTED_SECRET,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Import(
        esysContext: *mut ESYS_CONTEXT,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        encryptionKey: *const TPM2B_DATA,
        objectPublic: *const TPM2B_PUBLIC,
        duplicate: *const TPM2B_PRIVATE,
        inSymSeed: *const TPM2B_ENCRYPTED_SECRET,
        symmetricAlg: *const TPMT_SYM_DEF_OBJECT,
        outPrivate: *mut *mut TPM2B_PRIVATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Import_Async(
        esysContext: *mut ESYS_CONTEXT,
        parentHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        encryptionKey: *const TPM2B_DATA,
        objectPublic: *const TPM2B_PUBLIC,
        duplicate: *const TPM2B_PRIVATE,
        inSymSeed: *const TPM2B_ENCRYPTED_SECRET,
        symmetricAlg: *const TPMT_SYM_DEF_OBJECT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Import_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outPrivate: *mut *mut TPM2B_PRIVATE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_RSA_Encrypt(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        message: *const TPM2B_PUBLIC_KEY_RSA,
        inScheme: *const TPMT_RSA_DECRYPT,
        label: *const TPM2B_DATA,
        outData: *mut *mut TPM2B_PUBLIC_KEY_RSA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_RSA_Encrypt_Async(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        message: *const TPM2B_PUBLIC_KEY_RSA,
        inScheme: *const TPMT_RSA_DECRYPT,
        label: *const TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_RSA_Encrypt_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outData: *mut *mut TPM2B_PUBLIC_KEY_RSA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_RSA_Decrypt(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        cipherText: *const TPM2B_PUBLIC_KEY_RSA,
        inScheme: *const TPMT_RSA_DECRYPT,
        label: *const TPM2B_DATA,
        message: *mut *mut TPM2B_PUBLIC_KEY_RSA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_RSA_Decrypt_Async(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        cipherText: *const TPM2B_PUBLIC_KEY_RSA,
        inScheme: *const TPMT_RSA_DECRYPT,
        label: *const TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_RSA_Decrypt_Finish(
        esysContext: *mut ESYS_CONTEXT,
        message: *mut *mut TPM2B_PUBLIC_KEY_RSA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ECDH_KeyGen(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        zPoint: *mut *mut TPM2B_ECC_POINT,
        pubPoint: *mut *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ECDH_KeyGen_Async(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ECDH_KeyGen_Finish(
        esysContext: *mut ESYS_CONTEXT,
        zPoint: *mut *mut TPM2B_ECC_POINT,
        pubPoint: *mut *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ECDH_ZGen(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inPoint: *const TPM2B_ECC_POINT,
        outPoint: *mut *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ECDH_ZGen_Async(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inPoint: *const TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ECDH_ZGen_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outPoint: *mut *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ECC_Parameters(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        curveID: TPMI_ECC_CURVE,
        parameters: *mut *mut TPMS_ALGORITHM_DETAIL_ECC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ECC_Parameters_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        curveID: TPMI_ECC_CURVE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ECC_Parameters_Finish(
        esysContext: *mut ESYS_CONTEXT,
        parameters: *mut *mut TPMS_ALGORITHM_DETAIL_ECC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ZGen_2Phase(
        esysContext: *mut ESYS_CONTEXT,
        keyA: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inQsB: *const TPM2B_ECC_POINT,
        inQeB: *const TPM2B_ECC_POINT,
        inScheme: TPMI_ECC_KEY_EXCHANGE,
        counter: UINT16,
        outZ1: *mut *mut TPM2B_ECC_POINT,
        outZ2: *mut *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ZGen_2Phase_Async(
        esysContext: *mut ESYS_CONTEXT,
        keyA: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inQsB: *const TPM2B_ECC_POINT,
        inQeB: *const TPM2B_ECC_POINT,
        inScheme: TPMI_ECC_KEY_EXCHANGE,
        counter: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ZGen_2Phase_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outZ1: *mut *mut TPM2B_ECC_POINT,
        outZ2: *mut *mut TPM2B_ECC_POINT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EncryptDecrypt(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        decrypt: TPMI_YES_NO,
        mode: TPMI_ALG_CIPHER_MODE,
        ivIn: *const TPM2B_IV,
        inData: *const TPM2B_MAX_BUFFER,
        outData: *mut *mut TPM2B_MAX_BUFFER,
        ivOut: *mut *mut TPM2B_IV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EncryptDecrypt_Async(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        decrypt: TPMI_YES_NO,
        mode: TPMI_ALG_CIPHER_MODE,
        ivIn: *const TPM2B_IV,
        inData: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EncryptDecrypt_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outData: *mut *mut TPM2B_MAX_BUFFER,
        ivOut: *mut *mut TPM2B_IV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EncryptDecrypt2(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inData: *const TPM2B_MAX_BUFFER,
        decrypt: TPMI_YES_NO,
        mode: TPMI_ALG_CIPHER_MODE,
        ivIn: *const TPM2B_IV,
        outData: *mut *mut TPM2B_MAX_BUFFER,
        ivOut: *mut *mut TPM2B_IV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EncryptDecrypt2_Async(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inData: *const TPM2B_MAX_BUFFER,
        decrypt: TPMI_YES_NO,
        mode: TPMI_ALG_CIPHER_MODE,
        ivIn: *const TPM2B_IV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EncryptDecrypt2_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outData: *mut *mut TPM2B_MAX_BUFFER,
        ivOut: *mut *mut TPM2B_IV,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Hash(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        data: *const TPM2B_MAX_BUFFER,
        hashAlg: TPMI_ALG_HASH,
        hierarchy: ESYS_TR,
        outHash: *mut *mut TPM2B_DIGEST,
        validation: *mut *mut TPMT_TK_HASHCHECK,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Hash_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        data: *const TPM2B_MAX_BUFFER,
        hashAlg: TPMI_ALG_HASH,
        hierarchy: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Hash_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outHash: *mut *mut TPM2B_DIGEST,
        validation: *mut *mut TPMT_TK_HASHCHECK,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HMAC(
        esysContext: *mut ESYS_CONTEXT,
        handle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        buffer: *const TPM2B_MAX_BUFFER,
        hashAlg: TPMI_ALG_HASH,
        outHMAC: *mut *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HMAC_Async(
        esysContext: *mut ESYS_CONTEXT,
        handle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        buffer: *const TPM2B_MAX_BUFFER,
        hashAlg: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HMAC_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outHMAC: *mut *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetRandom(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        bytesRequested: UINT16,
        randomBytes: *mut *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetRandom_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        bytesRequested: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetRandom_Finish(
        esysContext: *mut ESYS_CONTEXT,
        randomBytes: *mut *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_StirRandom(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inData: *const TPM2B_SENSITIVE_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_StirRandom_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inData: *const TPM2B_SENSITIVE_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_StirRandom_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HMAC_Start(
        esysContext: *mut ESYS_CONTEXT,
        handle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auth: *const TPM2B_AUTH,
        hashAlg: TPMI_ALG_HASH,
        sequenceHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HMAC_Start_Async(
        esysContext: *mut ESYS_CONTEXT,
        handle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auth: *const TPM2B_AUTH,
        hashAlg: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HMAC_Start_Finish(
        esysContext: *mut ESYS_CONTEXT,
        sequenceHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HashSequenceStart(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auth: *const TPM2B_AUTH,
        hashAlg: TPMI_ALG_HASH,
        sequenceHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HashSequenceStart_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auth: *const TPM2B_AUTH,
        hashAlg: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HashSequenceStart_Finish(
        esysContext: *mut ESYS_CONTEXT,
        sequenceHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SequenceUpdate(
        esysContext: *mut ESYS_CONTEXT,
        sequenceHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        buffer: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SequenceUpdate_Async(
        esysContext: *mut ESYS_CONTEXT,
        sequenceHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        buffer: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SequenceUpdate_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SequenceComplete(
        esysContext: *mut ESYS_CONTEXT,
        sequenceHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        buffer: *const TPM2B_MAX_BUFFER,
        hierarchy: ESYS_TR,
        result: *mut *mut TPM2B_DIGEST,
        validation: *mut *mut TPMT_TK_HASHCHECK,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SequenceComplete_Async(
        esysContext: *mut ESYS_CONTEXT,
        sequenceHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        buffer: *const TPM2B_MAX_BUFFER,
        hierarchy: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SequenceComplete_Finish(
        esysContext: *mut ESYS_CONTEXT,
        result: *mut *mut TPM2B_DIGEST,
        validation: *mut *mut TPMT_TK_HASHCHECK,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EventSequenceComplete(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        sequenceHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        buffer: *const TPM2B_MAX_BUFFER,
        results: *mut *mut TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EventSequenceComplete_Async(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        sequenceHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        buffer: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EventSequenceComplete_Finish(
        esysContext: *mut ESYS_CONTEXT,
        results: *mut *mut TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Certify(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        certifyInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Certify_Async(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Certify_Finish(
        esysContext: *mut ESYS_CONTEXT,
        certifyInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CertifyCreation(
        esysContext: *mut ESYS_CONTEXT,
        signHandle: ESYS_TR,
        objectHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        creationHash: *const TPM2B_DIGEST,
        inScheme: *const TPMT_SIG_SCHEME,
        creationTicket: *const TPMT_TK_CREATION,
        certifyInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CertifyCreation_Async(
        esysContext: *mut ESYS_CONTEXT,
        signHandle: ESYS_TR,
        objectHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        creationHash: *const TPM2B_DIGEST,
        inScheme: *const TPMT_SIG_SCHEME,
        creationTicket: *const TPMT_TK_CREATION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CertifyCreation_Finish(
        esysContext: *mut ESYS_CONTEXT,
        certifyInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CertifyX509(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        reserved: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        partialCertificate: *const TPM2B_MAX_BUFFER,
        addedToCertificate: *mut *mut TPM2B_MAX_BUFFER,
        tbsDigest: *mut *mut TPM2B_DIGEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CertifyX509_Async(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: ESYS_TR,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        reserved: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        partialCertificate: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CertifyX509_Finish(
        esysContext: *mut ESYS_CONTEXT,
        addedToCertificate: *mut *mut TPM2B_MAX_BUFFER,
        tbsDigest: *mut *mut TPM2B_DIGEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Quote(
        esysContext: *mut ESYS_CONTEXT,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        PCRselect: *const TPML_PCR_SELECTION,
        quoted: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Quote_Async(
        esysContext: *mut ESYS_CONTEXT,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        PCRselect: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Quote_Finish(
        esysContext: *mut ESYS_CONTEXT,
        quoted: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetSessionAuditDigest(
        esysContext: *mut ESYS_CONTEXT,
        privacyAdminHandle: ESYS_TR,
        signHandle: ESYS_TR,
        sessionHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        auditInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetSessionAuditDigest_Async(
        esysContext: *mut ESYS_CONTEXT,
        privacyAdminHandle: ESYS_TR,
        signHandle: ESYS_TR,
        sessionHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetSessionAuditDigest_Finish(
        esysContext: *mut ESYS_CONTEXT,
        auditInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetCommandAuditDigest(
        esysContext: *mut ESYS_CONTEXT,
        privacyHandle: ESYS_TR,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        auditInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetCommandAuditDigest_Async(
        esysContext: *mut ESYS_CONTEXT,
        privacyHandle: ESYS_TR,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetCommandAuditDigest_Finish(
        esysContext: *mut ESYS_CONTEXT,
        auditInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetTime(
        esysContext: *mut ESYS_CONTEXT,
        privacyAdminHandle: ESYS_TR,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        timeInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetTime_Async(
        esysContext: *mut ESYS_CONTEXT,
        privacyAdminHandle: ESYS_TR,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetTime_Finish(
        esysContext: *mut ESYS_CONTEXT,
        timeInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Commit(
        esysContext: *mut ESYS_CONTEXT,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        P1: *const TPM2B_ECC_POINT,
        s2: *const TPM2B_SENSITIVE_DATA,
        y2: *const TPM2B_ECC_PARAMETER,
        K: *mut *mut TPM2B_ECC_POINT,
        L: *mut *mut TPM2B_ECC_POINT,
        E: *mut *mut TPM2B_ECC_POINT,
        counter: *mut UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Commit_Async(
        esysContext: *mut ESYS_CONTEXT,
        signHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        P1: *const TPM2B_ECC_POINT,
        s2: *const TPM2B_SENSITIVE_DATA,
        y2: *const TPM2B_ECC_PARAMETER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Commit_Finish(
        esysContext: *mut ESYS_CONTEXT,
        K: *mut *mut TPM2B_ECC_POINT,
        L: *mut *mut TPM2B_ECC_POINT,
        E: *mut *mut TPM2B_ECC_POINT,
        counter: *mut UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EC_Ephemeral(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        curveID: TPMI_ECC_CURVE,
        Q: *mut *mut TPM2B_ECC_POINT,
        counter: *mut UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EC_Ephemeral_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        curveID: TPMI_ECC_CURVE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EC_Ephemeral_Finish(
        esysContext: *mut ESYS_CONTEXT,
        Q: *mut *mut TPM2B_ECC_POINT,
        counter: *mut UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_VerifySignature(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        digest: *const TPM2B_DIGEST,
        signature: *const TPMT_SIGNATURE,
        validation: *mut *mut TPMT_TK_VERIFIED,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_VerifySignature_Async(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        digest: *const TPM2B_DIGEST,
        signature: *const TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_VerifySignature_Finish(
        esysContext: *mut ESYS_CONTEXT,
        validation: *mut *mut TPMT_TK_VERIFIED,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Sign(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        digest: *const TPM2B_DIGEST,
        inScheme: *const TPMT_SIG_SCHEME,
        validation: *const TPMT_TK_HASHCHECK,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Sign_Async(
        esysContext: *mut ESYS_CONTEXT,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        digest: *const TPM2B_DIGEST,
        inScheme: *const TPMT_SIG_SCHEME,
        validation: *const TPMT_TK_HASHCHECK,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Sign_Finish(
        esysContext: *mut ESYS_CONTEXT,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetCommandCodeAuditStatus(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auditAlg: TPMI_ALG_HASH,
        setList: *const TPML_CC,
        clearList: *const TPML_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetCommandCodeAuditStatus_Async(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auditAlg: TPMI_ALG_HASH,
        setList: *const TPML_CC,
        clearList: *const TPML_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetCommandCodeAuditStatus_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Extend(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        digests: *const TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Extend_Async(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        digests: *const TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Extend_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Event(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        eventData: *const TPM2B_EVENT,
        digests: *mut *mut TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Event_Async(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        eventData: *const TPM2B_EVENT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Event_Finish(
        esysContext: *mut ESYS_CONTEXT,
        digests: *mut *mut TPML_DIGEST_VALUES,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Read(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        pcrSelectionIn: *const TPML_PCR_SELECTION,
        pcrUpdateCounter: *mut UINT32,
        pcrSelectionOut: *mut *mut TPML_PCR_SELECTION,
        pcrValues: *mut *mut TPML_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Read_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        pcrSelectionIn: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Read_Finish(
        esysContext: *mut ESYS_CONTEXT,
        pcrUpdateCounter: *mut UINT32,
        pcrSelectionOut: *mut *mut TPML_PCR_SELECTION,
        pcrValues: *mut *mut TPML_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Allocate(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        pcrAllocation: *const TPML_PCR_SELECTION,
        allocationSuccess: *mut TPMI_YES_NO,
        maxPCR: *mut UINT32,
        sizeNeeded: *mut UINT32,
        sizeAvailable: *mut UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Allocate_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        pcrAllocation: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Allocate_Finish(
        esysContext: *mut ESYS_CONTEXT,
        allocationSuccess: *mut TPMI_YES_NO,
        maxPCR: *mut UINT32,
        sizeNeeded: *mut UINT32,
        sizeAvailable: *mut UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_SetAuthPolicy(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        authPolicy: *const TPM2B_DIGEST,
        hashAlg: TPMI_ALG_HASH,
        pcrNum: TPMI_DH_PCR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_SetAuthPolicy_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        authPolicy: *const TPM2B_DIGEST,
        hashAlg: TPMI_ALG_HASH,
        pcrNum: TPMI_DH_PCR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_SetAuthPolicy_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_SetAuthValue(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auth: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_SetAuthValue_Async(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auth: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_SetAuthValue_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Reset(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Reset_Async(
        esysContext: *mut ESYS_CONTEXT,
        pcrHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PCR_Reset_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicySigned(
        esysContext: *mut ESYS_CONTEXT,
        authObject: ESYS_TR,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        nonceTPM: *const TPM2B_NONCE,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        expiration: INT32,
        auth: *const TPMT_SIGNATURE,
        timeout: *mut *mut TPM2B_TIMEOUT,
        policyTicket: *mut *mut TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicySigned_Async(
        esysContext: *mut ESYS_CONTEXT,
        authObject: ESYS_TR,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        nonceTPM: *const TPM2B_NONCE,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        expiration: INT32,
        auth: *const TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicySigned_Finish(
        esysContext: *mut ESYS_CONTEXT,
        timeout: *mut *mut TPM2B_TIMEOUT,
        policyTicket: *mut *mut TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicySecret(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        nonceTPM: *const TPM2B_NONCE,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        expiration: INT32,
        timeout: *mut *mut TPM2B_TIMEOUT,
        policyTicket: *mut *mut TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicySecret_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        nonceTPM: *const TPM2B_NONCE,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        expiration: INT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicySecret_Finish(
        esysContext: *mut ESYS_CONTEXT,
        timeout: *mut *mut TPM2B_TIMEOUT,
        policyTicket: *mut *mut TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyTicket(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        timeout: *const TPM2B_TIMEOUT,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        authName: *const TPM2B_NAME,
        ticket: *const TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyTicket_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        timeout: *const TPM2B_TIMEOUT,
        cpHashA: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        authName: *const TPM2B_NAME,
        ticket: *const TPMT_TK_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyTicket_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyOR(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        pHashList: *const TPML_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyOR_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        pHashList: *const TPML_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyOR_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyPCR(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        pcrDigest: *const TPM2B_DIGEST,
        pcrs: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyPCR_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        pcrDigest: *const TPM2B_DIGEST,
        pcrs: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyPCR_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyLocality(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        locality: TPMA_LOCALITY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyLocality_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        locality: TPMA_LOCALITY,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyLocality_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyNV(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        operandB: *const TPM2B_OPERAND,
        offset: UINT16,
        operation: TPM2_EO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyNV_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        operandB: *const TPM2B_OPERAND,
        offset: UINT16,
        operation: TPM2_EO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyNV_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyCounterTimer(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        operandB: *const TPM2B_OPERAND,
        offset: UINT16,
        operation: TPM2_EO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyCounterTimer_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        operandB: *const TPM2B_OPERAND,
        offset: UINT16,
        operation: TPM2_EO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyCounterTimer_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyCommandCode(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        code: TPM2_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyCommandCode_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        code: TPM2_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyCommandCode_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyPhysicalPresence(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyPhysicalPresence_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyPhysicalPresence_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyCpHash(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        cpHashA: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyCpHash_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        cpHashA: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyCpHash_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyNameHash(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        nameHash: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyNameHash_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        nameHash: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyNameHash_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyDuplicationSelect(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        objectName: *const TPM2B_NAME,
        newParentName: *const TPM2B_NAME,
        includeObject: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyDuplicationSelect_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        objectName: *const TPM2B_NAME,
        newParentName: *const TPM2B_NAME,
        includeObject: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyDuplicationSelect_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyAuthorize(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        approvedPolicy: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        keySign: *const TPM2B_NAME,
        checkTicket: *const TPMT_TK_VERIFIED,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyAuthorize_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        approvedPolicy: *const TPM2B_DIGEST,
        policyRef: *const TPM2B_NONCE,
        keySign: *const TPM2B_NAME,
        checkTicket: *const TPMT_TK_VERIFIED,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyAuthorize_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyAuthValue(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyAuthValue_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyAuthValue_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyPassword(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyPassword_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyPassword_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyGetDigest(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        policyDigest: *mut *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyGetDigest_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyGetDigest_Finish(
        esysContext: *mut ESYS_CONTEXT,
        policyDigest: *mut *mut TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyNvWritten(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        writtenSet: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyNvWritten_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        writtenSet: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyNvWritten_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyTemplate(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        templateHash: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyTemplate_Async(
        esysContext: *mut ESYS_CONTEXT,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        templateHash: *const TPM2B_DIGEST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyTemplate_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyAuthorizeNV(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyAuthorizeNV_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        policySession: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PolicyAuthorizeNV_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CreatePrimary(
        esysContext: *mut ESYS_CONTEXT,
        primaryHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_PUBLIC,
        outsideInfo: *const TPM2B_DATA,
        creationPCR: *const TPML_PCR_SELECTION,
        objectHandle: *mut ESYS_TR,
        outPublic: *mut *mut TPM2B_PUBLIC,
        creationData: *mut *mut TPM2B_CREATION_DATA,
        creationHash: *mut *mut TPM2B_DIGEST,
        creationTicket: *mut *mut TPMT_TK_CREATION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CreatePrimary_Async(
        esysContext: *mut ESYS_CONTEXT,
        primaryHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inSensitive: *const TPM2B_SENSITIVE_CREATE,
        inPublic: *const TPM2B_PUBLIC,
        outsideInfo: *const TPM2B_DATA,
        creationPCR: *const TPML_PCR_SELECTION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_CreatePrimary_Finish(
        esysContext: *mut ESYS_CONTEXT,
        objectHandle: *mut ESYS_TR,
        outPublic: *mut *mut TPM2B_PUBLIC,
        creationData: *mut *mut TPM2B_CREATION_DATA,
        creationHash: *mut *mut TPM2B_DIGEST,
        creationTicket: *mut *mut TPMT_TK_CREATION,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HierarchyControl(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        enable: ESYS_TR,
        state: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HierarchyControl_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        enable: ESYS_TR,
        state: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HierarchyControl_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetPrimaryPolicy(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        authPolicy: *const TPM2B_DIGEST,
        hashAlg: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetPrimaryPolicy_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        authPolicy: *const TPM2B_DIGEST,
        hashAlg: TPMI_ALG_HASH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetPrimaryPolicy_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ChangePPS(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ChangePPS_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ChangePPS_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ChangeEPS(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ChangeEPS_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ChangeEPS_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Clear(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Clear_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Clear_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ClearControl(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        disable: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ClearControl_Async(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        disable: TPMI_YES_NO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ClearControl_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HierarchyChangeAuth(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newAuth: *const TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HierarchyChangeAuth_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newAuth: *const TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_HierarchyChangeAuth_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_DictionaryAttackLockReset(
        esysContext: *mut ESYS_CONTEXT,
        lockHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_DictionaryAttackLockReset_Async(
        esysContext: *mut ESYS_CONTEXT,
        lockHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_DictionaryAttackLockReset_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_DictionaryAttackParameters(
        esysContext: *mut ESYS_CONTEXT,
        lockHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newMaxTries: UINT32,
        newRecoveryTime: UINT32,
        lockoutRecovery: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_DictionaryAttackParameters_Async(
        esysContext: *mut ESYS_CONTEXT,
        lockHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newMaxTries: UINT32,
        newRecoveryTime: UINT32,
        lockoutRecovery: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_DictionaryAttackParameters_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PP_Commands(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        setList: *const TPML_CC,
        clearList: *const TPML_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PP_Commands_Async(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        setList: *const TPML_CC,
        clearList: *const TPML_CC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_PP_Commands_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetAlgorithmSet(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        algorithmSet: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetAlgorithmSet_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        algorithmSet: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_SetAlgorithmSet_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FieldUpgradeStart(
        esysContext: *mut ESYS_CONTEXT,
        authorization: ESYS_TR,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        fuDigest: *const TPM2B_DIGEST,
        manifestSignature: *const TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FieldUpgradeStart_Async(
        esysContext: *mut ESYS_CONTEXT,
        authorization: ESYS_TR,
        keyHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        fuDigest: *const TPM2B_DIGEST,
        manifestSignature: *const TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FieldUpgradeStart_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FieldUpgradeData(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        fuData: *const TPM2B_MAX_BUFFER,
        nextDigest: *mut *mut TPMT_HA,
        firstDigest: *mut *mut TPMT_HA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FieldUpgradeData_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        fuData: *const TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FieldUpgradeData_Finish(
        esysContext: *mut ESYS_CONTEXT,
        nextDigest: *mut *mut TPMT_HA,
        firstDigest: *mut *mut TPMT_HA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FirmwareRead(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        sequenceNumber: UINT32,
        fuData: *mut *mut TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FirmwareRead_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        sequenceNumber: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FirmwareRead_Finish(
        esysContext: *mut ESYS_CONTEXT,
        fuData: *mut *mut TPM2B_MAX_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ContextSave(
        esysContext: *mut ESYS_CONTEXT,
        saveHandle: ESYS_TR,
        context: *mut *mut TPMS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ContextSave_Async(esysContext: *mut ESYS_CONTEXT, saveHandle: ESYS_TR) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ContextSave_Finish(
        esysContext: *mut ESYS_CONTEXT,
        context: *mut *mut TPMS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ContextLoad(
        esysContext: *mut ESYS_CONTEXT,
        context: *const TPMS_CONTEXT,
        loadedHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ContextLoad_Async(
        esysContext: *mut ESYS_CONTEXT,
        context: *const TPMS_CONTEXT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ContextLoad_Finish(
        esysContext: *mut ESYS_CONTEXT,
        loadedHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FlushContext(esysContext: *mut ESYS_CONTEXT, flushHandle: ESYS_TR) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FlushContext_Async(esysContext: *mut ESYS_CONTEXT, flushHandle: ESYS_TR)
        -> TSS2_RC;
}
extern "C" {
    pub fn Esys_FlushContext_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EvictControl(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        objectHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        persistentHandle: TPMI_DH_PERSISTENT,
        newObjectHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EvictControl_Async(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        objectHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        persistentHandle: TPMI_DH_PERSISTENT,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_EvictControl_Finish(
        esysContext: *mut ESYS_CONTEXT,
        newObjectHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ReadClock(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        currentTime: *mut *mut TPMS_TIME_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ReadClock_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ReadClock_Finish(
        esysContext: *mut ESYS_CONTEXT,
        currentTime: *mut *mut TPMS_TIME_INFO,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ClockSet(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newTime: UINT64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ClockSet_Async(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newTime: UINT64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ClockSet_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ClockRateAdjust(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        rateAdjust: TPM2_CLOCK_ADJUST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ClockRateAdjust_Async(
        esysContext: *mut ESYS_CONTEXT,
        auth: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        rateAdjust: TPM2_CLOCK_ADJUST,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_ClockRateAdjust_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetCapability(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        capability: TPM2_CAP,
        property: UINT32,
        propertyCount: UINT32,
        moreData: *mut TPMI_YES_NO,
        capabilityData: *mut *mut TPMS_CAPABILITY_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetCapability_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        capability: TPM2_CAP,
        property: UINT32,
        propertyCount: UINT32,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_GetCapability_Finish(
        esysContext: *mut ESYS_CONTEXT,
        moreData: *mut TPMI_YES_NO,
        capabilityData: *mut *mut TPMS_CAPABILITY_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TestParms(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        parameters: *const TPMT_PUBLIC_PARMS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TestParms_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        parameters: *const TPMT_PUBLIC_PARMS,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_TestParms_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_DefineSpace(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auth: *const TPM2B_AUTH,
        publicInfo: *const TPM2B_NV_PUBLIC,
        nvHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_DefineSpace_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        auth: *const TPM2B_AUTH,
        publicInfo: *const TPM2B_NV_PUBLIC,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_DefineSpace_Finish(
        esysContext: *mut ESYS_CONTEXT,
        nvHandle: *mut ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_UndefineSpace(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_UndefineSpace_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_UndefineSpace_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_UndefineSpaceSpecial(
        esysContext: *mut ESYS_CONTEXT,
        nvIndex: ESYS_TR,
        platform: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_UndefineSpaceSpecial_Async(
        esysContext: *mut ESYS_CONTEXT,
        nvIndex: ESYS_TR,
        platform: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_UndefineSpaceSpecial_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_ReadPublic(
        esysContext: *mut ESYS_CONTEXT,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        nvPublic: *mut *mut TPM2B_NV_PUBLIC,
        nvName: *mut *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_ReadPublic_Async(
        esysContext: *mut ESYS_CONTEXT,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_ReadPublic_Finish(
        esysContext: *mut ESYS_CONTEXT,
        nvPublic: *mut *mut TPM2B_NV_PUBLIC,
        nvName: *mut *mut TPM2B_NAME,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Write(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        data: *const TPM2B_MAX_NV_BUFFER,
        offset: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Write_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        data: *const TPM2B_MAX_NV_BUFFER,
        offset: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Write_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Increment(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Increment_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Increment_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Extend(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        data: *const TPM2B_MAX_NV_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Extend_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        data: *const TPM2B_MAX_NV_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Extend_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_SetBits(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        bits: UINT64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_SetBits_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        bits: UINT64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_SetBits_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_WriteLock(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_WriteLock_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_WriteLock_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_GlobalWriteLock(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_GlobalWriteLock_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_GlobalWriteLock_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Read(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        size: UINT16,
        offset: UINT16,
        data: *mut *mut TPM2B_MAX_NV_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Read_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        size: UINT16,
        offset: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Read_Finish(
        esysContext: *mut ESYS_CONTEXT,
        data: *mut *mut TPM2B_MAX_NV_BUFFER,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_ReadLock(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_ReadLock_Async(
        esysContext: *mut ESYS_CONTEXT,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_ReadLock_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_ChangeAuth(
        esysContext: *mut ESYS_CONTEXT,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newAuth: *const TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_ChangeAuth_Async(
        esysContext: *mut ESYS_CONTEXT,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        newAuth: *const TPM2B_AUTH,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_ChangeAuth_Finish(esysContext: *mut ESYS_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Certify(
        esysContext: *mut ESYS_CONTEXT,
        signHandle: ESYS_TR,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        size: UINT16,
        offset: UINT16,
        certifyInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Certify_Async(
        esysContext: *mut ESYS_CONTEXT,
        signHandle: ESYS_TR,
        authHandle: ESYS_TR,
        nvIndex: ESYS_TR,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        qualifyingData: *const TPM2B_DATA,
        inScheme: *const TPMT_SIG_SCHEME,
        size: UINT16,
        offset: UINT16,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_NV_Certify_Finish(
        esysContext: *mut ESYS_CONTEXT,
        certifyInfo: *mut *mut TPM2B_ATTEST,
        signature: *mut *mut TPMT_SIGNATURE,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Vendor_TCG_Test(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inputData: *const TPM2B_DATA,
        outputData: *mut *mut TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Vendor_TCG_Test_Async(
        esysContext: *mut ESYS_CONTEXT,
        shandle1: ESYS_TR,
        shandle2: ESYS_TR,
        shandle3: ESYS_TR,
        inputData: *const TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Vendor_TCG_Test_Finish(
        esysContext: *mut ESYS_CONTEXT,
        outputData: *mut *mut TPM2B_DATA,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Esys_Free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Esys_GetSysContext(
        esys_context: *mut ESYS_CONTEXT,
        sys_context: *mut *mut TSS2_SYS_CONTEXT,
    ) -> TSS2_RC;
}
