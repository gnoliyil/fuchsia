# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/test.gni")
import(
    "//src/lib/testing/expectation/fuchsia_test_with_expectations_package.gni")

config("gvisor_test_util_config") {
  include_dirs = [ "gvisor" ]
}

static_library("gvisor_test_util") {
  testonly = true
  public = [
    "gvisor/test/util/capability_util.h",
    "gvisor/test/util/cleanup.h",
    "gvisor/test/util/file_descriptor.h",
    "gvisor/test/util/fs_util.h",
    "gvisor/test/util/logging.h",
    "gvisor/test/util/posix_error.h",
    "gvisor/test/util/save_util.h",
    "gvisor/test/util/socket_util.h",
    "gvisor/test/util/temp_path.h",
    "gvisor/test/util/test_util.h",
    "gvisor/test/util/thread_util.h",
    "gvisor/test/util/timer_util.h",
  ]
  sources = [
    "gvisor/test/util/capability_util.h",
    "gvisor/test/util/cleanup.h",
    "gvisor/test/util/file_descriptor.h",
    "gvisor/test/util/fs_util.cc",
    "gvisor/test/util/fs_util.h",
    "gvisor/test/util/fuchsia_capability_util.cc",
    "gvisor/test/util/logging.cc",
    "gvisor/test/util/logging.h",
    "gvisor/test/util/posix_error.cc",
    "gvisor/test/util/posix_error.h",
    "gvisor/test/util/save_util.cc",
    "gvisor/test/util/save_util.h",
    "gvisor/test/util/save_util_other.cc",
    "gvisor/test/util/socket_util.cc",
    "gvisor/test/util/socket_util.h",
    "gvisor/test/util/socket_util_impl.cc",
    "gvisor/test/util/temp_path.cc",
    "gvisor/test/util/temp_path.h",
    "gvisor/test/util/test_util.cc",
    "gvisor/test/util/test_util.h",
    "gvisor/test/util/thread_util.h",
    "gvisor/test/util/timer_util.cc",
    "gvisor/test/util/timer_util.h",
  ]
  deps = [
    "//third_party/abseil-cpp/absl/base:core_headers",
    "//third_party/abseil-cpp/absl/flags:flag",
    "//third_party/abseil-cpp/absl/flags:parse",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/status:statusor",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
    "//third_party/abseil-cpp/absl/types:optional",
    "//third_party/abseil-cpp/absl/types:variant",
  ]
  public_deps = [
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
  public_configs = [ ":gvisor_test_util_config" ]
}

generic_test_label = "generic"
loopback_test_label = "loopback"
loopback_tcp_accept_backlog_listen_v4_test_label =
    "loopback_tcp_accept_backlog_listen_v4"
loopback_tcp_accept_backlog_listen_v4_mapped_test_label =
    "loopback_tcp_accept_backlog_listen_v4_mapped"
loopback_tcp_accept_backlog_listen_v6_test_label =
    "loopback_tcp_accept_backlog_listen_v6"
loopback_tcp_accept_test_label = "loopback_tcp_accept"
loopback_tcp_backlog_test_label = "loopback_tcp_backlog"
loopback_isolated_test_label = "loopback_isolated"
loopback_isolated_tcp_fin_wait_test_label = "loopback_isolated_tcp_fin_wait"
loopback_isolated_tcp_linger_timeout_test_label =
    "loopback_isolated_tcp_linger_timeout"
raw_packet_test_label = "raw_packet"
udp_test_label = "udp"
udp_raw_test_label = "udp_raw"
udp_unbound_test_label = "udp_unbound"
tcp_test_label = "tcp"
tcp_blocking_test_label = "tcp_blocking"

source_set("${raw_packet_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/packet_socket.cc",
    "gvisor/test/syscalls/linux/packet_socket_dgram.cc",
    "gvisor/test/syscalls/linux/packet_socket_raw.cc",
    "gvisor/test/syscalls/linux/raw_socket.cc",
    "gvisor/test/syscalls/linux/raw_socket_hdrincl.cc",
    "gvisor/test/syscalls/linux/raw_socket_icmp.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/base:endian",
    "//third_party/abseil-cpp/absl/strings",
  ]

  testonly = true
}

source_set("${udp_unbound_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_ipv4_datagram_based_socket_unbound.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_datagram_based_socket_unbound.h",
    "gvisor/test/syscalls/linux/socket_ipv4_datagram_based_socket_unbound_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound.h",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_external_networking.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_external_networking_test.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_loopback_nogotsan.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound.h",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound_external_networking.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound_external_networking_test.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound_loopback.cc",
  ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
  ]

  testonly = true
}

source_set("${udp_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_generic.h",
    "gvisor/test/syscalls/linux/socket_generic.h",
    "gvisor/test/syscalls/linux/socket_generic_test_cases.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_generic.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_generic.h",
    "gvisor/test/syscalls/linux/socket_ip_udp_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_loopback_blocking.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_loopback_nonblock.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.h",
    "gvisor/test/syscalls/linux/socket_non_stream.cc",
    "gvisor/test/syscalls/linux/socket_non_stream.h",
    "gvisor/test/syscalls/linux/socket_non_stream_blocking.cc",
    "gvisor/test/syscalls/linux/socket_non_stream_blocking.h",
    "gvisor/test/syscalls/linux/udp_bind.cc",
    "gvisor/test/syscalls/linux/udp_socket.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
  ]

  testonly = true
}

source_set("${udp_raw_test_label}_socket_tests") {
  sources = [ "gvisor/test/syscalls/linux/udp_raw_socket.cc" ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/base",
  ]

  testonly = true
}

source_set("${tcp_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_generic.h",
    "gvisor/test/syscalls/linux/socket_generic_test_cases.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_generic.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_generic.h",
    "gvisor/test/syscalls/linux/socket_ip_tcp_generic_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_loopback_nonblock.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.h",
    "gvisor/test/syscalls/linux/tcp_socket.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
  ]

  testonly = true
}

source_set("${tcp_blocking_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_ip_tcp_loopback_blocking.cc",
    "gvisor/test/syscalls/linux/socket_stream_blocking.cc",
    "gvisor/test/syscalls/linux/socket_stream_blocking.h",
  ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/strings:str_format",
  ]

  testonly = true
}

source_set("${generic_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket.cc",
    "gvisor/test/syscalls/linux/socket_blocking.cc",
    "gvisor/test/syscalls/linux/socket_blocking.h",
    "gvisor/test/syscalls/linux/socket_ip_loopback_blocking.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_udp_generic.cc",
    "gvisor/test/syscalls/linux/socket_ip_unbound.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
  ]

  testonly = true
}

source_set("${loopback_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_inet_loopback.cc",
  ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings:str_format",
  ]

  testonly = true
}

source_set("${loopback_isolated_test_label}_socket_tests") {
  sources = [ "gvisor/test/syscalls/linux/socket_inet_loopback_isolated.cc" ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
  ]

  testonly = true
}

# Defines test targets and unittest packages based on the
# provided suite name for all versions of the Netstack under
# test.
#
# Parameters
#
#   run_with_fast_udp (optional)
#     Identifies whether or not the suite should be run against Netstack2
#     with Fast UDP enabled.
#     Type: bool
#     Default: true
#
#   test_srcs_target (optional)
#     The local target containing the test source files used to run the suite.
#     Type: string
#     Default: When unset, the test source target constructed as
#              ":${target_name}_socket_tests"
#
#   with_distinct_fast_udp_expectations (optional)
#     If this is true, then we'll look for expectation files with _syncudp and
#     _fastudp suffixes.
template("syscall_test_suite") {
  not_needed([ "invoker" ])
  suite_label = target_name

  netstack3_expectations_target = "${suite_label}_netstack3_expectations"
  netstack2_expectations_target = "${suite_label}_netstack2_expectations"

  ns3_label = "netstack3"

  stacks = [
    {
      label = "netstack2_syncudp"
      component =
          "//src/connectivity/network/netstack:component-with-sync-udp-debug"
      expectations = ":${netstack2_expectations_target}"
      manifest = "meta/netstack2/syncudp/${suite_label}_syscall_tests.cml"
    },
    {
      label = ns3_label
      component = "//src/connectivity/network/netstack3:component-debug"
      expectations = ":${netstack3_expectations_target}"
      manifest = "meta/netstack3/${suite_label}_syscall_tests.cml"
    },
  ]

  run_with_fast_udp = true
  if (defined(invoker.run_with_fast_udp)) {
    run_with_fast_udp = invoker.run_with_fast_udp
  }

  ns2_fastudp_label = "netstack2_fastudp"

  if (run_with_fast_udp) {
    stacks += [
      {
        label = ns2_fastudp_label
        component =
            "//src/connectivity/network/netstack:component-with-fast-udp-debug"
        expectations = ":${netstack2_expectations_target}"
        manifest = "meta/netstack2/fastudp/${suite_label}_syscall_tests.cml"
      },
    ]
  } else {
    not_needed([ "ns2_fastudp_label" ])
  }

  test_deps = []
  foreach(stack, stacks) {
    combined_label = "${stack.label}_${suite_label}"

    test_target_label = "${combined_label}_socket_tests"
    test_srcs_target = ":${suite_label}_socket_tests"
    if (defined(invoker.test_srcs_target)) {
      test_srcs_target = invoker.test_srcs_target
    }
    test(test_target_label) {
      deps = [
        "${test_srcs_target}",
        "//src/lib/fxl/test:gtest_main",
      ]
    }

    test_package_label = "${combined_label}_syscall"
    component_label = "${test_package_label}_tests"

    fuchsia_unittest_component(component_label) {
      deps = [
        ":${test_target_label}",
        stack.component,
      ]
      manifest = stack.manifest
    }

    with_distinct_fast_udp_expectations = false
    if (defined(invoker.with_distinct_fast_udp_expectations)) {
      with_distinct_fast_udp_expectations =
          invoker.with_distinct_fast_udp_expectations
    }
    fuchsia_test_with_expectations_package(test_package_label) {
      forward_variables_from(invoker, [ "test_specs" ])
      test_components = [ ":${component_label}" ]

      if (stack.label == ns3_label) {
        expectations = "expects/netstack3/${suite_label}.json5"
      } else {
        _netstack2_expects_dir = "expects/netstack2"
        if (with_distinct_fast_udp_expectations) {
          if (stack.label == ns2_fastudp_label) {
            expectations =
                "$_netstack2_expects_dir/${suite_label}_fastudp.json5"
          } else {
            expectations =
                "$_netstack2_expects_dir/${suite_label}_syncudp.json5"
          }
        } else {
          expectations = "$_netstack2_expects_dir/${suite_label}.json5"
        }
      }
    }
    test_deps += [ ":${test_package_label}" ]
  }

  group(suite_label) {
    testonly = true
    public_deps = test_deps
  }
}

syscall_test_suite(generic_test_label) {
}
syscall_test_suite(loopback_test_label) {
}
syscall_test_suite(loopback_isolated_test_label) {
}
syscall_test_suite(raw_packet_test_label) {
}
syscall_test_suite(udp_test_label) {
  with_distinct_fast_udp_expectations = true
}
syscall_test_suite(udp_raw_test_label) {
}
syscall_test_suite(udp_unbound_test_label) {
}
syscall_test_suite(loopback_tcp_accept_backlog_listen_v4_test_label) {
  run_with_fast_udp = false
  test_srcs_target = ":${loopback_test_label}_socket_tests"
}
syscall_test_suite(loopback_tcp_accept_backlog_listen_v4_mapped_test_label) {
  run_with_fast_udp = false
  test_srcs_target = ":${loopback_test_label}_socket_tests"
}
syscall_test_suite(loopback_tcp_accept_backlog_listen_v6_test_label) {
  run_with_fast_udp = false
  test_srcs_target = ":${loopback_test_label}_socket_tests"
}
syscall_test_suite(loopback_tcp_accept_test_label) {
  run_with_fast_udp = false
  test_srcs_target = ":${loopback_test_label}_socket_tests"
}
syscall_test_suite(loopback_tcp_backlog_test_label) {
  run_with_fast_udp = false
  test_srcs_target = ":${loopback_test_label}_socket_tests"

  # TODO(https://fxbug.dev/65359): Figure out how to allow high-severity logs
  # in expected-to-fail tests.
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
}
syscall_test_suite(tcp_blocking_test_label) {
  run_with_fast_udp = false
}
syscall_test_suite(loopback_isolated_tcp_fin_wait_test_label) {
  run_with_fast_udp = false
  test_srcs_target = ":${loopback_isolated_test_label}_socket_tests"
}
syscall_test_suite(loopback_isolated_tcp_linger_timeout_test_label) {
  run_with_fast_udp = false
  test_srcs_target = ":${loopback_isolated_test_label}_socket_tests"
}
syscall_test_suite(tcp_test_label) {
  run_with_fast_udp = false
  test_specs = {
    timeout_secs = 1200
  }
}

group("tests") {
  testonly = true
  public_deps = [
    ":${generic_test_label}",
    ":${loopback_isolated_tcp_fin_wait_test_label}",
    ":${loopback_isolated_tcp_linger_timeout_test_label}",
    ":${loopback_isolated_test_label}",
    ":${loopback_tcp_accept_backlog_listen_v4_mapped_test_label}",
    ":${loopback_tcp_accept_backlog_listen_v4_test_label}",
    ":${loopback_tcp_accept_backlog_listen_v6_test_label}",
    ":${loopback_tcp_accept_test_label}",
    ":${loopback_tcp_backlog_test_label}",
    ":${loopback_test_label}",
    ":${raw_packet_test_label}",
    ":${tcp_blocking_test_label}",
    ":${tcp_test_label}",
    ":${udp_raw_test_label}",
    ":${udp_test_label}",
    ":${udp_unbound_test_label}",
  ]
}
