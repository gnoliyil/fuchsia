# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# AUTO-GENERATED - DO NOT EDIT!

"""
IMPORTANT: This file is only used when BzlMod is NOT enabled when generating
the Bazel workspace used by the Fuchsia platform build. Keep its content in
sync with toplevel.MODULE.bazel whenever possible!!
"""

workspace(name = "main")

local_repository(
    name = "platforms",
    path = "third_party/bazel_platforms",
)

# Note that this is a fake repository that only contains the minimum
# amount of declarations required by Bazel to run. The Fuchsia platform
# build does not support Java, and will likely never will, and using
# this fake repository prevents unexpected downloads and dependencies.
local_repository(
    name = "rules_java",
    path = "build/bazel/local_repositories/rules_java",
)

local_repository(
    name = "remote_coverage_tools",
    path = "build/bazel/local_repositories/remote_coverage_tools",
)

local_repository(
    name = "bazel_skylib",
    path = "third_party/bazel_skylib",
)

# NOTE this must appear before bazel_skylib_workspace() call.
local_repository(
    name = "rules_license",
    path = "third_party/bazel_rules_license",
)

local_repository(
    name = "rules_cc",
    path = "third_party/bazel_rules_cc",
)

local_repository(
    name = "io_bazel_rules_go",
    path = "third_party/bazel_rules_go",
)

local_repository(
    name = "rules_rust",
    path = "third_party/bazel_rules_rust",
)

# A dependency of rules_rust
new_local_repository(
    name = "rules_rust_tinyjson",
    path = "third_party/rust_crates/vendor/tinyjson-2.5.0",
    build_file = "third_party/bazel_rules_rust/util/process_wrapper/BUILD.tinyjson.bazel",
)

local_repository(
    name = "rules_python",
    path = "third_party/bazel_rules_python",
)

# buildifier: disable=load-on-top
load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies")

# buildifier: disable=load-on-top
load(
    "@bazel_skylib//:workspace.bzl",
    "bazel_skylib_workspace",
)

bazel_skylib_workspace()

rules_rust_dependencies()

# buildifier: disable=load-on-top
load(
    "//:build/bazel/toolchains/rust/repository_rules.bzl",
    "generate_prebuilt_rust_toolchain_repository",
)

generate_prebuilt_rust_toolchain_repository(
    name = "fuchsia_prebuilt_rust",
    rust_install_dir = "prebuilt/third_party/rust/{host_tag}",
)

register_toolchains(
    "@fuchsia_prebuilt_rust//:rust_{host_tag_alt}",
    "@fuchsia_prebuilt_rust//:rust_fuchsia_x64",
    "@fuchsia_prebuilt_rust//:rust_fuchsia_arm64",
)

# buildifier: disable=load-on-top
load(
    "@io_bazel_rules_go//go:deps.bzl",
    "go_register_toolchains",
    "go_rules_dependencies",
    "go_wrap_sdk",
)

go_wrap_sdk(
    name = "go_sdk",
    root_file = "//:prebuilt/third_party/go/{host_tag}/README.md",
)

go_rules_dependencies()
go_register_toolchains()

# Create @rules_fuchsia and @rules_fuchsia_experimental
local_repository(
    name = "rules_fuchsia",
    path = "third_party/sdk-integration/bazel_rules_fuchsia",
)

local_repository(
    name = "rules_fuchsia_experimental",
    path = "third_party/sdk-integration/bazel_rules_fuchsia_experimental",
)

# buildifier: disable=load-on-top
load("@rules_fuchsia//cipd:defs.bzl", "cipd_tool_repository")

# Create a stubbed out cipd_tool repository. Doing this is necessary because the
# Fuchsia SDK repository rule still loads the cipd_tool repo to allow users to
# download the sdk on demand so there needs to be a repository registered but we
# want to prevent bazel from downloading the cipd binary.
cipd_tool_repository(
    name = "cipd_tool",
    bin = "__empty__",
    validate_cipd_bin = False,
)

# googletest is a dependency from @rules_fuchsia amd requires a local
# patch for now for Fuchsia support, which is handled by a repository rule.
#
# local_repository(
#    name = "com_google_googletest",
#    path = "third_party/googletest/src",
# )
# buildifier: disable=load-on-top
load(
    "//:build/bazel/repository_rules.bzl",
    "bazel_inputs_repository",
    "googletest_repository",
)

googletest_repository(
    name = "com_google_googletest",
)

bazel_inputs_repository(
    name = "legacy_ninja_build_outputs",
    inputs_manifest = "//:bazel_inputs_manifest.json",
)

# buildifier: disable=load-on-top
load(
    "@rules_fuchsia//fuchsia:deps.bzl",
    "fuchsia_clang_repository",
    "fuchsia_sdk_repository",
    "rules_fuchsia_deps",
)

rules_fuchsia_deps()

fuchsia_sdk_repository(
    name = "fuchsia_sdk",
    local_path = "../../../../sdk/exported/core",
)

fuchsia_sdk_repository(
    name = "internal_sdk",
    parent_sdk = "@fuchsia_sdk",
    local_path = "../../../../sdk/exported/platform",
)

register_toolchains("@fuchsia_sdk//:fuchsia_toolchain_sdk")

fuchsia_clang_repository(
    name = "fuchsia_clang",
    local_path = "prebuilt/third_party/clang/{host_tag}",
)

# buildifier: disable=load-on-top
load(
    "@fuchsia_clang//:defs.bzl",
    "register_clang_toolchains",
)

register_clang_toolchains()

# buildifier: disable=load-on-top
load(
    "//:build/bazel/toolchains/clang/repository_rules.bzl",
    "generate_prebuilt_clang_toolchain_repository",
    "generate_prebuilt_llvm_repository",
)

generate_prebuilt_llvm_repository(
    name = "prebuilt_llvm",
    # NOTE: We don't have Fuchsia variant of LLVM libraries yet, so always use
    # host_platform's prebuilts for now. Currently, this repository is only used
    # to expose headers from prebuilt LLVM, so it should make no difference as
    # headers are the same across different platforms.
    #
    # See https://cs.opensource.google/fuchsia/fuchsia/+/main:src/lib/llvm/BUILD.gn;l=51;drc=468d94479b10f5613ca928d782990e5340e943a4
    llvm_install_dir = "prebuilt/third_party/llvm/{host_tag}",
)

generate_prebuilt_clang_toolchain_repository(
    name = "prebuilt_clang",
    clang_install_dir = "prebuilt/third_party/clang/{host_tag}",
)
register_toolchains("@prebuilt_clang//:host_clang_{host_os}_x64_cc_toolchain")
register_toolchains("@prebuilt_clang//:host_clang_{host_os}_arm64_cc_toolchain")

register_toolchains("//build/bazel/toolchains/python:py_toolchain")
