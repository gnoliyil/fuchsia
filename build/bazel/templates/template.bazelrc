# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# AUTO-GENERATED - DO NOT EDIT!

# Ensure that platform-based C++ toolchain selection is performed, instead
# of relying on --crosstool_top / --cpu / --compiler/
build --incompatible_enable_cc_toolchain_resolution

# Ensure that the same build configuration and output directory will be used
# when there are two different transition paths to the same configured
# target. For example, let's assume the following:
#
#  - transition_A sets the '//:foo' boolean build flag.
#  - transition B sets the '//:bar' boolean build flag.
#
#  - the same `//:final` target is a transitive dependency of two different
#    top-level ones using different transition paths, as in:
#
#       //:toplevel1 ---transition_A---> //:intermediate1 ---transition_B---> //:final
#       //:toplevel2 ---transition_B---> //:intermediate2 ---transition_A---> //:final
#
# Without the flag below, the //:final target will be built twice, because by default the
# transition path is part of the final build configuration due to a Bazel implementation
# detail (search for 'affected_by' in the Bazel source tree).
#
# By using 'diff_against_baseline', Bazel will ignore the transition path, and recognize
# that //:final only needs to be built once, at a single common location.
#
build --experimental_output_directory_naming_scheme=diff_against_baseline
cquery --experimental_output_directory_naming_scheme=diff_against_baseline
aquery --experimental_output_directory_naming_scheme=diff_against_baseline

# Setup the default platform.
# We need to set them for cqueries and aqueries as well as build (and
# everything else that inherits from it). Alas, setting them in `common`
# breaks other things.
cquery --platforms=//build/bazel/platforms:{default_platform}
cquery --host_platform=//build/bazel/platforms:{host_platform}
aquery --platforms=//build/bazel/platforms:{default_platform}
aquery --host_platform=//build/bazel/platforms:{host_platform}
build --platforms=//build/bazel/platforms:{default_platform}
build --host_platform=//build/bazel/platforms:{host_platform}

# Save workspace rule events to a log file for later analysis.
common --experimental_workspace_rules_log_file={log_file}

# Prevent repository downloads with custom downloader config file.
common --experimental_downloader_config={config_file}

# Disable verbose Bazel output with --config=quiet
# Note that --show_result=0 is not supported by `bazel query`.
common:quiet --noshow_loading_progress
common:quiet --noshow_progress
common:quiet --ui_event_filters=-info
cquery:quiet --show_result=0
aquery:quiet --show_result=0
build:quiet --show_result=0

# Ensure outputs are writable (umask 0755) instead of readonly (0555),
# which prevent removing output directories with `rm -rf`.
# See https://fxbug.dev/121003
build --experimental_writable_outputs

# Ensure the embedded JDK that comes with Bazel is always used
# This prevents Bazel from downloading extra host JDKs from the
# network, even when a project never uses Java-related  rules
# (for some still-very-mysterious reasons!)
build --java_runtime_version=embedded_jdk
build --tool_java_runtime_version=embedded_jdk

# Enable gcert authentication. This will use gcert credentials instead of application default credentials.  Applicable to Google FTEs.
build:gcertauth --experimental_credential_helper=/google/src/head/depot/google3/devtools/blaze/bazel/credhelper/credhelper

# Setup remote build
build:remote --remote_instance_name={remote_instance_name}
build:remote --define=EXECUTOR=remote
build:remote --remote_executor=grpcs://remotebuildexecution.googleapis.com
build:remote --incompatible_strict_action_env=true
build:remote --google_default_credentials=true

# Setup sponge (go/sponge-bazel)
build:sponge --bes_backend=buildeventservice-pa.googleapis.com
build:sponge --google_auth_scopes=https://www.googleapis.com/auth/cloud-platform
build:sponge --google_default_credentials=true
build:sponge --bes_instance_name={rbe_project}
build:sponge --bes_header=X-Goog-User-Project={rbe_project}
build:sponge --bes_results_url=http://sponge2/
build:sponge --bes_keywords=fuchsia

# Setup ResultStore
build:resultstore --bes_backend=buildeventservice.googleapis.com
build:resultstore --google_auth_scopes=https://www.googleapis.com/auth/cloud-platform
build:resultstore --google_default_credentials=true
build:resultstore --bes_instance_name={rbe_project}
build:resultstore --bes_header=X-Goog-User-Project={rbe_project}
build:resultstore --bes_results_url=https://source.cloud.google.com/results/invocations/
build:resultstore --bes_keywords=fuchsia
build:resultstore --remote_instance_name=projects/{rbe_project}/instances/default

# Set up DEFINE flags for libraries imported from @internal_sdk at a project
# level. See fxbug.dev/115709 for more information.
build --per_file_copt=src/lib/diagnostics/accessor2logger_accessor2logger/log_message.cc@-DRAPIDJSON_HAS_STDSTRING,-DRAPIDJSON_HAS_CXX11_RANGE_FOR,-DRAPIDJSON_HAS_CXX11_RVALUE_REFS,-DRAPIDJSON_HAS_CXX11_TYPETRAITS,-DRAPIDJSON_HAS_CXX11_NOEXCEPT
