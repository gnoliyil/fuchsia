# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/bazel_workspace.gni")

# Compares a GN generated images configuration with a Bazel generated one.
#
# Example:
# ```
# verify_images_manifest("verify_fuchsia_images_configuration") {
#   gn_assembled_system_target = "//build/images/fuchsia:fuchsia"
#   bazel_assembled_system_target =
#       "//build/bazel/assembly:core"
# }
# ```
#
# Parameters
#
#  gn_assembled_system_target (required)
#    The GN target of the assembled system
#    This should be defined by a GN `assembled_system()` template invocation.
#    Type: string (GN label)
#
#  bazel_assembled_system_target (required)
#    The Bazel target generating the assembled system used in comparison.
#    This should defined by a Bazel `fuchsia_assembled_system()` rule.
#    Type: string (Bazel label)
#
#  exclude_packages (optional)
#    List of packages to ignore in the diff.
#    Type: list of strings
#
#  exclude_images (optional)
#    List of images to ignore in the diff.
#    Type: list of strings
#
#  deps
#  testonly
#  visibility
#
template("verify_images_manifest") {
  assert(defined(invoker.gn_assembled_system_target),
         "gn_assembled_system_target is required")
  assert(defined(invoker.bazel_assembled_system_target),
         "bazel_assembled_system_target is required")

  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])

    _bazel_assembled_system_out_dir =
        get_label_info(invoker.bazel_assembled_system_target, "target_gen_dir")
    _bazel_assembled_system_name =
        get_label_info(invoker.bazel_assembled_system_target, "name")
    _bazel_assembled_system_file = "${_bazel_assembled_system_out_dir}/${_bazel_assembled_system_name}/images.json"
    _bazel_assembled_system_path_mapping = "${_bazel_assembled_system_out_dir}/${_bazel_assembled_system_name}.path_mapping"

    _gn_assembled_system_out_dir =
        get_label_info(invoker.gn_assembled_system_target, "target_out_dir")
    _gn_assembled_system_name =
        get_label_info(invoker.gn_assembled_system_target, "name")
    _gn_assembled_system_file = "${_gn_assembled_system_out_dir}/${_gn_assembled_system_name}/images.json"

    depfile = "${target_out_dir}/${target_name}.d"

    inputs = [
      _gn_assembled_system_file,
      _bazel_assembled_system_file,
      _bazel_assembled_system_path_mapping,
    ]

    # The images configs after cleanup by the script for diffing.
    # You can diff these to debug a failure of this test.
    outputs = [
      "${target_out_dir}/${target_name}/config1",
      "${target_out_dir}/${target_name}/config2",
    ]

    deps = [
      invoker.bazel_assembled_system_target,
      invoker.gn_assembled_system_target,
    ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    script = "//build/bazel/assembly/assembly_outputs/verify_images_manifest.py"
    args = [
      "--images_manifest_gn",
      rebase_path(_gn_assembled_system_file, root_build_dir),
      "--images_manifest_bzl",
      rebase_path(_bazel_assembled_system_file, root_build_dir),
      "--path-mapping",
      rebase_path(_bazel_assembled_system_path_mapping, root_build_dir),
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--output1",
      rebase_path(outputs[0], root_build_dir),
      "--output2",
      rebase_path(outputs[1], root_build_dir),
    ]
    if (defined(invoker.exclude_packages)) {
      args += [ "--exclude-packages" ]
      foreach(package, invoker.exclude_packages) {
        args += [ package ]
      }
    }
    if (defined(invoker.exclude_images)) {
      args += [ "--exclude-images" ]
      foreach(image, invoker.exclude_images) {
        args += [ image ]
      }
    }
  }
}
