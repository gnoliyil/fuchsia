# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/bazel_action.gni")
import("//build/bazel/bazel_workspace.gni")

# Compares a GN generated verbose size report with a Bazel generated one.
#
# Example:
# ```
# verify_verbose_size_report("verify_fuchsia_verbose_size_report") {
#   gn_verbose_size_report_target = "//build/images/size_checker:verbose_output.json"
#   bazel_size_checker_target =
#       "//build/bazel/assembly/size_checker:size_checker"
# }
# ```
#
# Parameters
#
#  gn_verbose_size_report_target (required)
#    The GN target generating a verbose size report JSON.
#    Type: string (GN label)
#
#  bazel_size_checker_target (required)
#    The Bazel fuchsia_size_checker target generating a verbose size report
#    JSON.
#    Type: string (Bazel label)
#
#  bazel_inputs (optional)
#    List of GN labels to bazel_input_xxx() targets required by
#    bazel_size_checker_target.
#    Type: list of strings (GN labels)
#
#  deps
#  testonly
#  visibility
#
template("verify_verbose_size_report") {
  assert(defined(invoker.gn_verbose_size_report_target),
         "gn_verbose_size_report_target is required")
  assert(defined(invoker.bazel_size_checker_target),
         "bazel_size_checker_target is required")

  _bazel_verbose_size_report_target = "${target_name}.bazel_verbose_size_report"
  _bazel_verbose_size_report_output =
      "${target_name}/bazel_verbose_size_report.json"

  bazel_action(_bazel_verbose_size_report_target) {
    forward_variables_from(invoker,
                           [
                             "bazel_inputs",
                             "deps",
                             "testonly",
                           ])
    visibility = [ ":${invoker.target_name}" ]
    command = "build"
    bazel_targets = [ invoker.bazel_size_checker_target + "_aggregator" ]

    copy_outputs = [
      {
        bazel = "{{BAZEL_TARGET_OUT_PATH}}_verbose_output.json"
        ninja = _bazel_verbose_size_report_output
      },
    ]
  }

  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    _gn_verbose_size_report_out_dir =
        get_label_info(invoker.gn_verbose_size_report_target, "target_out_dir")
    _gn_verbose_size_report_name =
        get_label_info(invoker.gn_verbose_size_report_target, "name")
    _gn_verbose_size_report_file =
        "${_gn_verbose_size_report_out_dir}/${_gn_verbose_size_report_name}"

    depfile = "${target_gen_dir}/${target_name}.d"

    _bazel_verbose_size_report_file =
        "${target_gen_dir}/${_bazel_verbose_size_report_output}"
    inputs = [
      _gn_verbose_size_report_file,
      _bazel_verbose_size_report_file,
    ]
    _gn_normalized_report =
        "${target_out_dir}/${target_name}/gn_normalized_report.json"
    _bazel_normalized_report =
        "${target_out_dir}/${target_name}/bazel_normalized_report.json"
    _diff_out = "${target_out_dir}/${target_name}/diff"
    outputs = [
      _gn_normalized_report,
      _bazel_normalized_report,
      _diff_out,
    ]

    deps = [
      ":${_bazel_verbose_size_report_target}",
      invoker.gn_verbose_size_report_target,
    ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    script = "//build/bazel/assembly/size_checker/verify_verbose_size_report.py"
    args = [
      "--verbose_size_report1",
      rebase_path(_gn_verbose_size_report_file, root_build_dir),
      "--verbose_size_report2",
      rebase_path(_bazel_verbose_size_report_file, root_build_dir),
      "--normalized_report_output1",
      rebase_path(_gn_normalized_report, root_build_dir),
      "--normalized_report_output2",
      rebase_path(_bazel_normalized_report, root_build_dir),
      "--diff_output",
      rebase_path(_diff_out, root_build_dir),
    ]
  }
}
