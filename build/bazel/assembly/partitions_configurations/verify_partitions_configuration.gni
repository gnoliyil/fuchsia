# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/bazel_action.gni")
import("//build/bazel/bazel_workspace.gni")

# Compares a GN generated partitions configuration with a Bazel generated one.
#
# Example:
# ```
# verify_partitions_configuration("verify_fuchsia_partitions_configuration") {
#   gn_partitions_config_target = "//boards/partitions:x64"
#   bazel_partitions_config_target =
#       "//build/bazel/assembly/partitions_configurations:fuchsia_x64"
# }
# ```
#
# Parameters
#
#  gn_partitions_config_target (required)
#    The GN target generating the partitions config used in comparison.
#    This should be defined by a GN `generated_partitions_config` rule.
#    Type: string (GN label)
#
#  bazel_partitions_config_target (required)
#    The Bazel target generating the partitions config used in comparison.
#    This should defined by a Bazel `fuchsia_partitions_configuration` rule.
#    Type: string (Bazel label)
#
#  deps
#  testonly
#  visibility
#
template("verify_partitions_configuration") {
  assert(defined(invoker.gn_partitions_config_target),
         "gn_partitions_config_target is required")
  assert(defined(invoker.bazel_partitions_config_target),
         "bazel_partitions_config_target is required")

  _bazel_partitions_config_target = "${target_name}.bazel_partitions_config"
  _bazel_partitions_config_file = "${target_name}/bazel_partitions_config.json"
  bazel_action(_bazel_partitions_config_target) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                           ])
    visibility = [ ":${invoker.target_name}" ]
    command = "build"
    bazel_targets = [ invoker.bazel_partitions_config_target ]

    _bazel_partitions_config_out_dir =
        rebase_path(
            get_label_info(invoker.bazel_partitions_config_target, "dir"),
            "//")
    _bazel_partitions_config_name =
        get_label_info(invoker.bazel_partitions_config_target, "name")
    bazel_outputs = [ "bazel-bin/${_bazel_partitions_config_out_dir}/${_bazel_partitions_config_name}_partitions.json" ]
    ninja_outputs = [ _bazel_partitions_config_file ]
  }

  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    _gn_partitions_config_out_dir =
        get_label_info(invoker.gn_partitions_config_target, "target_out_dir")
    _gn_partitions_config_name =
        get_label_info(invoker.gn_partitions_config_target, "name")
    _gn_partitions_config_file =
        "${_gn_partitions_config_out_dir}/${_gn_partitions_config_name}.json"

    depfile = "${target_gen_dir}/${target_name}.d"

    inputs = [
      _gn_partitions_config_file,
      "${target_gen_dir}/${_bazel_partitions_config_file}",
    ]
    outputs = [ "${target_out_dir}/${target_name}/diff" ]

    deps = [
      ":${_bazel_partitions_config_target}",
      invoker.gn_partitions_config_target,
    ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    script = "//build/bazel/assembly/partitions_configurations/verify_partitions_configuration.py"
    args = [
      "--partitions_config1",
      rebase_path(inputs[0], root_build_dir),
      "--root_dir1",
      ".",
      "--partitions_config2",
      rebase_path(inputs[1], root_build_dir),
      "--root_dir2",
      bazel_main_top_dir_rebased + "/workspace",
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--output",
      rebase_path(outputs[0], root_build_dir),
    ]
  }
}
