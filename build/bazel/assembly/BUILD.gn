# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/assembly/bazel_assembled_system.gni")
import("//build/bazel/bazel_inputs.gni")
import("//build/images/args.gni")
import("//build/images/custom_signing.gni")
import("//build/images/fvm.gni")
import("//build/product.gni")

zbi_only = use_bringup_assembly

if (use_bringup_assembly) {
  bazel_assembled_system("bringup") {
    testonly = true
    allow_eng_platform_bundle_use = true
    gn_image_name = "bringup"
    bazel_assembly_target = "//build/bazel/assembly:bringup"
  }
} else {
  gn_image_name = "fuchsia"

  bazel_assembled_system("core") {
    testonly = true
    allow_eng_platform_bundle_use = true
    bazel_assembly_target = "//build/bazel/assembly:core"
  }

  bazel_assembled_system("minimal") {
    testonly = true
    allow_eng_platform_bundle_use = true
    bazel_assembly_target = "//build/bazel/assembly:minimal"
  }

  group("minimal_with_verifications") {
    testonly = true
    deps = [
      ":minimal",
      "assembly_outputs:verifications",
    ]
  }

  bazel_assembled_system("workstation_eng") {
    testonly = true
    allow_eng_platform_bundle_use = true
    bazel_assembly_target = "//build/bazel/assembly:workstation_eng"
  }
}

# Only do drivers lists comparison when both GN and Bazel assembly are done in
# the same build.
if (!use_bazel_images_only && bazel_assembly_targets != []) {
  import("//build/drivers/check_included_drivers.gni")

  check_included_drivers("bazel_drivers_check") {
    testonly = true
    deps = bazel_assembly_targets
  }

  action("compare_drivers_lists") {
    testonly = true

    _gn_drivers_list = get_label_info("//:drivers-check", "target_gen_dir") +
                       "/drivers-check_metadata_output"
    _bazel_drivers_list =
        get_label_info(":bazel_drivers_check", "target_gen_dir") +
        "/bazel_drivers_check_metadata_output"
    _output = "${target_out_dir}/diff"

    inputs = [
      _gn_drivers_list,
      _bazel_drivers_list,
    ]
    outputs = [ _output ]

    script = "//build/bazel/assembly/diff_drivers_lists.py"
    args = [
      "--drivers-list1",
      rebase_path(_gn_drivers_list, root_build_dir),
      "--drivers-list2",
      rebase_path(_bazel_drivers_list, root_build_dir),
      "--output",
      rebase_path(_output, root_build_dir),
    ]

    deps = [
      ":bazel_drivers_check_metadata_check",
      "//:drivers-check_metadata_check",
    ]
  }
} else {
  group("compare_drivers_lists") {
    testonly = true
  }
}

group("verifications") {
  testonly = true
  deps = [
    "images_configurations:verifications",
    "partitions_configurations:verifications",
    "product_configurations:verifications",
  ]
}
