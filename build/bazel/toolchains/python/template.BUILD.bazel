# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Python toolchain definition for our prebuilt Python3 executable."""

load("@rules_python//python:defs.bzl", "py_runtime_pair")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "runtime_files",
    srcs = {python_runtime_files},
)

py_runtime(
    name = "py3_runtime",
    files = [":runtime_files"],
    interpreter = "//:{python_launcher}",
    python_version = "PY3",
    # Set stub_shebang so the Python wrapper can find the prebuilt Python
    # interpreter.
    #
    # See details about this shebang line in https://fxbug.dev/115164#c29, and
    # general information about the underlying issue in that bug.
    stub_shebang = """\
#!/bin/bash
#
# This bash oneliner will be interpreted and ignored by Python because they are
# all string literals. We use it to locate the vendored interpreter to use in
# the Python launcher script.
#
# NOTE: `exec` is necessary here because when used as a launcher script, we want
# the script to stop at this line, instead of continuing the rest of the
# launcher script, which are in Python, not bash.
#
# For a py_binary() target in //src:foo, Bazel generates several things under
# the $BAZEL_BIN directory:
#
#   - $BAZEL_BIN/foo, a "middle-man" python script that will setup the environment
#     before calling the actual Python interpreter with the real script path
#     as argument.
#
#   - $BAZEL_BIN/foo.runfiles/, a directory containing symlinks to all files that
#     are needed to run the script.
#
#   - $BAZEL_BIN/foo.runfiles/<python_repository_name>/, a directory that contains
#     symlinks to the compact runtime files.
#
#   - $BAZEL_BIN/src/foo, a symlink to $BAZEL_BIN/foo, which is the actual path
#     that Bazel will invoke when running this script in certain cases, but not
#     all of them (why is still a mystery).
#
# The use of readlink below is necessary to always get the path of the middle-man
# script, which in turns allows finding the right runfiles directory.

"exec" "$(readlink $0 || echo $0).runfiles/{repository_dir}/{python_launcher}" "$0" "$@"
""",
)

py_runtime_pair(
    name = "runtime_pair",
    py3_runtime = ":py3_runtime",
)

toolchain(
    name = "py_toolchain",
    exec_compatible_with = [
        "{host_platform_os_constraint}",
        "{host_platform_cpu_constraint}",
    ],
    target_compatible_with = [
        "{host_platform_os_constraint}",
        "{host_platform_cpu_constraint}",
    ],
    toolchain = ":runtime_pair",
    toolchain_type = "@rules_python//python:toolchain_type",
)
