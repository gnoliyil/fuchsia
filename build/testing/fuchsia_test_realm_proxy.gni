# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/rust/rustc_binary.gni")

_default_service_manifest = "//src/testing/realm_proxy/service:manifest"
_default_service_component = "//src/testing/realm_proxy/service:component"

# Creates a test realm proxy that mediates access to a component.
#
# This target produces a Fuchsia package containing the test realm proxy
# component. Your test suite should depend on this target as a subpackage.
# For example usage see //src/testing/realm_proxy/service/tests/BUILD.gn
#
# Parameters
#
#   proxied_component (required)
#     The target label of the component being proxied.
#     Type: label
#
#   proxied_component_name (required)
#     The name of the proxied_component. This becomes part of the URL that
#     the test realm proxy uses to start the component.
#     Type: string
#
#   proxied_protocols (required)
#     The list of protocol capabilities to proxy. Any attempt to connect
#     to a protocol not in this list will result in an OperationError::UNSUPPORTED
#     response from the test realm proxy.
#     Type: list(string)
template("fuchsia_test_realm_proxy") {
  # TODO(123521): Find a way to infer proxied_component_name.
  assert(defined(invoker.proxied_component_name))
  assert(defined(invoker.proxied_component))
  assert(defined(invoker.proxied_protocols))

  default_service_cfg = "${target_name}_config_values"
  fuchsia_structured_config_values(default_service_cfg) {
    testonly = true
    cm_label = _default_service_manifest
    component_name = "default"
    values = {
      proxied_component_url = "#meta/" + invoker.proxied_component_name + ".cm"
      proxied_protocols = invoker.proxied_protocols
    }
  }

  fuchsia_package(target_name) {
    forward_variables_from(invoker, [ "deps" ])
    testonly = true
    if (!defined(deps)) {
      deps = []
    }

    deps += [
      ":$default_service_cfg",
      _default_service_component,
      invoker.proxied_component,
    ]
  }
}
