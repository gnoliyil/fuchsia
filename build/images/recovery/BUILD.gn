# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/board.gni")
import("//build/images/paths.gni")
import("//build/images/vboot/vboot.gni")
import("//build/images/zedboot/zedboot_args.gni")
import("//build/info/info.gni")
import("//build/testing/host_test_data.gni")
import("//src/sys/appmgr/core_shards.gni")
import("//src/sys/core/build/core.gni")
import("//src/sys/root/build/root.gni")

if (is_host) {
  host_test_data("test_data") {
    out_dir = get_label_info(":anything($target_toolchain)", "target_out_dir")
    sources = [
      "${out_dir}/recovery-eng/recovery-eng.zbi",
      "${out_dir}/recovery-fdr/recovery-fdr.zbi",
      "${out_dir}/recovery-installer/recovery-installer.zbi",
    ]
    deps = [
      ":recovery-eng($target_toolchain)",
      ":recovery-fdr($target_toolchain)",
      ":recovery-installer($target_toolchain)",
    ]
  }
}

if (is_fuchsia) {
  assert(current_toolchain == default_toolchain,
         "//build/images/* are only valid in the Fuchsia toolchain")

  # Parameters shared between recovery-eng and recovery-installer
  recovery_base = {
    testonly = true
    generate_fvm = !bootfs_only
    ramdisk_fvm_in_zbi = true

    include_component_id_index = true
    devmgr_config = [ "virtcon.disable=true" ] + zedboot_devmgr_config
    cmdline = [
      "console.shell=true",
      "netsvc.disable=false",
      "kernel.enable-debugging-syscalls=true",
      "kernel.enable-serial-syscalls=true",
    ]

    bootfs_labels = [
      ":root",
      "//build/info:bootfs",
      "//build/input:recovery_bootfs",
      "//bundles:bootstrap",
      "//bundles:debugging",
      "//bundles/bringup:manual_testing",
      "//bundles/drivers:bootstrap",
      "//bundles/drivers:usb-host-stack",
      "//bundles/drivers:usb-peripheral-stack",
      "//bundles/drivers:utils",
    ]
    bootfs_labels += [
      "//src/sys/component_manager:component_manager_bootfs_config",
      "//src/diagnostics/archivist:default-service-config",
    ]

    if (custom_signing_script != "") {
      zbi_signing_script = custom_signing_script
      zbi_signing_script_deps = [ "//build/images/custom_signing:deps" ]
      inputs = custom_signing_script_inputs
    } else if (use_vboot) {
      zbi_signing_script = vboot_action.script
      zbi_signing_args = vboot_action.args
      zbi_signing_script_deps = vboot_action.deps
      inputs = vboot_action.inputs
    }
  }

  group("recovery") {
    testonly = true
    public_deps = [
      ":recovery-eng",
      ":recovery-fdr",
      ":recovery-installer",
    ]
  }

  core_name = "core-recovery"

  _core_realm_deps = [
    "//src/connectivity/wlan/wlancfg:wlancfg-core-shard",
    "//src/connectivity/wlan/wlandevicemonitor:wlandevicemonitor-core-shard",
    "//src/connectivity/wlan/wlanstack:wlanstack-core-shard",
    "//src/developer/build_info:build_info_core_shard",
    "//src/developer/forensics:core_shard",
    "//src/firmware/fastboot-tcp:fastboot-tcp-core-shard",
    "//src/recovery/factory_reset:factory_reset_core_shard",
    "//src/ui/bin/brightness_manager:auto-brightness_core_shard",
  ]

  core_realm("core") {
    package_name = core_name
    restrict_persistent_storage = false
    deps = _core_realm_deps +
           [ "//src/recovery/system:system_recovery_fdr_core_shard" ]
  }

  core_realm("core-eng") {
    package_name = core_name
    restrict_persistent_storage = false

    # TODO(fxbug.dev/102390): deprecate appmgr from this product config
    deps =
        _core_realm_deps + appmgr_core_shards + [
          # required for SL4F
          "//src/developer:default-laboratory-env-core-shard",
          "//src/developer/memory/monitor:memory_monitor_core_shard",
          "//src/developer/sshd-host:core_shard",
          "//src/factory/factory_store_providers:factory_store_providers_shard",
          "//src/recovery/system:system_recovery_core_shard",
          "//src/settings/service:setui_service_core_shard",
          "//src/sys/process-resolver:core_shard",
          "//src/testing/sl4f:sl4f_core_shard",
        ]
  }

  core_realm("core-installer") {
    package_name = core_name
    restrict_persistent_storage = false
    deps = _core_realm_deps + [
             "//src/recovery/system:system_recovery_installer_core_shard",
             "//src/sys/process-resolver:core_shard",
           ]
  }

  root_realm("root") {
    core_package_name = core_name
  }

  recovery_packages = board_recovery_package_labels + [
                        ":build-info-recovery",
                        "//src/connectivity/location/regulatory_region:regulatory_region",
                        "//src/connectivity/network",
                        "//src/connectivity/network/netcfg:config-default",
                        "//src/connectivity/wlan/wlancfg",
                        "//src/connectivity/wlan/wlandevicemonitor:wlandevicemonitor-legacy-wlanstack",
                        "//src/connectivity/wlan/wlanstack:wlanstack-legacy-privacy",
                        "//src/devices/sysmem/bin/sysmem_connector",
                        "//src/recovery/factory_reset",
                        "//src/recovery/system:system_recovery",
                        "//src/security/bin/root_ssl_certificates",
                        "//src/sys/appmgr",
                        "//src/sys/appmgr:appmgr_scheme_config",
                        "//src/sys/appmgr:component_id_index_no_restrict_storage",
                        "//src/sys/pkg:recovery",
                        "//src/sys/stash:pkg",
                        "//src/sys/time:recovery",
                        "//src/ui/bin/brightness_manager:auto-brightness",
                      ]

  recovery_eng_packages =
      recovery_packages + [
        # So recovery can read board name and version info:
        "//src/developer/build_info:build-info-service",

        "//src/cobalt/bin/app:build_type_eng",
        "//src/cobalt/bin/app:cobalt",
        "//src/cobalt/bin/app:cobalt_registry",
        "//src/cobalt/bin/app:config",

        # Use eng allowlists:
        "//src/security/policy:appmgr_policy_eng",

        # Enable ffx support.
        "//src/connectivity/network/mdns/bundles:services",
        "//src/connectivity/network/mdns/service:mdns_fuchsia_udp_config",
        "//src/developer/ffx:runtime",

        # Enable SSH (for engineering builds):
        "//src/developer/sshd-host",
        "//src/developer/sshd-host:config",
        "//src/sys/process-resolver",

        # Basic command-line tools:
        "//third_party/sbase",
        "//src/diagnostics/log_listener:log_listener_shell",

        # Command-line interface to wlan stack:
        "//src/connectivity/wlan/wlancfg/tool:donut",

        # Device side of zxdb & fidlcat:
        "//src/developer/debug/debug_agent",

        # The SWD stack for OTAs.
        "//src/sys/pkg/lib/isolated-swd:isolated-swd-components",

        # Userspace fastboot for flashing
        "//src/firmware/fastboot-tcp",

        # Support for hwinfo protocol to read regulatory region from factory.
        "//src/hwinfo:hwinfo",
        "//src/factory/factory_store_providers",

        # Support privacy switch
        "//src/settings/service:setui_service",

        # SL4F for infra testing
        "//src/testing/sl4f",
        "//src/sys/bin/start_sl4f",

        # Forensics and crash reporting
        "//src/developer/forensics:pkg",
        "//src/developer/forensics:user_configs",
        "//src/developer/forensics:feedback_remote_device_id_provider",
      ]

  recovery_installer_packages =
      recovery_eng_packages - [
        "//src/recovery/system:system_recovery",

        # After issuing device reboot when `ffx target flash`, ffx will block
        # on the first mdns respond from the target as a signal of re-discovery.
        # It also seems to temporarily stop updating the target according to
        # later responds that follow. If we are unlucky and this first responds
        # is _fuchsia._udp instead of _fastboot._tcp, ffx will fail to
        # recognize the device as being in the fastboot state. For now remove
        # _fuchsia._udp service as a workaround in favor of _fastboot._tcp
        # until we need both.
        "//src/connectivity/network/mdns/service:mdns_fuchsia_udp_config",
      ] +
      [
        "//src/recovery/system:system_recovery_installer",
        "//src/firmware/fastboot-tcp:fastboot_tcp_mdns_config",
      ]

  recovery_fdr_packages = recovery_packages
  recovery_fdr_packages -= [ "//src/recovery/system:system_recovery" ]
  recovery_fdr_packages += [
    ":core",
    "//src/recovery/system:system_recovery_fdr",
  ]

  assembled_system("recovery-eng") {
    forward_variables_from(recovery_base, "*")
    base_packages = recovery_eng_packages + [ ":core-eng" ]
  }

  # A minimal recovery image that runs userspace fastboot on tcp.
  assembled_system("recovery-fastboot") {
    forward_variables_from(recovery_base, "*")
    base_packages = []
    base_packages = [
      ":core-eng",
      "//build/info:build-info",
      "//src/connectivity/network",
      "//src/connectivity/network/netcfg:config-default",
      "//src/devices/sysmem/bin/sysmem_connector",
      "//src/sys/appmgr",
      "//src/sys/appmgr:appmgr_scheme_config",
      "//src/sys/appmgr:component_id_index_no_restrict_storage",
      "//src/sys/sysmgr",
      "//src/firmware/fastboot-tcp",
      "//src/connectivity/network/mdns/bundles:services",
      "//src/firmware/fastboot-tcp:fastboot_tcp_mdns_config",
      "//src/sys/pkg:recovery-core",
      "//src/developer/build_info:build-info-service",
    ]

    bootfs_labels = []
    bootfs_labels = [
      ":root",
      "//build/info:bootfs",
      "//build/input:recovery_bootfs",
      "//bundles:bootstrap",
      "//bundles/drivers:bootstrap",
      "//bundles/drivers:usb-host-stack",
      "//bundles/drivers:usb-peripheral-stack",
      "//src/sys/component_manager:component_manager_bootfs_config",
      "//src/diagnostics/archivist:default-service-config",
      "//src/devices/bundles:debugging",
    ]

    if (recovery_is_recovery_fastboot) {
      image_metadata_overrides = {
        zbi = {
          name = "zircon-r"
          if (zircon_r_partition != "") {
            fastboot_flash = [ zircon_r_partition ]
          }
          bootserver_pave = [ "--zirconr" ]
        }

        if (sign_zbi) {
          zbi_signed = {
            name = "zircon-r.signed"
            if (zircon_r_partition != "") {
              fastboot_flash = [ zircon_r_partition ]
            }
            bootserver_pave = [ "--zirconr" ]
          }
        }

        if (use_vbmeta) {
          vbmeta = {
            name = "zircon-r"
            if (vbmeta_r_partition != "") {
              fastboot_flash = [ vbmeta_r_partition ]
            }
            bootserver_pave = [ "--vbmetar" ]
          }
        }
      }
    }
  }

  assembled_system("recovery-fdr") {
    base_packages = recovery_fdr_packages
    generate_fvm = !bootfs_only
    ramdisk_fvm_in_zbi = true

    include_component_id_index = true

    devmgr_config = [ "virtcon.disable=true" ]
    cmdline = []

    bootfs_labels = [
      ":root",
      "//build/info:bootfs",
      "//build/input:recovery_bootfs",
      "//bundles:bootstrap",
      "//bundles/drivers:bootstrap",
      "//bundles/drivers:usb-host-stack",
      "//bundles/drivers:usb-peripheral-stack",
    ]
    bootfs_labels += [
      "//src/diagnostics/archivist:default-service-config",
      "//src/sys/component_manager:component_manager_bootfs_config",
    ]

    if (custom_signing_script != "") {
      zbi_signing_script = custom_signing_script
      zbi_signing_script_deps = [ "//build/images/custom_signing:deps" ]
      inputs = custom_signing_script_inputs
    } else if (use_vboot) {
      zbi_signing_script = vboot_action.script
      zbi_signing_args = vboot_action.args
      zbi_signing_script_deps = vboot_action.deps
      inputs = vboot_action.inputs
    }
  }

  assembled_system("recovery-installer") {
    forward_variables_from(recovery_base, "*")
    base_packages = recovery_installer_packages + [ ":core-installer" ]

    # The installer needs to see all partitions on the system so that it can
    #determine the installation source and destination
    fshost_config = {
      gpt_all = true
    }
  }

  recovery_build_info_product = "${target_gen_dir}/product.txt"

  generated_file("recovery_build_info_product") {
    outputs = [ recovery_build_info_product ]
    contents = "${build_info_product}_recovery"
  }

  resource_group("build-info-resources") {
    files = [
      {
        source = recovery_build_info_product
        dest = "data/product"
      },
      {
        source = build_info_files.board
        dest = "data/board"
      },
      {
        source = build_info_files.version
        dest = "data/version"
      },
      {
        source = build_info_files.jiri_snapshot
        dest = "data/snapshot"
      },
      {
        source = build_info_files.latest_commit_date
        dest = "data/latest-commit-date"
      },
      {
        source = build_info_files.minimum_utc_stamp
        dest = "data/minimum-utc-stamp"
      },
    ]
    deps = [
      ":recovery_build_info_product",
      "//build/info:latest-commit-date",
    ]
  }

  fuchsia_package("build-info-recovery") {
    package_name = "build-info"
    deps = [ ":build-info-resources" ]
  }
}
