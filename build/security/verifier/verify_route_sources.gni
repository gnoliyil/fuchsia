# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//src/developer/ffx/build/ffx_action.gni")

# Check the route sources specified in a config file.
#
# The target that generates 'zbi' needs to be added to deps.
#
# Parameters
#
#   product_bundle (required)
#     [label] The label of a product_bundle target.
#
#   config_path (required)
#     [string] Path to a configuration file that specifies the full set of
#     routes of zero or more component instances to verify.
#
#   recovery (optional)
#     [bool] Analyze recovery images rather than default fuchsia images.
#
#   deps, public_deps, data_deps (optional)
#     Usual GN meaning.

template("verify_route_sources") {
  assert(defined(invoker.product_bundle),
         "verify_route_sources() must specify product_bundle")
  assert(defined(invoker.config_path),
         "verify_route_sources() must specify config_path")

  ffx_action(target_name) {
    no_output_dir_leaks = false

    forward_variables_from(invoker,
                           [
                             "testonly",
                             "deps",
                             "public_deps",
                             "data_deps",
                             "visibility",
                           ])

    stamp_file = "$target_gen_dir/$target_name.verified"
    depfile = "$target_gen_dir/$target_name.d"
    tmp_dir = "$target_out_dir/$target_name/tmp"

    pb_name = get_label_info(invoker.product_bundle, "name")
    pb_out = get_label_info(invoker.product_bundle, "target_out_dir")
    pb_dir = "$pb_out/$pb_name"
    pb_manifest = "$pb_dir/product_bundle.json"

    hermetic_action_ignored_prefixes = [ tmp_dir ]

    inputs = [
      pb_manifest,
      invoker.config_path,
    ]
    outputs = [ stamp_file ]

    # The target below is generated as a part of the `ffx_tool` action at
    # `//src/developer/ffx/plugins/scrutiny:ffx_scrutiny_tool`. See there
    # for more information.
    ffx_tool =
        "//src/developer/ffx/plugins/scrutiny:ffx_scrutiny_tool_versioned"
    ffx_tool_output_name = "ffx-scrutiny"

    args = [
      "scrutiny",
      "verify",
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--stamp",
      rebase_path(stamp_file, root_build_dir),
      "--tmp-dir",
      rebase_path(tmp_dir, root_build_dir),
    ]

    if (defined(invoker.recovery) && invoker.recovery) {
      args += [ "--recovery" ]
    }

    args += [
      "route-sources",
      "--product-bundle",
      rebase_path(pb_dir, root_build_dir),
      "--config",
      rebase_path(invoker.config_path, root_build_dir),
    ]

    if (!defined(invoker.deps)) {
      deps = []
    }
    deps += [ invoker.product_bundle ]
  }
}
