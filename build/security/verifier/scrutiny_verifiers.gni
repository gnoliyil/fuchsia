# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/security/verifier/verify_bootfs.gni")
import("//build/security/verifier/verify_by_build_type.gni")
import("//build/security/verifier/verify_component_resolvers.gni")
import("//build/security/verifier/verify_kernel_cmdline.gni")
import("//build/security/verifier/verify_route_sources.gni")
import("//build/security/verifier/verify_routes.gni")
import("//build/security/verifier/verify_static_pkgs.gni")
import("//build/security/verifier/verify_structured_config.gni")

# Instantiate scrutiny verifiers for an assembled system.
#
# Global gn args (see source gni files for documentation)
#
# Basic parameters
#
#   product_bundle (required)
#     [label] Target that builds the product bundle.
#
#   product_bundle_path (optional)
#     [path] Path to product bundle.
#     If the product_bundle is not a product_bundle() then the
#     product_bundle_path can be supplied here.
#
#   assembly_image_name (required)
#     [string] The image name used to assemble the system.
#
#   product_assembly_config_label (optional)
#     [string] The product assembly configuration dependency for the assembled
#     system. Usually derived from the global gn arg
#     fuchsia_product_assembly_config_label (defined in //build/product.gni).
#
#   recovery (optional)
#     [bool] Instructs verifiers to analyze recovery images rather than default
#     fuchsia images.
#
# Global GN arg-based parameters
#
# These parameters are documented in //build/security.gni under
# fuchsia_[param_name] and/or recovery_[param_name]. They are injected into this
# template to facilitate selection of which flavour of [param_name] to use at
# template instantiation time.
#
#   route_sources_config (required)
#     [string]
#
#   static_pkgs_goldens (required)
#     [list of files]
#
#   verify_component_resolvers_allowlist (required)
#     [string]
#
#   verify_routes_component_tree_config (required)
#     [string]
#
#   verify_routes_exceptions_allowlist (required)
#     [string]
#
#   verify_routes_exceptions_allowlist_product (required)
#     [list of files]
#
#   zbi_bootfs_filelist_goldens (required)
#     [list of files]
#
#   zbi_bootfs_packages_goldens (required)
#     [list of files]
#
#   zbi_kernel_cmdline_goldens (required)
#     [list of files]
#
#   testonly (optional)
#     Usual GN meaning.
template("scrutiny_verifiers") {
  assert(defined(invoker.product_bundle),
         "product_bundle is required for scrutiny_verifiers()")

  assert(defined(invoker.assembly_image_name),
         "assembly_image_name is required for scrutiny_verifiers()")

  assert(defined(invoker.route_sources_config) &&
             invoker.route_sources_config != "",
         "route_sources_config is required for scrutiny_verifiers()")
  assert(
      defined(invoker.static_pkgs_goldens) && invoker.static_pkgs_goldens != [],
      "static_pkgs_goldens is required for scrutiny_verifiers()")
  assert(defined(invoker.structured_config_policy) &&
             invoker.structured_config_policy != "",
         "structured_config_policy is required for scrutiny_verifiers()")
  assert(
      defined(invoker.verify_component_resolvers_allowlist) &&
          invoker.verify_component_resolvers_allowlist != "",
      "verify_component_resolvers_allowlist is required for scrutiny_verifiers()")
  assert(
      defined(invoker.verify_routes_component_tree_config) &&
          invoker.verify_routes_component_tree_config != "",
      "verify_routes_component_tree_config is required for scrutiny_verifiers()")
  assert(
      defined(invoker.verify_routes_exceptions_allowlist_product) &&
          invoker.verify_routes_exceptions_allowlist_product != [],
      "verify_routes_exceptions_allowlist_product is required for scrutiny_verifiers()")
  assert(
      defined(invoker.verify_routes_exceptions_allowlist) &&
          invoker.verify_routes_exceptions_allowlist != "",
      "verify_routes_exceptions_allowlist is required for scrutiny_verifiers()")
  assert(defined(invoker.zbi_bootfs_filelist_goldens) &&
             invoker.zbi_bootfs_filelist_goldens != [],
         "zbi_bootfs_filelist_goldens is required for scrutiny_verifiers()")
  assert(defined(invoker.zbi_bootfs_packages_goldens) &&
             invoker.zbi_bootfs_packages_goldens != [],
         "zbi_bootfs_packages_goldens is required for scrutiny_verifiers()")
  assert(defined(invoker.zbi_kernel_cmdline_goldens) &&
             invoker.zbi_kernel_cmdline_goldens != [],
         "zbi_kernel_cmdline_goldens is required for scrutiny_verifiers()")

  assert(defined(invoker.product_assembly_config_label),
         "product_assembly_config_label is required for scrutiny_verifiers()")

  if (defined(invoker.product_bundle_path)) {
    pb_dir = invoker.product_bundle_path
  } else {
    pb_name = get_label_info(invoker.product_bundle, "name")
    pb_out = get_label_info(invoker.product_bundle, "target_out_dir")
    pb_dir = "$pb_out/$pb_name"
  }

  verify_structured_config_policy_by_build_type(
      "${invoker.assembly_image_name}_verify_structured_config_policy_exists") {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visiblity",
                           ])
    product_assembly_config_file =
        get_label_info(invoker.product_assembly_config_label,
                       "target_out_dir") + "/" +
        get_label_info(invoker.product_assembly_config_label, "name") +
        "/product_assembly_config.json"
    structured_config_policy = invoker.structured_config_policy
    deps = [ invoker.product_assembly_config_label ]
  }

  verify_bootfs_filelist(
      "${invoker.assembly_image_name}_verify_bootfs_filelist") {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                             "visiblity",
                             "recovery",
                           ])
    product_bundle_path = pb_dir
    goldens = invoker.zbi_bootfs_filelist_goldens
    golden_packages = invoker.zbi_bootfs_packages_goldens

    if (!defined(deps)) {
      deps = []
    }
    deps += [ invoker.product_bundle ]
  }

  verify_kernel_cmdline(
      "${invoker.assembly_image_name}_verify_kernel_cmdline") {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                             "visiblity",
                             "recovery",
                           ])
    product_bundle_path = pb_dir
    goldens = invoker.zbi_kernel_cmdline_goldens

    if (!defined(deps)) {
      deps = []
    }
    deps += [ invoker.product_bundle ]
  }

  verify_route_sources("${invoker.assembly_image_name}_verify_route_sources") {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visiblity",
                             "recovery",
                           ])
    product_bundle_path = pb_dir
    config_path = invoker.route_sources_config
    deps = [ invoker.product_bundle ]
  }

  verify_component_resolvers(
      "${invoker.assembly_image_name}_verify_component_resolvers") {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visiblity",
                             "recovery",
                           ])
    product_bundle_path = pb_dir
    allowlist = invoker.verify_component_resolvers_allowlist
    deps = [ invoker.product_bundle ]
  }

  verify_routes("${invoker.assembly_image_name}_verify_capability_routes") {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visiblity",
                             "recovery",
                           ])
    product_bundle_path = pb_dir
    allowlist = [ invoker.verify_routes_exceptions_allowlist ]
    allowlist += invoker.verify_routes_exceptions_allowlist_product
    component_tree_config = invoker.verify_routes_component_tree_config
    deps = [ invoker.product_bundle ]
  }

  verify_static_pkgs("${invoker.assembly_image_name}_verify_static_pkgs") {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visiblity",
                             "recovery",
                           ])
    product_bundle_path = pb_dir
    goldens = invoker.static_pkgs_goldens
    deps = [ invoker.product_bundle ]
  }

  verify_assembled_structured_config(
      "${invoker.assembly_image_name}_verify_assembled_structured_config") {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visiblity",
                             "recovery",
                           ])
    product_bundle_path = pb_dir
    policy = invoker.structured_config_policy
    deps = [ invoker.product_bundle ]
  }

  extract_assembled_structured_config(
      "${invoker.assembly_image_name}_extract_assembled_structured_config") {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visiblity",
                             "recovery",
                           ])
    product_bundle_path = pb_dir
    output =
        "$target_out_dir/${invoker.assembly_image_name}.structured_config.json"
    deps = [ invoker.product_bundle ]
  }

  group(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "metadata",
                             "testonly",
                             "visibility",
                           ])
    if (!defined(deps)) {
      deps = []
    }

    deps += [
      ":${invoker.assembly_image_name}_extract_assembled_structured_config",
      ":${invoker.assembly_image_name}_verify_assembled_structured_config",
      ":${invoker.assembly_image_name}_verify_bootfs_filelist",
      ":${invoker.assembly_image_name}_verify_capability_routes",
      ":${invoker.assembly_image_name}_verify_component_resolvers",
      ":${invoker.assembly_image_name}_verify_kernel_cmdline",
      ":${invoker.assembly_image_name}_verify_route_sources",
      ":${invoker.assembly_image_name}_verify_static_pkgs",
      ":${invoker.assembly_image_name}_verify_structured_config_policy_exists",
    ]
  }
}
