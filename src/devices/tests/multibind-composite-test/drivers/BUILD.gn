# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bind/bind.gni")
import("//build/components.gni")
import("//build/drivers.gni")
import("//build/test.gni")

group("drivers") {
  testonly = true
  deps = [
    ":legacy-composite",
    ":root",
    ":spec-composite-1",
    ":spec-composite-2",
  ]
}

bind_library("multibind.test") {
  source = "multibind.test.bind"
}

driver_bind_rules("root-driver-bind") {
  rules = "root-driver.bind"
  header_output = "root-driver-bind.h"
  bind_output = "root-driver.bindbc"
  deps = [ "//src/devices/bind/fuchsia.test" ]
}

fuchsia_driver("root-driver") {
  output_name = "multibind-root-driver"
  sources = [ "root-driver.cc" ]
  deps = [
    ":multibind.test_cpp",
    ":root-driver-bind",
    "//src/devices/bind/fuchsia:fuchsia_cpp",
    "//src/devices/bind/fuchsia.test:fuchsia.test_cpp",
    "//src/devices/lib/driver",
    "//src/lib/ddktl",
  ]
}

fuchsia_driver_component("root") {
  component_name = "root-driver"
  deps = [ ":root-driver" ]
  info = "root-driver-info.json"
  manifest = "meta/root.cml"
}

driver_bind_rules("legacy-composite-bind") {
  rules = "legacy-composite.bind"
  header_output = "legacy-composite-bind.h"
  bind_output = "legacy-composite.bindbc"
  deps = [ "//src/devices/bind/fuchsia.test" ]
}

fuchsia_driver("legacy-composite-driver") {
  output_name = "legacy-composite"
  sources = [ "composite.cc" ]
  deps = [
    ":legacy-composite-bind",
    "//src/devices/bind/fuchsia:fuchsia_cpp",
    "//src/devices/lib/driver",
    "//src/lib/ddktl",
  ]
}

fuchsia_driver_component("legacy-composite") {
  component_name = "legacy-composite"
  deps = [ ":legacy-composite-driver" ]
  info = "composite-info.json"
  manifest = "meta/legacy-composite.cml"
}

driver_bind_rules("spec-composite-1-bind") {
  rules = "spec-composite-1.bind"
  header_output = "spec-composite-1-bind.h"
  bind_output = "spec-composite-1.bindbc"

  # TODO(fxb/115757): Remove this once we no longer need to generate
  # fragments for composite bind rules.
  disable_fragment_gen = true

  deps = [ ":multibind.test" ]
}

fuchsia_driver("spec-composite-1-driver") {
  output_name = "spec-composite-1"
  sources = [ "composite.cc" ]
  deps = [
    ":spec-composite-1-bind",
    "//src/devices/bind/fuchsia:fuchsia_cpp",
    "//src/devices/lib/driver",
    "//src/lib/ddktl",
  ]
}

fuchsia_driver_component("spec-composite-1") {
  component_name = "spec-composite-1-driver"
  deps = [ ":spec-composite-1-driver" ]
  info = "composite-info.json"
  manifest = "meta/spec-composite-1.cml"
}

driver_bind_rules("spec-composite-2-bind") {
  rules = "spec-composite-2.bind"
  header_output = "spec-composite-2-bind.h"
  bind_output = "spec-composite-2.bindbc"

  # TODO(fxb/115757): Remove this once we no longer need to generate
  # fragments for composite bind rules.
  disable_fragment_gen = true

  deps = [ ":multibind.test" ]
}

fuchsia_driver("spec-composite-2-driver") {
  output_name = "spec-composite-2"
  sources = [ "composite.cc" ]
  deps = [
    ":spec-composite-2-bind",
    "//src/devices/bind/fuchsia:fuchsia_cpp",
    "//src/devices/lib/driver",
    "//src/lib/ddktl",
  ]
}

fuchsia_driver_component("spec-composite-2") {
  component_name = "spec-composite-2"
  deps = [ ":spec-composite-2-driver" ]
  info = "composite-info.json"
  manifest = "meta/spec-composite-2.cml"
}
