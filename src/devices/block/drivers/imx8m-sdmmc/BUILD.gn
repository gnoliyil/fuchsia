# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bind/bind.gni")
import("//build/components.gni")
import("//build/drivers.gni")
import("//build/test.gni")

driver_bind_rules("imx8m-sdmmc-bind") {
  rules = "imx8m-sdmmc.bind"
  header_output = "imx8m-sdmmc-bind.h"
  bind_output = "imx8m-sdmmc.bindbc"
  tests = "imx8m-sdmmc-bind-test.json"
  deps = [
    "//src/devices/bind/fuchsia.nxp.platform",
    "//src/devices/bind/fuchsia.platform",
  ]
}

fuchsia_driver("imx8m-sdmmc-driver") {
  output_name = "imx8m-sdmmc"
  configs += [
    "//build/config:all_source",
    "//build/config/fuchsia:enable_zircon_asserts",
  ]
  sources = [ "imx8m-sdmmc.cc" ]
  deps = [
    ":imx8m-sdmmc-bind",
    "//sdk/banjo/fuchsia.hardware.block:fuchsia.hardware.block_banjo_cpp",
    "//sdk/banjo/fuchsia.hardware.clock:fuchsia.hardware.clock_banjo_cpp",
    "//sdk/banjo/fuchsia.hardware.gpio:fuchsia.hardware.gpio_banjo_cpp",
    "//sdk/banjo/fuchsia.hardware.platform.device:fuchsia.hardware.platform.device_banjo_cpp",
    "//sdk/banjo/fuchsia.hardware.sdmmc:fuchsia.hardware.sdmmc_banjo_cpp",
    "//sdk/fidl/fuchsia.hardware.platform.bus:fuchsia.hardware.platform.bus_cpp_driver",
    "//sdk/lib/driver/runtime:driver_runtime_cpp",
    "//sdk/lib/fit",
    "//src/devices/block/drivers/sdhci:dma-descriptor-builder",
    "//src/devices/block/lib/sdio",
    "//src/devices/block/lib/sdmmc",
    "//src/devices/bus/lib/device-protocol-pdev",
    "//src/devices/bus/lib/device-protocol-platform-device",
    "//src/devices/lib/driver",
    "//src/devices/lib/driver:driver_runtime",
    "//src/devices/lib/mmio",
    "//src/devices/lib/nxp",
    "//src/devices/lib/nxp:fuchsia.nxp.sdmmc_cpp_wire",
    "//src/lib/ddk",
    "//src/lib/ddktl",
    "//src/lib/vmo_store",
    "//zircon/system/ulib/async:async-cpp",
    "//zircon/system/ulib/hwreg",
    "//zircon/system/ulib/sync",
    "//zircon/system/ulib/zircon-internal",
    "//zircon/system/ulib/zx",
  ]
}

fuchsia_driver_component("imx8m-sdmmc") {
  component_name = "imx8m-sdmmc"
  deps = [ ":imx8m-sdmmc-driver" ]
  info = "imx8m-sdmmc-info.json"
  colocate = true
}

test("imx8m-sdmmc-test-bin") {
  output_name = "imx8m-sdmmc-test"
  configs += [
    "//build/config:all_source",
    "//build/config/fuchsia:enable_zircon_asserts",
  ]
  sources = [
    "imx8m-sdmmc-test.cc",
    "imx8m-sdmmc.cc",
  ]
  deps = [
    ":imx8m-sdmmc-bind",
    "//sdk/banjo/fuchsia.hardware.clock:fuchsia.hardware.clock_banjo_cpp",
    "//sdk/banjo/fuchsia.hardware.gpio:fuchsia.hardware.gpio_banjo_cpp",
    "//sdk/banjo/fuchsia.hardware.platform.device:fuchsia.hardware.platform.device_banjo_cpp",
    "//sdk/banjo/fuchsia.hardware.sdmmc:fuchsia.hardware.sdmmc_banjo_cpp",
    "//sdk/lib/driver/runtime:driver_runtime_cpp",
    "//sdk/lib/driver/runtime/testing/runtime",
    "//sdk/lib/fit",
    "//sdk/lib/inspect/testing/cpp:zxtest",
    "//src/devices/block/drivers/sdhci:dma-descriptor-builder",
    "//src/devices/block/lib/sdio",
    "//src/devices/block/lib/sdmmc",
    "//src/devices/bus/lib/device-protocol-pdev",
    "//src/devices/bus/lib/device-protocol-platform-device",
    "//src/devices/bus/testing/fake-pdev",
    "//src/devices/lib/driver",
    "//src/devices/lib/driver:driver_runtime",
    "//src/devices/lib/mmio",
    "//src/devices/lib/nxp",
    "//src/devices/lib/nxp:fuchsia.nxp.sdmmc_cpp_wire",
    "//src/devices/testing/fake-bti",
    "//src/devices/testing/fake-mmio-reg",
    "//src/devices/testing/mock-ddk",
    "//src/lib/ddk",
    "//src/lib/ddktl",
    "//src/lib/vmo_store",
    "//zircon/system/ulib/async:async-cpp",
    "//zircon/system/ulib/hwreg",
    "//zircon/system/ulib/inspect",
    "//zircon/system/ulib/mmio-ptr:mmio-ptr-fake",
    "//zircon/system/ulib/mock-function",
    "//zircon/system/ulib/mock-function",
    "//zircon/system/ulib/sync",
    "//zircon/system/ulib/zircon-internal",
    "//zircon/system/ulib/zx",
    "//zircon/system/ulib/zxtest",
  ]
}

fuchsia_unittest_package("imx8m-sdmmc-test") {
  deps = [ ":imx8m-sdmmc-test-bin" ]
  test_specs = {
    environments = basic_envs
  }
}

group("tests") {
  testonly = true
  deps = [
    ":imx8m-sdmmc-bind_test",
    ":imx8m-sdmmc-test",
  ]
}
