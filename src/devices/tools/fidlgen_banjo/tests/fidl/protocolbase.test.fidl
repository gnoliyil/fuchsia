// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library banjo.examples.protocolbase;

using zx;

@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol SynchronousBase {
    strict Status(struct {
        status zx.status;
    }) -> (struct {
        status zx.status;
        status_2 zx.status;
    });
    strict Time(struct {
        time zx.time;
    }) -> (struct {
        time zx.time;
        time_2 zx.time;
    });
    strict Duration(struct {
        duration zx.duration;
    }) -> (struct {
        duration zx.duration;
        duration_2 zx.duration;
    });
    strict Koid(struct {
        koid zx.Koid;
    }) -> (struct {
        koid zx.Koid;
        koid_2 zx.Koid;
    });
    strict Vaddr(struct {
        vaddr zx.vaddr;
    }) -> (struct {
        vaddr zx.vaddr;
        vaddr_2 zx.vaddr;
    });
    strict Paddr(struct {
        paddr zx.paddr;
    }) -> (struct {
        paddr zx.paddr;
        paddr_2 zx.paddr;
    });
    strict Paddr32(struct {
        paddr32 zx.paddr32;
    }) -> (struct {
        paddr32 zx.paddr32;
        paddr32_2 zx.paddr32;
    });
    strict Gpaddr(struct {
        gpaddr zx.gpaddr;
    }) -> (struct {
        gpaddr zx.gpaddr;
        gpaddr_2 zx.gpaddr;
    });
    strict Off(struct {
        off zx.Off;
    }) -> (struct {
        off zx.Off;
        off_2 zx.Off;
    });
};

@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol AsyncBase {
    @async
    strict Status(struct {
        status zx.status;
    }) -> (struct {
        status zx.status;
        status_2 zx.status;
    });
    @async
    strict Time(struct {
        time zx.time;
    }) -> (struct {
        time zx.time;
        time_2 zx.time;
    });
    @async
    strict Duration(struct {
        duration zx.duration;
    }) -> (struct {
        duration zx.duration;
        duration_2 zx.duration;
    });
    @async
    strict Koid(struct {
        koid zx.Koid;
    }) -> (struct {
        koid zx.Koid;
        koid_2 zx.Koid;
    });
    @async
    strict Vaddr(struct {
        vaddr zx.vaddr;
    }) -> (struct {
        vaddr zx.vaddr;
        vaddr_2 zx.vaddr;
    });
    @async
    strict Paddr(struct {
        paddr zx.paddr;
    }) -> (struct {
        paddr zx.paddr;
        paddr_2 zx.paddr;
    });
    @async
    strict Paddr32(struct {
        paddr32 zx.paddr32;
    }) -> (struct {
        paddr32 zx.paddr32;
        paddr32_2 zx.paddr32;
    });
    @async
    strict Gpaddr(struct {
        gpaddr zx.gpaddr;
    }) -> (struct {
        gpaddr zx.gpaddr;
        gpaddr_2 zx.gpaddr;
    });
    @async
    strict Off(struct {
        off zx.Off;
    }) -> (struct {
        off zx.Off;
        off_2 zx.Off;
    });
};

closed protocol WrongTransport {
    strict Status(struct {
        status zx.status;
    }) -> (struct {
        status zx.status;
        status_2 zx.status;
    });
    strict Time(struct {
        time zx.time;
    }) -> (struct {
        time zx.time;
        time_2 zx.time;
    });
    strict Duration(struct {
        duration zx.duration;
    }) -> (struct {
        duration zx.duration;
        duration_2 zx.duration;
    });
    strict Koid(struct {
        koid zx.Koid;
    }) -> (struct {
        koid zx.Koid;
        koid_2 zx.Koid;
    });
    strict Vaddr(struct {
        vaddr zx.vaddr;
    }) -> (struct {
        vaddr zx.vaddr;
        vaddr_2 zx.vaddr;
    });
    strict Paddr(struct {
        paddr zx.paddr;
    }) -> (struct {
        paddr zx.paddr;
        paddr_2 zx.paddr;
    });
    strict Paddr32(struct {
        paddr32 zx.paddr32;
    }) -> (struct {
        paddr32 zx.paddr32;
        paddr32_2 zx.paddr32;
    });
    strict Gpaddr(struct {
        gpaddr zx.gpaddr;
    }) -> (struct {
        gpaddr zx.gpaddr;
        gpaddr_2 zx.gpaddr;
    });
    strict Off(struct {
        off zx.Off;
    }) -> (struct {
        off zx.Off;
        off_2 zx.Off;
    });
};

@transport("Driver")
closed protocol DriverTransport {
    strict Status(struct {
        status zx.status;
    }) -> (struct {
        status zx.status;
    });
};
