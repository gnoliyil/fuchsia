// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library banjo.examples.protocolbase;

using zx;

@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol SynchronousBase {
    strict Status(struct {
        status zx.Status;
    }) -> (struct {
        status zx.Status;
        status_2 zx.Status;
    });
    strict Time(struct {
        time zx.Time;
    }) -> (struct {
        time zx.Time;
        time_2 zx.Time;
    });
    strict Duration(struct {
        duration zx.Duration;
    }) -> (struct {
        duration zx.Duration;
        duration_2 zx.Duration;
    });
    strict Koid(struct {
        koid zx.Koid;
    }) -> (struct {
        koid zx.Koid;
        koid_2 zx.Koid;
    });
    strict Off(struct {
        off zx.Off;
    }) -> (struct {
        off zx.Off;
        off_2 zx.Off;
    });
};

@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol AsyncBase {
    @async
    strict Status(struct {
        status zx.Status;
    }) -> (struct {
        status zx.Status;
        status_2 zx.Status;
    });
    @async
    strict Time(struct {
        time zx.Time;
    }) -> (struct {
        time zx.Time;
        time_2 zx.Time;
    });
    @async
    strict Duration(struct {
        duration zx.Duration;
    }) -> (struct {
        duration zx.Duration;
        duration_2 zx.Duration;
    });
    @async
    strict Koid(struct {
        koid zx.Koid;
    }) -> (struct {
        koid zx.Koid;
        koid_2 zx.Koid;
    });
    @async
    strict Off(struct {
        off zx.Off;
    }) -> (struct {
        off zx.Off;
        off_2 zx.Off;
    });
};

closed protocol WrongTransport {
    strict Status(struct {
        status zx.Status;
    }) -> (struct {
        status zx.Status;
        status_2 zx.Status;
    });
    strict Time(struct {
        time zx.Time;
    }) -> (struct {
        time zx.Time;
        time_2 zx.Time;
    });
    strict Duration(struct {
        duration zx.Duration;
    }) -> (struct {
        duration zx.Duration;
        duration_2 zx.Duration;
    });
    strict Koid(struct {
        koid zx.Koid;
    }) -> (struct {
        koid zx.Koid;
        koid_2 zx.Koid;
    });
    strict Off(struct {
        off zx.Off;
    }) -> (struct {
        off zx.Off;
        off_2 zx.Off;
    });
};

@transport("Driver")
closed protocol DriverTransport {
    strict Status(struct {
        status zx.Status;
    }) -> (struct {
        status zx.Status;
    });
};
