// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library banjo.examples.api;

using zx;

@transport("Banjo")
closed protocol Api {
    strict bool(resource struct {
        handle zx.Handle;
        data bool;
    }) -> (struct {
        status zx.Status;
    });
    strict int8(resource struct {
        handle zx.Handle;
        data int8;
    }) -> (struct {
        status zx.Status;
    });
    strict int16(resource struct {
        handle zx.Handle;
        data int16;
    }) -> (struct {
        status zx.Status;
    });
    strict int32(resource struct {
        handle zx.Handle;
        data int32;
    }) -> (struct {
        status zx.Status;
    });
    strict int64(resource struct {
        handle zx.Handle;
        data int64;
    }) -> (struct {
        status zx.Status;
    });
    strict uint8(resource struct {
        handle zx.Handle;
        data uint8;
    }) -> (struct {
        status zx.Status;
    });
    strict uint16(resource struct {
        handle zx.Handle;
        data uint16;
    }) -> (struct {
        status zx.Status;
    });
    strict uint32(resource struct {
        handle zx.Handle;
        data uint32;
    }) -> (struct {
        status zx.Status;
    });
    strict uint64(resource struct {
        handle zx.Handle;
        data uint64;
    }) -> (struct {
        status zx.Status;
    });
    strict float32(resource struct {
        handle zx.Handle;
        data float32;
    }) -> (struct {
        status zx.Status;
    });
    strict float64(resource struct {
        handle zx.Handle;
        data float64;
    }) -> (struct {
        status zx.Status;
    });
    strict duration(resource struct {
        handle zx.Handle;
        data zx.Duration;
    }) -> (struct {
        status zx.Status;
    });
    strict koid(resource struct {
        handle zx.Handle;
        data zx.Koid;
    }) -> (struct {
        status zx.Status;
    });
    strict time(resource struct {
        handle zx.Handle;
        data zx.Time;
    }) -> (struct {
        status zx.Status;
    });

    strict output_bool(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result bool;
    });
    strict output_int8(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result int8;
    });
    strict output_int16(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result int16;
    });
    strict output_int32(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result int32;
    });
    strict output_int64(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result int64;
    });
    strict output_uint8(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result uint8;
    });
    strict output_uint16(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result uint16;
    });
    strict output_uint32(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result uint32;
    });
    strict output_uint64(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result uint64;
    });
    strict output_float32(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result float32;
    });
    strict output_float64(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result float64;
    });
    strict output_duration(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result zx.Duration;
    });
    strict output_koid(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result zx.Koid;
    });
    strict output_time(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
        result zx.Time;
    });

    strict return_void(resource struct {
        handle zx.Handle;
    }) -> ();
    strict return_status(resource struct {
        handle zx.Handle;
    }) -> (struct {
        status zx.Status;
    });
    strict return_ticks(resource struct {
        handle zx.Handle;
    }) -> (struct {
        result zx.Ticks;
    });
    strict return_time(resource struct {
        handle zx.Handle;
    }) -> (struct {
        result zx.Time;
    });
    strict return_uint32(resource struct {
        handle zx.Handle;
    }) -> (struct {
        result uint32;
    });
    strict return_uint64(resource struct {
        handle zx.Handle;
    }) -> (struct {
        result uint64;
    });
};
