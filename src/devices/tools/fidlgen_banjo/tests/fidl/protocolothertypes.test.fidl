// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library banjo.examples.protocolothertypes;

type ThisIsAStruct = struct {
    s string;
};

type ThisIsAUnion = strict union {
    1: s string;
};

type ThisIsAnEnum = strict enum {
    x = 23;
};

type ThisIsABits = strict bits {
    x = 0x01;
};

const strings_size uint32 = 32;

@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol OtherTypes {
    strict Struct(struct {
        s ThisIsAStruct;
    }) -> (struct {
        s ThisIsAStruct;
    });
    strict Union(struct {
        u ThisIsAUnion;
    }) -> (struct {
        u ThisIsAUnion;
    });
    strict Enum(struct {
        e ThisIsAnEnum;
    }) -> (struct {
        e ThisIsAnEnum;
    });
    strict Bits(struct {
        e ThisIsABits;
    }) -> (struct {
        e ThisIsABits;
    });
    strict String(struct {
        s string;
    }) -> (struct {
        s string;
    });
    strict StringSized(struct {
        s string:4;
    }) -> (struct {
        s string:4;
    });
    strict StringSized2(struct {
        s string:strings_size;
    }) -> (struct {
        s string:strings_size;
    });
    strict InlineTable(table {
        1: request_member uint32;
    }) -> (table {
        1: response_member uint32;
    });
};

@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol OtherTypesAsync {
    @async
    strict Struct(struct {
        s ThisIsAStruct;
    }) -> (struct {
        s ThisIsAStruct;
    });
    @async
    strict Union(struct {
        u ThisIsAUnion;
    }) -> (struct {
        u ThisIsAUnion;
    });
    @async
    strict Enum(struct {
        e ThisIsAnEnum;
    }) -> (struct {
        e ThisIsAnEnum;
    });
    @async
    strict Bits(struct {
        e ThisIsABits;
    }) -> (struct {
        e ThisIsABits;
    });
    @async
    strict String(struct {
        s string;
    }) -> (struct {
        s string;
    });
    @async
    strict StringSized(struct {
        s string:4;
    }) -> (struct {
        s string:4;
    });
    @async
    strict StringSized2(struct {
        s string:strings_size;
    }) -> (struct {
        s string:strings_size;
    });
};

@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol OtherTypesReference {
    strict Struct(struct {
        s box<ThisIsAStruct>;
    }) -> (struct {
        s box<ThisIsAStruct>;
    });
    strict Union(struct {
        u ThisIsAUnion:optional;
    }) -> (struct {
        u ThisIsAUnion:optional;
    });
    strict String(struct {
        s string:optional;
    }) -> (struct {
        s string:optional;
    });
    strict StringSized(struct {
        s string:<4, optional>;
    }) -> (struct {
        s string:<4, optional>;
    });
    strict StringSized2(struct {
        s string:<strings_size, optional>;
    }) -> (struct {
        s string:<strings_size, optional>;
    });
};

@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol OtherTypesAsyncReference {
    @async
    strict Struct(struct {
        s box<ThisIsAStruct>;
    }) -> (struct {
        s box<ThisIsAStruct>;
    });
    @async
    strict Union(struct {
        u ThisIsAUnion:optional;
    }) -> (struct {
        u ThisIsAUnion:optional;
    });
    @async
    strict String(struct {
        s string:optional;
    }) -> (struct {
        s string:optional;
    });
    @async
    strict StringSized(struct {
        s string:<4, optional>;
    }) -> (struct {
        s string:<4, optional>;
    });
    @async
    strict StringSized2(struct {
        s string:<strings_size, optional>;
    }) -> (struct {
        s string:<strings_size, optional>;
    });
};

@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol Interface {
    strict Value(resource struct {
        intf client_end:OtherTypes;
    }) -> (resource struct {
        intf client_end:OtherTypes;
    });
    strict Reference(resource struct {
        intf client_end:<OtherTypes, optional>;
    }) -> (resource struct {
        intf client_end:<OtherTypes, optional>;
    });
    @async
    strict Async(resource struct {
        intf client_end:OtherTypes;
    }) -> (resource struct {
        intf client_end:OtherTypes;
    });
    @async
    strict AsyncRefernce(resource struct {
        intf client_end:<OtherTypes, optional>;
    }) -> (resource struct {
        intf client_end:<OtherTypes, optional>;
    });
};
