// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library banjo.examples.interface;

using zx;

/// Types of cookies CookieMaker can prep.
type CookieKind = strict enum {
    /// Universal favorite.
    Chocolate = 0;
    /// Holiday favorite.
    Gingerbread = 1;
    /// Test-writer's favorite.
    Snickerdoodle = 2;
};

/// To do things to a cookie jar, we need to know which jar we are doing them to.
type CookieJarArgs = struct {
    /// To whom does this jar belong?
    name string:100;
};

/// An interface for a device that's able to create and deliver cookies!
@transport("Banjo")
@banjo_layout("ddk-interface")
closed protocol CookieMaker {
    /// Asynchonously preps a cookie.
    @async
    strict Prep(struct {
        cookie CookieKind;
    }) -> (struct {
        token uint64;
    });
    /// Asynchonously bakes a cookie.
    /// Must only be called after preping finishes.
    @async
    strict Bake(struct {
        token uint64;
        time zx.Time;
    }) -> (struct {
        s zx.Status;
    });
    /// Synchronously deliver a cookie.
    /// Must be called only after Bake finishes.
    strict Deliver(struct {
        token uint64;
    }) -> (struct {
        s zx.Status;
    });
};

/// An interface for storing cookies.
@transport("Banjo")
@banjo_layout("ddk-interface")
closed protocol CookieJarrer {
    /// Place a cookie in the named jar. If no jar with the supplied name exists, one is created.
    strict Place(CookieJarArgs);
    /// Who took a cookie from the cookie jar?
    strict Take(CookieJarArgs) -> (struct {
        cookie CookieKind;
    });
};

/// Swap devices at the bakery, changing either the maker OR the jarrer out.
type ChangeArgs = resource flexible union {
    1: intf client_end:CookieMaker;
    2: jarrer client_end:CookieJarrer;
};

/// Protocol for a baker who outsources all of it's baking duties to others.
@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol Baker {
    /// Registers a cookie maker device which the baker can use, and a cookie jar into
    /// which they can place their completed cookies.
    strict Register(resource struct {
        intf client_end:CookieMaker;
        jar client_end:CookieJarrer;
    }) -> ();
    /// Swap out the maker or jarrer for a different one.
    strict Change(ChangeArgs) -> (ChangeArgs);
    /// De-registers a cookie maker device when it's no longer available.
    strict DeRegister() -> ();
};
