// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    include: [ "syslog/client.shard.cml" ],

    // The binary to run for this component.
    program: {
        runner: "elf",
        binary: "bin/driver_index",
    },
    capabilities: [
        {
            protocol: [
                "fuchsia.driver.development.DriverIndex",
                "fuchsia.driver.index.DriverIndex",
                "fuchsia.driver.registrar.DriverRegistrar",
            ],
        },
    ],
    use: [
        {
            directory: "boot",
            rights: [ "r*" ],
            path: "/boot",
        },
        {
            protocol: [
                "fuchsia.pkg.PackageResolver-base",

                // This is only used when the |enable_ephemeral_drivers| configuration option
                // is set, which enables loading drivers ephemerally. This is intended for
                // eng builds only.
                "fuchsia.pkg.PackageResolver-full",
            ],
        },
    ],
    expose: [
        {
            protocol: [
                "fuchsia.driver.development.DriverIndex",
                "fuchsia.driver.index.DriverIndex",
                "fuchsia.driver.registrar.DriverRegistrar",
            ],
            from: "self",
        },
    ],
    config: {
        // Whether or not ephemeral drivers should be allowed to be registered dynamically.
        enable_ephemeral_drivers: { type: "bool" },

        // Whether or not fallback drivers should wait until base drivers have been indexed
        // before bound.
        delay_fallback_until_base_drivers_indexed: { type: "bool" },

        // Specify drivers to bind 'eagerly'. This turns a driver that normally
        // binds as a fallback driver into a driver that will be bound normally.
        bind_eager: {
            type: "vector",
            max_count: 20,
            element: {
                type: "string",
                max_size: 100,
            },
        },

        // Disable specific drivers by URL. These drivers will not be bound or loaded.
        disabled_drivers: {
            type: "vector",
            max_count: 20,
            element: {
                type: "string",
                max_size: 100,
            },
        },
    },
}
