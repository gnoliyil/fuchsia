# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/rust/rustc_library.gni")
import("//build/rust/rustc_test.gni")
import("//src/storage/fshost/fshost.gni")
import("//src/storage/fshost/generated_fshost_config.gni")
import("//src/storage/testing/driver_test_realm.gni")
import("//tools/cmc/build/cmc.gni")

rustc_library("fshost_test_fixture") {
  edition = "2021"
  testonly = true
  sources = [
    "src/disk_builder.rs",
    "src/fshost_builder.rs",
    "src/lib.rs",
    "src/mocks.rs",
  ]
  deps = [
    "//sdk/fidl/fuchsia.boot:fuchsia.boot_rust",
    "//sdk/fidl/fuchsia.device:fuchsia.device_rust",
    "//sdk/fidl/fuchsia.feedback:fuchsia.feedback_rust",
    "//sdk/fidl/fuchsia.fshost:fuchsia.fshost_rust",
    "//sdk/fidl/fuchsia.hardware.block:fuchsia.hardware.block_rust",
    "//sdk/fidl/fuchsia.io:fuchsia.io_rust",
    "//sdk/fidl/fuchsia.logger:fuchsia.logger_rust",
    "//sdk/fidl/fuchsia.process:fuchsia.process_rust",
    "//sdk/lib/device-watcher/rust",
    "//src/lib/fdio/rust:fdio",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-component-test",
    "//src/lib/fuchsia-fs",
    "//src/lib/fuchsia-runtime",
    "//src/lib/storage/block_client/rust:remote-block-device",
    "//src/lib/storage/fs_management/rust:fs_management",
    "//src/lib/storage/key-bag",
    "//src/lib/storage/ramdevice_client/rust",
    "//src/lib/storage/vfs/rust:vfs",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/storage/bin/blobfs:blobfs-component",
    "//src/storage/bin/minfs:minfs-component",
    "//src/storage/fxfs:fuchsia.fxfs_rust",
    "//src/storage/fxfs:fxfs_component",
    "//src/storage/fxfs-crypt",
    "//src/storage/testing/rust:storage-isolated-driver-manager",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:gpt",
    "//third_party/rust_crates:tracing",
    "//third_party/rust_crates:uuid",
    "//third_party/rust_crates:zerocopy",
    "//third_party/rust_crates:zstd",
    "//third_party/zstd",
  ]
}

# Generates an fshost integration test component. Includes the fshost component on which the test
# is exectuted.
#
#   use_rust_port (required)
#     [bool] Whether or not to use the rust port of fshost.
#
#   data_filesystem_format (required)
#     [string] The format of the data partition fshost exports. One of "fxfs", "minfs", or "f2fs".
#
template("fshost_integration_test") {
  assert(defined(invoker.use_rust_port), "use rust port not specified")
  assert(defined(invoker.data_filesystem_format),
         "data filesystem format not specified")

  _fshost_target = "test-fshost-${target_name}"
  fshost_component_and_config(_fshost_target) {
    testonly = true
    options = invoker.options
    options.use_rust_port = invoker.use_rust_port
  }

  _fshost_component_name = get_label_info(_fshost_target, "name")
  _test_bin = string_replace(target_name, "-", "_")
  _test_bin = "${_test_bin}_bin"
  rustc_test(_test_bin) {
    edition = "2021"
    source_root = "tests/fshost_integration_test.rs"
    sources = [
      "tests/fshost_integration_test.rs",
      "tests/migration.rs",
      "tests/wipe_storage.rs",
      "tests/write_data_file.rs",
    ]
    rustenv = [
      "FSHOST_COMPONENT_NAME=${_fshost_component_name}",
      "DATA_FILESYSTEM_FORMAT=${invoker.data_filesystem_format}",
    ]
    features = [ invoker.data_filesystem_format ]
    if (invoker.use_rust_port) {
      features += [ "fshost_rust" ]
    }
    deps = [
      ":fshost_test_fixture",
      "//sdk/fidl/fuchsia.fshost:fuchsia.fshost_rust",
      "//sdk/fidl/fuchsia.hardware.block:fuchsia.hardware.block_rust",
      "//sdk/fidl/fuchsia.hardware.block.partition:fuchsia.hardware.block.partition_rust",
      "//sdk/fidl/fuchsia.hardware.block.volume:fuchsia.hardware.block.volume_rust",
      "//sdk/fidl/fuchsia.io:fuchsia.io_rust",
      "//sdk/lib/device-watcher/rust",
      "//src/lib/fidl/rust/fidl",
      "//src/lib/fuchsia",
      "//src/lib/fuchsia-async",
      "//src/lib/fuchsia-component",
      "//src/lib/fuchsia-fs",
      "//src/lib/storage/block_client/rust:remote-block-device",
      "//src/lib/storage/fs_management/rust:fs_management",
      "//src/lib/zircon/rust:fuchsia-zircon",
      "//third_party/rust_crates:assert_matches",
      "//third_party/rust_crates:futures",
    ]
  }

  _shard_target = "${target_name}-shard"
  generated_file(_shard_target) {
    testonly = true
    contents = {
      program = {
        binary = "bin/${_test_bin}"
      }
    }
    outputs = [ "${target_out_dir}/${_shard_target}.json" ]
    output_conversion = "json"
    visibility = [ ":*" ]
  }
  _shard = get_target_outputs(":$_shard_target")
  _shard = _shard[0]

  _manifest_target = "${target_name}-manifest.cml"
  cmc_merge("$_manifest_target") {
    testonly = true
    sources = [
      "meta/fshost_integration_test.cml",
      _shard,
    ]
    deps = [ ":$_shard_target" ]
  }
  _manifest = get_target_outputs(":$_manifest_target")
  _manifest = _manifest[0]

  fuchsia_test_component(target_name) {
    manifest = _manifest
    deps = [
      ":$_fshost_target",
      ":$_manifest_target",
      ":$_test_bin",
    ]
  }
}

# Generates a test package for fshost with a set of integration tests for each filesystem type, for
# a given fshost language choice.
#
#   use_rust_port (required)
#     [bool] Whether or not to use the rust port of fshost.
#
template("fshost_integration_test_suite") {
  assert(defined(invoker.use_rust_port), "use rust port not specified")

  filesystem_formats = [
    "fxfs",
    "f2fs",
    "minfs",
  ]
  fshost_integration_tests = []

  foreach(filesystem_format, filesystem_formats) {
    fshost_integration_test_label = "${target_name}_${filesystem_format}"
    fshost_integration_test(fshost_integration_test_label) {
      data_filesystem_format = filesystem_format
      use_rust_port = invoker.use_rust_port
      options = default_integration_test_options
      options.data_filesystem_format = filesystem_format
    }
    fshost_integration_tests += [ ":${fshost_integration_test_label}" ]
  }

  # In addition to the basic filesystem formats, there are some modifying options we want to test.
  fshost_integration_fxfs_legacy_label = "${target_name}_fxfs_legacy_crypto"
  fshost_integration_test(fshost_integration_fxfs_legacy_label) {
    data_filesystem_format = "fxfs-legacy-crypto"
    use_rust_port = invoker.use_rust_port
    options = default_integration_test_options
    options.use_native_fxfs_crypto = false
    options.data_filesystem_format = "fxfs"
  }
  fshost_integration_tests += [ ":$fshost_integration_fxfs_legacy_label" ]

  fshost_integration_minfs_no_zxcrypt_label = "${target_name}_minfs_no_zxcrypt"
  fshost_integration_test(fshost_integration_minfs_no_zxcrypt_label) {
    data_filesystem_format = "minfs-no-zxcrypt"
    use_rust_port = invoker.use_rust_port
    options = default_integration_test_options
    options.no_zxcrypt = true
    options.data_filesystem_format = "minfs"
  }
  fshost_integration_tests += [ ":$fshost_integration_minfs_no_zxcrypt_label" ]

  fshost_integration_f2fs_no_zxcrypt_label = "${target_name}_f2fs_no_zxcrypt"
  fshost_integration_test(fshost_integration_f2fs_no_zxcrypt_label) {
    data_filesystem_format = "f2fs-no-zxcrypt"
    use_rust_port = invoker.use_rust_port
    options = default_integration_test_options
    options.no_zxcrypt = true
    options.data_filesystem_format = "f2fs"
  }
  fshost_integration_tests += [ ":$fshost_integration_f2fs_no_zxcrypt_label" ]

  fuchsia_test_package(target_name) {
    # Currently required because the data_formatted test causes Fxfs to log:
    #   ERROR: ... handle_start failed error=Journal replay failed
    test_specs = {
      log_settings = {
        max_severity = "ERROR"
      }
    }
    test_components = fshost_integration_tests
    deps = [ "//src/storage/testing:storage_driver_test_realm" ]
  }
}

fshost_integration_test_suite("fshost_integration_tests_cpp") {
  use_rust_port = false
}

fshost_integration_test_suite("fshost_integration_tests_rust") {
  use_rust_port = true
}

group("tests") {
  testonly = true
  deps = [
    ":fshost_integration_tests_cpp",
    ":fshost_integration_tests_rust",
  ]
}
