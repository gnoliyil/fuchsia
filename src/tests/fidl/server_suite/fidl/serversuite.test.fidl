// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fidl.serversuite;

using zx;

// The Runner coordinates test activity and is shared by multiple tests.
@discoverable
closed protocol Runner {
    // Check if a test with a given name is enabled before running it.
    strict IsTestEnabled(struct {
        test Test;
    }) -> (struct {
        is_enabled bool;
    });

    // Create a Target to run tests against.
    strict Start(resource struct {
        // Reporter to send events to.
        reporter client_end:Reporter;
        // Target server end to bind for this test.
        target AnyTarget;
    }) -> ();

    // A two-way function to test that the Runner is still responding.
    strict CheckAlive() -> ();
};

// Type which can hold the server end of any target type. The test case will
// create the channel and pass it to the runner in Start.
type AnyTarget = strict resource union {
    1: closed_target server_end:ClosedTarget;
    2: ajar_target server_end:AjarTarget;
    3: open_target server_end:OpenTarget;
    4: large_message_target server_end:LargeMessageTarget;
};

// Empty type used for valid but empty union variants.
type Empty = struct {};

// The Target is the server under test. This target is used for tests which use
// a closed protocol, or which don't care whether the protocol is open or
// closed.
closed protocol ClosedTarget {
    strict OneWayNoPayload();

    strict TwoWayNoPayload() -> ();

    strict TwoWayStructPayload(struct {
        v int8;
    }) -> (struct {
        v int8;
    });

    strict TwoWayTablePayload(table {
        1: v int8;
    }) -> (table {
        1: v int8;
    });

    strict TwoWayUnionPayload(union {
        1: v int8;
    }) -> (union {
        1: v int8;
    });

    strict TwoWayResult(strict union {
        1: payload string:MAX;
        2: error uint32;
    }) -> (struct {
        payload string:MAX;
    }) error uint32;

    strict GetHandleRights(resource struct {
        // Plain handle, there should be no rights or type checking.
        handle zx.handle;
    }) -> (struct {
            // Rights should be obtained by calling zx_object_get_info on |handle|
            // with topic ZX_INFO_HANDLE_BASIC.
        rights zx.rights;
    });

    strict GetSignalableEventRights(resource struct {
        handle zx.handle:<EVENT, zx.rights.SIGNAL>;
    }) -> (struct {
        // Rights should be obtained by calling zx_object_get_info on |handle|
        // with topic ZX_INFO_HANDLE_BASIC.
        rights zx.rights;
    });

    strict EchoAsTransferableSignalableEvent(resource struct {
        handle zx.handle;
    }) -> (resource struct {
        // The response handle should be the same as the request handle.
        handle zx.handle:<EVENT, zx.rights.TRANSFER | zx.rights.SIGNAL>;
    });

    strict CloseWithEpitaph(struct {
        epitaph_status int32;
    });

    strict ByteVectorSize(struct {
        vec vector<uint8>;
    }) -> (struct {
        n uint32;
    });

    strict HandleVectorSize(resource struct {
        vec vector<zx.handle:EVENT>;
    }) -> (struct {
        n uint32;
    });

    strict CreateNByteVector(struct {
        n uint32;
    }) -> (struct {
        vec vector<uint8>;
    });

    strict CreateNHandleVector(resource struct {
        n uint32;
    }) -> (resource struct {
        vec vector<zx.handle:EVENT>;
    });
};

// This is a version of Target only used for tests which care about having an
// ajar protocol. This is mostly used for Unknown Interaction testing.
ajar protocol AjarTarget {};

// This is a version of Target only used for tests which care about having an
// open protocol. This is mostly used for Unknown Interaction testing.
open protocol OpenTarget {
    // Ask the server to send either StrictEvent or FlexibleEvent.
    strict SendEvent(struct {
        event_type strict enum {
            STRICT = 1;
            FLEXIBLE = 2;
        };
    });

    strict -> StrictEvent();
    flexible -> FlexibleEvent();

    strict StrictOneWay();
    flexible FlexibleOneWay();

    strict StrictTwoWay() -> ();
    strict StrictTwoWayFields(struct {
        reply_with int32;
    }) -> (struct {
        some_field int32;
    });
    strict StrictTwoWayErr(strict union {
        1: reply_success Empty;
        2: reply_error int32;
    }) -> () error int32;
    strict StrictTwoWayFieldsErr(strict union {
        1: reply_success int32;
        2: reply_error int32;
    }) -> (struct {
        some_field int32;
    }) error int32;

    flexible FlexibleTwoWay() -> ();
    flexible FlexibleTwoWayFields(struct {
        reply_with int32;
    }) -> (struct {
        some_field int32;
    });
    flexible FlexibleTwoWayErr(strict union {
        1: reply_success Empty;
        2: reply_error int32;
    }) -> () error int32;
    flexible FlexibleTwoWayFieldsErr(strict union {
        1: reply_success int32;
        2: reply_error int32;
    }) -> (struct {
        some_field int32;
    }) error int32;
};

// The Target is the server under test. This target is used for tests which specifically involve
// FIDL's ability to send overly large (>64KiB) messages using a VMO, rather than the traditional
// channel transport.
//
// Every `Encode*(...) -> (...);` method should be implemented to simply respond back with a payload
// that contains equivalent data and symmetric handles to the one it receives (with one exception;
// see `EncodeUnboundedMaybeLargeResource` below).
//
// There is a bit of redundancy here - each of these methods actually duplicates the work of their
// corresponding `Decode*(...);` methods, as they must necessarily decode the supplied messges in
// order to echo them back. The reason this was done this way is that it makes "good" encoding tests
// much more language server agnostic - each language server no longer needs to know the specifics
// of how to build the type to be encoded, it just blindly echoes back the decoded values for the
// type it receives from the request instead. This setup makes language server specific bugs less
// likely.
open protocol LargeMessageTarget {
    @experimental_overflowing(request=true)
    strict DecodeBoundedKnownToBeSmall(BoundedKnownToBeSmall);
    @experimental_overflowing(request=true)
    strict DecodeBoundedMaybeLarge(BoundedMaybeLarge);

    // When sending a "large" message, the harness will need to create an unknown union variant with
    // a vector that is one byte bigger than the known variant.
    @experimental_overflowing(request=true)
    strict DecodeSemiBoundedBelievedToBeSmall(SemiBoundedBelievedToBeSmall);
    @experimental_overflowing(request=true)
    strict DecodeSemiBoundedMaybeLarge(SemiBoundedMaybeLarge);
    @experimental_overflowing(request=true)
    strict DecodeUnboundedMaybeLargeValue(UnboundedMaybeLargeValue);
    @experimental_overflowing(request=true)
    strict DecodeUnboundedMaybeLargeResource(UnboundedMaybeLargeResource);

    // All replies sent back for this method must be small messages.
    @experimental_overflowing(request=true, response=true)
    strict EncodeBoundedKnownToBeSmall(BoundedKnownToBeSmall) -> (BoundedKnownToBeSmall);
    @experimental_overflowing(request=true, response=true)
    strict EncodeBoundedMaybeLarge(BoundedMaybeLarge) -> (BoundedMaybeLarge);

    // All replies sent back for this method must be small messages, since it is impossible to
    // request an encoding of an unknown variant.
    @experimental_overflowing(request=true, response=true)
    strict EncodeSemiBoundedBelievedToBeSmall(SemiBoundedBelievedToBeSmall) -> (SemiBoundedBelievedToBeSmall);
    @experimental_overflowing(request=true, response=true)
    strict EncodeSemiBoundedMaybeLarge(SemiBoundedMaybeLarge) -> (SemiBoundedMaybeLarge);
    @experimental_overflowing(request=true, response=true)
    strict EncodeUnboundedMaybeLargeValue(UnboundedMaybeLargeValue) -> (UnboundedMaybeLargeValue);

    // If `populate_unset_handles` is false, the implementation should echo back `data` unchanged.
    // If `populate_unset_handles` is true, the implementation should check if any handle field is
    // absent, and fill those fields with valid handles, then send back the `data` populated with
    // those additional handles.
    //
    // Unlike the remaining methods for this target, `EncodeUnboundedMaybeLargeResource` needs to
    // test a case where a bad encoding is possible: a large message with 64 handles. To enable
    // this, the incoming type is wrapped in a container struct with an extra flag specifying
    // whether or not to "fill in" all unset optional handles, thereby forcing the return message to
    // carry 64 of them. For both of the "good" cases (small-message-with-64-handles and
    // large-message-with-63-handles), there should be no need to set this flag, as the harness-sent
    // type can be echoed back without issue.
    //
    // Note that because this method only tests encoding, and not decoding, it's fine if the size of
    // the incoming message is a bit off due to the extra bytes used by the flag - the only behavior
    // under test is the encoding of the response message, so the exact properties of the request
    // message are irrelevant as long as the response is properly sized to be large/small as needed.
    @experimental_overflowing(request=true, response=true)
    strict EncodeUnboundedMaybeLargeResource(resource struct {
        populate_unset_handles bool;
        data UnboundedMaybeLargeResource;
    }) -> (UnboundedMaybeLargeResource);
};

// Identifies which type of unknown method was received in the unknown
// interaction handler.
type UnknownMethodType = strict enum {
    // Unknown method was a one-way method, like "SomeMethod(...);"
    ONE_WAY = 1;
    // Unknown method was a two-way method, like "SomeMethod(...) -> (...);"
    TWO_WAY = 2;
};

type UnknownMethodInfo = struct {
    // Ordinal that was received in the interaction handler.
    ordinal uint64;
    // Whether the unknown method is one-way or two-way.
    unknown_method_type UnknownMethodType;
};

// TODO(fxbug.dev/102339): These could probably be combined with the GIDL error codes for common
// cases in some way.
type EncodingFailureKind = strict enum {
    LARGE_MESSAGE_64_HANDLES = 1;
};

type EncodingFailureInfo = struct {
    kind EncodingFailureKind;
};

// The Reporter sends results of the test to the test harness.
closed protocol Reporter {
    strict ReceivedOneWayNoPayload();

    // Report that the unknown interaction handler ran.
    strict ReceivedUnknownMethod(UnknownMethodInfo);

    strict ReceivedStrictOneWay();
    strict ReceivedFlexibleOneWay();

    // The following methods are used to test that encode exceptions (that is, encode errors that
    // may be caused by user input, rather than internal FIDL binding bugs). Examples of these include
    // exceeding constraints (too many items in a vector), attempting to send a large mesage with 64
    // handles, or trying to send a message with a no-longer-valid handle. The goal here is to test
    // that the encode error was reported to the user of the companion binding correctly.
    strict ReplyEncodingFailed(EncodingFailureInfo);
    strict EventEncodingFailed(EncodingFailureInfo);
};

type Test = flexible enum : uint32 {
    // ////////////////////////////////////////////////////////////////////////
    // basic_tests.cc
    // ////////////////////////////////////////////////////////////////////////

    SETUP = 1;
    IGNORE_DISABLED = 107;
    ONE_WAY_NO_PAYLOAD = 2;
    TWO_WAY_NO_PAYLOAD = 3;
    TWO_WAY_RESULT_WITH_PAYLOAD = 4;
    TWO_WAY_RESULT_WITH_ERROR = 5;
    TWO_WAY_STRUCT_PAYLOAD = 6;
    TWO_WAY_TABLE_PAYLOAD = 7;
    TWO_WAY_UNION_PAYLOAD = 8;

    // ////////////////////////////////////////////////////////////////////////
    // message_header_tests.cc
    // ////////////////////////////////////////////////////////////////////////

    ONE_WAY_WITH_NON_ZERO_TXID = 9;
    TWO_WAY_NO_PAYLOAD_WITH_ZERO_TXID = 10;
    UNKNOWN_ORDINAL_CAUSES_CLOSE = 11;
    BAD_MAGIC_NUMBER_CAUSES_CLOSE = 12;

    IGNORES_UNRECOGNIZED_AT_REST_FLAGS = 13;
    IGNORES_UNRECOGNIZED_DYNAMIC_FLAGS = 14;

    // ////////////////////////////////////////////////////////////////////////
    // coding_tests.cc
    // ////////////////////////////////////////////////////////////////////////

    BAD_PAYLOAD_ENCODING = 15;
    V1_TWO_WAY_NO_PAYLOAD = 105;
    V1_TWO_WAY_STRUCT_PAYLOAD = 106;

    // ////////////////////////////////////////////////////////////////////////
    // handle_rights_tests.cc
    // ////////////////////////////////////////////////////////////////////////

    CLIENT_SENDS_TOO_FEW_HANDLES = 16;
    CLIENT_SENDS_WRONG_HANDLE_TYPE = 17;
    CLIENT_SENDS_TOO_MANY_RIGHTS = 18;
    CLIENT_SENDS_TOO_FEW_RIGHTS = 19;
    CLIENT_SENDS_OBJECT_OVER_PLAIN_HANDLE = 20;
    SERVER_SENDS_WRONG_HANDLE_TYPE = 21;
    SERVER_SENDS_TOO_MANY_RIGHTS = 22;
    SERVER_SENDS_TOO_FEW_RIGHTS = 23;

    // ////////////////////////////////////////////////////////////////////////
    // epitaph_tests.cc
    // ////////////////////////////////////////////////////////////////////////

    SERVER_SENDS_EPITAPH = 24;
    SERVER_RECEIVES_EPITAPH_INVALID = 25;

    // ////////////////////////////////////////////////////////////////////////
    // limit_tests.cc
    // ////////////////////////////////////////////////////////////////////////

    REQUEST_MATCHES_BYTE_LIMIT = 26;
    REQUEST_MATCHES_HANDLE_LIMIT = 27;
    RESPONSE_MATCHES_BYTE_LIMIT = 28;
    RESPONSE_MATCHES_HANDLE_LIMIT = 29;
    RESPONSE_EXCEEDS_BYTE_LIMIT = 30;
    RESPONSE_EXCEEDS_HANDLE_LIMIT = 31;

    // ////////////////////////////////////////////////////////////////////////
    // unknown_interactions_tests.cc
    // ////////////////////////////////////////////////////////////////////////

    SEND_STRICT_EVENT = 32;
    SEND_FLEXIBLE_EVENT = 33;

    RECEIVE_STRICT_ONE_WAY = 34;
    RECEIVE_STRICT_ONE_WAY_MISMATCHED_STRICTNESS = 35;
    RECEIVE_FLEXIBLE_ONE_WAY = 36;
    RECEIVE_FLEXIBLE_ONE_WAY_MISMATCHED_STRICTNESS = 37;

    STRICT_TWO_WAY_RESPONSE = 38;
    STRICT_TWO_WAY_RESPONSE_MISMATCHED_STRICTNESS = 39;
    STRICT_TWO_WAY_NON_EMPTY_RESPONSE = 63;
    STRICT_TWO_WAY_ERROR_SYNTAX_RESPONSE = 40;
    STRICT_TWO_WAY_ERROR_SYNTAX_RESPONSE_MISMATCHED_STRICTNESS = 41;
    STRICT_TWO_WAY_ERROR_SYNTAX_NON_EMPTY_RESPONSE = 64;
    FLEXIBLE_TWO_WAY_RESPONSE = 42;
    FLEXIBLE_TWO_WAY_RESPONSE_MISMATCHED_STRICTNESS = 43;
    FLEXIBLE_TWO_WAY_NON_EMPTY_RESPONSE = 44;
    FLEXIBLE_TWO_WAY_ERROR_SYNTAX_RESPONSE_SUCCESS_RESULT = 45;
    FLEXIBLE_TWO_WAY_ERROR_SYNTAX_RESPONSE_ERROR_RESULT = 46;
    FLEXIBLE_TWO_WAY_ERROR_SYNTAX_NON_EMPTY_RESPONSE_SUCCESS_RESULT = 47;
    FLEXIBLE_TWO_WAY_ERROR_SYNTAX_NON_EMPTY_RESPONSE_ERROR_RESULT = 48;

    UNKNOWN_STRICT_ONE_WAY_OPEN_PROTOCOL = 49;
    UNKNOWN_FLEXIBLE_ONE_WAY_OPEN_PROTOCOL = 50;
    UNKNOWN_FLEXIBLE_ONE_WAY_HANDLE_OPEN_PROTOCOL = 51;
    UNKNOWN_STRICT_TWO_WAY_OPEN_PROTOCOL = 52;
    UNKNOWN_FLEXIBLE_TWO_WAY_OPEN_PROTOCOL = 53;
    UNKNOWN_FLEXIBLE_TWO_WAY_HANDLE_OPEN_PROTOCOL = 54;
    UNKNOWN_STRICT_ONE_WAY_AJAR_PROTOCOL = 55;
    UNKNOWN_FLEXIBLE_ONE_WAY_AJAR_PROTOCOL = 56;
    UNKNOWN_STRICT_TWO_WAY_AJAR_PROTOCOL = 57;
    UNKNOWN_FLEXIBLE_TWO_WAY_AJAR_PROTOCOL = 58;
    UNKNOWN_STRICT_ONE_WAY_CLOSED_PROTOCOL = 59;
    UNKNOWN_FLEXIBLE_ONE_WAY_CLOSED_PROTOCOL = 60;
    UNKNOWN_STRICT_TWO_WAY_CLOSED_PROTOCOL = 61;
    UNKNOWN_FLEXIBLE_TWO_WAY_CLOSED_PROTOCOL = 62;

    // //////////////////////////////////////////////////////////////////////////////////
    // large_message_tests.cc
    // //////////////////////////////////////////////////////////////////////////////////

    // Call the `DecodeBoundedKnownToBeSmall(...)` method with the largest possible small message.
    GOOD_DECODE_BOUNDED_KNOWN_SMALL_MESSAGE = 65;

    // Call the `DecodeBoundedMaybeLarge(...)` method with the largest possible small message.
    GOOD_DECODE_BOUNDED_MAYBE_SMALL_MESSAGE = 66;

    // Call the `DecodeBoundedMaybeLarge(...)` method with the smallest possible large message.
    GOOD_DECODE_BOUNDED_MAYBE_LARGE_MESSAGE = 67;

    // Call the `DecodeSemiBoundedBelievedToBeSmall(...)` method with the largest possible small
    // message. It is "unknownable" because a flexible type like the one used here might always be
    // larger than expected at decode time, due to possible evolution on the part of the encoder.
    GOOD_DECODE_SEMI_BOUNDED_UNKNOWABLE_SMALL_MESSAGE = 68;

    // Call the `DecodeSemiBoundedBelievedToBeSmall(...)` method with the smallest possible large
    // message. To accomplish this, the test harness will need to send an unkonwn variant exactly
    // identical to the known one, but one byte (plus the requisite padding) larger, thereby pushing
    // it into large message territory.
    GOOD_DECODE_SEMI_BOUNDED_UNKNOWABLE_LARGE_MESSAGE = 69;

    // Call the `DecodeSemiBoundedMaybeLarge(...)` method with the smallest possible large message.
    GOOD_DECODE_SEMI_BOUNDED_MAYBE_SMALL_MESSAGE = 70;

    // Call the `DecodeSemiBoundedMaybeLarge(...)` method with the largest possible small message.
    GOOD_DECODE_SEMI_BOUNDED_MAYBE_LARGE_MESSAGE = 71;

    // Call the `DecodeUnboundedMaybeLargeValue(...)` method with the largest possible small
    // message.
    GOOD_DECODE_UNBOUNDED_SMALL_MESSAGE = 72;

    // Call the `DecodeUnboundedMaybeLargeValue(...)` method with the smallest possible large
    // message.
    GOOD_DECODE_UNBOUNDED_LARGE_MESSAGE = 73;

    // Call the `DecodeUnboundedMaybeLargeResource(...)` method with the largest, highest handle
    // count small message possible.
    GOOD_DECODE_64_HANDLE_SMALL_MESSAGE = 74;

    // Call the `DecodeUnboundedMaybeLargeResource(...)` method with the smallest, highest handle
    // count large message possible.
    GOOD_DECODE_63_HANDLE_LARGE_MESSAGE = 75;

    // These tests ensure that otherwise well-formed unknown messages of either size are correctly
    // read by a protocol with large message aware methods. They don't use any of the named methods
    // on `LargeMessageTarget`, and instead send an unknown ordinal directly over the wire. The test
    // harness should send the largest possible small message, and the smallest possible large
    // message, respectively.
    GOOD_DECODE_UNKNOWN_SMALL_MESSAGE = 76;
    GOOD_DECODE_UNKNOWN_LARGE_MESSAGE = 77;

    // Call the `EncodeBoundedKnownToBeSmall(...) -> (...)` method with the largest possible small
    // message.
    GOOD_ENCODE_BOUNDED_KNOWN_SMALL_MESSAGE = 78;

    // Call the `EncodeBoundedMaybeLarge(...) -> (...)` method with the largest possible small
    // message.
    GOOD_ENCODE_BOUNDED_MAYBE_SMALL_MESSAGE = 79;

    // Call the `EncodeBoundedMaybeLarge(...) -> (...)` method with the smallest possible large
    // message.
    GOOD_ENCODE_BOUNDED_MAYBE_LARGE_MESSAGE = 80;

    // Call the `EncodeSemiBoundedBelievedToBeSmall(...) -> (...)` method with the largest possible
    // small message. Even though the method is called "believed to be small", this is only a
    // "belief" at decode time. At encode time, it is a certainty, because the encode-side code
    // always knows the boundedness of the type. This means that there is no need for a similar test
    // for `GOOD_ENCODE_SEMI_BOUNDED_KNOWN_LARGE_MESSAGE`, as such a thing is impossible without
    // encoding unknown data, which is not allowed.
    GOOD_ENCODE_SEMI_BOUNDED_KNOWN_SMALL_MESSAGE = 81;

    // Call the `EncodeSemiBoundedMaybeLarge(...) -> (...)` method with the smallest possible large
    // message.
    GOOD_ENCODE_SEMI_BOUNDED_MAYBE_SMALL_MESSAGE = 82;

    // Call the `EncodeSemiBoundedMaybeLarge(...) -> (...)` method with the largest possible small
    // message.
    GOOD_ENCODE_SEMI_BOUNDED_MAYBE_LARGE_MESSAGE = 83;

    // Call `EncodeUnboundedMaybeLargeValue(...) -> (...)` with the largest possible small message.
    GOOD_ENCODE_UNBOUNDED_SMALL_MESSAGE = 84;

    // Call `EncodeUnboundedMaybeLargeValue(...) -> (...)` with the smallest possible large message.
    GOOD_ENCODE_UNBOUNDED_LARGE_MESSAGE = 85;

    // Call `EncodeUnboundedMaybeLargeResource(...) -> (...)` with the largest possible small
    // message and 63 handles.
    GOOD_ENCODE_64_HANDLE_SMALL_MESSAGE = 86;

    // Call `EncodeUnboundedMaybeLargeResource(...) -> (...)` with the smallest possible large
    // message and 64 handles.
    GOOD_ENCODE_63_HANDLE_LARGE_MESSAGE = 87;

    // All large message related decode errors that can be checked before the decoder attempts to
    // read the overflow buffer VMO. All tests should be executed using the method
    // `DecodeUnboundedMaybeLargeResource(...)`.
    BAD_DECODE_BYTE_OVERFLOW_FLAG_SET_ON_SMALL_MESSAGE = 88;
    BAD_DECODE_BYTE_OVERFLOW_FLAG_UNSET_ON_LARGE_MESSAGE = 89;
    BAD_DECODE_LARGE_MESSAGE_INFO_OMITTED = 90;
    BAD_DECODE_LARGE_MESSAGE_INFO_TOO_SMALL = 91;
    BAD_DECODE_LARGE_MESSAGE_INFO_TOO_LARGE = 92;
    BAD_DECODE_LARGE_MESSAGE_INFO_TOP_HALF_UNZEROED = 93;
    BAD_DECODE_LARGE_MESSAGE_INFO_BYTE_COUNT_IS_ZERO = 94;
    BAD_DECODE_LARGE_MESSAGE_INFO_BYTE_COUNT_BELOW_MINIMUM = 95;
    BAD_DECODE_LARGE_MESSAGE_NO_HANDLES = 96;
    BAD_DECODE_LARGE_MESSAGE_TOO_FEW_HANDLES = 97;
    BAD_DECODE_LARGE_MESSAGE_64_HANDLES = 98;

    // All large message related decode errors that can only be checked after the receiver attempts
    // to read the last handle on the message as a VMO. All tests should be executed using the
    // method `DecodeUnboundedMaybeLargeResource(...)`.
    BAD_DECODE_LARGE_MESSAGE_LAST_HANDLE_NOT_VMO = 99;
    BAD_DECODE_LARGE_MESSAGE_LAST_HANDLE_INSUFFICIENT_RIGHTS = 100;
    BAD_DECODE_LARGE_MESSAGE_LAST_HANDLE_EXCESSIVE_RIGHTS = 101;
    BAD_DECODE_LARGE_MESSAGE_VMO_TOO_SMALL = 102;
    BAD_DECODE_LARGE_MESSAGE_INFO_BYTE_COUNT_TOO_SMALL = 103;
    BAD_DECODE_LARGE_MESSAGE_INFO_BYTE_COUNT_TOO_LARGE = 104;

    // The lone large message encode test (ie, the only way a user can get an error by attempting to
    // send an otherwise well-formed FIDL type). This test should be exercised by sending the
    // smallest possible large message and 64 handles over the wire using the
    // `EncodeUnboundedMaybeLargeResource(...) -> (...)` method.
    BAD_ENCODE_64_HANDLE_LARGE_MESSAGE = 108;

    // Next available: 109
};
