# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/test.gni")
import("//src/starnix/kernel/starnix.gni")
import("//src/starnix/tests/build/starnix_linux_test_component.gni")

group("tests") {
  testonly = true
  deps = [ ":starnix_syscall_tests" ]
  if (is_linux) {
    deps += [
      ":extended_pstate_initial_state_child",
      ":syscalls_test_bin",
    ]
  }
}

source_set("test_utils") {
  testonly = true

  sources = [
    "proc_test_base.h",
    "syscall_matchers.h",
    "task_test.h",
    "test_helper.cc",
    "test_helper.h",
  ]
  public_deps = [
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
  deps = [ "//src/lib/fxl" ]
}

if (target_cpu == "x64" || target_cpu == "arm64") {
  resource("fuse_overlayfs") {
    sources = []
    if (target_cpu == "x64") {
      sources += [ "//prebuilt/starnix/fuse-overlayfs-amd64/fuse-overlayfs" ]
    }
    if (target_cpu == "arm64") {
      sources += [ "//prebuilt/starnix/fuse-overlayfs-arm64/fuse-overlayfs" ]
    }
    outputs = [ "data/fuse-overlayfs" ]
  }
} else {
  group("fuse_overlayfs") {
  }
}

test("syscalls_test_bin") {
  exclude_toolchain_tags = [ "asan" ]
  sources = [
    "abort_test.cc",
    "bpf_test.cc",
    "custom_artifact_test.cc",
    "epoll_test.cc",
    "extended_pstate_initial_state.cc",
    "fault_test.cc",
    "fcntl_test.cc",
    "fs_test.cc",
    "fuse_test.cc",
    "input_test.cc",
    "ioctl_test.cc",
    "mmap_test.cc",
    "mount_test.cc",
    "pipe_test.cc",
    "poll_test.cc",
    "prctl_test.cc",
    "proc_test.cc",
    "read_write_test.cc",
    "restart_read_test.cc",
    "seccomp_test.cc",
    "signal_handling_test.cc",
    "socket_test.cc",
    "sw_breakpoint_test.cc",
    "task_test.cc",
    "terminal_test.cc",
    "test_helper_test.cc",
    "timerfd_test.cc",
    "trivial_test.cc",
    "udev_test.cc",
    "uio_test.cc",
    "vdso_test.cc",
    "waitpid_exit_signal_test.cc",
    "waitpid_flags_test.cc",
  ]
  deps = [
    ":test_utils",
    "//sdk/lib/stdcompat",
    "//src/lib/files",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/fbl",
  ]
  include_dirs = [
    "//third_party/android/platform/bionic/libc/kernel/uapi",
    "//third_party/android/platform/bionic/libc/kernel/android/uapi",
  ]
  if (target_cpu == "x64") {
    include_dirs +=
        [ "//third_party/android/platform/bionic/libc/kernel/uapi/asm-x86" ]
  } else if (target_cpu == "arm64") {
    include_dirs +=
        [ "//third_party/android/platform/bionic/libc/kernel/uapi/asm-arm64" ]
  }
}

test("crash") {
  exclude_toolchain_tags = [ "asan" ]
  sources = [ "crash.cc" ]
  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gtest",
  ]
}

if (is_linux) {
  executable("extended_pstate_initial_state_child") {
    exclude_toolchain_tags = [ "instrumented" ]
    sources = [ "extended_pstate_initial_state_child.cc" ]

    # This binary does not use libc or a dynamic linker since it is testing the state
    # presented to _start.
    disable_syslog_backend = true
    cflags = [ "-fno-builtin" ]
    ldflags = [
      "-nostdlib",
      "-nostartfiles",
      "-static",
    ]
    configs -= [
      "//build/config/linux:default-pie",
      "//build/config/linux:implicit-host-libs",
    ]
  }
}

resource("extended_pstate_initial_state_child_resource") {
  binary_name = "extended_pstate_initial_state_child"
  exe_label = ":${binary_name}($target_linux_toolchain)"
  out_dir = get_label_info(exe_label, "root_out_dir")
  sources = [ "${out_dir}/${binary_name}" ]
  outputs = [ "data/tests/${binary_name}" ]
  deps = [ exe_label ]
}

starnix_linux_test_component("syscalls_test") {
  test_label = ":syscalls_test_bin"
  test_binary = "syscalls_test_bin"
  deps = [ ":fuse_overlayfs" ]
  uses_expectations = true
}

starnix_linux_test_component("crash_test") {
  test_label = ":crash"
  test_binary = "crash"
}

group("container_resources") {
  deps = [
    "//src/connectivity/network/netstack:component",
    "//src/starnix/containers:data_tmp_target",
    "//src/starnix/containers:default_init",
    "//src/starnix/containers/debian:system_image",
  ]
}

fuchsia_test_package("starnix_syscall_tests") {
  test_components = [
    ":syscalls_test",
    ":crash_test",
  ]

  subpackages = [ "//src/starnix/kernel:starnix_kernel_package" ]

  deps = [
    ":container_resources",
    ":extended_pstate_initial_state_child_resource",
    "//src/lib/testing/expectation:expectation_comparer",
  ]
}
