// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    actions: [
        // Import the default behaviour (gVisor tests running on tmpfs)
        {
            include: "default.json5",
        },

        // Define tests that failed when running on Fxfs
        {
            type: "expect_failure",
            matchers: [
                // access_test
                "AccessTest.UsrReadOnly",
                "AccessTest.UsrReadExec",
                "AccessTest.UsrReadWriteExec",

                // chown_test
                "ChownKinds/ChownParamTest.ChownFileSucceedsAsRoot/*",

                // exec_test
                "ExecTest.SymlinkLimitRefreshedForInterpreter",

                // fallocate_test
                "AllocateTest.Fallocate",

                // fcntl_test
                "FcntlLockTest.SetLockAcrossRename",

                // fifo_test
                "FifoTest.Fifo",
                "FifoTest.FifoOpenRDWR",
                "FifoTest.FifoOtrunc",
                "FifoTest.FifoTruncNoOp",
                "FifoTest.MknodAtFIFO",

                // getdents_test
                "GetdentsTest/*.LargeDir",
                "GetdentsTest/*.PartialBuffer",
                "GetdentsTest/*.SeekResetsCursor",
                "GetdentsTest/*.SmallDir",
                "GetdentsTest/*.VerifyEntries",
                "GetdentsTest/*.VerifyPadding",
                "ReaddirTest.GoneAfterRenameCache",

                // inotify_test
                "InotifyTest.NotifyNoDeadlock",

                // link_test
                "LinkTest.AbsPathsNonDirFDsWithOpath",
                "LinkTest.AbsPathsWithNonDirFDs",
                "LinkTest.CanCreateLinkFile",
                "LinkTest.LinkDoesNotFollowSymlinks",
                "LinkTest.LinkatDoesNotFollowSymlinkByDefault",
                "LinkTest.LinkatWithSymlinkFollow",
                "LinkTest.NewDirFDWithOpath",
                "LinkTest.WithNewDirFD",
                "LinkTest.WithOldDirFD",

                // mknod_test
                "MknodTest.MknodAtFIFO",
                "MknodTest.RegularFilePermissions",
                "MknodTest.Socket",

                // open_create_test
                "CreateTest.CreateWithReadFlagNotAllowedByMode",
                "CreateTest.CreateWithWriteFlagNotAllowedByMode",
                "CreateTest.HonorsUmask",

                // open_test
                "OpenTest.CanTruncateWithStrangePermissions",
                "OpenTest.OpenWithOpath",
                "OpenTest.Truncate",

                // read_test
                "ReadTest.PartialReadSIGSEGV",

                // rename_test
                "RenameTest.DirectoryDoesNotOverwriteNonemptyDirectory",
                "RenameTest.DirectoryOverwritesDirectoryLinkCount",
                "RenameTest.DirectoryOverwritesEmptyDirectory",
                "RenameTest.DirectoryToChildDirectory",
                "RenameTest.DirectoryToParentDirectory",
                "RenameTest.DirectoryToSameDirectory",
                "RenameTest.DirectoryWithOpenFdOverwritesEmptyDirectory",
                "RenameTest.FileDoesNotOverwriteDirectory",
                "RenameTest.FileOverwritesFile",
                "RenameTest.FileToChildDirectory",
                "RenameTest.FileToParentDirectory",
                "RenameTest.FileToSameDirectory",
                "RenameTest.FileWithOpenFd",
                "RenameTest.RenameAfterWritableFDAndChmod",
                "RenameTest.TargetIsAncestorOfSource",

                // stat_test
                "StatTest.FstatatSymlinkDir",
                "StatTest.FstatatSymlinkDirWithTrailingSlash",
                "StatTest.FstatatSymlinkDirWithTrailingSlashSameInode",
                "StatTest.LstatSymlinkDir",
                "StatTest.StatDoesntChangeAfterRename",

                // stat_times_test
                "StatTimesTest.FileRename",
                "StatTimesTest.FileRenameOpenFD",

                // xattr_test
                "XattrTest.GetXattr",
                "XattrTest.GetXattrNonexistentName",
                "XattrTest.GetXattrNullValue",
                "XattrTest.GetXattrNullValueAndZeroSize",
                "XattrTest.GetXattrSizeLargerThanValue",
                "XattrTest.GetXattrSizeSmallerThanValue",
                "XattrTest.GetXattrSizeTooLarge",
                "XattrTest.GetXattrZeroSize",
                "XattrTest.LXattrOnNonsymlink",
                "XattrTest.ListXattr",
                "XattrTest.ListXattrNoXattrs",
                "XattrTest.ListXattrNullBuffer",
                "XattrTest.ListXattrSizeTooSmall",
                "XattrTest.ListXattrZeroSize",
                "XattrTest.RemoveXattr",
                "XattrTest.RemoveXattrNonexistentName",
                "XattrTest.SetXattrCreateFlag",
                "XattrTest.SetXattrNullValueAndNonzeroSize",
                "XattrTest.SetXattrNullValueAndZeroSize",
                "XattrTest.SetXattrReplaceFlag",
                "XattrTest.SetXattrReplaceWithLarger",
                "XattrTest.SetXattrReplaceWithSmaller",
                "XattrTest.SetXattrSizeSmallerThanValue",
                "XattrTest.SetXattrSizeTooLarge",
                "XattrTest.SetXattrValueTooLargeButOKSize",
                "XattrTest.SetXattrZeroSize",
                "XattrTest.TrustedNamespaceWithCapSysAdmin",
                "XattrTest.TrustedNamespaceWithoutCapSysAdmin",
                "XattrTest.XattrOnDirectory",
                "XattrTest.XattrReadOnly",
                "XattrTest.XattrTrustedWithNonadmin",
                "XattrTest.XattrWithFD",
                "XattrTest.XattrWriteOnly",
            ],
        },
        {
            type: "skip",
            matchers: [
                // These tests pass and fail in different cases
                // Skip these tests for now until it can pass in all cases
                "Pwrite64.Overflow",
                "ExecTest.InterpreterScriptNoPath",
                "AbstractUnixSockets/UnixSocketPairTest.SendFromMmapBeyondEof/*",
                "AllUnixDomainSockets/UnixSocketPairTest.SendFromMmapBeyondEof/*",
                "Renameat2Test.NoReplaceSuccess",

                // epoll_test - these tests hang
                "EpollTest.AllWritable",
                "EpollTest.CloseFile",
                "EpollTest.CycleOfOneDisallowed",
                "EpollTest.CycleOfThreeDisallowed",
                "EpollTest.DoubleLayerEpoll",
                "EpollTest.EdgeTriggered",
                "EpollTest.EpollPwait2Timeout",
                "EpollTest.LastNonWritable",
                "EpollTest.LastReadable",
                "EpollTest.Oneshot",
                "EpollTest.PipeReaderHupAfterWriterClosed",
                "EpollTest.ReadyMutexCircularity",
                "EpollTest.RegularFiles",
                "EpollTest.Timeout",
                "EpollTest.TimeoutNoFds",
                "EpollTest.UnblockWithNewFD",
                "EpollTest.WaitThenUnblock",

                // inotify_test - these tests hang
                "Inotify.SymlinkGeneratesCreateEvent",

                // msync_test
                // Test 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23 fails
                // sometimes. Skip all tests for now.
                "All/MsyncFullParamTest.InvalidateUnlockedSucceeds/*",
                "All/MsyncFullParamTest.NormallySucceeds/*",
                "All/MsyncFullParamTest.UnalignedAddressFails/*",
                "All/MsyncFullParamTest.UnalignedLengthSucceeds/*",

                // mmap_test - this test panics because of a "memory stomping bug"
                "MMapFileTest.WriteSharedBeyondEnd",

                // mount_test - these tests hang
                "MountTest.UmountNoFollow",

                // open_test - these tests hang
                "OpenTest.OpenNoFollowSymlink",
                "OpenTest.SymlinkRecurse",

                // pty_test - flaky
                // Specifically, the following tests were identified as flaky when running on Fxfs.
                // Until we can find out why thse tests are flaky, skip all tests that are part of
                // JobControlTest
                //  * "JobControlTest.ReleaseTTY",
                //  * "JobControlTest.SetForegroundProcessGroupDifferentSession",
                //  * "JobControlTest.SetForegroundProcessGroupSIGTTOUBackground",
                //  * "JobControlTest.SetForegroundProcessGroupSIGTTOUBlocked"
                "JobControlTest.*",

                // select_test - this test causes a starnix kernel panic because it uses an invalid
                // watch handle and unwraps the result.
                "SelectTest.SetrlimitCallNOFILE",

                // sendfile_test - these tests hang
                "SendFileTest.SendZeroBytes",
                "SendFileTest.InvalidOffset",
                "SendFileTest.Overflow",
                "SendFileTest.SendTrivially",
                "SendFileTest.SendTriviallyWithBothFilesReadWrite",
                "SendFileTest.SendAndUpdateFileOffset",
                "SendFileTest.SendAndUpdateFileOffsetFromNonzeroStartingPoint",
                "SendFileTest.SendAndUpdateGivenOffset",
                "SendFileTest.DoNotSendfileIfOutfileIsAppendOnly",
                "SendFileTest.AppendCheckOrdering",
                "SendFileTest.DoNotSendfileIfOutfileIsNotWritable",
                "SendFileTest.DoNotSendfileIfInfileIsNotReadable",
                "SendFileTest.DoNotSendANegativeNumberOfBytes",
                "SendFileTest.SendTheCorrectNumberOfBytesEvenIfWeTryToSendTooManyBytes",
                "SendFileTest.SendToNotARegularFile",
                "SendFileTest.SendPipeWouldBlock",
                "SendFileTest.SendPipeEOF",
                "SendFileTest.SendToFullPipeReturnsEAGAIN",
                "SendFileTest.SendPipeBlocks",
                "SendFileTest.SendFileToPipe",
                "SendFileTest.SendFileToSelf",
                "SendFileTest.LargeCount",

                // setgid_test
                // These tests pass and fail in different cases
                // Skip these tests for now until it can pass in all cases
                "FileModes/FileModeTest.TruncateFile/*",
                "FileModes/FileModeTest.WriteToFile/*",
                "SetgidDirTest.ChownDirDoesNotClear",
                "SetgidDirTest.ChownFileClears",
                "SetgidDirTest.ChownNoExecFileDoesNotClear",
                "SetgidDirTest.Control",
                "SetgidDirTest.CreateDir",
                "SetgidDirTest.CreateFile",
                "SetgidDirTest.NoGroupExec",
                "SetgidDirTest.OldDir",
                "SetgidDirTest.OldFile",

                // stat_test - these tests hang
                "StatTest.LstatELOOPPath",

                // sticky_test - these tests hang
                "StickyTest.StickyBitCapFOWNER",
                "StickyTest.StickyBitPermDenied",
                "StickyTest.StickyBitSameUID",

                // symlink_test - gave fatal signals
                "AbsAndRelTarget/ParamSymlinkTest.OpenLinkNoFollowFails/*",
                "AbsAndRelTarget/ParamSymlinkTest.OpenLinkExclFails/*",
                "AbsAndRelTarget/ParamSymlinkTest.CreateExistingParentLink/*",
                "AbsAndRelTarget/ParamSymlinkTest.CreateExistingSelfLink/*",
                "AbsAndRelTarget/ParamSymlinkTest.OpenLinkCreatesTarget/*",
                "AbsAndRelTarget/ParamSymlinkTest.CreatLinkCreatesTarget/*",
                "SymlinkTest.*",

                // xattr_test - these tests hang
                "XattrTest.LXattrOnSymlink",
                "XattrTest.XattrOnSymlink",
            ],
        },
    ],
}
