// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    actions: [
        {
            type: "expect_pass",
            matchers: [
                "*",
            ],
        },
        {
            type: "expect_failure",
            matchers: [
                // affinity_test
                "AffinityTest.SchedSetAffinityInvalidPID",
                "AffinityTest.SchedSetAffinityZeroMask",
                "AffinityTest.SchedSetAffinityNonexistentCPUDropped",
                "AffinityTest.LargeCpuMask",
                "AffinityTest.NewThread",
                "AffinityTest.SchedGetAffinityInvalidPID",
                "AffinityTest.ConsistentWithProcCpuInfo",
                "AffinityTest.ConsistentWithProcStat",
                "AffinityTest.Sanity",

                // aio_test
                "AIOTest.BasicWrite",
                "AIOTest.MremapExpansion",
                "AIOTest.BadWrite",
                "BadOffset/AIOReadWriteParamTest.BadOffset/3",
                "AIOTest.ExitWithPendingIo",
                "AIOTest.Mprotect",
                "AIOTest.Mremap",
                "AIOTest.Timeout",
                "AIOTest.CloneVm",
                "BadIOVecs/AIOVectorizedParamTest.BadIOVecs/0",
                "BadIOVecs/AIOVectorizedParamTest.BadIOVecs/1",
                "BadOffset/AIOReadWriteParamTest.BadOffset/1",
                "BadOffset/AIOReadWriteParamTest.BadOffset/0",
                "BadOffset/AIOReadWriteParamTest.BadOffset/2",

                // chroot_test
                "ChrootTest.ProcMemSelfFdsNoEscapeProcOpen",
                "ChrootTest.ProcMountsMountinfoNoEscape",

                // chown_test
                "ChownKinds/ChownParamTest.ChownFilePermissionDenied/*",
                "ChownKinds/ChownParamTest.ChownFileSucceedsAsRoot/*",

                // clock_nanosleep_test
                "ClockNanosleepProcessTest.SleepFiveSeconds",
                "Sleepers/WallClockNanosleepTest.InterruptedNanosleep/*",
                "Sleepers/WallClockNanosleepTest.SleepUntil/0",

                // epoll_test - https://fxbug.dev/79261
                "EpollTest.CloseFile",

                // eventfd_test - splice() isn't implemented fxbug.dev/119324
                "EventfdTest.SpliceReturnsEINVAL",

                // exec_test
                // Disable InterpreterScript because the script has the path /bin/bash which is not
                // where bash is located on the Android system image.
                "ExecTest.InterpreterScript",
                "ProcSelfExe.ChangesAcrossExecve",

                // This test attempts to successfully open a symlink in the test dir that points to
                // `/bin/echo` using NOFOLLOW. The goal is to test that despite specifying NOFOLLOW,
                // ancestor symlinks are always followed. NOFOLLOW only applies to the final node,
                // which must not be a symlink.
                //
                // The test follows the test dir symlink to `/bin` which points to `/system/bin`.
                //
                // Sadly, on the Android system image, `/system/bin/echo` points to `toybox`, making
                // the final node a symlink which breaks this test.
                "ExecveatTest.SymlinkNoFollowIgnoreSymlinkAncestor",

                // This test attempts to open `/bin` with read permissions.
                //
                // On the Android system image, this points to `/system/bin` which
                // has `0751` mode permission bits (`drwxr-x--x`).
                //
                // A non-root user cannot read the contents of this directory.
                //
                // Even if the test were to be running under the root user, the `echo` file inside
                // is a symlink that points to `toybox`, meaning that using NOFOLLOW will fail.
                "ExecveatTest.SymlinkNoFollowWithNormalFile",

                // exec_binary_test
                //
                // These tests try to use `/tmp` and that doesn't exist in
                // the Android system image (it's actually under `/data/tmp`).
                "InterpreterScriptTest.Whitespace",
                "InterpreterScriptTest.MaxRecursion",

                // exit_test
                "ExitTest.SigkillZombieGroup",
                "ExitTest.SigkillZombieThread",

                // fallocate_test
                "AllocateTest.FallocateRlimit",

                // fcntl_test
                "FcntlLockTest.TestOFDBasicLock",
                "FcntlLockTest.TestOFDNoUnlockOnClose",
                "FcntlLockTest.TestOFDUnlocksOnLastClose",
                "FcntlLockTest.TestOFDInheritsLockAfterDup",
                "FcntlLockTest.TestOFDLocksHoldAfterExec",
                "FcntlLockTest.TestOFDGetLkReturnsNegPID",
                "FcntlLockTest.TestOFDCanUpgradeLock",
                "FcntlTest.SetFileStatusFlagWithOpath",
                "FcntlTest.BadFcntlsWithOpath",
                "FcntlTest.GetAllFlags",
                "FcntlTest.SetFlags",
                "FcntlTest.SetFlO_ASYNC",
                "FcntlTest.DupAfterO_ASYNC",
                "FcntlTest.GetOwnExNone",
                "FcntlTest.SetOwnInvalidPid",
                "FcntlTest.SetOwnInvalidPgrp",
                "FcntlTest.SetOwnPgrp",
                "FcntlTest.SetOwnUnset",
                "FcntlTest.SetOwnExInvalidTid",
                "FcntlTest.SetOwnExInvalidPid",
                "FcntlTest.SetOwnExInvalidPgrp",
                "FcntlTest.SetOwnExTid",
                "FcntlTest.SetOwnExPid",
                "FcntlTest.SetOwnExPgrp",
                "FcntlTest.SetOwnExUnset",
                "FcntlTest.GetOwnExTid",
                "FcntlTest.GetOwnExPid",
                "FcntlTest.GetOwnExPgrp",
                "FcntlTest.SetSig",
                "FcntlTest.SetSigDefaultsToZero",
                "FcntlTest.SetSigToDefault",
                "FcntlTest.SetSigInvalid",
                "FcntlTest.SetSigInvalidDoesNotResetPreviousChoice",
                "FcntlTest.SetFlSetOwnSetSigDoNotRace",
                "FcntlSignalTest.SetSigDefault",
                "FcntlSignalTest.SignalFD",
                "FcntlSignalTest.SignalFDSetSigAfterASYNC",
                "FcntlSignalTest.SetSigCustom",
                "FcntlSignalTest.SetSigUnregisterStillGetsSigio",
                "FcntlSignalTest.SetSigWithSigioStillGetsSiginfo",
                "FcntlSignalTest.SetSigDupThenCloseOld",
                "FcntlSignalTest.SetSigDupThenCloseNew",
                "FcntlSignalTest.SetSigDupOldRegistered",
                "FcntlSignalTest.SetSigDupNewRegistered",
                "FcntlSignalTest.SetSigDupBothRegistered",
                "FcntlSignalTest.SetSigDupBothRegisteredAfterDup",
                "FcntlSignalTest.SetSigDupUnregisterOld",
                "FcntlSignalTest.SetSigDupUnregisterNew",
                "FifoTest.OpenBlockedAndInterrupted",
                "FcntlLockTest.GetLockRespectsPIDNamespace",

                // fork_test
                "ForkTest.Alarm",
                "CloneTest.NewUserNamespacePermitsAllOtherNamespaces",
                "CloneTest.NonCanonicalTLS",

                // fpsig_nested_test
                "FPSigTest.NestedSignals",

                // fuse_test
                "FuseTest.RejectBadInit",

                // futex_test
                "PrivateFutexTest.WakeOp0Set",
                "PrivateFutexTest.WakeOp0Add",
                "PrivateFutexTest.WakeOp0Or",
                "PrivateFutexTest.WakeOp0Andn",
                "PrivateFutexTest.WakeOp0Xor",
                "SharedPrivate/PrivateAndSharedFutexTest.PIBasic/*",
                "SharedPrivate/PrivateAndSharedFutexTest.PIConcurrency/*",
                "SharedPrivate/PrivateAndSharedFutexTest.PIWaiters/*",
                "SharedPrivate/PrivateAndSharedFutexTest.PITryLock/*",

                // getcpu_host_test and getcpu_test
                "GetcpuTest.IsValidCpuStress",

                // getdents_test
                "ReaddirTest.RootContainsBasicDirectories",

                // getrusage_test
                "GetrusageTest.Grandchild",
                "GetrusageTest.BasicFork",
                "GetrusageTest.Wait4",
                "GetrusageTest.IgnoreSIGCHLD",
                "GetrusageTest.IgnoreZombie",

                // inotify_test
                "Inotify.AddWatchOnInvalidPathFails",
                "Inotify.ReadingFileGeneratesAccessEvent",
                "Inotify.IllegalPwrite",
                "Inotify.MultipleInotifyInstancesAndWatchesAllGetEvents",
                "Inotify.RemovingWatchGeneratesEvent",
                "Inotify.AddWatchOnInvalidFdFails",
                "Inotify.RemoveWatchAfterDeletingFileFails",
                "Inotify.DuplicateWatchRemovalFails",
                "Inotify.CreatingFileGeneratesEvents",
                "Inotify.DeletingChildGeneratesEvents",
                "Inotify.InOnlyDirFlagRespected",
                "Inotify.WritingFileGeneratesModifyEvent",
                "Inotify.SizeZeroReadWriteGeneratesNothing",
                "Inotify.FailedFileCreationGeneratesNoEvents",
                "Inotify.MaskAddMergesWithExistingEventMask",
                "Inotify.MoveWatchedTargetGeneratesEvents",
                "Inotify.RmdirOnWatchedTargetGeneratesEvent",
                "Inotify.ChildrenDeletionInWatchedDirGeneratesEvent",
                "Inotify.CoalesceEvents",
                "Inotify.DupFD",
                "Inotify.NestedWatches",
                "Inotify.ZeroLengthReadWriteDoesNotGenerateEvent",
                "Inotify.ConcurrentThreadsGeneratingEvents",
                "Inotify.ChmodGeneratesAttribEvent",
                "Inotify.TruncateGeneratesModifyEvent",
                "Inotify.GetdentsGeneratesAccessEvent",
                "Inotify.SymlinkGeneratesCreateEvent",
                "Inotify.SymlinkFollow",
                "Inotify.UtimesGeneratesAttribEvent",
                "Inotify.HardlinksReuseSameWatch",
                "Inotify.MkdirGeneratesCreateEventWithDirFlag",
                "Inotify.EventsGoUpAtMostOneLevel",
                "Inotify.DuplicateWatchReturnsSameWatchDescriptor",
                "Inotify.UnmatchedEventsAreDiscarded",
                "Inotify.WatchSetAfterOpenReportsCloseFdEvent",
                "Inotify.WatchOnRelativePath",
                "Inotify.LinkGeneratesAttribAndCreateEvents",
                "Inotify.MoveGeneratesEvents",
                "Inotify.MknodGeneratesCreateEvent",
                "Inotify.AddWatchWithInvalidEventMaskFails",
                "Inotify.ControlEvents",
                "Inotify.KernfsBasic",
                "Inotify.OneShot",
                "Inotify.ExcludeUnlinkInodeEvents",
                "Inotify.ExcludeUnlinkDirectory",
                "Inotify.LinkOnOtherParent",
                "Inotify.ExcludeUnlink",
                "Inotify.Fallocate",
                "Inotify.IncludeUnlinkedFile",
                "Inotify.SpliceOnWatchTarget",
                "Inotify.ExcludeUnlinkMultipleChildren",
                "Inotify.Sendfile",
                "Inotify.Utimensat",
                "Inotify.Exec",

                // ioctl_test
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateNoArrayGetsLength/*",
                "IoctlTest.FIONBIOFails",
                "IoctlTest.IoctlWithOpath",
                "IoctlTest.FIOCLEXSucceeds",
                "IoctlTest.FIONCLEXSucceeds",
                "IoctlTest.FIOASYNCFails",
                "IoctlTest.FIOASYNCSucceeds",
                "IoctlTest.FIOASYNCNoTarget",
                "IoctlTest.FIOASYNCSelfTarget",
                "IoctlTest.FIOASYNCSelfTarget2",
                "IoctlTest.FIOASYNCSelfTargetClose",
                "IoctlTest.FIOASYNCInvalidPID",
                "IoctlTest.FIOASYNCUnsetTarget",
                "IoctlTest.FIOGETOWNSucceeds",
                "IoctlTest.SIOCGPGRPSucceeds",
                "IoctlTest.FIONBIOSucceeds",
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateNoPartialIfrsReturned/*",
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateNestedPointerCheck/*",
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateLoopbackIsPresent/*",
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateNoArrayGetsLength/*",

                // iptables_test
                "IPTablesBasic.GetRevision",
                "IPTablesBasic.GetInfoErrorPrecedence",
                "IPTablesTest.InitialState",
                "IPTablesBasic.OriginalDstErrors",
                "IPTablesBasic.GetEntriesErrorPrecedence",

                // ip6tables_test
                "IP6TablesBasic.GetRevision",
                "IP6TablesBasic.GetEntriesErrorPrecedence",
                "IP6TablesBasic.GetInfoErrorPrecedence",
                "IP6TablesTest.InitialInfo",

                // itimer_test
                "ItimerTest.ItimervalUpdatedBeforeExpiration",
                "ItimerTest.DeliversSIGPROFToThreadsRoughlyFairlyActive",

                // lseek_test
                "LseekTest.ProcFile",
                "LseekTest.ProcStatTwice",
                "LseekTest.EtcPasswdDup",

                // link_test
                "LinkTest.PermissionDenied",

                // madvise_test
                "MadviseDontneedTest.CleansPrivateFilePage",
                "MadviseDontforkTest.AddressLength",
                "MadviseDontforkTest.DontforkShared",
                "MadviseDontforkTest.DontforkAnonPrivate",

                // memfd_test
                "MemfdTest.SealWriteWithMmap",
                "MemfdTest.SealWriteWithOutstandingWritbleMapping",
                "MemfdTest.NoPartialSealApplicationWhenWriteSealRejected",

                // memory_accounting_test
                "MemoryAccounting.AnonAccountingPreservedOnSaveRestore",

                // mempolicy_test
                "MempolicyTest.CheckDefaultPolicy",
                "MempolicyTest.PolicyPreservedAfterSetMempolicy",
                "MempolicyTest.EmptyNodemaskOnSet",
                "MempolicyTest.QueryAvailableNodes",
                "MempolicyTest.GetMempolicyQueryNodeForAddress",
                "MempolicyTest.GetMempolicyCanOmitPointers",
                "MempolicyTest.SetMempolicyRejectsInvalidInputs",
                "MempolicyTest.Mbind",
                "MempolicyTest.GetMempolicyNextInterleaveNode",

                // mincore_test
                "MincoreTest.DirtyAnonPagesAreResident",
                "MincoreTest.UnalignedAddressFails",
                "MincoreTest.UnalignedLengthSucceedsAndIsRoundedUp",
                "MincoreTest.ZeroLengthSucceedsAndAllowsAnyVecBelowTaskSize",
                "MincoreTest.InvalidLengthFails",

                // mlock_test
                "MlockTest.Basic",
                "MapLockedTest.Basic",
                "MapLockedTest.RlimitMemlockZero",
                "MlockTest.MsyncInvalidate",
                "MlockTest.ProtNone",
                "MlockTest.Fork",
                "MlockTest.RlimitMemlockZero",
                "MunlockTest.Basic",
                "MlockTest.RlimitMemlockInsufficient",
                "MunlockTest.NotLocked",
                "MlockallTest.Future",
                "MunlockallTest.Basic",
                "Mlock2Test.NoFlags",
                "MapLockedTest.RlimitMemlockInsufficient",
                "MremapLockedTest.Basic",
                "Mlock2Test.UnknownFlags",
                "MremapLockedTest.RlimitMemlockZero",
                "Mlock2Test.MlockOnfault",
                "MremapLockedTest.RlimitMemlockInsufficient",
                "MlockTest.MadviseDontneed",

                // mmap_test
                "MMapTest.MapLocked",
                "MMapTest.MprotectHugeLength",
                "MMapTest.ExceedLimitDataPrlimitPID",
                "MMapTest.NoExceedLimitAS",
                "MMapTest.ExceedLimitAS",
                "MMapFileTest.MapLastPositivePage",
                "MMapFileTest.MapFirstNegativePage",
                "MMapFileTest.MapSecondToLastNegativePage",
                "MMapFileTest.MapLastNegativePage",

                // mount_test
                "MountTest.OpenFileBusy",
                "MountTest.ActiveSubmountBusy",
                "MountTest.MountTmpfsMagicValIgnored",
                "MountTest.MountReadonly",
                "MountTest.MountNoExec",
                "MountTest.MountInfo",
                "MountTest.TmpfsSizeRoundUpSinglePageSize",
                "MountTest.TmpfsSizeAllocationMultiplePages",
                "MountTest.TmpfsSizeMoreThanSinglePgSZMultipleFiles",
                "MountTest.TmpfsDirectoryAllocCheck",
                "MountTest.TmpfsSymlinkAllocCheck",
                "MountTest.TmpfsSymlinkUnallocCheck",
                "MountTest.TmpfsHardLinkAllocCheck",
                "MountTest.TmpfsEmptySizeAllocCheck",
                "MountTest.TmpfsSizePartialWriteSinglePage",
                "MountTest.TmpfsSizePartialWriteMultiplePages",
                "MountTest.BindToSelf",
                "MountTest.MaxMounts",
                "MountTest.MakeShared",
                "MountTest.MakeMultipleShared",
                "MountTest.ReuseGroupIDs",
                "MountTest.InerheritPropagation",
                "MountTest.MakePrivate",
                "MountTest.ArgumentsAreIgnored",
                "MountTest.SetMountPropagationOfStackedMounts",
                "MountTest.MakePeer",
                "MountTest.PropagateMountEvent",
                "MountTest.PropagateUmountEvent",
                "MountTest.UmountIgnoresPeersWithChildren",
                "MountTest.BindSharedOnShared",
                "MountTest.BindSharedOnPrivate",
                "MountTest.BindPeerGroupsWithChildren",
                "MountTest.BindParentToChild",
                "MountTest.MountInfoHasRoot",

                // msgqueue_test
                "MsgqueueTest.MsgCtlIpcSet",
                "MsgqueueTest.MsgOpTruncate",
                "MsgqueueTest.MsgCtlIpcStatWriteOnly",
                "MsgqueueTest.MsgOpInvalidArgs",
                "MsgqueueTest.MsgGetFail",
                "MsgqueueTest.MsgOpNoMsg",
                "MsgqueueTest.MsgGetIpcPrivate",
                "MsgqueueTest.MsgOpNoMsgType",
                "MsgqueueTest.MsgOpTooBig",
                "MsgqueueTest.MsgOpSimple",
                "MsgqueueTest.MsgExcept",
                "MsgqueueTest.MsgRcvType",
                "MsgqueueTest.MsgRcvTypeNegative",
                "MsgqueueTest.MsgOpLimits",
                "MsgqueueTest.MsgOpPermissions",
                "MsgqueueTest.MsgRcvTypeBlocking",
                "MsgqueueTest.MsgRcvBlocking",
                "MsgqueueTest.MsgSndRmWhileBlocking",
                "MsgqueueTest.MsgSndBlocking",
                "MsgqueueTest.InterruptRecv",
                "MsgqueueTest.MsgRcvRmWhileBlocking",
                "MsgqueueTest.InterruptSend",
                "MsgqueueTest.MsgCtlIpcSetMaxBytes",
                "MsgqueueTest.MsgCtlMsgInfo",
                "MsgqueueTest.MsgOpEmpty",
                "MsgqueueTest.MsgGet",
                "MsgqueueTest.MsgOpGeneral",
                "MsgqueueTest.MsgCtlIpcInfo",
                "MsgqueueTest.MsgCtlIpcStat",

                // msync_test
                "All/MsyncNoFlagsTest.BothSyncAndAsyncFails/*",

                // network_namespace_test
                "NetworkNamespaceTest.LoopbackExists",

                // open_test
                "OpenTest.DirectoryDirectFails",

                // packet_socket_dgram_test
                "BasicCookedPacketTest.WrongType",
                "AllInetTests/CookedPacketTest.Receive/*",
                "AllInetTests/CookedPacketTest.Send/*",
                "AllInetTests/CookedPacketTest.BindReceive/*",
                "AllInetTests/CookedPacketTest.DoubleBindSucceeds/*",
                "AllInetTests/CookedPacketTest.BindDrop/*",
                "AllInetTests/CookedPacketTest.BindFail/*",
                "AllInetTests/CookedPacketTest.ReceiveOutbound/*",

                // packet_socket_raw_test
                "AllInetTests/RawPacketTest.SetAndGetSocketLinger/*",
                "AllInetTests/RawPacketTest.SetSocketRecvBufBelowMin/*",
                "AllInetTests/RawPacketTest.Send/*",
                "AllInetTests/RawPacketTest.SetSocketRecvBufAboveMax/*",
                "AllInetTests/RawPacketTest.SetSocketSendBufBelowMin/*",
                "AllInetTests/RawPacketTest.SetSocketSendBufAboveMax/*",
                "AllInetTests/RawPacketTest.SetSocketSendBuf/*",
                "AllInetTests/RawPacketTest.GetSocketError/*",
                "AllInetTests/RawPacketTest.GetSocketErrorBind/*",
                "AllInetTests/RawPacketTest.SetSocketRecvBuf/*",
                "AllInetTests/RawPacketTest.SetSocketDetachFilterNoInstalledFilter/*",
                "AllInetTests/RawPacketTest.GetSocketDetachFilter/*",
                "AllInetTests/RawPacketTest.GetSocketAcceptConn/*",
                "AllInetTests/RawPacketTest.Receive/*",
                "AllRawPacketMsgSizeTest/RawPacketMsgSizeTest.SendTooLong/*",
                "AllRawPacketMsgSizeTest/RawPacketMsgSizeTest.SpliceTooLong/*",

                // packet_socket_test
                "AllPacketSocketTests/PacketSocketCreationTest.Create/*",
                "AllPacketSocketTests/PacketSocketTest.GetSockName/*",
                "AllPacketSocketTests/PacketSocketTest.RebindProtocol/*",

                // pause_test
                "PauseTest.OnlyReturnsWhenSignalHandled",

                // ping_socket_test
                "PingSocket.PayloadTooLarge",
                "PingSocket.ReceiveTOS",
                "PingSocket.ReceiveTClass",
                "PingSocket.ReceiveTTL",
                "PingSocket.ReceiveHopLimit",
                "PingSocket.ReceiveIPPacketInfo",
                "PingSocket.ReceiveIPv6PktInfo",

                // pipe_test
                "Pipes/PipeTest.Flags/namednonblocking",
                "Pipes/PipeTest.Flags/namedblocking",
                "Pipes/PipeTest.OffsetCalls/*",
                "PingSockets/Fixture.Bind/ICMP_socket_V6Any",
                "PingSockets/Fixture.Bind/ICMP_socket_V6Loopback",
                "PingSockets/Fixture.Bind/ICMP_socket_V6Multicast",
                "PingSockets/Fixture.Bind/ICMP_socket_V6MulticastInterfaceLocalAllNodes",
                "PingSockets/Fixture.Bind/ICMP_socket_V6MulticastLinkLocalAllNodes",
                "PingSockets/Fixture.Bind/ICMP_socket_V6MulticastLinkLocalAllRouters",
                "PingSockets/Fixture.Bind/ICMP_socket_IPv6UnknownUnicast",

                // pivot_root_test
                "PivotRootTest.WithoutCapability",
                "PivotRootTest.OnSharedPutOldMountpoint",
                "PivotRootTest.NotDir",
                "PivotRootTest.NewRootNotAMountpoint",
                "PivotRootTest.OnSharedNewRoot",
                "PivotRootTest.Success",
                "PivotRootTest.OnSharedNewRootParent",
                "PivotRootTest.PutOldNotUnderNewRoot",
                "PivotRootTest.CurrentRootNotAMountPoint",
                "PivotRootTest.NotExist",
                "PivotRootTest.NewRootOnRootMount",
                "PivotRootTest.DotDot",
                "PivotRootTest.CreatesNewRoot",
                "PivotRootTest.OnRootFS",
                "PivotRootTest.ChangesCwdForAllProcesses",
                "PivotRootTest.MovesOldRoot",

                // ppoll_test - https://fxbug.dev/79316
                // InvalidMaskSize requires an additional parameter to ppoll, need to determine
                // the validity of that.
                "PpollTest.InvalidMaskSize",

                // SignalMask[Blocks/Allows]Signal require timers to send signals.
                "PpollTest.SignalMaskBlocksSignal",

                // prctl_setuid_test
                "PrctlKeepCapsSetuidTest.PrctlBadArgsToKeepCaps",
                "PrctlKeepCapsSetuidTest.SetUidNoKeepCaps",
                "PrctlKeepCapsSetuidTest.NoKeepCapsAfterExec",
                "PrctlKeepCapsSetuidTest.SetUidKeepCaps",
                "PrctlKeepCapsSetuidTest.NoKeepCapsAfterNewUserNamespace",
                "PrctlKeepCapsSetuidTest.PrGetKeepCaps",

                // prctl_test
                "PrctlTest.InvalidPrSetMM",
                "PrctlTest.PDeathSig",
                "PrctlTest.RootDumpability",

                // priority_test
                "SetpriorityTest.NicenessExposedViaProcfs",

                // processes_test
                "Processes.ExecSwapThreadGroupLeader",
                "Processes.SetPGIDOfZombie",

                // proc_test
                "ProcSelfAuxv.EntryPresence",
                "ProcSelfAuxv.EntryValues",
                "ProcPidMem.Read",
                "ProcPidMem.Unmapped",
                "ProcPidMem.RepeatedRead",
                "ProcPidMem.RepeatedSeek",
                "ProcPidMem.PartialRead",
                "ProcPidMem.AfterExit",
                "ProcPidMem.SameUser",
                "ProcSelfMaps.Basic",
                "ProcSelfMaps.Map2",
                "ProcSelfMaps.MapUnmap",
                "ProcSelfMaps.SharedAnon",
                "ProcSelfFdInfo.Flags",
                "ProcSelfCwd.Absolute",
                "ProcSelfRoot.IsRoot",
                "ProcCpuinfo.RequiredFieldsArePresent",
                "ProcCpuinfo.Stable",
                "ProcUptime.IsPresent",
                "ProcMeminfo.ContainsBasicFields",
                "ProcSentryMeminfo.ContainsFieldsAndEndsWithNewline",
                "ProcStat.ContainsBasicFields",
                "ProcStat.EndsWithNewline",
                "ProcStat.Fields",
                "ProcLoadavg.EndsWithNewline",
                "ProcLoadavg.Fields",
                "ProcSelfStat.PopulateWriteRSS",
                "ProcPidStatusTest.HasBasicFields",
                "ProcPidStatusTest.StateRunning",
                "ProcPidStatusTest.StateSleeping",
                "ProcPidStatusTest.Threads",
                "ProcPidStatTest.VmStats",
                "ProcPidCmdline.SubprocessSeekCmdline",
                "ProcPidSymlink.SubprocessRunning",
                "ProcPidSymlink.SubprocessZombied",
                "ProcPidSymlink.SubprocessExited",
                "ProcPidExe.Subprocess",
                "ProcPidCwd.Subprocess",
                "ProcPidRoot.Subprocess",
                "ProcPidFile.SubprocessRunning",
                "ProcPidFile.SubprocessZombie",
                "ProcPidFile.SubprocessExited",
                "ProcTask.CommCanSetSelfThreadName",
                "ProcTask.CommCanSetPeerThreadName",
                "ProcTask.CommCannotSetAnotherProcessThreadName",
                "ProcTask.TaskDirHasCorrectMetadata",
                "ProcTask.VerifyTaskDir",
                "ProcTask.VerifyTaskDirNlinks",
                "ProcSysKernelHostname.Exists",
                "ProcSysKernelHostname.MatchesUname",
                "ProcSysVmMaxmapCount.HasNumericValue",
                "ProcSysVmMmapMinAddr.HasNumericValue",
                "ProcSysVmOvercommitMemory.HasNumericValue",
                "ProcFilesystems.Bug65172365",
                "ProcMounts.IsSymlink",
                "ProcSelfMountinfo.RequiredFieldsArePresent",
                "ProcSelfMountinfo.ContainsProcfsEntry",
                "ProcSelfMounts.RequiredFieldsArePresent",
                "ProcSelfMounts.ContainsProcfsEntry",
                "Proc.GetdentsEnoent",
                "Proc.PidTidIOAccounting",
                "ProcPidMem.DifferentUserAttached",
                "ProcPidMem.DifferentUser",
                "ProcCpuinfo.DeniesWriteNonRoot",
                "ProcCpuinfo.DeniesWriteRoot",
                "SelfAndNumericPid/ProcPidStatTest.HasBasicFields/*",
                "SelfAndNumericPid/ProcPidStatmTest.HasBasicFields/*",

                // proc_isolated_test
                "ProcDefaults.PresenceOfSem",
                "ProcDefaults.PresenceOfShmMaxMniAll",
                "ProcDefaults.PresenceOfMsgMniMaxMnb",

                // proc_net_tcp_test
                "ProcNetTCP.Exists",
                "ProcNetTCP6.Exists",
                "ProcNetTCP6.State",
                "ProcNetTCP.State",
                "ProcNetTCP.EntryUID",
                "ProcNetTCP6.EntryUID",
                "ProcNetTCP.InodeReasonable",
                "ProcNetTCP6.BindAcceptConnect",
                "ProcNetTCP.BindAcceptConnect",
                "ProcNetTCP6.InodeReasonable",

                // proc_net_test
                "ProcNetSymlink.FileMode",
                "ProcNetIfInet6.Format",
                "ProcNetSymlinkTarget.FileMode",
                "ProcNetSymlink.Contents",
                "ProcSysNetIpv4Sack.Exists",
                "ProcNetDev.Format",
                "ProcNetSnmp.TcpReset",
                "ProcNetSnmp.TcpEstab",
                "ProcNetSnmp.UdpNoPorts",
                "ProcNetSnmp.UdpIn",
                "ProcNetSnmp.Stat",
                "ProcSysNetIpv4Recovery.Exists",
                "ProcSysNetIpv4IpForward.Exists",
                "ProcSysNetIpv4IpForward.DefaultValueEqZero",
                "ProcSysNetPortRange.CanReadAndWrite",
                "ProcSysNetIpv4IpForward.CanReadAndWrite",
                "ProcSysNetIpv4Sack.CanReadAndWrite",
                "ProcSysNetIpv4Recovery.CanReadAndWrite",

                // proc_net_udp_test
                "ProcNetUDP.Exists",
                "ProcNetUDP.BoundSocketStateClosed",
                "ProcNetUDP.BoundEntry",
                "ProcNetUDP.FindMutualEntries",
                "ProcNetUDP.EntryUID",
                "ProcNetUDP.ConnectedSocketStateEstablished",
                "ProcNetUDP.EntriesRemovedOnClose",

                // proc_net_unix_test
                "ProcNetUnix.Exists",
                "ProcNetUnix.DgramSocketStateDisconnectingOnBind",
                "ProcNetUnix.AbstractBindAcceptConnect",
                "ProcNetUnix.SocketPair",
                "ProcNetUnix.StreamSocketStateStateConnectedOnAccept",
                "ProcNetUnix.StreamSocketStateUnconnectedOnBind",
                "ProcNetUnix.StreamSocketStateStateUnconnectedOnListen",
                "ProcNetUnix.FilesystemBindAcceptConnect",
                "ProcNetUnix.DgramSocketStateConnectingOnConnect",

                // proc_pid_oomscore_test
                "ProcPidOomscoreTest.BasicRead",
                "ProcPidOomscoreAdjTest.BasicWrite",
                "ProcPidOomscoreAdjTest.BasicRead",

                // proc_pid_smaps_test
                "ProcPidSmapsTest.PrivateAnon",
                "ProcPidSmapsTest.SharedAnon",
                "ProcPidSmapsTest.SharedReadOnlyFile",
                "ProcPidSmapsTest.GvisorFields",

                // proc_pid_uid_gid_map_test
                "All/ProcSelfUidGidMapTest.TrailingNewlineAndNULIgnored/UID",
                "All/ProcSelfUidGidMapTest.IsInitiallyEmpty/UID",
                "All/ProcSelfUidGidMapTest.MapOtherID/UID",
                "All/ProcPidUidGidMapTest.MapOtherIDPrivileged/GID",
                "All/ProcSelfUidGidMapTest.IsInitiallyEmpty/GID",
                "All/ProcSelfUidGidMapTest.NonIdentityMapOwnID/UID",
                "All/ProcSelfUidGidMapTest.TrailingNewlineAndNULIgnored/GID",
                "All/ProcSelfUidGidMapTest.NonIdentityMapOwnID/GID",
                "All/ProcSelfUidGidMapTest.IdentityMapOwnID/UID",
                "All/ProcSelfUidGidMapTest.MapOtherID/GID",
                "All/ProcPidUidGidMapTest.MapOtherIDPrivileged/UID",
                "All/ProcPidUidGidMapTest.MapAnyIDsPrivileged/GID",
                "All/ProcPidUidGidMapTest.MapAnyIDsPrivileged/UID",
                "All/ProcSelfUidGidMapTest.IdentityMapOwnID/GID",

                // pselect_test
                "PselectTest.SignalMaskBlocksSignal", // maybe flaky

                // raw_socket_icmp
                "RawSocketICMPTest.IPv6ChecksumNotSupported",
                "RawSocketICMPTest.ICMPv6FilterNotSupported",

                // raw_socket_test
                "RawSocketTest.ReceiveIPPacketInfo",
                "RawSocketTest.ReceiveIPv6PacketInfo",
                "RawSocketTest.ReceiveTOS",
                "RawSocketTest.ReceiveTClass",
                "RawSocketTest.ReceiveTTL",
                "RawSocketTest.ReceiveHopLimit",
                "AllInetTests/RawSocketTest.SetSocketDetachFilterNoInstalledFilter/*",

                // readahead_test
                "ReadaheadTest.WriteOnly",
                "ReadaheadTest.UnsupportedFile",
                "ReadaheadTest.ValidOffset",
                "ReadaheadTest.PastEnd",
                "ReadaheadTest.InvalidOffset",
                "ReadaheadTest.InvalidFD",
                "ReadaheadTest.InvalidSize",
                "ReadaheadTest.CrossesEnd",

                // rlimits_test
                "RlimitTest.RlimitNProc",

                // rtsignal_test
                "RtSignalTest.InvalidCodes",
                "RtSignalTest.SignoMatch",
                "RtSignalTest.ValueDelivered",

                // seccomp_test
                "SeccompTest.TsyncAppliesToAllThreads",

                // sendfile_test
                "SendFileTest.InvalidOffset",
                "SendFileTest.Overflow",
                "SendFileTest.SendAndUpdateGivenOffset",
                "SendFileTest.SendFileToSelf",

                // setgid_test
                "FileModes/FileModeTest.TruncateFile/1",
                "FileModes/FileModeTest.TruncateFile/2",
                "FileModes/FileModeTest.TruncateFile/3",
                "FileModes/FileModeTest.TruncateFile/5",
                "FileModes/FileModeTest.WriteToFile/1",
                "FileModes/FileModeTest.WriteToFile/2",
                "FileModes/FileModeTest.WriteToFile/3",
                "FileModes/FileModeTest.WriteToFile/5",

                // sigaltstack_test - https://fxbug.dev/79359
                "SigaltstackTest.ResetByExecve",

                // signalfd_test
                "Signalfd/SignalfdTest.SetMask/kSigno",
                "Signalfd/SignalfdTest.SetMask/kSignoMax",

                // socket_abstract_test - https://fxbug.dev/79366
                "AbstractUnixSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/*",
                "AbstractUnixSockets/AllSocketPairTest.GetSocketOutOfBandInlineOption/*",
                "AbstractUnixSockets/AllSocketPairTest.GetSetSocketRcvlowatOption/*",
                "AbstractUnixSockets/UnixSocketPairTest.NetdeviceIoctlsSucceed/*",
                "AbstractUnixSockets/UnixSocketPairCmsgTest.SendNullCredsBeforeSoPassCredRecvEndAfterSendEnd/*",
                "AbstractUnixSockets/UnixSocketPairCmsgTest.WriteBeforeSoPassCredRecvEndAfterSendEnd/*",

                // socket_bind_to_device_sequence_test
                "BindToDeviceTest/BindToDeviceSequenceTest.BindTwiceWithDeviceFails/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindWithDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindToDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.MixingReuseAndNotReuseByBindingToDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.CannotBindTo0AfterMixingReuseAndNotReuse/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindToDeviceAndThenWithoutDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindingWithReuseAndDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindWithoutDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindAndRelease/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindWithReuseAddr/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindTwiceWithReuseOnce/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindWithReuse/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindAndReleaseDifferentDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.CannotBindTo0AfterMixingReuseAddrAndNotReuseAddr/*",

                // socket_bind_to_device_test
                "BindToDeviceTest/BindToDeviceTest.GetsockoptDefault/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptInvalidDeviceName/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidDeviceNameWithoutNullTermination/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidThenClear/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidThenClearWithNull/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidDeviceNameWithNullTermination/*",
                "BindToDeviceTest/BindToDeviceTest.GetsockoptDevice/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidThenInvalid/*",

                // socket_capability_test
                "SocketTest.UnixConnectNeedsWritePerm",

                // socket_domain_test
                // TODO: same name of test in socket_ip_tcp_loopback_test that passes

                // socket_filesystem_test
                "FilesystemUnixSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/*",
                "FilesystemUnixSockets/AllSocketPairTest.GetSocketOutOfBandInlineOption/*",
                "FilesystemUnixSockets/AllSocketPairTest.GetSetSocketRcvlowatOption/*",
                "FilesystemUnixSockets/UnixSocketPairTest.NetdeviceIoctlsSucceed/*",
                "FilesystemUnixSockets/UnixSocketPairCmsgTest.SendNullCredsBeforeSoPassCredRecvEndAfterSendEnd/*",
                "FilesystemUnixSockets/UnixSocketPairCmsgTest.WriteBeforeSoPassCredRecvEndAfterSendEnd/*",

                // socket_inet_loopback_isolated_test
                "All/SocketInetLoopbackIsolatedTest.TCPActiveCloseTimeWaitTest/*",
                "All/SocketInetLoopbackIsolatedTest.TCPActiveCloseTimeWaitReuseTest/*",
                "All/SocketInetLoopbackIsolatedTest.TCPPassiveCloseNoTimeWaitTest/*",
                "All/SocketInetLoopbackIsolatedTest.TCPPassiveCloseNoTimeWaitReuseTest/*",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/*",
                "All/SocketInetLoopbackIsolatedTest.TCPLinger2TimeoutAfterClose/*",
                "AllFamilies/SocketMultiProtocolInetLoopbackIsolatedTest.V4MappedEphemeralPortReservedReuseAddr/TCP",
                "AllFamilies/SocketMultiProtocolInetLoopbackIsolatedTest.V4EphemeralPortReservedReuseAddr/TCP",
                "AllFamilies/SocketMultiProtocolInetLoopbackIsolatedTest.V6EphemeralPortReservedReuseAddr/TCP",

                // socket_inet_loopback_nogotsan_test
                "AllFamilies/SocketMultiProtocolInetLoopbackTest.UDPBindMayBindOtherBoundPortsReuseAddr/UDP",
                "AllFamilies/SocketMultiProtocolInetLoopbackTest.TCPBindAvoidsOtherBoundPortsReuseAddr/TCP",

                // socket_ip_tcp_loopback_test
                "AllUnixDomainSockets/AllSocketPairTest.SendmsgRecvmsgMsgCtruncNoop/*",
                "AllUnixDomainSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/*",
                "AllUnixDomainSockets/AllSocketPairTest.GetSetSocketRcvlowatOption/*",
                "AllTCPSockets/AllSocketPairTest.GetSetSocketRcvlowatOption/*",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsgMsgCtruncNoop/*",
                "AllTCPSockets/AllSocketPairTest.SetAndGetBooleanSocketOptions/*",
                "AllTCPSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/*",

                // socket_ip_udp_loopback_test
                "AllUDPSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/*",
                "AllUDPSockets/AllSocketPairTest.SetAndGetBooleanSocketOptions/*",
                "AllUDPSockets/AllSocketPairTest.GetSetSocketRcvlowatOption/*",
                "AllUDPSockets/NonStreamSocketPairTest.SendMsgTooLarge/*",
                "AllUDPSockets/NonStreamSocketPairTest.RecvmsgMsghdrFlagMsgTrunc/*",
                "AllUDPSockets/UDPSocketPairTest.ReceiveOrigDstAddrDefault/*",
                "AllUDPSockets/UDPSocketPairTest.PayloadTooBig/*",
                "AllUDPSockets/UDPSocketPairTest.SetAndGetReceiveOrigDstAddr/*",

                // socket_ip_unbound_netlink_test
                "IPUnboundSockets/IPv4UnboundSocketTest.ConnectToBadLocalAddress/*",
                "IPUnboundSockets/IPv6UnboundSocketTest.ConnectToBadLocalAddress/*",

                // socket_ipv4_datagram_based_socket_unbound_loopback_test
                "IPv4Sockets/IPv4DatagramBasedUnboundSocketTest.IpMulticastIfSetShort/*",
                "IPv4Sockets/IPv4DatagramBasedUnboundSocketTest.IpMulticastIfSetNicGetReqn/*",
                "IPv4Sockets/IPv4DatagramBasedUnboundSocketTest.IpMulticastIfSetNic/*",
                "IPv4Sockets/IPv4DatagramBasedUnboundSocketTest.TestMultipleJoinsOnSingleSocket/*",

                // socket_ipv4_udp_unbound_loopback_test
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastLoopbackNicNoDefaultSendIf/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastLoopbackNic/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastLoopbackIfaceIndexAndAddr/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastLoopbackIfNic/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastLoopbackIfNicConnect/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastLoopbackIfNicSelf/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastLoopbackIfNicSelfConnect/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastLoopbackIfNicSelfNoLoop/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastDropNic/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.TestTwoSocketsJoinSameMulticastGroup/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.TestBindToMcastThenJoinThenReceive/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.SetAndReceiveIPPKTINFO/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.SetAndReceiveIPReceiveOrigDstAddr/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.IpMulticastIPPacketInfo/*",

                // socket_ipv4_udp_unbound_loopback_nogotsan_test
                "IPv4UDPSockets/IPv4UDPUnboundSocketNogotsanTest.UDPConnectPortExhaustion/*",
                "IPv4UDPSockets/IPv4UDPUnboundSocketNogotsanTest.UDPBindPortExhaustion/*",

                // socket_ipv6_udp_unbound_external_networking_test
                "IPv6UDPUnboundSockets/IPv6UDPUnboundExternalNetworkingSocketTest.TestJoinLeaveMulticast/*",

                // socket_ipv6_udp_unbound_loopback_test
                "IPv6UDPSockets/IPv6UDPUnboundSocketTest.SetAndReceiveIPReceiveOrigDstAddr/*",
                "IPv6UDPSockets/IPv6UDPUnboundSocketTest.IPv6PacketInfo/*",

                // socket_netdevice_test
                "NetdeviceTest.InterfaceName",
                "NetdeviceTest.InterfaceQLEN",
                "NetdeviceTest.Netmask",
                "NetdeviceTest.InterfaceMTU",
                "NetdeviceTest.EthtoolGetTSInfo",
                "NetdeviceTest.Loopback",
                "NetdeviceTest.InterfaceFlags",

                // socket_netlink_route_test
                "NetlinkRouteTest.GetLinkDump",
                "NetlinkRouteTest.GetLinkByIndex",
                "NetlinkRouteTest.GetLinkByName",
                "NetlinkRouteTest.GetLinkByIndexNotFound",
                "NetlinkRouteTest.GetLinkByNameNotFound",
                "NetlinkRouteTest.RemoveLoopbackByName",
                "NetlinkRouteTest.RemoveLoopbackByIndex",
                "NetlinkRouteTest.RemoveLinkByIndexNotFound",
                "NetlinkRouteTest.RemoveLinkByNameNotFound",
                "NetlinkRouteTest.MsgHdrMsgUnsuppType",
                "NetlinkRouteTest.SpliceFromPipe",
                "NetlinkRouteTest.ControlMessageIgnored",
                "NetlinkRouteTest.AddAndRemoveAddr",
                "NetlinkRouteTest.GetRouteDump",
                "NetlinkRouteTest.GetRouteRequest",
                "NetlinkRouteTest.RecvmsgTrunc",
                "NetlinkRouteTest.RecvmsgTruncPeek",
                "NetlinkRouteTest.PasscredCreds",

                // socket_netlink_uevent
                "NetlinkUeventTest.AttachFilter",
                "NetlinkUeventTest.DetachNoFilter",

                // socket_stress_test
                "AllConnectedSockets/ConnectStressTest.TooManyOpen/*",
                "AllConnectedSockets/PersistentListenerConnectStressTest.Close/*",
                "AllConnectedSockets/ConnectStressTest.Reset/*",
                "AllConnectedSockets/PersistentListenerConnectStressTest.ShutdownCloseFirst/*",
                "AllConnectedSockets/PersistentListenerConnectStressTest.ShutdownCloseSecond/*",

                // socket_unix_pair_test - https://fxbug.dev/79408
                "AllUnixDomainSockets/UnixSocketPairTest.NetdeviceIoctlsSucceed/*",
                "AllUnixDomainSockets/UnixSocketPairCmsgTest.SendNullCredsBeforeSoPassCredRecvEndAfterSendEnd/*",
                "AllUnixDomainSockets/UnixSocketPairCmsgTest.WriteBeforeSoPassCredRecvEndAfterSendEnd/*",

                // socket_unix_seqpacket_local_test
                "SeqpacketUnixSockets/SeqpacketUnixSocketPairTest.Sendto/*",

                // socket_unix_unbound_abstract_test
                "AllUnixDomainSockets/UnboundAbstractUnixSocketPairTest.ListenZeroBacklog/0",
                "AllUnixDomainSockets/UnboundAbstractUnixSocketPairTest.ListenZeroBacklog/1",
                "AllUnixDomainSockets/UnboundAbstractUnixSocketPairTest.ListenZeroBacklog/2",
                "AllUnixDomainSockets/UnboundAbstractUnixSocketPairTest.ListenZeroBacklog/3",
                "AllUnixDomainSockets/UnboundAbstractUnixSocketPairTest.GetSockNamePartialLength/*",

                // socket_unix_unbound_dgram_test
                "AllUnixDomainSockets/UnboundDgramUnixSocketPairTest.Sendto/*",
                "AllUnixDomainSockets/UnboundDgramUnixSocketPairTest.SendtoWithoutConnect/*",
                "AllUnixDomainSockets/UnboundDgramUnixSocketPairTest.SendtoWithoutConnectPassCreds/*",

                // socket_unix_unbound_stream_test
                "AllUnixDomainSockets/UnixStreamSocketPairTest.FDPassPartialRead/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CredPassPartialRead/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.SinglePeek/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CredsNotCoalescedUp/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CoalescedCredsNoPasscred/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CoalescedCreds2/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CoalescedDifferingCreds/*",
                "AllUnixDomainSockets/UnboundUnixStreamSocketPairTest.SendtoWithoutConnect/*",

                // splice_test, splice() isn't implemented: fxbug.dev/119324
                "SpliceTest.FromPipeMaxFileSize",
                "SpliceTest.ToPipeWithSmallCapacityDoesNotSpin",
                "SpliceTest.PipeOffsets",
                "SpliceTest.SamePipe",
                "SpliceTest.ToPipeEOF",
                "SpliceTest.NegativeOffset",
                "SpliceTest.FromPipeMultiple",
                "SpliceTest.FromPipe",
                "SpliceTest.TwoPipesPartialRead",
                "SpliceTest.TwoPipesPartialWrite",
                "SpliceTest.FromPipeOffset",
                "SpliceTest.NonBlocking",
                "SpliceTest.TwoPipesCircular",
                "SpliceTest.FromPipeWithConcurrentIo",
                "TeeTest.SamePipe",
                "TeeTest.TwoPipesPartialRead",
                "TeeTest.RegularFile",
                "TeeTest.NonBlocking",
                "TeeTest.TwoPipesPartialWrite",
                "SpliceTest.WriteOverflow",

                // stat_test
                "StatTest.StatxIgnoreNoAutomount",

                // statfs_test
                "FstatfsTest.BlocksFree",

                // stat_times_test
                "StatTimesTest.FileUtimes",

                // sticky_test
                "StickyTest.StickyBitPermDenied",

                // tuntap_test
                "TuntapStaticTest.NetTunExists",
                "TuntapTest.CreateInterfaceNoCap",
                "TuntapTest.PingKernel",
                "TuntapTest.CreateFixedNameInterface",
                "TuntapTest.CreateInterface",
                "TuntapTest.LargeWritesFailWithEMSGSIZE",
                "TuntapTest.InvalidReadWrite",
                "TuntapTest.ZeroWrite",
                "TuntapTest.SendUdpTriggersArpResolution",
                "TuntapTest.TUNNoPacketInfo",
                "TuntapTest.WriteHangBug155928773",
                "TuntapTest.TCPNonBlockingConnectFailsArpResolution",
                "TuntapTest.TCPBlockingConnectFailsArpResolution",
                "TuntapTest.RawPacketSocket",

                // semaphore_test
                "SemaphoreTest.*",
                "SempahoreTest.*",

                // sync_file_range_test
                "SyncFileRangeTest.TempFileSucceeds",
                "SyncFileRangeTest.BadArgs",
                "SyncFileRangeTest.CannotSyncFileRangeOnUnopenedFd",

                // syslog_test
                "Syslog.Size",
                "Syslog.ReadAll",

                // sysret_test
                "SysretTest.JustDetach",
                "SysretTest.BadRip",
                "SysretTest.BadRsp",

                // tcp_socket_test
                "AllInetTests/TcpSocketTest.PollWithFullBufferBlocks/*",
                "AllInetTests/TcpSocketTest.ConnectedAcceptedPeerAndLocalAreReciprocals/*",
                "AllInetTests/TcpSocketTest.NonblockingLargeSend/*",
                "AllInetTests/TcpSocketTest.DataCoalesced/*",
                "AllInetTests/TcpSocketTest.ShutdownWriteInTimeWait/*",
                "AllInetTests/TcpSocketTest.ShutdownWriteInFinWait1/*",
                "AllInetTests/TcpSocketTest.SenderAddressIgnored/*",
                "AllInetTests/TcpSocketTest.SendtoAddressIgnored/*",
                "AllInetTests/TcpSocketTest.ConnectOnEstablishedConnection/*",
                "AllInetTests/TcpSocketTest.ClosedWriteBlockingSocket/*",
                "AllInetTests/TcpSocketTest.ClosedReadBlockingSocket/*",
                "AllInetTests/TcpSocketTest.WritevZeroIovec/*",
                "AllInetTests/TcpSocketTest.MsgTrunc/*",
                "AllInetTests/TcpSocketTest.BlockingLargeSend/*",
                "AllInetTests/TcpSocketTest.MsgTruncWithCtrunc/*",
                "AllInetTests/TcpSocketTest.MsgTruncLargeSize/*",
                "AllInetTests/TcpSocketTest.ZeroWriteAllowed/*",
                "AllInetTests/TcpSocketTest.LargeSendDontWait/*",
                "AllInetTests/TcpSocketTest.NonblockingLargeWrite/*",
                "AllInetTests/TcpSocketTest.BlockingLargeWrite/*",
                "AllInetTests/TcpSocketTest.SetNoDelay/*",
                "AllInetTests/TcpSocketTest.MsgTruncPeek/*",
                "AllInetTests/TcpSocketTest.SenderAddressIgnoredOnPeek/*",
                "AllInetTests/TcpSocketTest.NoDelayDefault/*",
                "AllInetTests/TcpSocketTest.MsgTruncWithCtruncOnly/*",
                "AllInetTests/TcpSocketTest.TcpInqSetSockOpt/*",
                "AllInetTests/SimpleTcpSocketTest.PollAroundAccept/*",
                "AllInetTests/SimpleTcpSocketTest.SelfConnectSend/*",
                "AllInetTests/SimpleTcpSocketTest.SelfConnectRecvShutdownRead/*",
                "AllInetTests/TcpSocketTest.PollAfterShutdown/*",
                "AllInetTests/SimpleTcpSocketTest.SelfConnectSendShutdownWrite/*",
                "AllInetTests/SimpleTcpSocketTest.SelfConnectSendRecv/*",
                "AllInetTests/SimpleTcpSocketTest.NonBlockingConnectRetry/*",
                "AllInetTests/TcpSocketTest.SendUnblocksOnSendBufferIncrease/*",
                "AllInetTests/TcpSocketTest.GetSocketAcceptConnListener/*",
                "AllInetTests/TcpSocketTest.FullBuffer/*",
                "AllInetTests/TcpSocketTest.GetSocketAcceptConnNonListener/*",
                "AllInetTests/TcpSocketTest.TimeWaitPollHUP/*",
                "AllInetTests/TcpSocketTest.TcpSCMPriority/*",
                "AllInetTests/TcpSocketTest.Tiocinq/*",
                "AllInetTests/TcpSocketTest.TcpInq/*",
                "AllInetTests/SimpleTcpSocketTest.CleanupOnConnectionRefused/*",
                "AllInetTests/SimpleTcpSocketTest.BlockingConnectRefused/*",
                "AllInetTests/SimpleTcpSocketTest.SetSocketAttachDetachFilter/*",
                "AllInetTests/SimpleTcpSocketTest.ConnectUnspecifiedAddress/*",
                "AllInetTests/SimpleTcpSocketTest.ShutdownReadWriteConnectingSocket/*",
                "AllInetTests/SimpleTcpSocketTest.ShutdownWriteConnectingSocket/*",
                "AllInetTests/SimpleTcpSocketTest.OnlyAcknowledgeBacklogConnections/*",
                "AllInetTests/SimpleTcpSocketTest.ShutdownReadConnectingSocket/*",

                // timerfd_test - https://fxbug.dev/79430
                "AllTimerTypes/TimerfdTest.BlockingPoll_SetTimeResetsExpirations/CLOCK_MONOTONIC",
                "AllTimerTypes/TimerfdTest.BlockingPoll_SetTimeResetsExpirations/CLOCK_BOOTTIME",

                // timers_test
                "IntervalTimerTest.SingleShotSilent",
                "IntervalTimerTest.PeriodicGroupDirectedSignal",
                "IntervalTimerTest.PeriodicThreadDirectedSignal",
                "TimerTest.ProcessPingedRepeatedlyAfterCPUSoftLimit",
                "TimerTest.ProcessKilledOnCPUHardLimit",
                "IntervalTimerTest.OtherThreadGroup",
                "IntervalTimerTest.PeriodicSilent",
                "IntervalTimerTest.IsInitiallyStopped",
                "IntervalTimerTest.RealTimeSignalsAreNotDuplicated",
                "IntervalTimerTest.IgnoredSignalCountsAsOverrun",
                "TimerTest.ProcessKilledOnCPUSoftLimit",

                // utimes_test
                "UtimesTest.*",
                "FutimesatTest.*",
                "UtimensatTest.OnAbsPath",
                "UtimensatTest.OnRelPath",
                "UtimensatTest.InvalidNsec",
                "Utimensat.*",
                "UtimeTest.*",

                // wait_test - https://fxbug.dev/79451
                "WaitTest.KillZombie",
                "WaitTest.Wait4Rusage",
                "WaitTest.WaitidRusage",
                "Waiters/WaitAnyChildTest.WaitedChildRusage/*",
                "Waiters/WaitAnyChildTest.IgnoredChildRusage/*",
                "Waiters/WaitSpecificChildTest.SiblingChildrenWNOTHREAD/0",

                // The test runs as follows:
                // 1. P0T0 forks itself creating P1T0.
                // 2. P0T0 waits for P1 to exit normally.
                // 3. P1T0 clones itself using CLONE_THREAD | CLONE_VFORK. This creates P1T1 and
                //    halts P1T0.
                // 4. P1T1 invokes execve and successfully changes the running program to /bin/true.
                //
                // At this point, because execve was successful, P1T0 is supposed to be destroyed.
                // However, this is not implemented currently. P1T0 is unblocked, but it segfaults
                // (most likely due to the change of running program), failing the test.
                "Waiters/WaitSpecificChildTest.AfterChildExecve/*",

                // write_test
                "WriteTest.WriteExceedsRLimit",
                "WriteTest.PartialWriteSIGSEGV",
                "WriteTest.PartialWriteSIGBUS",
            ],
        },
        {
            type: "skip",
            matchers: [
                // These tests hang.
                "Syscall32Bit.Sysenter",
                "Syscall32Bit.Int80",
                "Syscall32Bit.Syscall",
                "Call32Bit.Disallowed",
                "ChrootTest.ProcMemSelfMapsNoEscapeProcOpen",
                "ConcurrencyTest.MultiProcessConcurrency",
                "ExceptionTest.AlignmentCheck",
                "ExceptionTest.AlignmentHalt",
                "ExceptionTest.Halt",
                "ExceptionTest.DivideByZero",
                "ExceptionTest.X87DivideByZeroUnmasked",
                "ExceptionTest.X87StatusClobber",
                "ExceptionTest.SSEDivideByZeroUnmasked",
                "ExceptionTest.IOAccessFault",
                "ExceptionTest.Int3Normal",
                "ExceptionTest.Int3Compact",
                "ElfTest.Execute",
                "ElfTest.MissingText",
                "ElfTest.ExtraMemPages",
                "ElfTest.DataSegment",
                "ElfTest.AnonOnlySegment",
                "ElfTest.UnalignedOffset",
                "ElfTest.MissingPhdr",
                "ElfTest.PIE",
                "ElfTest.PIENonZeroStart",
                "ElfTest.PIEOutOfOrderSegments",
                "ElfTest.PIEOverflow",
                "ElfTest.ELFInterpreter",
                "ElfTest.ELFInterpreterRelative",
                "ElfTest.ELFInterpreterWrongArch",
                "ElfTest.NoExecute",
                "ElfTest.ElfInterpreterNoExecute",
                "EpollTest.DoubleEpollOneShot",
                "EpollTest.UnblockWithSignal",
                "ExecveTest.BrkAfterBinary",
                "Cases/ElfInterpreterBadPathTest.Test/*",
                "Cases/ElfInterpreterStaticTest.Test/*",
                "SharedPrivate/PrivateAndSharedFutexTest.Wake0/*",
                "SharedPrivate/PrivateAndSharedFutexTest.WakeOpCondSuccess/*",
                "SharedPrivate/PrivateAndSharedFutexTest.WakeOpCondFailure/*",
                "Inotify.NonBlockingReadReturnsEagain",
                "Inotify.ReadWithTooSmallBufferFails",
                "Inotify.BlockingReadOnInotifyFd",
                "Inotify.EpollNoDeadlock",

                // Passes in debian image, remove.
                "ExecveTest.SymlinkLoop",

                // Passes in debian image, remove.
                "ExecveTest.Directory",
                "InterpreterScriptTest.Execute",

                // Passes in debian image, remove.
                "InterpreterScriptTest.InterpreterScriptNoExecute",
                "InterpreterScriptTest.BinaryNoExecute",
                "InterpreterScriptTest.RelativePath",
                "InterpreterScriptTest.Symlink",

                // Passes in debian image, remove.
                "InterpreterScriptTest.SymlinkLoop",
                "InterpreterScriptTest.UncleanPath",
                "ItimerTest.DeliversSIGPROFToThreadsRoughlyFairlyIdle",

                // Passes in debian image, remove.
                "MMapTest.MapDevZeroSegfaultAfterUnmap",
                "PingSocket.ICMPPortExhaustion",
                "Pipes/PipeTest.ZeroSize/*",
                "PollTest.BlockingEventPOLLRDNORM",
                "PollTest.BlockingEventPOLLWRNORM",
                "ProcTask.TaskDirCannotBeDeleted",
                "SigaltstackTest.WalksOffBottom",
                "Signalfd/SignalfdTest.Blocking/*",
                "Signalfd/SignalfdTest.ThreadGroup/*",
                "SigtimedwaitTest.AlarmReturnsAlarm",
                "SigtimedwaitTest.NullTimeoutReturnsEINTR",
                "AddressFamily/SendFileTest.SendMultiple/*",
                "AddressFamily/SendFileTest.Shutdown/*",
                "NetlinkRouteTest.LookupAll",
                "BindToDeviceTest/BindToDeviceDistributionTest.Tcp/*",
                "BindToDeviceTest/BindToDeviceDistributionTest.Udp/*",
                "BlockingTCPSockets/BlockingStreamSocketPairTest.SendMsgTooLarge/*",
                "AllConnectedSockets/DataTransferStressTest.BigDataTransfer/*",
                "AllUnixDomainSockets/UnboundDgramUnixSocketPairTest.ZeroWriteAllowed/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.ZeroLengthMessageFDDiscarded/*",
                "SpliceTest.ToPipe",
                "SpliceTest.ToPipeOffset",
                "SpliceTest.TwoPipes",
                "TeeTest.BlockingWrite",
                "SpliceTest.Blocking",
                "TeeTest.MultiPage",
                "TeeTest.Blocking",
                "TimerTest.ProcessKilledOnCPUHardLimit",
                "TimerTest.ProcessKilledOnCPUSoftLimit",
                "TimerTest.ProcessPingedRepeatedlyAfterCPUSoftLimit",
                "AllInetTests/SimpleTcpSocketTest.SynRcvdOnListenerShutdown/*",
                "AllInetTests/SimpleTcpSocketTest.CloseNonConnectedLingerOption/*",
                "FlockTest.TestSharedLockFailExclusiveHolderBlocking",
                "FlockTest.TestExclusiveLockFailExclusiveHolderBlocking",

                // TODO(fxbug.dev/105339): Re-enable once flake is resolved.
                "Waiters/WaitSpecificChildTest.MultipleForkOutOfOrder/*",

                // TODO(fxbug.dev/120705): Re-enable once flake is resolved.
                "SharedPrivate/PrivateAndSharedFutexTest.Wait_BitsetTimeout/*",

                // TODO(fxbug.dev/120707): Re-enable once flake is resolved.
                "FilesystemUnixSockets/AllSocketPairTest.RecvTimeoutUsecTooLarge/*",

                // These tests are flaky.
                "FcntlTest.SetFdO_ASYNC",
                "AllInetTests/RawSocketTest.SendAndReceive/*",
                "AllInetTests/RawSocketTest.MultipleSocketReceive/*",
                "AllInetTests/RawSocketTest.RecvBufLimitsEmptyRecvBuffer/*",
                "AllInetTests/RawSocketTest.SendAndReceiveViaConnect/*",
                "UnameTest.Sanity",

                // TODO: These tests have different outcomes in socket_domain_test and
                // socket_ip_tcp_loopback_test.
                "AllUnixDomainSockets/AllSocketPairTest.SendmsgRecvmsgMsgCtruncNoop/*",
                "AllUnixDomainSockets/AllSocketPairTest.SetAndGetBooleanSocketOptions/*",
                "AllUnixDomainSockets/AllSocketPairTest.GetSocketOutOfBandInlineOption/*",

                // TODO(fxbug.dev/114813): Re-enable once CLONE_VM | CLONE_THREAD is implemented
                "Waiters/WaitAnyChildTest.CloneSIGCHLD/*",
                "Waiters/WaitAnyChildTest.ForkAndClone/*",
                "Waiters/WaitSpecificChildTest.CloneSIGCHLD/*",
                "Waiters/WaitSpecificChildTest.CloneNoSIGCHLD/*",
                "Waiters/WaitSpecificChildTest.CloneAfterExit/*",
                "Waiters/WaitSpecificChildTest.CloneWCLONE/*",
                "Waiters/WaitSpecificChildTest.WALL/*",

                // mremap_test - https://fxbug.dev/79303
                // Skip the only death test since Starnix doesn't support handling SIGBUS
                // for processes.
                "MremapDeathTest.SharedAnon",

                // These tests cause fatal signals that crash the test suite.
                "AffinityTest.SchedSetAffinityInvalidSize",
                "ExecveatTest.UnshareFiles",
                "FaultTest.InRange",
                "FPSigTest.Fork",
                "FPSigTest.ForkWithZeroMxcsr",
                "MMapDeathTest.TruncateAfterCOWBreak",
                "MMapTest.ProtNoneDeath",
                "MMapTest.ReadOnlyDeath",
                "MMapTest.MprotectReadOnlyDeath",
                "MMapTest.NoProtExecDeath",
                "MMapFileTest.MapOffsetBeyondEnd",
                "MMapFileTest.ReadSharedTruncateSIGBUS",
                "MMapFileTest.WriteSharedTruncateSIGBUS",
                "ReadWriteSharedPrivate/MMapFileParamTest.SigBusDeath/*",
                "MountTest.TmpfsSizeMmap",
                "ProcPidCmdline.SubprocessForkSameCmdline",
                "SigaltstackTest.SetCurrentStack",
                "Signalfd.KillStillKills",
                "IntervalTimerTest.AlreadyPendingSignal",
                "TimeTest.VsyscallTime_InvalidAddressSIGSEGV",
                "TkillTest.ValidTIDAndRealSignal",
                "VsyscallTest.VsyscallAlwaysAvailableOnGvisor",

                // Causes some other wait tests to fail.
                "WaitTest.TraceeWALL",

                // Fails in updated image, but passes with current. Will be removed after rolling
                // new images.
                "RlimitTest.SetRlimitHigher",

                // Require robust pthread mutexes.
                "RobustFutexTest.*",

                // uidgid_test - https://fxbug.dev/79438
                "UidGidRootTest.SetgidNotFromThreadGroupLeader",

                // socket_ipv4_udp_unbound_external_networking_test
                "IPv4UDPUnboundSockets/IPv4UDPUnboundExternalNetworkingSocketTest*",

                // socket_bind_to_device_test
                "BindToDeviceTest*",

                // partial_bad_buffer_test
                // Passes in debian image, remove.
                "PartialBadBufferTest*",
            ],
        },
    ],
}
