// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    children: [
        {
            name: "bootstrap",
            url: "fuchsia-boot:///#meta/bootstrap.cm",
            startup: "eager",
        },
        {
            name: "startup",
            url: "fuchsia-boot:///#meta/startup.cm",
            startup: "eager",
        },
        {
            name: "core",
            url: "fuchsia-pkg://fuchsia.com/core#meta/core.cm",
            environment: "#core-env",
            on_terminate: "reboot",
        },
    ],
    offer: [
        {
            protocol: "fuchsia.component.Binder",
            from: "#core",
            as: "fuchsia.component.CoreBinder",
            to: "#startup",
        },
        {
            protocol: "fuchsia.logger.LogSink",
            from: "#bootstrap",
            to: "#startup",
        },

        // We route LogSink from void to bootstrap to satisfy the requirement
        // that LogSink is routed everywhere. Bootstrap is exposing LogSink,
        // so it doesn't need to have a LogSink routed to it.
        {
            protocol: "fuchsia.logger.LogSink",
            from: "void",
            to: "#bootstrap",
            availability: "optional",
        },

        // Capabilities routed from "parent" at the root are either provided by
        // bootsvc through component_manager's namespace or by component_manager
        // itself as a builtin service
        {
            directory: "boot",
            from: "parent",
            to: [
                "#bootstrap",
                "#core",
            ],
        },
        {
            protocol: [
                "fuchsia.boot.Arguments",
                "fuchsia.boot.FactoryItems",
                "fuchsia.boot.Items",
                "fuchsia.boot.ReadOnlyLog",
                "fuchsia.boot.RootResource",
                "fuchsia.boot.SvcStashProvider",
                "fuchsia.boot.WriteOnlyLog",
                "fuchsia.kernel.CpuResource",
                "fuchsia.kernel.DebugResource",
                "fuchsia.kernel.EnergyInfoResource",
                "fuchsia.kernel.HypervisorResource",
                "fuchsia.kernel.InfoResource",
                "fuchsia.kernel.IoportResource",
                "fuchsia.kernel.IrqResource",
                "fuchsia.kernel.MexecResource",
                "fuchsia.kernel.MmioResource",
                "fuchsia.kernel.PowerResource",
                "fuchsia.kernel.RootJob",
                "fuchsia.kernel.RootJobForInspect",
                "fuchsia.kernel.SmcResource",
                "fuchsia.kernel.Stats",
                "fuchsia.kernel.VmexResource",
                "fuchsia.process.Launcher",
                "fuchsia.sys2.CrashIntrospect",
            ],
            from: "parent",
            to: [
                "#bootstrap",
                "#core",
            ],
        },
        {
            event_stream: [
                "capability_requested",
                "debug_started",
                "destroyed",
                "directory_ready",
                "discovered",
                "started",
                "stopped",
            ],
            from: "parent",
            to: [
                "#bootstrap",
                "#core",
            ],
        },
        {
            protocol: [
                "fuchsia.net.name.Lookup",
                "fuchsia.posix.socket.Provider",
            ],
            from: "#core",
            to: "#bootstrap",
            dependency: "weak",
        },
        {
            protocol: [ "fuchsia.time.Maintenance" ],
            from: "parent",
            to: "#core",
        },
        {
            protocol: [ "fuchsia.sys2.SystemController" ],
            from: "parent",
            to: "#bootstrap",
        },

        // ...and the rest of these are capabilities provided by components for each other
        {
            directory: [
                "bin",
                "blob",
                "build-info",
                "config-data",
                "data",
                "dev-class",
                "dev-topological",
                "factory",
                "mnt",
                "pkgfs",
                "root-ssl-certificates",
                "system",
                "tmp",
            ],
            from: "#bootstrap",
            to: "#core",
        },

        // Non-zircon services for svchost
        {
            protocol: [
                "dev-null",
                "dev-zero",
                "fuchsia.device.NameProvider",
                "fuchsia.diagnostics.ArchiveAccessor",
                "fuchsia.diagnostics.FeedbackArchiveAccessor",
                "fuchsia.diagnostics.LegacyMetricsArchiveAccessor",
                "fuchsia.diagnostics.LoWPANArchiveAccessor",
                "fuchsia.driver.development.DriverDevelopment",
                "fuchsia.driver.registrar.DriverRegistrar",
                "fuchsia.fshost.Admin",
                "fuchsia.fshost.BlockWatcher",
                "fuchsia.hardware.power.statecontrol.Admin",
                "fuchsia.hardware.power.statecontrol.RebootMethodsWatcherRegister",
                "fuchsia.hardware.pty.Device",
                "fuchsia.hardware.usb.DeviceWatcher",
                "fuchsia.kernel.Counter",
                "fuchsia.kernel.DebugBroker",
                "fuchsia.logger.Log",
                "fuchsia.logger.LogSink",
                "fuchsia.paver.Paver",
                "fuchsia.pkg.PackageCache",
                "fuchsia.pkg.RetainedPackages",
                "fuchsia.power.button.Monitor",
                "fuchsia.power.clientlevel.Connector",
                "fuchsia.power.profile.Watcher",
                "fuchsia.power.systemmode.ClientConfigurator",
                "fuchsia.power.systemmode.Requester",
                "fuchsia.scheduler.ProfileProvider",
                "fuchsia.space.Manager",
                "fuchsia.sysinfo.SysInfo",
                "fuchsia.sysmem.Allocator",
                "fuchsia.thermal.ClientStateConnector",
                "fuchsia.tpm.cr50.Cr50",
                "fuchsia.tpm.cr50.PinWeaver",
                "fuchsia.tracing.kernel.Controller",
                "fuchsia.tracing.kernel.Reader",
                "fuchsia.update.verify.BlobfsVerifier",
                "fuchsia.vboot.FirmwareParam",
                "fuchsia.virtualconsole.SessionManager",
            ],
            from: "#bootstrap",
            to: "#core",
        },

        // Non-zircon services for archivist, svchost, and console.
        {
            protocol: [
                "fuchsia.component.KcounterBinder",
                "fuchsia.component.LogStatsBinder",
                "fuchsia.component.PersistenceBinder",
                "fuchsia.component.SamplerBinder",
                "fuchsia.exception.Handler",
                "fuchsia.feedback.CrashReporter",
                "fuchsia.feedback.DataProvider",
                "fuchsia.metrics.MetricEventLoggerFactory",
                "fuchsia.pkg.PackageResolver",
                "fuchsia.pkg.RepositoryManager",
                "fuchsia.pkg.rewrite.Engine",
                "fuchsia.process.Resolver",
                "fuchsia.settings.Input",
                "fuchsia.ui.activity.Provider",
                "fuchsia.update.CommitStatusProvider",
            ],
            from: "#core",
            to: "#bootstrap",
            dependency: "weak",
        },
        {
            protocol: [ "fuchsia.component.DetectBinder" ],
            from: "#core",
            to: "#bootstrap",
            dependency: "weak",
            availability: "same_as_target",
        },
        {
            protocol: [
                "fuchsia.memorypressure.Provider",
                "fuchsia.sys.internal.ComponentEventProvider",
                "fuchsia.sys.internal.LogConnector",
            ],
            from: "#core",
            to: "#bootstrap",
            dependency: "weak",
            availability: "optional",
        },

        // Trace manager may be excluded from builds where tracing is not
        // expected to be used for observability, such as in the bringup
        // product and non-eng builds of any product.
        {
            protocol: [
                "fuchsia.tracing.controller.Controller",
                "fuchsia.tracing.provider.Registry",
            ],
            from: "#core",
            to: "#bootstrap",
            dependency: "weak",
            availability: "optional",
        },
        {
            protocol: [
                "fuchsia.virtualization.DebianGuestManager",
                "fuchsia.virtualization.LinuxManager",
                "fuchsia.virtualization.TerminaGuestManager",
                "fuchsia.virtualization.ZirconGuestManager",
            ],
            from: "#core",
            to: "#bootstrap",
            dependency: "weak",
            source_availability: "unknown",
        },

        // RCS uses the root hub for service discovery.
        {
            directory: "hub",
            from: "framework",
            to: [
                "#bootstrap",
                "#core",
            ],
        },
        {
            protocol: "fuchsia.sys2.RealmExplorer",
            from: "framework",
            as: "fuchsia.sys2.RealmExplorer.root",
            to: [
                "#bootstrap",
                "#core",
            ],
        },
        {
            protocol: "fuchsia.sys2.RealmQuery",
            from: "framework",
            as: "fuchsia.sys2.RealmQuery.root",
            to: [
                "#bootstrap",
                "#core",
            ],
        },
        {
            protocol: "fuchsia.sys2.LifecycleController",
            from: "framework",
            as: "fuchsia.sys2.LifecycleController.root",
            to: "#core",
        },
        {
            protocol: "fuchsia.sys2.RouteValidator",
            from: "framework",
            as: "fuchsia.sys2.RouteValidator.root",
            to: "#core",
        },

        // Offer boot resolver to `bootstrap` for driver usage.
        {
            resolver: "boot_resolver",
            from: "parent",
            to: "#bootstrap",
        },

        // `core/account` needs to create an Fxfs volume for each account.
        {
            protocol: "fuchsia.fxfs.Volumes",
            from: "#bootstrap",
            to: "#core",
            availability: "optional",
        },
    ],
    expose: [
        // For reboot_on_terminate
        {
            protocol: "fuchsia.hardware.power.statecontrol.Admin",
            from: "#bootstrap",
        },
    ],
    environments: [
        {
            name: "core-env",
            extends: "realm",
            resolvers: [
                {
                    resolver: "base_resolver",
                    from: "#bootstrap",
                    scheme: "fuchsia-pkg",
                },
            ],
        },
    ],
}
