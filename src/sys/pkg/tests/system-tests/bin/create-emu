#!/bin/bash
# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#### CATEGORY=Run, inspect and debug
### create a persistent fuchsia image in a directory
## create a persistent fuchsia image in a directory
##
## usage: create-emu --image-dir <DIR> [--image-size SIZE] [--abr-size SIZE] [--system-disk-size SIZE] [run-zircon arguments...]
##
##     --image-dir    create and run the fuchsia image from this directory
##     --image-size   total image size in bytes (default 4 GiB)
##     --abr-size     abr partition size in bytes (default 256 MiB)
##     --system-disk-size     fvm partition size in bytes (default fills)
##
## This command creates a Fuchsia image in the specified directory. As part of
## this process, it starts up the image in QEMU so that we can copy in our
## ssh authorized keys file. We do this through QEMU because there is no
## host-side tooling that lets us inject this file into minfs or fxfs.
##
## Once complete, this image will be ready to be used with `run-emu`.
##
## This command delegates to //src/sys/pkg/tests/system-tests/run-zircon. Flags
## are documented in that script, and can be discovered by passing -h or
## --help.
##

set -e

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)/../../../../../../tools/devshell/lib/vars.sh" || exit $?
fx-config-read

IMGDIR=
IMAGE_SIZE_BYTES=$(( 4 * 1024 * 1024 * 1024)) # total image size is 4 GiB by default
ABR_SIZE_BYTES=$(( 256 * 1024 * 1024 ))       # ABR slot size is 256 MiB by default
FVM_SIZE_BYTES=                               # fill the remaining space with the FVM by default
trailing_args=()

while (($#)); do
  case "$1" in
    -h|--help)
      fx-command-help
      echo
      echo "additional flags that are passed on to run-zircon:"
      echo
      "${FUCHSIA_DIR}/zircon/scripts/run-zircon" -h
      exit 1
      ;;
    --image-dir)
      shift
      IMGDIR=$1
      ;;
    --image-size)
      shift
      IMAGE_SIZE_BYTES=$1
      ;;
    --abr-size)
      shift
      ABR_SIZE_BYTES=$1
      ;;
    --system-disk-size)
      shift
      FVM_SIZE_BYTES=$1
      ;;
    *)
      trailing_args+=("$1")
      ;;
  esac
  shift
done

if [[ -z "${IMGDIR}" ]]; then
  fx-error "--image-dir must be specified"
  exit 1
fi

declare -a CLEANUP_LIST
function cleanup {
  # want to make sure we kill any long running processes if this shell dies.
  local child_pids=$(jobs -p)
  if [[ -n "${child_pids}" ]]; then
    # Note: child_pids must be expanded to args here.
    kill ${child_pids} 2> /dev/null
    wait 2> /dev/null
  fi

  for i in "${CLEANUP_LIST[@]}"; do
    rm -rf "${i}"
  done
}
trap cleanup EXIT

IMGDIR_OVMF_VARS="${IMGDIR}/OVMF_VARS.fd"
IMGDIR_FUCHSIA="${IMGDIR}/fuchsia.efi"

if [[ -e "${IMGDIR_OVMF_VARS}" || -e "${IMGDIR_FUCHSIA}" ]]; then
  fx-error "image directory ${IMGDIR} should be empty, or you should use 'run-emu'"
  exit 1
fi

if [[ ! -d "${IMGDIR}" ]]; then
  mkdir -p "${IMGDIR}"
fi

fx-info "Creating ${IMGDIR_FUCHSIA}..."

# Ensure that the output is sent to the serial, and that we boot into zedboot.
CMDLINE=$(mktemp "${IMGDIR}/CMDLINE.XXXXXXX")
CLEANUP_LIST+=( "${CMDLINE}" )

cat << EOF > "${CMDLINE}"
kernel.serial=legacy
TERM=xterm-256color
kernel.halt-on-panic=true
bootloader.default=local
bootloader.timeout=0
EOF

# Bake the authorized keys into the Kernel ZBI so we can ssh into it.
ZBI_IMAGE="$(fx-command-run list-build-artifacts --type zbi --name zircon-a images)"
ZBI_IMAGE="${FUCHSIA_BUILD_DIR}/${ZBI_IMAGE}"
KERNEL_ZBI="${IMGDIR}/fuchsia-ssh.zbi"
fx-zbi -o "${KERNEL_ZBI}" \
  "${ZBI_IMAGE}" \
  --entry "data/ssh/authorized_keys=$(get-ssh-authkeys)" \
  --type=entropy:64 /dev/urandom

# Construct a Fuchsia image.
MAKE_FUCHSIA_VOL_ARGS=(
  --fuchsia-build-dir "${FUCHSIA_BUILD_DIR}"
  --cmdline "${CMDLINE}"
  --resize "${IMAGE_SIZE_BYTES}"
  --zbi "${KERNEL_ZBI}"
)

if [[ -n "${FVM_SIZE_BYTES}" ]]; then
  MAKE_FUCHSIA_VOL_ARGS+=( --system-disk-size "${FVM_SIZE_BYTES}" )
fi

if [[ -n "${ABR_SIZE_BYTES}" ]]; then
  MAKE_FUCHSIA_VOL_ARGS+=( --abr-size "${ABR_SIZE_BYTES}" )
fi

"${FUCHSIA_BUILD_DIR}/host-tools/make-fuchsia-vol" \
  "${MAKE_FUCHSIA_VOL_ARGS[@]}" \
  "${IMGDIR_FUCHSIA}"

fx-info "Created ${IMGDIR_FUCHSIA}"

# Copy in the OMVF_VARS.fd into our temp directory, which allows EFI data to be
# persisted across reboots.
fx-info "Creating ${IMGDIR_OVMF_VARS}"

cp "${PREBUILT_EDK2_DIR}/qemu-x64/OVMF_VARS.fd" "${IMGDIR_OVMF_VARS}"

fx-info "Created ${IMGDIR_OVMF_VARS}"

# Make sure the OVMF_VARS file is writable.
chmod +w "${IMGDIR_OVMF_VARS}"

# Emulators always have the same mac address, so they always have this device
# name.
DEVICE_NAME=fuchsia-5254-0063-5e7a

# Launch QEMU. We run it in the background so we can copy over the SSH
# authorized keys file.
QEMU_LOG="${IMGDIR}/create-emu.log"

fx-info "Launching QEMU to install the SSH authorized keys. See log in $QEMU_LOG for more details..."

"${FUCHSIA_DIR}/src/sys/pkg/tests/system-tests/bin/run-emu" \
  --image-dir "${IMGDIR}" \
  "${trailing_args[@]}" >"${QEMU_LOG}" 2>&1 &

QEMU_PID=$!

sleep 5

# Check if QEMU is still running.
if ! kill -0 "${QEMU_PID}" 2>/dev/null; then
  # reap the QEMU process.
  wait "${QEMU_PID}" || true

  fx-error "QEMU died before we were able to connect to it"
  fx-error "see ${QEMU_LOG} for more details"
  exit 1
fi

fx-info "Waiting to connect to instance..."

# Even though we baked the authorized_keys into the ZBI, we'll lose it if we
# install an OTA. So also copy the file onto the filesystem so it will persist.
if ! ffx --target "${DEVICE_NAME}" --timeout 120 target wait; then
  fx-error "failed to connect to QEMU instance"
  echo "see ${QEMU_LOG} for more details"
  exit 1
fi

# Parse out the instance's IP address that ffx discovered.
if ! INSTANCE_IP=$(ffx --machine json target list | jq -r "map(select(.nodename | contains(\"${DEVICE_NAME}\")))[0].addresses[0]"); then
  fx-error "failed to discover QEMU instance's IP address"
  fx-error "see ${QEMU_LOG} for more details"
  exit 1
fi

if [[ -z "${INSTANCE_IP}" ]]; then
  fx-error "ffx returned an empty IP address for the QEMU instance"
  fx-error "see ${QEMU_LOG} for more details"
  exit 1
fi

fx-info "Connected to instance at ${INSTANCE_IP}."
fx-info "Installing the SSH authorized keys..."

# Copy in the ssh keys.
auth_keys=$(cat $(get-ssh-authkeys))

if ! ssh -F "${FUCHSIA_BUILD_DIR}/ssh-keys/ssh_config" "${INSTANCE_IP}" "echo \"${auth_keys}\" > /data/ssh/authorized_keys"; then
  fx-error "failed to copy authorized keys to instance"
  fx-error "see ${QEMU_LOG} for more details"
  exit 1
fi

# Shut down the instance. This can exit with 0 or 255, which signifies the
# connection closed before ssh was able to disconnect.
ssh -F "${FUCHSIA_BUILD_DIR}/ssh-keys/ssh_config" "${INSTANCE_IP}" "dm shutdown" || EXIT_CODE=$? && EXIT_CODE=$?
if [[ "${EXIT_CODE}" != 0 && "${EXIT_CODE}" != 255 ]]; then
  fx-error "failed to shut down QEMU instance"
  fx-error "see ${QEMU_LOG} for more details"
  exit 1
fi

# Wait for QEMU to shut down.
wait || true

fx-info "Successfully created Fuchsia image in ${IMGDIR}"
