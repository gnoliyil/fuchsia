// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    include: [
        "//src/lib/fuchsia-hyper/hyper.shard.cml",
        "inspect/client.shard.cml",
        "syslog/client.shard.cml",
    ],
    program: {
        runner: "elf",
        binary: "bin/pkg_resolver",
    },
    capabilities: [
        {
            protocol: [
                "fuchsia.pkg.Cup",
                "fuchsia.pkg.PackageResolver",
                "fuchsia.pkg.PackageResolverAdmin",
                "fuchsia.pkg.RepositoryManager",
                "fuchsia.pkg.rewrite.Engine",
            ],
        },
    ],
    use: [
        {
            protocol: [
                "fuchsia.boot.Arguments",
                "fuchsia.metrics.MetricEventLoggerFactory",
                "fuchsia.pkg.PackageCache",
            ],
            from: "parent",
        },
        {
            protocol: [ "fuchsia.pkg.LocalMirror" ],
            from: "parent",
            availability: "optional",
        },
        {
            protocol: [ "fuchsia.tracing.provider.Registry" ],
            from: "parent",

            // Trace manager may be excluded from builds where tracing is not
            // expected to be used for observability, such as in the bringup
            // product and non-eng builds of any product.
            availability: "optional",
        },
        {
            directory: "config-data",
            rights: [ "r*" ],
            path: "/config/data",
        },
        {
            directory: "root-ssl-certificates",
            rights: [ "r*" ],
            path: "/config/ssl",
        },

        // Note: in an ideal world, we'd declare a storage capability here for
        // /data, but we can't *quite* do that because TestRealmBuilder doesn't
        // support mock storage capabilities, and we have some tests that want
        // to inject failures when interacting with /data to verify pkg-resolver's
        // resilience.  To mock that out, we have to use a directory capability.
        // So pkg-resolver's integration tests that include this shard will
        // use a directory capability for /data, and the load-bearing
        // pkg-resolver.cml will specify a storage capability for /data.
    ],
    expose: [
        {
            protocol: [
                "fuchsia.pkg.Cup",
                "fuchsia.pkg.PackageResolver",
                "fuchsia.pkg.PackageResolverAdmin",
                "fuchsia.pkg.RepositoryManager",
                "fuchsia.pkg.rewrite.Engine",
            ],
            from: "self",
        },
    ],
    config: {
        // Whether to fetch delivery blob or uncompressed blob.
        fetch_delivery_blob: { type: "bool" },

        // Whether to fallback to uncompressed blob if fetching delivery blob fails.
        delivery_blob_fallback: { type: "bool" },

        // Whether to allow resolving packages using fuchsia.pkg/LocalMirror.
        allow_local_mirror: { type: "bool" },

        // The timeout, in seconds, to use when performing TUF metadata network operations.
        tuf_metadata_timeout_seconds: { type: "uint32" },

        // The timeout, in seconds, to use when GET'ing a blob HTTP header.
        blob_network_header_timeout_seconds: { type: "uint32" },

        // The timeout, in seconds, to use when waiting for a blob's HTTP body bytes.
        blob_network_body_timeout_seconds: { type: "uint32" },

        // The maximum number of times to try resuming a blob download using HTTP range requests.
        blob_download_resumption_attempts_limit: { type: "uint32" },
    },
}
