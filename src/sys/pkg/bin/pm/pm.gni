# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")

amber_repository_dir = "$root_out_dir/amber-files"

# Directory containing developer signing keys.
amber_keys_dir = "//src/sys/pkg/repositories/devhost/keys"

# Directory containing developer root metadata.
amber_metadata_dir = "//src/sys/pkg/repositories/devhost/metadata"

# Directory containing files named by their merkleroot content IDs in
# ASCII hex.  The //build/image:pm_publish_blobs target populates
# this with copies of build products, but never removes old files.
amber_repository_blobs_dir = "$amber_repository_dir/repository/blobs"

template("_pm") {
  compiled_action(target_name) {
    tool = "//src/sys/pkg/bin/pm:pm_bin"
    tool_output_name = "pm"
    forward_variables_from(invoker,
                           [
                             "args",
                             "data_deps",
                             "depfile",
                             "deps",
                             "inputs",
                             "metadata",
                             "outputs",
                             "public_deps",
                             "testonly",
                             "visibility",
                             "no_output_dir_leaks",
                           ])
  }
}

# Generate a package archive in the format produced by `pm archive'.
#
# The archive is generated at $target_out_dir/$package_name where package_name
# is `get_label_info($package, "name")`
#
# Parameters
#
#   manifest (required)
#     [label] A generate_manifest() target defined earlier in the same file.
#     This provides the contents for the package.
#
#   package (required)
#     [label] A pm_build() target defined earlier in the same file.
#
#   archive_name (optional)
#     [string] The name of the far file to output.
template("pm_archive") {
  assert(defined(invoker.manifest), "manifest is required")
  assert(defined(invoker.package), "package is required")

  # This must be the same as the output directory used by pm_build.
  package_name = get_label_info(invoker.package, "name")
  pkg_out_dir = get_label_info(invoker.package, "target_out_dir")
  pkg_out_dir = "$pkg_out_dir/$package_name"
  pkg_manifest_outputs = get_target_outputs(invoker.manifest)
  pkg_manifest_file = pkg_manifest_outputs[0]

  _pm(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "no_output_dir_leaks",
                           ])

    archive_name = package_name
    if (defined(invoker.archive_name)) {
      archive_name = invoker.archive_name
    }
    deps = [
      invoker.manifest,
      invoker.package,
    ]
    inputs = [
      pkg_manifest_file,

      # The output package manifest from pm_build(). This is a hack due to
      # pm archive's lack of support for depfiles, and ensures that this
      # target is rebuilt if any of the files in the dependent package change
      # since that would modify package_manifest.json.
      "$pkg_out_dir/package_manifest.json",
    ]
    outputs = [ "$target_out_dir/$archive_name.far" ]
    args = [
      "-o",
      rebase_path(pkg_out_dir, root_build_dir),
      "-m",
      rebase_path(pkg_manifest_file, root_build_dir),
      "archive",
      "-output",
      rebase_path("$target_out_dir/$archive_name", root_build_dir),
    ]
  }
}

# Generate TUF repository metadata and data in a zip file.
#
# NOTE: Unlike `devhost_repository_publish()`, this template will *not* add
# the latest version of artifacts to an existing repository, but rather it
# creates a fresh repository containing only packages referenced in the
# `inputs[0]` list of package metadata.
#
# Globals
#
#   amber_keys_dir
#     [path] Directory where TUF keys for signing metadata are stored.
#
#   amber_metadata_dir
#     [path] Directory where TUF root metadata is stored.
#
# Parameters
#
#   inputs (required)
#     [list of labels] A list of exactly one input: A list of package metadata
#     from the set of packages to be published in the TUF repository. For
#     example, the output from a generate_package_metadata() target.
#
#   deps (optional)
#   data_deps (optional)
#   testonly (optional)
#   visibility (optional)
#     Same as for any GN `action()` target.
template("pm_publish_archive") {
  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "data_deps",
                             "inputs",
                             "testonly",
                             "visibility",
                           ])
    gendir = "${target_out_dir}/${target_name}/gen"
    output = "${target_out_dir}/${target_name}.zip"

    # TODO(fxbug.dev/94229): Action tracer does not observe `pm` writes because
    # golang binaries are statically linked and invoke syscalls directly and
    # action tracer relies on dynamically linking its own tracing library.
    hermetic_action_ignored_prefixes = [ gendir ]

    if (!defined(deps)) {
      deps = []
    }
    deps += [ "//src/sys/pkg/bin/pm:pm_bin($host_toolchain)" ]

    sources = [
      # Injected key files read by `pm publish`.
      "${amber_keys_dir}/snapshot.json",
      "${amber_keys_dir}/targets.json",
      "${amber_keys_dir}/timestamp.json",

      # Injected root metadata for TUF repository.
      "${amber_metadata_dir}/1.root.json",
      "${amber_metadata_dir}/2.root.json",
      "${amber_metadata_dir}/3.root.json",
      "${amber_metadata_dir}/4.root.json",
      "${amber_metadata_dir}/5.root.json",
      "${amber_metadata_dir}/6.root.json",
      "${amber_metadata_dir}/7.root.json",
      "${amber_metadata_dir}/8.root.json",
      "${amber_metadata_dir}/9.root.json",
    ]

    assert(inputs == [ inputs[0] ],
           "pm_publish_archive(\"$target_name\") requires exactly one input")

    # inputs[0] is input to `pm publish`; the action's other input is the `pm`
    # binary itself.
    inputs += [ "${host_out_dir}/pm" ]

    script = "//src/sys/pkg/bin/pm/pm_publish_archive.py"
    args = [
      "--pm",
      rebase_path("${host_out_dir}/pm", root_build_dir),

      "--key",
      rebase_path("${amber_keys_dir}/snapshot.json", root_build_dir),
      "--key",
      rebase_path("${amber_keys_dir}/targets.json", root_build_dir),
      "--key",
      rebase_path("${amber_keys_dir}/timestamp.json", root_build_dir),

      "--root-metadata",
      rebase_path("${amber_metadata_dir}/1.root.json", root_build_dir),
      "--root-metadata",
      rebase_path("${amber_metadata_dir}/2.root.json", root_build_dir),
      "--root-metadata",
      rebase_path("${amber_metadata_dir}/3.root.json", root_build_dir),
      "--root-metadata",
      rebase_path("${amber_metadata_dir}/4.root.json", root_build_dir),
      "--root-metadata",
      rebase_path("${amber_metadata_dir}/5.root.json", root_build_dir),
      "--root-metadata",
      rebase_path("${amber_metadata_dir}/6.root.json", root_build_dir),
      "--root-metadata",
      rebase_path("${amber_metadata_dir}/7.root.json", root_build_dir),
      "--root-metadata",
      rebase_path("${amber_metadata_dir}/8.root.json", root_build_dir),
      "--root-metadata",
      rebase_path("${amber_metadata_dir}/9.root.json", root_build_dir),

      "--default-root-metadata",
      rebase_path("${amber_metadata_dir}/9.root.json", root_build_dir),

      "--gendir",
      rebase_path(gendir, root_build_dir),
      "--input",
      rebase_path(inputs[0], root_build_dir),
      "--output",
      rebase_path(output, root_build_dir),
    ]
    outputs = [
      # `outputs[0]` must be final output described by depfile.
      output,

      # Intermediate files copied from source locations:

      # Key files read by `pm publish`.
      "${gendir}/keys/snapshot.json",
      "${gendir}/keys/targets.json",
      "${gendir}/keys/timestamp.json",

      # Root metadata for TUF repository.
      "${gendir}/repository/1.root.json",
      "${gendir}/repository/2.root.json",
      "${gendir}/repository/3.root.json",
      "${gendir}/repository/4.root.json",
      "${gendir}/repository/5.root.json",
      "${gendir}/repository/6.root.json",
      "${gendir}/repository/7.root.json",
      "${gendir}/repository/8.root.json",
      "${gendir}/repository/9.root.json",
      "${gendir}/repository/root.json",
    ]
  }
}
