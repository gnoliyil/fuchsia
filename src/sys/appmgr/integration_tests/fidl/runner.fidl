// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library test.component.mockrunner;

using fuchsia.sys;
using zx;

type ComponentInfo = struct {
    unique_id uint64;
    url string;
};

// interface to control the fake component created by MockRunner.
closed protocol MockComponent {
    strict Kill(struct {
        errorcode uint64;
    });
    strict ConnectToService(resource struct {
        service_name string;
        channel zx.Handle:CHANNEL;
    });

    // Set backend service directory which can be used by `PublishService` to
    // publish mock services.
    strict SetServiceDirectory(resource struct {
        channel zx.Handle:CHANNEL;
    });

    // Publishes `service_name` and connects to |backend service directory| when
    // request comes in.
    strict PublishService(struct {
        service_name string;
    }) -> ();

    // Gets program metadata for that particular component.
    strict GetProgramMetadata() -> (struct {
        metadata vector<fuchsia.sys.ProgramMetadata>:20;
    });
};

closed protocol MockRunner {
    strict Crash();
    strict ConnectToComponent(resource struct {
        id uint64;
        req server_end:MockComponent;
    });

    strict -> OnComponentCreated(struct {
        info ComponentInfo;
    });
    strict -> OnComponentKilled(struct {
        id uint64;
    });
};

// This interface will help mock runners register themselves so that tests can
// inspect and control them.
//
// Mock runners should register to this service when started.
@discoverable
closed protocol MockRunnerRegistry {
    strict Register(resource struct {
        runner client_end:MockRunner;
    });
};
