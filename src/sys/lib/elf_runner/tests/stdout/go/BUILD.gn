# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/go/go_binary.gni")
import("//build/go/go_library.gni")

group("go") {
  deps = [
    ":logs-default-go",
    ":logs-stderr-go",
    ":logs-stdout-and-stderr-go",
    ":logs-stdout-go",
  ]
}

# Go programs panic when writing to an unbounded file descriptor (stdout or stderr).
# In order to pass the tests, we create a binary for each test case instead
# of using one for all 3 like we do for Rust and C++.
# See fxbug.dev/72108 for more details.
template("test_case_binary") {
  assert(defined(invoker.test_case), "Parameter 'test_case' is required")

  test_case = invoker.test_case
  library_name = "prints_to_${test_case}_go_lib"
  go_library(library_name) {
    source_dir = "src/${test_case}"
    sources = [ "main.go" ]

    deps = []
  }

  go_binary(target_name) {
    library = ":$library_name"
    output_name = "prints_to_${test_case}_go"
  }
}

test_case_binary("stdout_and_stderr_bin") {
  test_case = "stdout_and_stderr"
}

test_case_binary("stdout_bin") {
  test_case = "stdout"
}

test_case_binary("stderr_bin") {
  test_case = "stderr"
}

fuchsia_component("logs-stdout-and-stderr-go") {
  deps = [ ":stdout_and_stderr_bin" ]
  manifest = "meta/logs_stdout_and_stderr_go.cml"
}

fuchsia_component("logs-default-go") {
  deps = [ ":stdout_and_stderr_bin" ]
  manifest = "meta/logs_default_go.cml"
}

fuchsia_component("logs-stdout-go") {
  deps = [ ":stdout_bin" ]
  manifest = "meta/logs_stdout_go.cml"
}

fuchsia_component("logs-stderr-go") {
  deps = [ ":stderr_bin" ]
  manifest = "meta/logs_stderr_go.cml"
}
