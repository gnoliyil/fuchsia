// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

use {
    crate::{
        component_instance::{ComponentInstanceInterface, ExtendedInstanceInterface},
        error::ComponentInstanceError,
    },
    anyhow::Error,
    clonable_error::ClonableError,
    fidl_fuchsia_component_resolution as fresolution, fidl_fuchsia_io as fio,
    fuchsia_zircon_status as zx,
    lazy_static::lazy_static,
    once_cell::sync::OnceCell,
    std::convert::TryFrom,
    std::sync::Arc,
    thiserror::Error,
    url::Url,
    version_history::AbiRevision,
};

lazy_static! {
    /// A default base URL from which to parse relative component URL
    /// components.
    static ref A_BASE_URL: Url = Url::parse("relative:///").unwrap();
}

/// The response returned from a Resolver. This struct is derived from the FIDL
/// [`fuchsia.component.resolution.Component`][fidl_fuchsia_component_resolution::Component]
/// table, except that the opaque binary ComponentDecl has been deserialized and validated.
#[derive(Debug)]
pub struct ResolvedComponent {
    /// A string indicating which resolver resolved this component (for log
    /// messages and debugging only).
    pub resolved_by: String,
    /// The url used to resolve this component.
    pub resolved_url: String,
    /// The package context, from the component resolution context returned by
    /// the resolver.
    pub context_to_resolve_children: Option<ComponentResolutionContext>,
    pub decl: cm_rust::ComponentDecl,
    pub package: Option<ResolvedPackage>,
    pub config_values: Option<cm_rust::ValuesData>,
    pub abi_revision: Option<AbiRevision>,
}

/// The response returned from a Resolver. This struct is derived from the FIDL
/// [`fuchsia.component.resolution.Package`][fidl_fuchsia_component_resolution::Package]
/// table.
#[derive(Debug)]
pub struct ResolvedPackage {
    /// The package url.
    pub url: String,
    /// The package directory client proxy.
    pub directory: fidl::endpoints::ClientEnd<fio::DirectoryMarker>,
}

impl TryFrom<fresolution::Package> for ResolvedPackage {
    type Error = ResolverError;

    fn try_from(package: fresolution::Package) -> Result<Self, Self::Error> {
        Ok(ResolvedPackage {
            url: package.url.ok_or(ResolverError::PackageUrlMissing)?,
            directory: package.directory.ok_or(ResolverError::PackageDirectoryMissing)?,
        })
    }
}

/// Convenience wrapper type for the autogenerated FIDL
/// `fuchsia.component.resolution.Context`.
#[derive(Debug, Clone, PartialEq, Eq, Ord, PartialOrd, Hash)]
pub struct ComponentResolutionContext {
    pub bytes: Vec<u8>,
}

impl ComponentResolutionContext {
    pub fn new(bytes: Vec<u8>) -> Self {
        ComponentResolutionContext { bytes }
    }
}

impl From<fresolution::Context> for ComponentResolutionContext {
    fn from(context: fresolution::Context) -> Self {
        ComponentResolutionContext { bytes: context.bytes }
    }
}

impl From<&fresolution::Context> for ComponentResolutionContext {
    fn from(context: &fresolution::Context) -> ComponentResolutionContext {
        ComponentResolutionContext { bytes: context.bytes.clone() }
    }
}

impl From<ComponentResolutionContext> for fresolution::Context {
    fn from(context: ComponentResolutionContext) -> Self {
        Self { bytes: context.bytes }
    }
}

impl From<&ComponentResolutionContext> for fresolution::Context {
    fn from(context: &ComponentResolutionContext) -> fresolution::Context {
        Self { bytes: context.bytes.clone() }
    }
}

impl<'a> From<&'a ComponentResolutionContext> for &'a [u8] {
    fn from(context: &'a ComponentResolutionContext) -> &'a [u8] {
        &context.bytes
    }
}

/// Provides the `ComponentAddress` and context for resolving a child or
/// descendent component.
#[derive(Debug, Clone, PartialEq, Eq)]
struct ResolvedAncestorComponent {
    /// The component address, needed for relative path URLs (to get the
    /// scheme used to find the required `Resolver`), or for relative resource
    /// URLs (which will clone the parent's address, but replace the resource).
    pub address: ComponentAddress,
    /// The component's resolution_context, required for resolving descendents
    /// using a relative path component URLs.
    pub context_to_resolve_children: Option<ComponentResolutionContext>,
}

impl ResolvedAncestorComponent {
    /// Creates a `ResolvedAncestorComponent` from one of its child components.
    pub async fn direct_parent_of<C: ComponentInstanceInterface>(
        component: &Arc<C>,
    ) -> Result<Self, ResolverError> {
        let parent_component = get_parent(component).await?;
        let resolved_parent = parent_component.lock_resolved_state().await?;
        Ok(Self {
            address: resolved_parent.address(),
            context_to_resolve_children: resolved_parent.context_to_resolve_children(),
        })
    }

    /// Creates a `ResolvedAncestorComponent` from one of its child components.
    pub async fn first_packaged_ancestor_of<C: ComponentInstanceInterface>(
        component: &Arc<C>,
    ) -> Result<Self, ResolverError> {
        let mut parent_component = get_parent(component).await?;
        loop {
            // Loop until the parent has a valid context_to_resolve_children,
            // or an error getting the next parent, or its resolved state.
            {
                let resolved_parent = parent_component.lock_resolved_state().await?;
                let address = resolved_parent.address();
                // TODO(fxbug.dev/102211): change this test to something more
                // explicit, that is, return the parent's address and context if
                // the component address is a packaged component (determined in
                // some way).
                //
                // The issue being addressed here is, when resolving a relative
                // subpackaged component URL, component manager MUST resolve the
                // component using a "resolution context" _AND_ the resolver
                // that provided that context. Typically these are provided by
                // the parent component, but in the case of a RealmBuilder child
                // component, its parent is the built "realm" (which was
                // resolved by the realm_builder_resolver, using URL scheme
                // "realm-builder://"). The child component's URL is supposed to
                // be relative to the test component (the parent of the realm),
                // which was probably resolved by the full-resolver (scheme
                // "fuchsia-pkg://"). Knowing this expected topology, we can
                // skip "realm-builder" components when searching for the
                // required ancestor's URL scheme (to get the right resolver)
                // and context. This is a brittle workaround that will be
                // replaced.
                //
                // Some alternatives are under discussion, but the leading
                // candidate, for now, is to allow a resolver to return a flag
                // (with the resolved Component; perhaps `is_packaged()`) to
                // indicate that descendents should (if true) use this component
                // to get scheme and context for resolving relative path URLs
                // (for example, subpackages). If false, get the parent's parent
                // and so on.
                if address.scheme() != "realm-builder" {
                    return Ok(Self {
                        address,
                        context_to_resolve_children: resolved_parent.context_to_resolve_children(),
                    });
                }
            }
            parent_component = get_parent(&parent_component).await?;
        }
    }
}

async fn get_parent<C: ComponentInstanceInterface>(
    component: &Arc<C>,
) -> Result<Arc<C>, ResolverError> {
    if let ExtendedInstanceInterface::Component(parent_component) =
        component.try_get_parent().map_err(|err| {
            ResolverError::no_parent_context(anyhow::format_err!(
                "Component {} ({}) has no parent for context: {:?}.",
                component.abs_moniker(),
                component.url(),
                err,
            ))
        })?
    {
        Ok(parent_component.clone())
    } else {
        Err(ResolverError::no_parent_context(anyhow::format_err!(
            "Component {} ({}) has no parent for context.",
            component.abs_moniker(),
            component.url(),
        )))
    }
}

/// Indicates the kind of `ComponentAddress`, and holds `ComponentAddress`
/// properties specific to its kind. Note that there is no kind for a relative
/// resource component URL (a URL that only contains a resource fragment, such
/// as `#meta/comp.cm`) because `ComponentAddress::from()` will translate a
/// resource fragment component URL into one of the fully-resolvable
/// `ComponentAddressKind`s.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum ComponentAddressKind {
    /// A fully-qualified component URL, including scheme and optional authority
    /// (which may be `Some("")`); for example,
    /// "fuchsia-pkg://fuchsia.com/some_package#meta/my_component.cm". If
    /// authority is `None`, the string representation of the component URL will
    /// start with `scheme:` without two slashes. If authority is `Some`, the
    /// string representation will start with `scheme://authority`.
    ///
    /// The query string (excluding the question mark (`?`) prefix) is optional,
    /// _Only an absolute component URL may include a query._ This is a
    /// restriction enforced for component manager. Component manager currently
    /// supports only `hash` query string properties, and subpackage-relative
    /// components get their package hash from the parent package's subpackage
    /// manifest.
    ///
    /// `ComponentAddress` does not constrain the value of the query string.
    /// They may be invalid for some resolvers. Some resolvers may support a
    /// query string of the form `hash=<hex-package-merkle>`.
    Absolute { some_authority: Option<String>, some_query: Option<String> },

    /// A relative Component URL, starting with the package path; for example a
    /// subpackage relative URL such as "needed_package#meta/dep_component.cm".
    RelativePath {
        /// An opaque value (from the perspective of component resolution)
        /// required by the resolver when resolving a relative package path.
        /// For a given child component, this property is populated from a
        /// parent component's `resolution_context`, as returned by the parent
        /// component's resolver.
        context: ComponentResolutionContext,
    },
}

#[derive(Debug, Clone, Eq)]
pub struct ComponentAddress {
    /// The kind of `ComponentAddress` (`Absolute` or `RelativePath`) with
    /// kind-specific additional properties.
    kind: ComponentAddressKind,

    /// The scheme of an ancestor component's URL, used to identify the
    /// `Resolver` in a `ResolverRegistry`.
    scheme: String,

    /// The path part of the component URL. For `RelativePath`, this path MUST
    /// NOT start with a slash (`/`). For subpackages, the path MUST contain
    /// exactly one path segment (no slashes).
    path: String,

    /// The URI fragment used to identify a resource in a package. For
    /// components, this is the component manifest path. For component URLs, the
    /// path MUST NOT start with a pound sign (`#`) or slash (`/`).
    some_resource: Option<String>,

    /// The given URL used to compute the ComponentAddress, which may have
    /// required additional information from its parent component.
    some_original_url: Option<String>,

    /// Holds a resolver-ready computed URL string.
    url: OnceCell<String>,
}

/// Ignore `some_original_url` and `url` when comparing `ComponentAddress`
/// instances.
impl PartialEq for ComponentAddress {
    fn eq(&self, other: &Self) -> bool {
        let ComponentAddress { kind, scheme, path, some_resource, some_original_url: _, url: _ } =
            other;
        &self.kind == kind
            && &self.scheme == scheme
            && &self.path == path
            && &self.some_resource == some_resource
    }
}

impl ComponentAddress {
    /// Creates a new `ComponentAddress` of the `Absolute` kind. This function
    /// is private, to ensure it is only called from `ComponentAddress methods
    /// using validated fields of the `url::Url` struct (extracted via
    /// url::Url::parse()).
    fn new_absolute(
        scheme: &str,
        some_authority: Option<&str>,
        path: &str,
        some_query: Option<&str>,
        some_resource: Option<&str>,
    ) -> Self {
        Self {
            kind: ComponentAddressKind::Absolute {
                some_authority: some_authority.map(str::to_string),
                some_query: some_query.map(str::to_string),
            },
            scheme: scheme.to_owned(),
            path: path.to_owned(),
            some_resource: some_resource.map(str::to_string),
            some_original_url: None,
            url: OnceCell::new(),
        }
    }

    /// Creates a new `ComponentAddress` of the `RelativePath` kind. This
    /// function is private, to ensure it is only called from `ComponentAddress
    /// methods using validated fields of the `url::Url` struct (extracted via
    /// url::Url::parse()).
    fn new_relative_path(
        path: &str,
        some_resource: Option<&str>,
        scheme: &str,
        context: ComponentResolutionContext,
    ) -> Self {
        Self {
            kind: ComponentAddressKind::RelativePath { context },
            scheme: scheme.to_owned(),
            path: path.to_owned(),
            some_resource: some_resource.map(str::to_string),
            some_original_url: None,
            url: OnceCell::new(),
        }
    }

    /// Parse the given absolute `component_url` and create a `ComponentAddress`
    /// with kind `Absolute`.
    pub fn from_absolute_url(component_url: &str) -> Result<Self, ResolverError> {
        let url = match Url::parse(component_url) {
            Ok(url) => url,
            Err(url::ParseError::RelativeUrlWithoutBase) => {
                return Err(ResolverError::RelativeUrlNotExpected(component_url.to_string()))
            }
            Err(err) => return Err(ResolverError::malformed_url(err)),
        };
        let some_authority = if url.has_authority() {
            let mut mod_url = url.clone();
            mod_url.set_path("");
            mod_url.set_query(None);
            mod_url.set_fragment(None);
            let mod_url_str = &mod_url.to_string();
            Some(mod_url_str[mod_url.scheme().len() + 3..mod_url_str.len() - 1].to_owned())
        } else {
            None
        };
        let mut address = Self::new_absolute(
            url.scheme(),
            some_authority.as_deref(),
            url.path(),
            url.query(),
            url.fragment(),
        );
        address.some_original_url = Some(component_url.to_owned());
        Ok(address)
    }

    /// Parse the given `component_url` to determine if it is an absolute URL,
    /// a relative subpackage URL, or a relative resource URL, and return the
    /// corresponding `ComponentAddress` enum variant and value. If the URL is
    /// relative, use the component instance to get the required resolution
    /// context from the component's parent.
    pub async fn from<C: ComponentInstanceInterface>(
        component_url: &str,
        component: &Arc<C>,
    ) -> Result<Self, ResolverError> {
        let result = Self::from_absolute_url(component_url);
        if !matches!(result, Err(ResolverError::RelativeUrlNotExpected(_))) {
            return result;
        }
        let relative_url = parse_relative_url(component_url)?;
        if relative_url.fragment().is_none() && relative_url.path().is_empty() {
            return Err(ResolverError::malformed_url(anyhow::format_err!("{}", component_url)));
        }
        if relative_url.query().is_some() {
            return Err(ResolverError::malformed_url(anyhow::format_err!(
                "Query strings are not allowed in relative component URLs: {}",
                component_url
            )));
        }
        let mut address = if relative_url.path().is_empty() {
            // The `component_url` had only a fragment, so the new address will
            // be the same as its parent (for example, the same package), except
            // for its resource.
            let resolved_parent = ResolvedAncestorComponent::direct_parent_of(component).await?;
            resolved_parent.address.clone_with_new_resource(relative_url.fragment())
        } else {
            // The `component_url` starts with a relative path (for example, a
            // subpackage name). Create a `RelativePath` address, and resolve it
            // using the `context_to_resolve_children`, from this component's
            // parent, or the first ancestor that is from a "package". (Note
            // that Realm Builder realms are synthesized, and not from a
            // package. A test component using Realm Builder will build a realm
            // and may add child components using subpackage references. Those
            // child components should get resolved using the context of the
            // test package, not the intermediate realm created via
            // RealmBuilder.)
            let resolved_ancestor =
                ResolvedAncestorComponent::first_packaged_ancestor_of(component).await?;
            let scheme = resolved_ancestor.address.scheme();
            let context = resolved_ancestor.context_to_resolve_children.clone().ok_or_else(|| {
                    ResolverError::RelativeUrlMissingContext(format!(
                        "Relative path component URL '{}' cannot be resolved because its ancestor did not provide a resolution context. The ancestor's component address is {:?}.",
                         component_url, resolved_ancestor.address
                    ))
                })?;
            Self::new_relative_path(relative_url.path(), relative_url.fragment(), scheme, context)
        };
        address.some_original_url = Some(component_url.to_owned());
        Ok(address)
    }

    /// Creates a new `ComponentAddress` from `self` by replacing only the
    /// component URL resource.
    pub fn clone_with_new_resource(&self, some_resource: Option<&str>) -> Self {
        Self {
            kind: self.kind.clone(),
            scheme: self.scheme.clone(),
            path: self.path.clone(),
            some_resource: some_resource.map(str::to_string),
            some_original_url: None,
            url: OnceCell::new(),
        }
    }

    /// Returns the variant, which is `Absolute` or `RelativePath`.
    pub fn kind(&self) -> &ComponentAddressKind {
        &self.kind
    }

    /// True if the `kind()` is `Absolute`.
    pub fn is_absolute(&self) -> bool {
        matches!(self.kind, ComponentAddressKind::Absolute { .. })
    }

    /// True if the `kind()` is `RelativePath`.
    pub fn is_relative_path(&self) -> bool {
        matches!(self.kind, ComponentAddressKind::RelativePath { .. })
    }

    /// Returns the optional authority value for an `Absolute` component URL, or
    /// `None` if the `Absolute` component URL excluded an authority (if the
    /// scheme was followed by only `:` and not `://`). (Note that this function
    /// will also return `None` for a `RelativePath` component URL, which by
    /// definition has no `authority`.)
    ///
    /// The `authority`, if present, is most commonly only a `host` (such as
    /// "fuchsia.com"), but any spec-legal URI authority it valid in a component
    /// URL. The resolver (as determined by the `scheme`) is responsible for
    /// interpreting the authority and may apply its own constraints.
    pub fn authority(&self) -> Option<&str> {
        if let ComponentAddressKind::Absolute { some_authority, .. } = &self.kind {
            some_authority.as_ref().map(|authority| &**authority)
        } else {
            None
        }
    }

    // Returns the `authority`, if any, or an empty string, if none. Note that
    // this function result will not distinguish between a URL with an empty
    // authority (such as, "file:///") and a URL with no authority (such as
    // "mailto:you@domain.com").
    pub fn authority_or_empty_str(&self) -> &str {
        if let ComponentAddressKind::Absolute { some_authority: Some(authority), .. } = &self.kind {
            authority
        } else {
            ""
        }
    }

    /// Returns the `ComponentResolutionContext` value required to resolve for a
    /// `RelativePath` component URL.
    ///
    /// Panics if called for an `Absolute` component address.
    pub fn context(&self) -> &ComponentResolutionContext {
        if let ComponentAddressKind::RelativePath { context } = &self.kind {
            &context
        } else {
            panic!("context() is only valid for `ComponentAddressKind::RelativePath");
        }
    }

    /// Returns the URL scheme either provided for an `Absolute` URL or derived
    /// from the component's parent. The scheme is used to look up a registered
    /// resolver, when resolving the component.
    pub fn scheme(&self) -> &str {
        &self.scheme
    }

    /// Returns the URL path.
    pub fn path(&self) -> &str {
        &self.path
    }

    /// Returns the optional query value for an `Absolute` component URL.
    /// Always returns `None` for `Relative` component URLs.
    pub fn query(&self) -> Option<&str> {
        if let ComponentAddressKind::Absolute { some_query, .. } = &self.kind {
            some_query.as_deref()
        } else {
            None
        }
    }

    /// Returns the optional component resource, from the URL fragment.
    pub fn resource(&self) -> Option<&str> {
        self.some_resource.as_deref()
    }

    /// Returns the original URL, if this `ComponentAddress` was created by
    /// calling `ComponentAddress::from(<original_url>, ...)`.
    pub fn original_url(&self) -> Option<&str> {
        self.some_original_url.as_deref()
    }

    /// Returns the resolver-ready URL string and, if it is a `RelativePath`,
    /// `Some(context)`, or `None` for an `Absolute` address. Note that, if
    /// the URL has an authority and an empty path, the path root slash (/)
    /// is omitted, by convention.
    pub fn url(&self) -> &str {
        let url = self.url.get_or_init(|| match &self.kind {
            ComponentAddressKind::Absolute { some_authority, some_query } => {
                format!(
                    "{}:{}{}{}{}",
                    self.scheme,
                    if let Some(authority) = some_authority {
                        format!("//{}", authority)
                    } else {
                        "".to_string()
                    },
                    if self.path == "/" && some_authority.iter().any(|a| a.len() > 0) {
                        ""
                    } else {
                        &self.path
                    },
                    if let Some(query) = some_query {
                        format!("?{}", query)
                    } else {
                        "".to_string()
                    },
                    if let Some(resource) = &self.some_resource {
                        format!("#{}", resource)
                    } else {
                        "".to_string()
                    },
                )
            }
            ComponentAddressKind::RelativePath { .. } => {
                if let Some(resource) = &self.some_resource {
                    format!("{}#{}", self.path, resource)
                } else {
                    format!("{}", self.path)
                }
            }
        });
        url
    }

    /// Returns the `url()` and `Some(context)` for resolving the URL,
    /// if the kind is `RelativePath` (or `None` if `Absolute`).
    pub fn to_url_and_context(&self) -> (&str, Option<&ComponentResolutionContext>) {
        let some_context = match &self.kind {
            ComponentAddressKind::Absolute { .. } => None,
            ComponentAddressKind::RelativePath { context } => Some(context),
        };
        (self.url(), some_context)
    }
}

#[derive(Debug)]
struct RelativeUrl {
    path: String,
    query: Option<String>,
    fragment: Option<String>,
}

impl RelativeUrl {
    pub fn path(&self) -> &str {
        &self.path
    }

    pub fn query(&self) -> Option<&str> {
        self.query.as_deref()
    }

    pub fn fragment(&self) -> Option<&str> {
        self.fragment.as_deref()
    }
}

fn parse_relative_url(component_url: &str) -> Result<RelativeUrl, ResolverError> {
    match Url::parse(component_url) {
        Ok(_) => Err(ResolverError::malformed_url(anyhow::format_err!(
            "Error parsing a relative URL given absolute URL '{}'.",
            component_url,
        ))),
        Err(url::ParseError::RelativeUrlWithoutBase) => {
            A_BASE_URL
                .join(component_url)
                .map_err(|err| {
                    ResolverError::malformed_url(anyhow::format_err!(
                        "Error parsing a relative component URL '{}': {:?}.",
                        component_url,
                        err
                    ))
                })
                .map(|url| {
                    // strip the leading slash of relative URL paths
                    RelativeUrl {
                        path: url.path()[1..].to_owned(),
                        query: url.query().map(str::to_string),
                        fragment: url.fragment().map(str::to_string),
                    }
                })
        }
        Err(err) => Err(ResolverError::malformed_url(anyhow::format_err!(
            "Unexpected error while parsing a component URL '{}': {:?}.",
            component_url,
            err,
        ))),
    }
}

/// Errors produced by built-in `Resolver`s and `resolving` APIs.
#[derive(Debug, Error, Clone)]
pub enum ResolverError {
    #[error("an unexpected error occurred: {0}")]
    Internal(#[source] ClonableError),
    #[error("an IO error occurred: {0}")]
    Io(#[source] ClonableError),
    #[error("component manifest not found: {0}")]
    ManifestNotFound(#[source] ClonableError),
    #[error("package not found: {0}")]
    PackageNotFound(#[source] ClonableError),
    #[error("component manifest invalid: {0}")]
    ManifestInvalid(#[source] ClonableError),
    #[error("config values file invalid: {0}")]
    ConfigValuesInvalid(#[source] ClonableError),
    #[error("failed to read manifest: {0}")]
    ManifestIo(zx::Status),
    #[error("failed to read config values: {0}")]
    ConfigValuesIo(zx::Status),
    #[error("Model not available")]
    ModelNotAvailable,
    #[error("scheme not registered")]
    SchemeNotRegistered,
    #[error("malformed url: {0}")]
    MalformedUrl(#[source] ClonableError),
    #[error("relative url requires a parent component with resolution context: {0}")]
    NoParentContext(#[source] ClonableError),
    #[error("package URL missing")]
    PackageUrlMissing,
    #[error("package directory handle missing")]
    PackageDirectoryMissing,
    #[error("url missing resource")]
    UrlMissingResource,
    #[error("a relative URL was not expected: {0}")]
    RelativeUrlNotExpected(String),
    #[error("failed to route resolver capability: {0}")]
    RoutingError(#[source] ClonableError),
    #[error("a resolver resolved a component but did not return its required context")]
    ResolveMustReturnContext,
    #[error("a context is required to resolve relative url: {0}")]
    RelativeUrlMissingContext(String),
    #[error("this component resolver does not resolve relative path component URLs: {0}")]
    UnexpectedRelativePath(String),
    #[error("error creating a resolution context: {0}")]
    CreatingContext(String),
    #[error("error reading a resolution context: {0}")]
    ReadingContext(String),
    #[error("the remote resolver returned invalid data")]
    RemoteInvalidData,
    #[error("an error occurred sending a FIDL request to the remote resolver: {0}")]
    FidlError(#[source] ClonableError),
}

impl ResolverError {
    pub fn internal(err: impl Into<Error>) -> Self {
        Self::Internal(err.into().into())
    }

    pub fn io(err: impl Into<Error>) -> Self {
        Self::Io(err.into().into())
    }

    pub fn manifest_not_found(err: impl Into<Error>) -> Self {
        Self::ManifestNotFound(err.into().into())
    }

    pub fn package_not_found(err: impl Into<Error>) -> Self {
        Self::PackageNotFound(err.into().into())
    }

    pub fn manifest_invalid(err: impl Into<Error>) -> Self {
        Self::ManifestInvalid(err.into().into())
    }

    pub fn config_values_invalid(err: impl Into<Error>) -> Self {
        Self::ConfigValuesInvalid(err.into().into())
    }

    pub fn malformed_url(err: impl Into<Error>) -> Self {
        Self::MalformedUrl(err.into().into())
    }

    pub fn no_parent_context(err: impl Into<Error>) -> Self {
        Self::NoParentContext(err.into().into())
    }

    pub fn routing_error(err: impl Into<Error>) -> Self {
        Self::RoutingError(err.into().into())
    }

    pub fn fidl_error(err: impl Into<Error>) -> Self {
        Self::FidlError(err.into().into())
    }
}

impl From<fresolution::ResolverError> for ResolverError {
    fn from(err: fresolution::ResolverError) -> ResolverError {
        match err {
            fresolution::ResolverError::Internal => ResolverError::internal(RemoteError(err)),
            fresolution::ResolverError::Io => ResolverError::io(RemoteError(err)),
            fresolution::ResolverError::PackageNotFound
            | fresolution::ResolverError::NoSpace
            | fresolution::ResolverError::ResourceUnavailable
            | fresolution::ResolverError::NotSupported => {
                ResolverError::package_not_found(RemoteError(err))
            }
            fresolution::ResolverError::ManifestNotFound => {
                ResolverError::manifest_not_found(RemoteError(err))
            }
            fresolution::ResolverError::InvalidArgs => {
                ResolverError::malformed_url(RemoteError(err))
            }
            fresolution::ResolverError::InvalidManifest => {
                ResolverError::ManifestInvalid(anyhow::Error::from(RemoteError(err)).into())
            }
            fresolution::ResolverError::ConfigValuesNotFound => {
                ResolverError::ConfigValuesIo(zx::Status::NOT_FOUND)
            }
        }
    }
}

impl From<ComponentInstanceError> for ResolverError {
    fn from(err: ComponentInstanceError) -> ResolverError {
        use ComponentInstanceError::*;
        match &err {
            ComponentManagerInstanceUnavailable {}
            | InstanceNotFound { .. }
            | PolicyCheckerNotFound { .. }
            | ComponentIdIndexNotFound { .. }
            | ResolveFailed { .. }
            | UnresolveFailed { .. } => {
                ResolverError::Internal(ClonableError::from(anyhow::format_err!("{:?}", err)))
            }
            NoAbsoluteUrl { .. } => ResolverError::NoParentContext(ClonableError::from(
                anyhow::format_err!("{:?}", err),
            )),
            MalformedUrl { .. } => {
                ResolverError::MalformedUrl(ClonableError::from(anyhow::format_err!("{:?}", err)))
            }
        }
    }
}

#[derive(Error, Clone, Debug)]
#[error("remote resolver responded with {0:?}")]
struct RemoteError(fresolution::ResolverError);

#[cfg(test)]
mod tests {
    use {super::*, assert_matches::assert_matches, fidl::endpoints::create_endpoints};

    #[test]
    fn test_resolved_package() -> anyhow::Result<()> {
        let url = "some_url".to_string();
        let (dir_client, _) =
            create_endpoints::<fio::DirectoryMarker>().expect("failed to create Directory proxy");
        let fidl_package = fresolution::Package {
            url: Some(url.clone()),
            directory: Some(dir_client),
            ..fresolution::Package::EMPTY
        };
        let resolved_package = ResolvedPackage::try_from(fidl_package)?;
        assert_eq!(resolved_package.url, url);
        Ok(())
    }

    #[test]
    fn test_component_address() -> anyhow::Result<()> {
        let address =
            ComponentAddress::from_absolute_url("some-scheme://fuchsia.com/package#meta/comp.cm")?;
        if let ComponentAddressKind::Absolute { some_authority, some_query } = address.kind() {
            assert_eq!(some_authority.as_deref(), Some("fuchsia.com"));
            assert_eq!(some_query, &None);
        }
        assert!(address.is_absolute());
        assert_eq!(address.authority(), Some("fuchsia.com"));
        assert_eq!(address.authority_or_empty_str(), "fuchsia.com");
        assert_eq!(address.scheme(), "some-scheme");
        assert_eq!(address.path(), "/package");
        assert_eq!(address.query(), None);
        assert_eq!(address.resource(), Some("meta/comp.cm"));
        assert_eq!(address.original_url(), Some("some-scheme://fuchsia.com/package#meta/comp.cm"));
        assert_eq!(address.url(), "some-scheme://fuchsia.com/package#meta/comp.cm");
        assert_matches!(
            address.to_url_and_context(),
            ("some-scheme://fuchsia.com/package#meta/comp.cm", None)
        );

        let abs_address = ComponentAddress::new_absolute(
            "some-scheme",
            Some("fuchsia.com"),
            "/package",
            None,
            Some("meta/comp.cm"),
        );
        // Note that `url()` has been called on `address` but not on
        // `abs_address`, and `original_url()` differences should be ignored
        // when comparing.
        assert_eq!(abs_address, address);

        assert_eq!(abs_address, address);
        if let ComponentAddressKind::Absolute { some_authority, .. } = abs_address.kind() {
            assert_eq!(some_authority.as_deref(), Some("fuchsia.com"));
        }
        assert!(abs_address.is_absolute());
        assert_eq!(abs_address.authority(), Some("fuchsia.com"));
        assert_eq!(abs_address.authority_or_empty_str(), "fuchsia.com");
        assert_eq!(abs_address.scheme(), "some-scheme");
        assert_eq!(abs_address.path(), "/package");
        assert_eq!(abs_address.query(), None);
        assert_eq!(abs_address.resource(), Some("meta/comp.cm"));
        assert_eq!(abs_address.url(), "some-scheme://fuchsia.com/package#meta/comp.cm");
        assert_matches!(
            abs_address.to_url_and_context(),
            ("some-scheme://fuchsia.com/package#meta/comp.cm", None)
        );

        let cloned_address = abs_address.clone();
        assert_eq!(abs_address, cloned_address);

        let address2 = abs_address.clone_with_new_resource(Some("meta/other_comp.cm"));
        assert_ne!(address2, abs_address);
        assert!(address2.is_absolute());
        assert_eq!(address2.resource(), Some("meta/other_comp.cm"));
        assert_eq!(address2.scheme(), "some-scheme");
        assert_eq!(address2.authority(), Some("fuchsia.com"));
        assert_eq!(address2.authority_or_empty_str(), "fuchsia.com");
        assert_eq!(address2.path(), "/package");
        assert_eq!(address2.query(), None);

        let rel_address = ComponentAddress::new_relative_path(
            "subpackage",
            Some("meta/subcomp.cm"),
            "some-scheme",
            ComponentResolutionContext::new(vec![b'4', b'5', b'6']),
        );
        if let ComponentAddressKind::RelativePath { context } = rel_address.kind() {
            assert_eq!(&context.bytes, &vec![b'4', b'5', b'6']);
        }
        assert!(rel_address.is_relative_path());
        assert_eq!(rel_address.path(), "subpackage");
        assert_eq!(rel_address.query(), None);
        assert_eq!(rel_address.resource(), Some("meta/subcomp.cm"));
        assert_eq!(&rel_address.context().bytes, &vec![b'4', b'5', b'6']);
        assert_eq!(rel_address.original_url(), None);
        assert_eq!(rel_address.url(), "subpackage#meta/subcomp.cm");
        assert_eq!(
            rel_address.to_url_and_context(),
            (
                "subpackage#meta/subcomp.cm",
                Some(&ComponentResolutionContext::new(vec![b'4', b'5', b'6']))
            )
        );

        let rel_address2 = rel_address.clone_with_new_resource(Some("meta/other_subcomp.cm"));
        assert_ne!(rel_address2, rel_address);
        assert!(rel_address2.is_relative_path());
        assert_eq!(rel_address2.path(), "subpackage");
        assert_eq!(rel_address2.query(), None);
        assert_eq!(rel_address2.resource(), Some("meta/other_subcomp.cm"));
        assert_eq!(&rel_address2.context().bytes, &vec![b'4', b'5', b'6']);
        assert_eq!(rel_address2.original_url(), None);
        assert_eq!(rel_address2.url(), "subpackage#meta/other_subcomp.cm");
        assert_eq!(
            rel_address2.to_url_and_context(),
            (
                "subpackage#meta/other_subcomp.cm",
                Some(&ComponentResolutionContext::new(vec![b'4', b'5', b'6']))
            )
        );

        let address = ComponentAddress::from_absolute_url("base://b")?;
        if let ComponentAddressKind::Absolute { some_authority, .. } = address.kind() {
            assert_eq!(some_authority.as_deref(), Some("b"));
        }
        assert!(address.is_absolute());
        assert_eq!(address.authority(), Some("b"));
        assert_eq!(address.authority_or_empty_str(), "b");
        assert_eq!(address.scheme(), "base");
        assert_eq!(address.path(), "/");
        assert_eq!(address.query(), None);
        assert_eq!(address.resource(), None);
        assert_eq!(address.original_url(), Some("base://b"));
        assert_eq!(address.url(), "base://b");
        assert_matches!(address.to_url_and_context(), ("base://b", None));

        let address = ComponentAddress::from_absolute_url("fuchsia-boot:///#meta/root.cm")?;
        if let ComponentAddressKind::Absolute { some_authority, .. } = address.kind() {
            assert_eq!(some_authority.as_deref(), Some(""));
        }
        assert!(address.is_absolute());
        assert_eq!(address.authority(), Some(""));
        assert_eq!(address.authority_or_empty_str(), "");
        assert_eq!(address.scheme(), "fuchsia-boot");
        assert_eq!(address.path(), "/");
        assert_eq!(address.query(), None);
        assert_eq!(address.resource(), Some("meta/root.cm"));
        assert_eq!(address.original_url(), Some("fuchsia-boot:///#meta/root.cm"));
        assert_eq!(address.url(), "fuchsia-boot:///#meta/root.cm");
        assert_matches!(address.to_url_and_context(), ("fuchsia-boot:///#meta/root.cm", None));

        let address =
            ComponentAddress::from_absolute_url("custom-resolver:my:special:path#meta/root.cm")?;
        if let ComponentAddressKind::Absolute { some_authority, .. } = address.kind() {
            assert_eq!(some_authority, &None);
        }
        assert!(address.is_absolute());
        assert_eq!(address.authority(), None);
        assert_eq!(address.authority_or_empty_str(), "");
        assert_eq!(address.scheme(), "custom-resolver");
        assert_eq!(address.path(), "my:special:path");
        assert_eq!(address.query(), None);
        assert_eq!(address.resource(), Some("meta/root.cm"));
        assert_eq!(address.original_url(), Some("custom-resolver:my:special:path#meta/root.cm"));
        assert_eq!(address.url(), "custom-resolver:my:special:path#meta/root.cm");
        assert_matches!(
            address.to_url_and_context(),
            ("custom-resolver:my:special:path#meta/root.cm", None)
        );

        let address = ComponentAddress::from_absolute_url("cast:00000000")?;
        if let ComponentAddressKind::Absolute { some_authority, .. } = address.kind() {
            assert_eq!(some_authority, &None);
        }
        assert!(address.is_absolute());
        assert_eq!(address.authority(), None);
        assert_eq!(address.authority_or_empty_str(), "");
        assert_eq!(address.scheme(), "cast");
        assert_eq!(address.path(), "00000000");
        assert_eq!(address.query(), None);
        assert_eq!(address.resource(), None);
        assert_eq!(address.original_url(), Some("cast:00000000"));
        assert_eq!(address.url(), "cast:00000000");
        assert_matches!(address.to_url_and_context(), ("cast:00000000", None));

        let address = ComponentAddress::from_absolute_url("cast:00000000#meta/root.cm")?;
        if let ComponentAddressKind::Absolute { some_authority, .. } = address.kind() {
            assert_eq!(some_authority, &None);
        }
        assert!(address.is_absolute());
        assert_eq!(address.authority(), None);
        assert_eq!(address.authority_or_empty_str(), "");
        assert_eq!(address.scheme(), "cast");
        assert_eq!(address.path(), "00000000");
        assert_eq!(address.query(), None);
        assert_eq!(address.resource(), Some("meta/root.cm"));
        assert_eq!(address.original_url(), Some("cast:00000000#meta/root.cm"));
        assert_eq!(address.url(), "cast:00000000#meta/root.cm");
        assert_matches!(address.to_url_and_context(), ("cast:00000000#meta/root.cm", None));

        let address = ComponentAddress::from_absolute_url(
            "fuchsia-pkg://fuchsia.com/package?hash=cafe0123#meta/comp.cm",
        )?;
        if let ComponentAddressKind::Absolute { some_authority, some_query } = address.kind() {
            assert_eq!(some_authority.as_deref(), Some("fuchsia.com"));
            assert_eq!(some_query.as_deref(), Some("hash=cafe0123"));
        }
        assert!(address.is_absolute());
        assert_eq!(address.authority(), Some("fuchsia.com"));
        assert_eq!(address.authority_or_empty_str(), "fuchsia.com");
        assert_eq!(address.scheme(), "fuchsia-pkg");
        assert_eq!(address.path(), "/package");
        assert_eq!(address.resource(), Some("meta/comp.cm"));
        assert_eq!(address.query(), Some("hash=cafe0123"));
        assert_eq!(
            address.original_url(),
            Some("fuchsia-pkg://fuchsia.com/package?hash=cafe0123#meta/comp.cm")
        );
        assert_eq!(address.url(), "fuchsia-pkg://fuchsia.com/package?hash=cafe0123#meta/comp.cm");
        assert_matches!(
            address.to_url_and_context(),
            ("fuchsia-pkg://fuchsia.com/package?hash=cafe0123#meta/comp.cm", None)
        );

        Ok(())
    }

    #[test]
    fn test_parse_relative_url() -> anyhow::Result<()> {
        let relative_url = parse_relative_url("subpackage#meta/subcomp.cm")?;
        assert_eq!(relative_url.path(), "subpackage");
        assert_eq!(relative_url.query(), None);
        assert_eq!(relative_url.fragment(), Some("meta/subcomp.cm"));

        let relative_url = parse_relative_url("#meta/peercomp.cm")?;
        assert_eq!(relative_url.path(), "");
        assert_eq!(relative_url.query(), None);
        assert_eq!(relative_url.fragment(), Some("meta/peercomp.cm"));

        let address =
            ComponentAddress::from_absolute_url("some-scheme://fuchsia.com/package#meta/comp.cm")?
                .clone_with_new_resource(relative_url.fragment());

        assert!(address.is_absolute());
        assert_eq!(address.authority(), Some("fuchsia.com"));
        assert_eq!(address.authority_or_empty_str(), "fuchsia.com");
        assert_eq!(address.scheme(), "some-scheme");
        assert_eq!(address.path(), "/package");
        assert_eq!(address.query(), None);
        assert_eq!(address.resource(), Some("meta/peercomp.cm"));
        assert_eq!(address.url(), "some-scheme://fuchsia.com/package#meta/peercomp.cm");

        let address = ComponentAddress::from_absolute_url("cast:00000000")?
            .clone_with_new_resource(relative_url.fragment());

        assert!(address.is_absolute());
        assert_eq!(address.authority(), None);
        assert_eq!(address.authority_or_empty_str(), "");
        assert_eq!(address.scheme(), "cast");
        assert_eq!(address.path(), "00000000");
        assert_eq!(address.query(), None);
        assert_eq!(address.resource(), Some("meta/peercomp.cm"));
        assert_eq!(address.url(), "cast:00000000#meta/peercomp.cm");

        Ok(())
    }
}
