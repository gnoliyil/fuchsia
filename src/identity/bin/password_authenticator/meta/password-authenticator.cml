// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    include: [ "syslog/client.shard.cml" ],
    program: {
        runner: "elf",
        binary: "bin/password_authenticator",

        // Subscribe to component lifecycle events so we can gracefully stop
        // minfs instances we supervise
        lifecycle: { stop_event: "notify" },
    },
    capabilities: [
        {
            protocol: [
                "fuchsia.identity.account.AccountManager",
                "fuchsia.identity.authentication.StorageUnlockMechanism",
            ],
        },
    ],
    use: [
        // Ideally we'd only have access to a narrow subset of appropriate devices, but
        // due to lack of driver support for accessing related devices, we need
        // the whole /dev topology to get access to the zxcrypt child of a particular
        // block device, which we require to unseal volumes.  This is currently only
        // achievable via constructing topological paths, which means we need access to
        // the root of the device topology.
        {
            directory: "dev-topological",
            rights: [ "rw*" ],
            path: "/dev",
        },
        {
            storage: "data",
            path: "/data",
        },
        {
            protocol: [
                "fuchsia.identity.credential.Manager",
                "fuchsia.process.Launcher",
            ],
        },
    ],
    expose: [
        {
            protocol: "fuchsia.identity.account.AccountManager",
            from: "self",
            as: "fuchsia.identity.account.DeprecatedAccountManager",
        },
        {
            protocol: "fuchsia.identity.authentication.StorageUnlockMechanism",
            from: "self",
            as: "fuchsia.identity.authentication.PasswordStorageUnlockMechanism",
        },
    ],
    config: {
        allow_scrypt: { type: "bool" },
        allow_pinweaver: { type: "bool" },
    },
}
