// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    include: [
        "inspect/client.shard.cml",
        "syslog/client.shard.cml",
        "//src/identity/lib/storage_manager/meta/fxfs.shard.cml", // For collections.crypt
    ],
    program: {
        runner: "elf",
        binary: "bin/account_handler",

        // Subscribe to component lifecycle events so we can gracefully stop
        // persistent resources we supervise
        lifecycle: { stop_event: "notify" },
    },
    capabilities: [
        {
            protocol: [ "fuchsia.identity.internal.AccountHandlerControl" ],
        },
    ],
    use: [
        {
            protocol: [
                "fuchsia.identity.authentication.AlwaysFailStorageUnlockMechanism",
                "fuchsia.identity.authentication.AlwaysSucceedStorageUnlockMechanism",
                "fuchsia.identity.authentication.TestStorageUnlockMechanism",
                "fuchsia.process.Launcher",
            ],
        },
        {
            storage: "data",
            path: "/data",
        },
        {
            directory: "dev-topological",
            from: "parent",
            rights: [ "rw*" ],
            path: "/dev",
        },
        {
            protocol: "fuchsia.component.Realm",
            from: "framework",
        },
    ],
    expose: [
        {
            protocol: "fuchsia.identity.internal.AccountHandlerControl",
            from: "self",
        },
    ],
    config: {
        // Provide the mechanisms which are available to the client
        // for authentication ("UPPER_CASE" format). A valid option will be one
        // corresponding to the set of values defined in
        // fuchsia.identity.authentication.Mechanism. E.g.: [ "PASSWORD" ].
        available_mechanisms: {
            type: "vector",
            max_count: 1, // We only support single mechanism at a time for now.
            element: {
                type: "string",
                max_size: 32,
            },
        },

        // If true, created accounts will be ephemeral. Otherwise, they will be
        // persistent.
        is_ephemeral: { type: "bool" },

        // Which backing storage manager to use. Options are currently:
        // one of [ "MINFS" ].
        storage_manager: {
            type: "string",
            max_size: 32,
        },
    },
}
