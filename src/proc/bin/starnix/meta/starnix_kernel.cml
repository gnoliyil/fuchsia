// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    include: [
        "inspect/client.shard.cml",
        "syslog/client.shard.cml",
    ],
    program: {
        runner: "elf",
        binary: "bin/starnix_kernel",
        job_policy_create_raw_processes: "true",
        is_shared_process: "true",
        use_next_vdso: "true",
    },
    capabilities: [
        {
            runner: "starnix",
            path: "/svc/fuchsia.component.runner.ComponentRunner",
        },
        {
            protocol: [
                "fuchsia.component.runner.ComponentRunner",
                "fuchsia.starnix.binder.DevBinder",
                "fuchsia.starnix.container.Controller",
            ],
        },
    ],
    use: [
        {
            directory: "dev-gpu",
            rights: [ "r*" ],
            path: "/dev/class/gpu",
        },
        {
            directory: "galaxy_config",
            from: "parent",
            rights: [ "r*" ],
            path: "/galaxy_config",
            availability: "optional",
        },
        {
            protocol: [
                "fuchsia.kernel.VmexResource",
                "fuchsia.posix.socket.Provider",
                "fuchsia.posix.socket.raw.Provider",
                "fuchsia.sysmem.Allocator",
                "fuchsia.tracing.provider.Registry",
            ],
            from: "parent",
        },
        {
            protocol: [
                // Wayland bridge protocols.
                "fuchsia.ui.composition.Allocator",
                "fuchsia.ui.composition.Flatland",
                "fuchsia.ui.input3.Keyboard",
                "fuchsia.ui.scenic.Scenic",
                "fuchsia.vulkan.loader.Loader",
            ],
            from: "parent",
            availability: "optional",
        },
    ],
    expose: [
        {
            runner: "starnix",
            from: "self",
        },
        {
            protocol: [ "fuchsia.component.runner.ComponentRunner" ],
            from: "self",
        },
        {
            protocol: "fuchsia.component.Binder",
            from: "framework",
        },
    ],
    config: {
        // Hack for specifying apexes.
        apex_hack: {
            type: "vector",
            element: {
                type: "string",
                max_size: 256,
            },
            max_count: 100,
        },

        // The features to run in the container (e.g., wayland support).
        features: {
            type: "vector",
            element: {
                type: "string",
                max_size: 256,
            },
            max_count: 100,
        },

        // The arguments for the `init` task. The first argument must be an absolute path to the binary. Specify an empty vector to not start an init task.
        init: {
            type: "vector",
            element: {
                type: "string",
                max_size: 256,
            },
            max_count: 100,
        },

        // The user string used when creating the `init` task.
        init_user: {
            type: "string",
            max_size: 256,
        },

        // The command line arguments for the kernel.
        kernel_cmdline: {
            type: "string",
            max_size: 256,
        },

        //  The filesystems that get mounted when the container is created.
        mounts: {
            type: "vector",
            element: {
                type: "string",
                max_size: 256,
            },
            max_count: 100,
        },

        // The name of the container.
        name: {
            type: "string",
            max_size: 256,
        },

        // A file path that will be used to determine whether or not the system is ready to execute
        // tasks. Prior to the existence of this file (if specified), the system will only run the
        // `init` task (and any tasks `init` spawns). The `init` task is expected to create a file
        // at this path.
        startup_file_path: {
            type: "string",
            max_size: 1024,
        },
    },
}
