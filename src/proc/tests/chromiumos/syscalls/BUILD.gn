# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/test.gni")
import("//src/proc/bin/starnix/starnix.gni")
import("//src/proc/tests/chromiumos/build/starnix_linux_test_component.gni")

group("tests") {
  testonly = true
  deps = []

  if (target_cpu == "x64") {
    deps += [ ":test_chromiumos_syscalls" ]
  }
}

source_set("test_utils") {
  testonly = true

  sources = [
    "proc_test.h",
    "syscall_matchers.h",
    "task_test.h",
    "test_helper.cc",
    "test_helper.h",
  ]
  public_deps = [
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

test("syscalls_test_bin") {
  exclude_toolchain_tags = [ "asan" ]
  sources = [
    "bpf_test.cc",
    "custom_artifact_test.cc",
    "epoll_test.cc",
    "fcntl_test.cc",
    "fs_test.cc",
    "mmap_test.cc",
    "mount_test.cc",
    "pipe_test.cc",
    "poll_test.cc",
    "prctl_test.cc",
    "read_write_test.cc",
    "restart_read_test.cc",
    "signal_handling_test.cc",
    "socket_test.cc",
    "sw_breakpoint_test.cc",
    "task_test.cc",
    "terminal_test.cc",
    "test_helper_test.cc",
    "timerfd_test.cc",
    "trivial_test.cc",
    "udev_test.cc",
    "waitpid_exit_signal_test.cc",
    "waitpid_flags_test.cc",
  ]
  deps = [
    ":test_utils",
    "//sdk/lib/stdcompat",
    "//src/lib/files",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
  include_dirs = [
    "//third_party/android/platform/bionic/libc/kernel/uapi",
    "//third_party/android/platform/bionic/libc/kernel/android/uapi",
  ]
  if (target_cpu == "x64") {
    include_dirs +=
        [ "//third_party/android/platform/bionic/libc/kernel/uapi/asm-x86" ]
  }
}

test("crash") {
  exclude_toolchain_tags = [ "asan" ]
  sources = [ "crash.cc" ]
  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gtest",
  ]
}

# This syscall_test_exec_child is a helper binary used in some execve tests.
# Using the exclude_toolchain_tags forces the build into a "novariant" variant
# toolchain so we need that also.
if (is_linux) {
  executable("syscall_test_exec_child") {
    testonly = true
    sources = [ "syscall_test_exec_child.cc" ]
    exclude_toolchain_tags = [
      "asan",
      "coverage",
    ]
    deps = [ ":test_utils" ]
  }
  resource("syscall_test_exec_child_resource") {
    testonly = true
    sources = [ "$root_out_dir/syscall_test_exec_child" ]
    outputs = [ "data/tests/syscall_test_exec_child" ]
    deps = [ ":syscall_test_exec_child" ]
  }
}

starnix_linux_test_component("syscalls_test") {
  test_label = ":syscalls_test_bin"
  test_binary = "syscalls_test_bin"
  uses_expectations = true
  deps = [ ":syscall_test_exec_child_resource($target_linux_toolchain)" ]
}

starnix_linux_test_component("crash_test") {
  test_label = ":crash"
  test_binary = "crash"
}

group("galaxy_resources") {
  if (target_cpu == "x64") {
    deps = [
      "//src/proc/bin/galaxies:data_tmp_target",
      "//src/proc/bin/galaxies:default_init",
      "//src/proc/bin/galaxies/chromiumos:system_image",
    ]
  }
}

fuchsia_test_package("test_chromiumos_syscalls") {
  test_components = [
    ":syscalls_test",
    ":crash_test",
  ]

  if (target_cpu == "x64") {
    subpackages = [ "//src/proc/bin/starnix:starnix_kernel_package" ]
  }

  deps = [
    ":galaxy_resources",
    "//src/lib/testing/expectation:expectation_comparer",
  ]
}
