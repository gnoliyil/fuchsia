pub async fn ffx_plugin_impl(
  _injector: &std::sync::Arc<dyn ffx_core::Injector>,
  _cmd: {{suite_args_lib}}::FfxPluginCommand,
) -> fho::Result<()>
{
{% if includes_subcommands %}
{% if includes_execution %}
  match _cmd.subcommand {
{% else %}
  match Some(_cmd.subcommand) {
{% endif %}
{% for plugin in plugins %}
    Some({{suite_subcommand_lib}}::SubCommand::{{plugin.enum}}(c)) => return {{plugin.lib}}_suite::ffx_plugin_impl(_injector, c).await.map_err(fho::Error::from),
{% endfor %}
    None => (),
  };
{% endif %}

{% if includes_execution %}
  {{execution_lib}}::ffx_plugin_impl(_injector, _cmd).await.map_err(fho::Error::from)
{% else %}
  println!("SubCommand not implemented yet.");
  Ok(())
{% endif %}
}

pub fn ffx_plugin_redact_args(
  _app: &fho::macro_deps::FfxCommandLine,
  _cmd: &{{suite_args_lib}}::FfxPluginCommand
) -> Vec<String>
{
{% if includes_subcommands %}
{% if includes_execution %}
  match &_cmd.subcommand {
{% else %}
  match Some(&_cmd.subcommand) {
{% endif %}
{% for plugin in plugins %}
    Some({{suite_subcommand_lib}}::SubCommand::{{plugin.enum}}(c)) => return _app.redact_subcmd(c),
{% endfor %}
    None => {},
  }
{% endif %}
  vec![]
}

pub fn ffx_plugin_is_machine_supported(
  _cmd: &{{suite_args_lib}}::FfxPluginCommand,
) -> bool {
{% if includes_subcommands %}
{% if includes_execution %}
  match &_cmd.subcommand {
{% else %}
  match Some(&_cmd.subcommand) {
{% endif %}

{% for plugin in plugins %}
    Some({{suite_subcommand_lib}}::SubCommand::{{plugin.enum}}(c)) => return {{plugin.lib}}_suite::ffx_plugin_is_machine_supported(c),
{% endfor %}
    None => (),
  };
{% endif %}

{% if includes_execution %}
  {{execution_lib}}::ffx_plugin_is_machine_supported()
{% else %}
  false
{% endif %}
}

{% if includes_subcommands %}
struct SuiteAdapterTool;
struct SuiteAdapter {
    cmd: {{suite_args_lib}}::FfxPluginCommand,
    injector: std::sync::Arc<dyn ffx_core::Injector>,
}

#[fho::macro_deps::async_trait(?Send)]
impl fho::FfxTool for SuiteAdapterTool {
    type Main = SuiteAdapter;
    type Command = {{suite_args_lib}}::FfxPluginCommand;

    fn forces_stdout_log() -> bool {
        false
    }

    async fn from_env(env: fho::FhoEnvironment, cmd: Self::Command) -> fho::Result<Self::Main> {
        let injector = env.injector.clone();
        Ok(SuiteAdapter { cmd, injector })
    }
}

#[fho::macro_deps::async_trait(?Send)]
impl fho::FfxMain for SuiteAdapter {
    type Writer = fho::SimpleWriter;
    async fn main(self, _writer:  Self::Writer) -> fho::Result<()> {
        ffx_plugin_impl(&self.injector, self.cmd).await
    }
}

pub async fn fho_suite_main() {
  use fho::FfxTool;

  SuiteAdapterTool::execute_tool().await
}
{% endif %}
