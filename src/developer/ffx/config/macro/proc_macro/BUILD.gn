# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/rust/rustc_macro.gni")
import("//build/toolchain/rbe.gni")
import("//build/tools/json_merge/json_merge.gni")
import("//src/developer/ffx/config.gni")

if (is_host) {
  json_merge("config.json") {
    sources = [
      rebase_path("//src/developer/ffx/daemon/data/config.json"),
      rebase_path("//src/developer/ffx/lib/pbms/data/config.json"),
      get_label_info("//src/developer/ffx:config.json", "target_out_dir") +
          "/config.json",
    ]

    # Add in the 'dual-mode' config default files if we're doing dual mode
    if (ffx_build_dual_mode_plugins_as_subtools) {
      foreach(config, dual_mode_defaults) {
        sources += [ rebase_path(config) ]
      }
    }

    deps = [ "//src/developer/ffx:config.json" ]
  }

  config_path = "$target_out_dir/config.json"

  # Rust looks for files included with `include_str` relative to the
  # callsite. Rebase the config path relative to the files in src/.
  rebased_config_path = rebase_path(config_path, "src")

  rustc_macro("config-proc-macros") {
    name = "config_proc_macros"
    version = "0.1.0"
    edition = "2021"

    rustenv = [ "FFX_DEFAULT_CONFIG_JSON=$rebased_config_path" ]

    # The config_path file is referenced from the source dir *to* the
    # output dir, which means the output dir leaks into the command.
    # This command will only succeed with a matching output dir,
    # so we must disable working-dir canonicalization.
    configs += [ "//build/config/rust:output_dir_sensitive" ]

    deps = [
      ":config.json",
      "//third_party/rust_crates:anyhow",
      "//third_party/rust_crates:proc-macro2",
      "//third_party/rust_crates:quote",
      "//third_party/rust_crates:serde_json",
      "//third_party/rust_crates:syn",
    ]

    sources = [ "src/lib.rs" ]
    inputs = [ config_path ]
  }
}
