# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/cpp/sdk_static_library.gni")

config("config") {
  defines = [ "NO_LIBDEXFILE_SUPPORT" ]

  # Use -isystem instead of -I to suppress -Wconversion warnings.
  cflags = [ "-isystem" + rebase_path("include", root_build_dir) ]
}

config("config_private") {
  defines = [ "FUCHSIA" ]
}

sdk_static_library("libunwindstack") {
  category = "internal"

  public_configs = [ ":config" ]
  configs += [ ":config_private" ]

  include_base = "include"

  public = [
    "include/unwindstack/DexFiles.h",
    "include/unwindstack/DwarfError.h",
    "include/unwindstack/DwarfLocation.h",
    "include/unwindstack/DwarfMemory.h",
    "include/unwindstack/DwarfSection.h",
    "include/unwindstack/DwarfStructs.h",
    "include/unwindstack/Elf.h",
    "include/unwindstack/ElfInterface.h",
    "include/unwindstack/Error.h",
    "include/unwindstack/Global.h",
    "include/unwindstack/JitDebug.h",
    "include/unwindstack/LocalUnwinder.h",
    "include/unwindstack/Log.h",
    "include/unwindstack/MapInfo.h",
    "include/unwindstack/Maps.h",
    "include/unwindstack/Memory.h",
    "include/unwindstack/Regs.h",
    "include/unwindstack/RegsGetLocal.h",
    "include/unwindstack/Unwinder.h",
  ]
  sources = [
    "ArmExidx.cpp",
    "ArmExidx.h",
    "Check.h",
    "DwarfCfa.cpp",
    "DwarfCfa.h",
    "DwarfDebugFrame.h",
    "DwarfEhFrame.h",
    "DwarfEhFrameWithHdr.cpp",
    "DwarfEhFrameWithHdr.h",
    "DwarfEncoding.h",
    "DwarfMemory.cpp",
    "DwarfOp.cpp",
    "DwarfOp.h",
    "DwarfSection.cpp",
    "Elf.cpp",
    "ElfInterface.cpp",
    "ElfInterfaceArm.cpp",
    "ElfInterfaceArm.h",
    "Global.cpp",
    "JitDebug.cpp",
    "MapInfo.cpp",
    "Symbols.cpp",
    "Symbols.h",
    "Unwinder.cpp",
    "fuchsia/LogFuchsia.cpp",
    "fuchsia/MapsFuchsia.cpp",

    # These files are Android-specific and aren't compiled for Fuchsia.
    #"DexFile.cpp",
    #"DexFiles.cpp",
    #"DexFile.h",
    #"LocalUnwinder.cpp",
    #"Log.cpp",
    #"Maps.cpp",
  ]

  if (is_fuchsia) {
    # This project does some locking but doesn't annotate usage.
    configs -= [ "//build/config:thread_safety_annotations" ]

    public += [
      "include/unwindstack/fuchsia/MemoryFuchsia.h",
      "include/unwindstack/fuchsia/RegsFuchsia.h",
      "include/unwindstack/fuchsia/fuchsia_basename.h",
    ]
    sources += [ "fuchsia/MemoryFuchsia.cpp" ]

    if (target_cpu == "x64") {
      sources += [ "fuchsia/RegsFuchsiaX86_64.cpp" ]
    } else if (target_cpu == "arm64") {
      sources += [ "fuchsia/RegsFuchsiaArm64.cpp" ]
    }
  } else {
    public += [
      "include/unwindstack/MachineArm.h",
      "include/unwindstack/MachineArm64.h",
      "include/unwindstack/MachineMips.h",
      "include/unwindstack/MachineMips64.h",
      "include/unwindstack/MachineX86.h",
      "include/unwindstack/MachineX86_64.h",
      "include/unwindstack/RegsArm.h",
      "include/unwindstack/RegsArm64.h",
      "include/unwindstack/RegsMips.h",
      "include/unwindstack/RegsMips64.h",
      "include/unwindstack/RegsX86.h",
      "include/unwindstack/RegsX86_64.h",
      "include/unwindstack/UcontextArm.h",
      "include/unwindstack/UcontextArm64.h",
      "include/unwindstack/UcontextMips.h",
      "include/unwindstack/UcontextMips64.h",
      "include/unwindstack/UcontextX86.h",
      "include/unwindstack/UcontextX86_64.h",
      "include/unwindstack/UserArm.h",
      "include/unwindstack/UserArm64.h",
      "include/unwindstack/UserMips.h",
      "include/unwindstack/UserMips64.h",
      "include/unwindstack/UserX86.h",
      "include/unwindstack/UserX86_64.h",
    ]
    sources += [
      "Memory.cpp",
      "Regs.cpp",
      "RegsArm.cpp",
      "RegsArm64.cpp",
      "RegsInfo.h",
      "RegsMips.cpp",
      "RegsMips64.cpp",
      "RegsX86.cpp",
      "RegsX86_64.cpp",
    ]
  }

  deps = [
    "//src/lib/fxl",
    "//zircon/system/ulib/fbl",
  ]
  if (is_mac) {
    public_deps = [ "//src/developer/debug/shared:elf_h_on_mac" ]
  }

  configs += [ "//build/config:Wno-conversion" ]

  # ../../src/developer/debug/third_party/libunwindstack/DwarfCfa.cpp:263:19: error: loop variable 'line' creates a copy from type 'const std::string' [-Werror,-Wrange-loop-construct]
  #   for (const auto line : expression_lines) {
  #                   ^
  # ../../src/developer/debug/third_party/libunwindstack/DwarfCfa.cpp:263:8: note: use reference type 'const std::string &' to prevent copying
  #   for (const auto line : expression_lines) {
  #        ^~~~~~~~~~~~~~~~~
  #                   &
  configs += [ "//build/config:Wno-range-loop-construct" ]
}
