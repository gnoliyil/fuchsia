# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

###############################################################################
# SOURCES
###############################################################################
source_set("annotations") {
  public = [
    "annotation_manager.h",
    "constants.h",
    "decode.h",
    "encode.h",
    "metrics.h",
    "provider.h",
    "startup_annotations.h",
    "types.h",
  ]

  sources = [
    "annotation_manager.cc",
    "annotation_manager.h",
    "constants.h",
    "decode.cc",
    "decode.h",
    "encode.cc",
    "encode.h",
    "metrics.cc",
    "metrics.h",
    "provider.h",
    "startup_annotations.cc",
    "startup_annotations.h",
    "types.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.feedback:fuchsia.feedback_hlcpp",
    "//src/developer/forensics/feedback/reboot_log",
    "//src/developer/forensics/utils:errors",
    "//src/developer/forensics/utils/cobalt",
    "//src/lib/fxl",
    "//zircon/system/ulib/async",
  ]

  deps = [
    "//sdk/fidl/fuchsia.sysinfo:fuchsia.sysinfo_hlcpp",
    "//sdk/lib/fdio",
    "//sdk/lib/syslog/cpp",
    "//src/developer/forensics/feedback:constants",
    "//src/lib/files",
    "//third_party/rapidjson",
  ]
}

source_set("board_info_provider") {
  sources = [
    "board_info_provider.cc",
    "board_info_provider.h",
  ]

  public_deps = [
    ":fidl_provider",
    "//sdk/fidl/fuchsia.hwinfo:fuchsia.hwinfo_hlcpp",
    "//src/developer/forensics/feedback/annotations",
  ]
}

source_set("current_channel_provider") {
  sources = [
    "current_channel_provider.cc",
    "current_channel_provider.h",
  ]

  public_deps = [
    ":fidl_provider",
    "//sdk/fidl/fuchsia.update.channelcontrol:fuchsia.update.channelcontrol_hlcpp",
    "//src/developer/forensics/feedback/annotations",
  ]
}

source_set("data_register") {
  sources = [
    "data_register.cc",
    "data_register.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.feedback:fuchsia.feedback_hlcpp",
    "//src/developer/forensics/feedback/annotations",
    "//src/lib/fxl",
    "//third_party/rapidjson",
  ]

  deps = [ "//sdk/lib/syslog/cpp" ]
}

source_set("device_id_provider") {
  sources = [
    "device_id_provider.cc",
    "device_id_provider.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.feedback:fuchsia.feedback_hlcpp",
    "//sdk/lib/fit-promise",
    "//sdk/lib/sys/cpp",
    "//src/developer/forensics/feedback/annotations",
    "//src/developer/forensics/feedback/annotations:fidl_provider",
    "//src/developer/forensics/utils:errors",
    "//zircon/system/ulib/async",
    "//zircon/system/ulib/zx",
  ]

  deps = [
    "//src/lib/files",
    "//src/lib/uuid",
  ]
}

source_set("fidl_provider") {
  sources = [ "fidl_provider.h" ]

  public_deps = [
    "//sdk/lib/fit",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/syslog/cpp",
    "//src/developer/forensics/feedback/annotations",
    "//src/lib/backoff",
    "//src/lib/fxl",
    "//zircon/system/ulib/async",
  ]
}

source_set("intl_provider") {
  sources = [
    "intl_provider.cc",
    "intl_provider.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.intl:fuchsia.intl_hlcpp",
    "//sdk/lib/fit",
    "//sdk/lib/sys/cpp",
    "//src/developer/forensics/feedback/annotations",
    "//src/lib/backoff",
    "//src/lib/fxl",
  ]

  deps = [ "//zircon/system/ulib/async" ]
}

source_set("product_info_provider") {
  sources = [
    "product_info_provider.cc",
    "product_info_provider.h",
  ]

  public_deps = [
    ":fidl_provider",
    "//sdk/fidl/fuchsia.hwinfo:fuchsia.hwinfo_hlcpp",
    "//src/developer/forensics/feedback/annotations",
  ]
}

source_set("target_channel_provider") {
  sources = [
    "target_channel_provider.cc",
    "target_channel_provider.h",
  ]

  public_deps = [
    ":fidl_provider",
    "//sdk/fidl/fuchsia.update.channelcontrol:fuchsia.update.channelcontrol_hlcpp",
    "//src/developer/forensics/feedback/annotations",
  ]
}

source_set("time_provider") {
  sources = [
    "time_provider.cc",
    "time_provider.h",
  ]

  public_deps = [
    "//src/developer/forensics/feedback/annotations",
    "//src/lib/timekeeper",
  ]
}

source_set("ui_state_provider") {
  sources = [
    "ui_state_provider.cc",
    "ui_state_provider.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.ui.activity:fuchsia.ui.activity_hlcpp",
    "//src/developer/forensics/feedback/annotations",
  ]
}
