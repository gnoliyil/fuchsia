// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SRC_BRINGUP_LIB_NETBOOT_INCLUDE_LIB_NETBOOT_NETBOOT_H_
#define SRC_BRINGUP_LIB_NETBOOT_INCLUDE_LIB_NETBOOT_NETBOOT_H_

#include <limits.h>
#include <stddef.h>
#include <stdint.h>

// clang-format off

#define NETBOOT_BOOTLOADER_VERSION "0.7.22"

#define NETBOOT_MAGIC              0xAA774217
#define NETBOOT_DEBUGLOG_MAGIC     0xAEAE1123

#define NETBOOT_PORT_SERVER        33330
#define NETBOOT_PORT_ADVERT        33331
#define NETBOOT_PORT_CMD_START     33332
#define NETBOOT_PORT_CMD_END       33339
#define NETBOOT_PORT_TFTP_OUTGOING 33340
#define NETBOOT_PORT_TFTP_INCOMING 33341

#define NETBOOT_COMMAND_ACK               0   // arg=0 or -err, NETBOOT_READ: data=data
#define NETBOOT_COMMAND_EXECUTE           1   // arg=0, data=command
#define NETBOOT_COMMAND_SEND_FILE         2   // arg=size, data=filename
#define NETBOOT_COMMAND_DATA              3   // arg=offset, data=data
#define NETBOOT_COMMAND_BOOT              4   // arg=0
#define NETBOOT_COMMAND_QUERY             5   // arg=0, data=hostname (or "*")
#define NETBOOT_COMMAND_SHELL_CMD         6   // arg=0, data=command string
#define NETBOOT_COMMAND_OPEN              7   // arg=O_RDONLY|O_WRONLY, data=filename
#define NETBOOT_COMMAND_READ              8   // arg=blocknum
#define NETBOOT_COMMAND_WRITE             9   // arg=blocknum, data=data
#define NETBOOT_COMMAND_CLOSE             10  // arg=0
#define NETBOOT_COMMAND_LAST_DATA         11  // arg=offset, data=data
#define NETBOOT_COMMAND_REBOOT            12  // arg=0
#define NETBOOT_COMMAND_GET_ADVERT        13  // arg=0

#define NETBOOT_COMMAND_FILE_RECEIVED      0x70000001 // arg=size

#define NETBOOT_COMMAND_ADVERTISE          0x77777777

#define NETBOOT_COMMAND_ERROR_GENERIC      0x80000000
#define NETBOOT_COMMAND_ERROR_BAD_CMD      0x80000001
#define NETBOOT_COMMAND_ERROR_BAD_PARAM    0x80000002
#define NETBOOT_COMMAND_ERROR_TOO_LARGE    0x80000003
#define NETBOOT_COMMAND_ERROR_BAD_FILE     0x80000004

#define NETBOOT_VERSION_1_0  0x0001000
#define NETBOOT_VERSION_1_1  0x0001010
#define NETBOOT_VERSION_1_2  0x0001020
#define NETBOOT_VERSION_1_3  0x0001030
#define NETBOOT_VERSION_CURRENT NETBOOT_VERSION_1_3

#define NETBOOT_MAX_NODENAME_LEN 64

#define NETBOOT_FILENAME_PREFIX "<<netboot>>"
#define NETBOOT_KERNEL_FILENAME NETBOOT_FILENAME_PREFIX "kernel.bin"
#define NETBOOT_CMDLINE_FILENAME NETBOOT_FILENAME_PREFIX "cmdline"

#define NETBOOT_IMAGE_PREFIX "<<image>>"
#define NETBOOT_FVM_HOST_FILENAME "sparse.fvm"
#define NETBOOT_FVM_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_FVM_HOST_FILENAME
#define NETBOOT_BOOTLOADER_HOST_FILENAME "bootloader.img"
#define NETBOOT_BOOTLOADER_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_BOOTLOADER_HOST_FILENAME
// Firmware images are slightly different, as they have an optional type suffix:
//   firmware_     <- type = "" (the default)
//   firmware_foo  <- type = "foo"
#define NETBOOT_FIRMWARE_HOST_FILENAME_PREFIX "firmware_"
#define NETBOOT_FIRMWARE_FILENAME_PREFIX NETBOOT_IMAGE_PREFIX NETBOOT_FIRMWARE_HOST_FILENAME_PREFIX
#define NETBOOT_FIRMWAREA_HOST_FILENAME_PREFIX "firmwarea_"
#define NETBOOT_FIRMWAREA_FILENAME_PREFIX NETBOOT_IMAGE_PREFIX NETBOOT_FIRMWAREA_HOST_FILENAME_PREFIX
#define NETBOOT_FIRMWAREB_HOST_FILENAME_PREFIX "firmwareb_"
#define NETBOOT_FIRMWAREB_FILENAME_PREFIX NETBOOT_IMAGE_PREFIX NETBOOT_FIRMWAREB_HOST_FILENAME_PREFIX
#define NETBOOT_FIRMWARER_HOST_FILENAME_PREFIX "firmwarer_"
#define NETBOOT_FIRMWARER_FILENAME_PREFIX NETBOOT_IMAGE_PREFIX NETBOOT_FIRMWARER_HOST_FILENAME_PREFIX
#define NETBOOT_ZIRCONA_HOST_FILENAME "zircona.img"
#define NETBOOT_ZIRCONA_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_ZIRCONA_HOST_FILENAME
#define NETBOOT_ZIRCONB_HOST_FILENAME "zirconb.img"
#define NETBOOT_ZIRCONB_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_ZIRCONB_HOST_FILENAME
#define NETBOOT_ZIRCONR_HOST_FILENAME "zirconr.img"
#define NETBOOT_ZIRCONR_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_ZIRCONR_HOST_FILENAME
#define NETBOOT_VBMETAA_HOST_FILENAME "vbmetaa.img"
#define NETBOOT_VBMETAA_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_VBMETAA_HOST_FILENAME
#define NETBOOT_VBMETAB_HOST_FILENAME "vbmetab.img"
#define NETBOOT_VBMETAB_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_VBMETAB_HOST_FILENAME
#define NETBOOT_VBMETAR_HOST_FILENAME "vbmetar.img"
#define NETBOOT_VBMETAR_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_VBMETAR_HOST_FILENAME
#define NETBOOT_SSHAUTH_HOST_FILENAME "authorized_keys"
#define NETBOOT_SSHAUTH_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_SSHAUTH_HOST_FILENAME
#define NETBOOT_BOARD_NAME_HOST_FILENAME "board_name"
#define NETBOOT_BOARD_NAME_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_BOARD_NAME_HOST_FILENAME
#define NETBOOT_BOARD_REVISION_HOST_FILENAME "board_revision"
#define NETBOOT_BOARD_REVISION_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_BOARD_REVISION_HOST_FILENAME
#define NETBOOT_BOARD_INFO_HOST_FILENAME "board_info"
#define NETBOOT_BOARD_INFO_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_BOARD_INFO_HOST_FILENAME
#define NETBOOT_INIT_PARTITION_TABLES_HOST_FILENAME "init_partition_tables"
#define NETBOOT_INIT_PARTITION_TABLES_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_INIT_PARTITION_TABLES_HOST_FILENAME
#define NETBOOT_WIPE_PARTITION_TABLES_HOST_FILENAME "wipe_partition_tables"
#define NETBOOT_WIPE_PARTITION_TABLES_FILENAME NETBOOT_IMAGE_PREFIX NETBOOT_WIPE_PARTITION_TABLES_HOST_FILENAME

// Should match paver FIDL definition.
#define NETBOOT_FIRMWARE_TYPE_MAX_LENGTH 256

// Historically equal to ZX_MAX_NAME_LEN.
#define NETBOOT_MAX_BOARD_NAME_LEN ((size_t)32u)

typedef struct {
  char board_name[NETBOOT_MAX_BOARD_NAME_LEN];
  uint32_t board_revision;
  uint8_t mac_address[6];
  uint8_t _padding[2];
} netboot_board_info_t;

#define NETBOOT_PATH_MAX 4096

typedef struct {
  char block_device_path[NETBOOT_PATH_MAX];
} netboot_block_device_t;

typedef struct {
    uint32_t magic;
    uint32_t cookie;
    uint32_t cmd;
    uint32_t arg;
} netboot_message_header_t;

#define NETBOOT_DEBUGLOG_PORT_SERVER  33337
#define NETBOOT_DEBUGLOG_PORT_ACK     33338

#define NETBOOT_DEBUGLOG_MAX_DATA 1216

typedef struct {
    uint32_t magic;
    uint32_t seqno;
    char nodename[NETBOOT_MAX_NODENAME_LEN];
    char data[NETBOOT_DEBUGLOG_MAX_DATA];
} netboot_debuglog_packet_t;

#endif  // SRC_BRINGUP_LIB_NETBOOT_INCLUDE_LIB_NETBOOT_NETBOOT_H_
