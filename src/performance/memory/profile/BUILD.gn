# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components/fuchsia_unittest_package.gni")
import("//build/host.gni")
import("//build/test.gni")
import("//third_party/protobuf/proto_library.gni")

group("tests") {
  testonly = true
  deps = [ ":profile" ]
}

source_set("memory_layout") {
  sources = [
    "memory_layout.cc",
    "memory_layout.h",
  ]
}

source_set("stack_compression") {
  sources = [
    "stack_compression.cc",
    "stack_compression.h",
  ]
  public_deps = [ "//sdk/lib/stdcompat" ]
}

source_set("fxt_to_pprof_lib") {
  sources = [
    "fxt_to_pprof.cc",
    "fxt_to_pprof.h",
  ]
  deps = [
    ":memory_layout",
    ":profile_proto",
    ":stack_compression",
    "//src/lib/fxl",
    "//third_party/protobuf:protobuf_full",
    "//zircon/system/ulib/trace-reader",
  ]
}

source_set("test_record_container") {
  testonly = true
  sources = [
    "test_record_container.cc",
    "test_record_container.h",
  ]
  public_deps = [ "//zircon/system/ulib/trace-reader" ]
  deps = [
    ":stack_compression",
    "//zircon/system/ulib/elf-search",
    "//zircon/system/ulib/trace-test-utils",
  ]
}

source_set("fxt_to_pprof_test") {
  testonly = true
  sources = [ "fxt_to_pprof_test.cc" ]

  deps = [
    ":fxt_to_pprof_lib",
    ":profile_proto",
    ":test_record_container",
    "//third_party/googletest:gtest",
    "//third_party/protobuf:protobuf_full",
    "//zircon/system/ulib/trace-test-utils",
  ]
}

source_set("memory_trace_test") {
  testonly = true
  sources = [ "memory_trace_test.cc" ]

  deps = [
    ":memory_layout",
    ":memory_trace",
    ":stack_compression",
    ":test_record_container",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/trace-test-utils",
  ]
}

source_set("stack_compression_test") {
  testonly = true
  sources = [ "stack_compression_test.cc" ]

  deps = [
    ":stack_compression",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/trace-test-utils",
  ]
}

test("profile_test") {
  testonly = true
  deps = [
    ":fxt_to_pprof_test",
    ":memory_trace_test",
    ":stack_compression_test",
    "//src/lib/fxl/test:gtest_main",
  ]
}

fuchsia_unittest_package("profile") {
  manifest = "meta/memory_trace_test.cml"
  deps = [ ":profile_test" ]
}

shared_library("memory_trace") {
  sources = [
    "memory_trace.cc",
    "trace_constants.h",
  ]
  deps = [
    ":stack_compression",
    "//sdk/lib/stdcompat",
    "//sdk/lib/sys/cpp",
    "//zircon/system/ulib/elf-search",
    "//zircon/system/ulib/trace",
  ]
  configs += [ ":no-as-needed" ]
}

# memory_trace exposes symbols that may not be explicitly referenced at build
# time by the instrumented binary; this can cause those library to be
# stripped at link-time, which disables the instrumentation.
config("no-as-needed") {
  # TODO(fxbug.dev/116590): Re-enable this restriction.
  # visibility = [ ":memory_trace" ]
  rustflags = [ "-Clink-args=--no-as-needed" ]
}

if (is_host) {
  executable("fxt_to_pprof") {
    output_name = "fxt_to_pprof"
    sources = [ "fxt_to_pprof_main.cc" ]
    deps = [
      ":fxt_to_pprof_lib",
      ":memory_layout",

      # TODO(https://fxbug.dev/115412): Replace with pprof.
      # "//third_party/github.com/google/pprof:profile_proto",
      ":profile_proto",
      ":stack_compression",
      "//sdk/lib/stdcompat",
      "//sdk/lib/syslog/cpp:cpp",
      "//third_party/protobuf:protobuf_full",
      "//zircon/system/ulib/trace-reader",
    ]
  }
}

proto_library("profile_proto") {
  proto_out_dir = "//src/performance/memory/profile"
  sources = [ "//third_party/perfetto/protos/third_party/pprof/profile.proto" ]
}

install_host_tools("install") {
  deps = [ ":fxt_to_pprof($host_toolchain)" ]
  outputs = [ "fxt_to_pprof" ]
}
