# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/rust/rustc_staticlib.gni")

group("tests") {
  testonly = true
  deps = [ "tests" ]
}

rustc_staticlib("core") {
  visibility = [ ":*" ]

  edition = "2021"
  sources = [
    "src/allocations_table.rs",
    "src/lib.rs",
    "src/profiler.rs",
  ]

  deps = [
    "//sdk/fidl/fuchsia.heapdump:fuchsia.heapdump.process_rust",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-runtime",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/performance/memory/heapdump/vmo_types",
    "//third_party/rust_crates:lazy_static",
  ]
}

# Processes that link to this library must call either `heapdump_bind_with_channel`
# or `heapdump_bind_with_fdio` themselves.
shared_library("instrumentation") {
  output_name = "heapdump_instrumentation"

  sources = [ "bind_with_fdio.cc" ]

  deps = [
    ":core",
    "//sdk/fidl/fuchsia.heapdump:fuchsia.heapdump.process_cpp_wire",
    "//sdk/lib/fdio",
    "//src/zircon/lib/zircon",
  ]

  public_deps = [ ":instrumentation.headers" ]

  # For each symbol that we want to export, tell the linker that:
  #  - It must not be hidden (--retain-symbols-file)
  #  - It must be included in the shared library (--undefined)
  _exported_symbols_file = "exported_symbols.allowlist"
  _exported_symbols = read_file(_exported_symbols_file, "list lines")
  ldflags = [ "-Wl,--retain-symbols-file=" +
              rebase_path(_exported_symbols_file, root_build_dir) ]
  foreach(symbol, _exported_symbols) {
    ldflags += [ "-Wl,--undefined=" + symbol ]
  }

  # We do not want to depend on anything but the C library and FDIO.
  configs += [ "//build/config/fuchsia:static_cpp_standard_library" ]
}

library_headers("instrumentation.headers") {
  visibility = [ ":*" ]

  include_dir = "include"
  headers = [
    "heapdump/bind_with_channel.h",
    "heapdump/bind_with_fdio.h",
    "heapdump/stats.h",
  ]
}
