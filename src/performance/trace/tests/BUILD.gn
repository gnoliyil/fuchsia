# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")

group("tests") {
  testonly = true
  deps = [
    ":basic_integration_test_app",
    ":integration_test_utils",
    ":integration_test_utils_with_trace_with_static_engine",
    ":run_test",
    ":self_contained_provider",
    ":trace_integration_tests",
    ":trace_tests",
    ":trace_tests_bin",
    ":two_providers_one_engine",
    ":two_providers_two_engines_test_app",
  ]
}

source_set("component_context") {
  testonly = true

  sources = [
    "component_context.cc",
    "component_context.h",
  ]

  deps = [
    "//src/lib/fxl",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/zx",
  ]

  public_deps = [
    "//sdk/lib/sys/cpp",
    "//src/lib/testing/loop_fixture",
  ]
}

# Generic main entry point target for GTest executables.
# This augments src/lib/fxl/test by adding component context.
source_set("gtest_main") {
  testonly = true

  sources = [ "gtest_main.cc" ]

  deps = [
    "//src/lib/fxl",
    "//src/lib/fxl/test:test_settings",
  ]

  public_deps = [
    ":component_context",
    "//third_party/googletest:gtest",
  ]
}

executable("trace_tests_bin") {
  testonly = true

  output_name = "trace_tests"

  deps = [ ":gtest_main" ]
}

source_set("run_test") {
  testonly = true

  sources = [
    "run_test.cc",
    "run_test.h",
  ]

  public_deps = [
    "//sdk/lib/sys/cpp",
    "//zircon/system/ulib/zx",
  ]

  deps = [
    ":component_context",
    ":integration_test_utils",
    "//sdk/lib/fdio",
    "//src/lib/fxl",
    "//src/performance/lib/test_utils",
    "//src/performance/trace:options",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

source_set("integration_test_utils") {
  testonly = true

  sources = [
    "integration_test_utils.cc",
    "integration_test_utils.h",
  ]

  public_deps = [
    "//src/performance/trace:options",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/trace-provider",
    "//zircon/system/ulib/trace-reader",
    "//zircon/system/ulib/zx",
  ]

  deps = [
    "//sdk/lib/fdio",
    "//src/lib/fxl",
    "//third_party/rapidjson",
    "//zircon/system/ulib/async:async-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/trace-reader",
  ]
}

# Same as "integration_test_utils" except uses trace-with-static-engine.
# This is done in order to ensure trace-engine-static is used.
source_set("integration_test_utils_with_trace_with_static_engine") {
  testonly = true

  defines = [ "USE_STATIC_ENGINE" ]

  sources = [
    "integration_test_utils.cc",
    "integration_test_utils.h",
  ]

  public_deps = [
    "//src/performance/trace:options",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/trace-provider:trace-provider-with-static-engine",
    "//zircon/system/ulib/trace-reader",
    "//zircon/system/ulib/zx",
  ]

  deps = [
    "//sdk/lib/fdio",
    "//src/lib/fxl",
    "//third_party/rapidjson",
    "//zircon/system/ulib/async:async-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/trace:trace-with-static-engine",
    "//zircon/system/ulib/trace-reader",
  ]
}

executable("trace_integration_tests") {
  testonly = true

  sources = [ "trace_integration_tests.cc" ]

  deps = [
    ":gtest_main",
    ":integration_test_utils",
    ":run_test",
    "//src/lib/fxl/test:test_settings",
    "//src/performance/lib/test_utils",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

executable("basic_integration_test_app") {
  testonly = true

  sources = [
    "basic_integration_tests.cc",
    "basic_integration_tests.h",
    "fill_buffer_and_alert_integration_test.cc",
    "fill_buffer_integration_test.cc",
    "integration_test_main.cc",
    "simple_integration_test.cc",
  ]

  deps = [
    ":integration_test_utils",
    "//src/lib/fxl",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/trace-provider",
    "//zircon/system/ulib/zx",
  ]
}

executable("two_providers_one_engine") {
  testonly = true

  sources = [ "two_providers_one_engine.cc" ]

  deps = [
    "//src/lib/fxl",
    "//zircon/system/ulib/async:async-cpp",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/trace-provider",
    "//zircon/system/ulib/zx",
  ]
}

shared_library("self_contained_provider") {
  testonly = true

  sources = [
    "self_contained_provider.cc",
    "self_contained_provider.h",
  ]

  deps = [
    ":integration_test_utils_with_trace_with_static_engine",
    "//src/lib/fxl",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/trace:trace-with-static-engine",
    "//zircon/system/ulib/trace-provider:trace-provider-fdio-connect",
    "//zircon/system/ulib/trace-provider:trace-provider-with-static-engine",
  ]
}

executable("two_providers_two_engines_test_app") {
  testonly = true

  sources = [
    "integration_test_main.cc",
    "self_contained_provider.h",
    "two_providers_two_engines.cc",
  ]

  deps = [
    ":integration_test_utils",
    ":self_contained_provider",
    "//src/lib/fxl",
    "//src/performance/trace:options",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/trace-provider",
    "//zircon/system/ulib/zx",
  ]
}

executable("return_1234") {
  testonly = true

  sources = [ "return_1234.cc" ]
}

executable("return_child_result_tests") {
  testonly = true

  sources = [ "return_child_result_tests.cc" ]

  deps = [
    ":gtest_main",
    ":integration_test_utils",
    ":run_test",
    "//src/performance/lib/test_utils",
    "//third_party/googletest:gtest",
  ]
}

executable("run_awhile") {
  testonly = true

  sources = [ "run_awhile.cc" ]

  deps = [ "//zircon/system/ulib/zx" ]
}

executable("detach_tests") {
  testonly = true

  sources = [ "detach_tests.cc" ]

  deps = [
    ":gtest_main",
    ":integration_test_utils",
    ":run_test",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/zx",
  ]
}

executable("shared_provider_app") {
  testonly = true

  sources = [ "shared_provider.cc" ]

  deps = [
    ":integration_test_utils",
    "//src/lib/fxl",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/trace-provider:trace-provider-so",
    "//zircon/system/ulib/zx",
  ]
}

executable("shared_provider_integration_tests") {
  testonly = true

  sources = [ "shared_provider_integration_tests.cc" ]

  deps = [
    ":gtest_main",
    ":integration_test_utils",
    ":run_test",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/trace-reader",
    "//zircon/system/ulib/zx",
  ]
}

executable("provider_destruction_app") {
  testonly = true

  sources = [ "provider_destruction.cc" ]

  deps = [
    ":integration_test_utils",
    "//src/lib/fxl",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/trace-provider",
    "//zircon/system/ulib/zx",
  ]
}

executable("provider_destruction_tests") {
  testonly = true

  sources = [ "provider_destruction_tests.cc" ]

  deps = [
    ":gtest_main",
    ":integration_test_utils",
    ":run_test",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/trace-reader",
    "//zircon/system/ulib/zx",
  ]
}

fuchsia_component("trace_tests_component") {
  testonly = true
  component_name = "trace_tests"
  manifest = "meta/trace_tests.cml"
  deps = [ ":trace_tests_bin" ]
}

fuchsia_component("detach_tests_component") {
  testonly = true
  component_name = "detach_tests"
  manifest = "meta/detach_tests.cml"
  deps = [ ":detach_tests" ]
}

fuchsia_component("provider_destruction_tests_component") {
  testonly = true
  component_name = "provider_destruction_tests"
  manifest = "meta/provider_destruction_tests.cml"
  deps = [ ":provider_destruction_tests" ]
}

fuchsia_test_component("return_child_result_tests_component") {
  component_name = "return_child_result_tests"
  manifest = "meta/return_child_result_tests.cml"
  deps = [ ":return_child_result_tests" ]
}

fuchsia_test_component("shared_provider_integration_tests_component") {
  component_name = "shared_provider_integration_tests"
  manifest = "meta/shared_provider_integration_tests.cml"
  deps = [ ":shared_provider_integration_tests" ]
}

fuchsia_test_component("trace_integration_tests_component") {
  component_name = "trace_integration_tests"
  manifest = "meta/trace_integration_tests.cml"
  deps = [
    ":basic_integration_test_app",
    ":trace_integration_tests",
    ":two_providers_two_engines_test_app",
  ]
}

fuchsia_test_package("trace_tests") {
  package_name = "trace_tests"
  test_components = [
    ":detach_tests_component",
    ":provider_destruction_tests_component",
    ":return_child_result_tests_component",
    ":shared_provider_integration_tests_component",
    ":trace_integration_tests_component",
    ":trace_tests_component",
  ]
  deps = [
    ":provider_destruction_app",
    ":return_1234",
    ":run_awhile",
    ":shared_provider_app",
    ":two_providers_one_engine",
    "//src/performance/trace:bin",
    "//src/performance/trace_manager:component_hermetic",
  ]
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
}
