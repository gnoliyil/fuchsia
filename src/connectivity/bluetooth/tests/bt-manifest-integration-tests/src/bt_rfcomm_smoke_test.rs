// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

use {
    anyhow::Error,
    fidl_fuchsia_bluetooth_bredr::{ProfileMarker, ProfileProxy, ProfileRequestStream},
    fidl_fuchsia_bluetooth_rfcomm_test::{RfcommTestMarker, RfcommTestProxy},
    fuchsia_component::server::ServiceFs,
    fuchsia_component_test::{
        Capability, ChildOptions, LocalComponentHandles, RealmBuilder, Ref, Route,
    },
    futures::{channel::mpsc, SinkExt, StreamExt},
    realmbuilder_mock_helpers::add_fidl_service_handler,
    tracing::info,
};

/// RFCOMM component URL.
const RFCOMM_URL: &str = "fuchsia-pkg://fuchsia.com/bt-rfcomm-smoke-test#meta/bt-rfcomm.cm";

/// The different events generated by this test.
/// Note: In order to prevent the component under test from terminating, any FIDL channel or
/// request is kept alive.
enum Event {
    /// A fake RFCOMM client connecting to the Profile service.
    Client(Option<ProfileProxy>),
    /// A BR/EDR Profile service connection request was received - request was
    /// made by the RFCOMM component.
    Profile(Option<ProfileRequestStream>),
    /// A fake RFCOMM client connecting to the RfcommTest service.
    Test(Option<RfcommTestProxy>),
}

impl From<ProfileRequestStream> for Event {
    fn from(src: ProfileRequestStream) -> Self {
        Self::Profile(Some(src))
    }
}

/// Represents a fake RFCOMM client that requests the Profile service.
async fn mock_rfcomm_client(
    mut sender: mpsc::Sender<Event>,
    handles: LocalComponentHandles,
) -> Result<(), Error> {
    let profile_svc = handles.connect_to_protocol::<ProfileMarker>()?;
    sender.send(Event::Client(Some(profile_svc))).await.expect("failed sending ack to test");

    let test_svc = handles.connect_to_protocol::<RfcommTestMarker>()?;
    sender.send(Event::Test(Some(test_svc))).await.expect("failed sending ack to test");
    Ok(())
}

/// Simulates a component that provides the `bredr.Profile` service.
async fn mock_profile_component(
    sender: mpsc::Sender<Event>,
    handles: LocalComponentHandles,
) -> Result<(), Error> {
    let mut fs = ServiceFs::new();
    add_fidl_service_handler::<ProfileMarker, _>(&mut fs, sender.clone());
    let _ = fs.serve_connection(handles.outgoing_dir)?;
    fs.collect::<()>().await;
    Ok(())
}

/// Tests that the v2 RFCOMM component has the correct topology and verifies that
/// it connects and provides the expected services.
#[fuchsia::test]
async fn rfcomm_v2_component_topology() {
    info!("Starting RFCOMM v2 smoke test...");

    let (sender, mut receiver) = mpsc::channel(3);
    let profile_tx = sender.clone();
    let fake_client_tx = sender.clone();

    let builder = RealmBuilder::new().await.expect("Failed to create test realm builder");
    // The v2 component under test.
    let rfcomm = builder
        .add_child("rfcomm", RFCOMM_URL.to_string(), ChildOptions::new())
        .await
        .expect("Failed adding rfcomm to topology");
    // Mock Profile component to receive bredr.Profile requests.
    let fake_profile = builder
        .add_local_child(
            "fake-profile",
            move |handles: LocalComponentHandles| {
                let sender = profile_tx.clone();
                Box::pin(mock_profile_component(sender, handles))
            },
            ChildOptions::new(),
        )
        .await
        .expect("Failed adding profile mock to topology");
    // Mock RFCOMM client that will connect to the Profile service and make a request.
    let fake_rfcomm_client = builder
        .add_local_child(
            "fake-rfcomm-client",
            move |handles: LocalComponentHandles| {
                let sender = fake_client_tx.clone();
                Box::pin(mock_rfcomm_client(sender, handles))
            },
            ChildOptions::new().eager(),
        )
        .await
        .expect("Failed adding rfcomm client mock to topology");

    // Set up capabilities.
    builder
        .add_route(
            Route::new()
                .capability(Capability::protocol::<ProfileMarker>())
                .from(&fake_profile)
                .to(&rfcomm),
        )
        .await
        .expect("Failed adding route for profile service");
    builder
        .add_route(
            Route::new()
                .capability(Capability::protocol::<ProfileMarker>())
                .capability(Capability::protocol::<RfcommTestMarker>())
                .from(&rfcomm)
                .to(&fake_rfcomm_client),
        )
        .await
        .expect("Failed adding route for RFCOMM profile service");
    builder
        .add_route(
            Route::new()
                .capability(Capability::protocol::<fidl_fuchsia_logger::LogSinkMarker>())
                .from(Ref::parent())
                .to(&rfcomm)
                .to(&fake_profile)
                .to(&fake_rfcomm_client),
        )
        .await
        .expect("Failed adding LogSink route to test components");
    let _test_topology = builder.build().await.unwrap();

    // If the routing is correctly configured, we expect two events (in arbitrary order):
    //   1. `bt-rfcomm` connecting to the Profile service provided by `fake-profile`.
    //   2. `fake-rfcomm-client` connecting to the Profile service provided by `bt-rfcomm`.
    //   3. `fake-rfcomm-client` connecting to the RfcommTest service provided by `bt-rfcomm`.
    let mut events = Vec::new();
    let expected_number_of_events = 3;
    for i in 0..expected_number_of_events {
        let msg = format!("Unexpected error waiting for {:?} event", i);
        events.push(receiver.next().await.expect(&msg));
    }
    assert_eq!(events.len(), expected_number_of_events);
    let _mock_client_event = events
        .iter()
        .find(|&p| std::mem::discriminant(p) == std::mem::discriminant(&Event::Client(None)))
        .expect("Should receive client event");
    let _rfcomm_component_event = events
        .iter()
        .find(|&p| std::mem::discriminant(p) == std::mem::discriminant(&Event::Profile(None)))
        .expect("Should receive component event");
    let _rfcomm_test_event = events
        .iter()
        .find(|&p| std::mem::discriminant(p) == std::mem::discriminant(&Event::Test(None)))
        .expect("Should receive component event");

    info!("Finished RFCOMM smoke test");
}
