// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.netemul.guest;

using fuchsia.virtualization.guest.interaction;
using fuchsia.net;
using fuchsia.netemul.network;

/// `Guest` exposes methods for interacting with a virtualized guest.
///
/// A connection to `Guest` provides access to a single virtualized guest.
/// The guest lifetime is bound to the connection; when the client handle
/// is dropped, the guest will be shutdown. NOTE however that this
/// shutdown-on-drop happens asynchronously; clients should always use
/// the synchronous method below to avoid flakes when running multiple
/// tests.
closed protocol Guest {
    compose fuchsia.virtualization.guest.interaction.Interaction;

    /// Shuts down the guest and closes the channel over which `Guest` is being
    /// served.
    strict Shutdown() -> ();
};

const MAX_GUEST_NAME_LENGTH uint64 = 32;

/// `Controller` exposes methods for interacting with the guest manager.
@discoverable
closed protocol Controller {
    /// Creates a new guest instance, attaches it to the provided `network`, optionally
    /// with `mac` as its mac address, and starts serving the `Guest` protocol over
    /// the returned client end.
    ///
    /// + request `name` a name to be associated with the guest, to be used in logs
    ///   and assertions.
    /// + request `network` the client end of a netemul network, to which the guest
    ///   should be attached.
    /// + request `mac` an optional mac address which is provided to the guest on
    ///   on creation. If `mac` is not provided, the guest's mac address is picked
    ///   by guest-manager.
    /// + response `guest` the client end of a `Guest` protocol which can be used to
    ///   interact with the guest.
    strict CreateGuest(resource struct {
        name string:MAX_GUEST_NAME_LENGTH;
        network client_end:fuchsia.netemul.network.Network;
        mac box<fuchsia.net.MacAddress>;
    }) -> (resource struct {
        s client_end:Guest;
    }) error strict enum {
        /// Guest was already running.
        ALREADY_RUNNING = 1;

        /// Failed to launch guest.
        LAUNCH_FAILED = 2;

        /// Failed to attach guest to the provided `fuchsia.netemul.network.Network`.
        ATTACH_FAILED = 3;
    };
};
