# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/test.gni")
import(
    "//src/lib/testing/expectation/fuchsia_test_component_with_expectations.gni")

name_provider_service_not_present_label = "name_provider_service_not_present"
bsdsocket_label = "bsdsocket"
dgramsocket_label = "dgramsocket"
if_nameindex_label = "if_nameindex"
streamsocket_label = "streamsocket"
fuchsia_label = "fuchsia"
packetsocket_label = "packetsocket"
rawsocket_label = "rawsocket"

test("netstack_${name_provider_service_not_present_label}_test") {
  sources = [ "name_provider_service_not_present_test.cc" ]

  deps = [
    "//sdk/fidl/fuchsia.device:fuchsia.device_hlcpp",
    "//src/lib/fxl/test:gtest_main",
  ]
}

test("netstack_${bsdsocket_label}_test") {
  sources = [
    "../os.h",
    "bsdsocket_test.cc",
    "no_network_test.cc",
    "util.cc",
    "util.h",
  ]

  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//zircon/system/ulib/fbl",
  ]

  if (is_fuchsia) {
    deps += [
      "//sdk/fidl/fuchsia.posix.socket:fuchsia.posix.socket_cpp_wire",
      "//src/lib/testing/predicates",
    ]
  }
}

test("netstack_${dgramsocket_label}_test") {
  sources = [
    "../os.h",
    "dgramsocket_test.cc",
    "util.cc",
    "util.h",
  ]

  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//zircon/system/ulib/fbl",
  ]

  if (is_fuchsia) {
    deps += [
      "//sdk/fidl/fuchsia.posix.socket:fuchsia.posix.socket_cpp_wire",
      "//sdk/lib/fdio",
      "//src/connectivity/network/netstack/udp_serde",
      "//src/lib/testing/predicates",
    ]
  }
}

test("netstack_${if_nameindex_label}_test") {
  sources = [ "if_nameindex_test.cc" ]

  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//zircon/system/ulib/fbl",
  ]

  if (is_fuchsia) {
    deps += [
      "//sdk/fidl/fuchsia.posix.socket:fuchsia.posix.socket_cpp_wire",
      "//src/lib/testing/predicates",
    ]
  }
}

test("netstack_${streamsocket_label}_test") {
  sources = [
    "../os.h",
    "streamsocket_test.cc",
    "util.cc",
    "util.h",
  ]

  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//zircon/system/ulib/fbl",
  ]

  if (is_fuchsia) {
    deps += [
      "//sdk/fidl/fuchsia.posix.socket:fuchsia.posix.socket_cpp_wire",
      "//src/lib/testing/predicates",
    ]
  }
}

test("netstack_${fuchsia_label}_test") {
  sources = [
    "../os.h",
    "fdio_test.cc",
    "util.cc",
    "util.h",
  ]

  deps = [
    "//sdk/fidl/fuchsia.posix.socket:fuchsia.posix.socket_cpp_wire",
    "//sdk/lib/fdio",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/predicates",
    "//zircon/system/ulib/fbl",
    "//zircon/system/ulib/sync",
  ]
}

test("netstack_${packetsocket_label}_test") {
  sources = [ "packetsocket_test.cc" ]

  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//zircon/system/ulib/fbl",
  ]
}

test("netstack_${rawsocket_label}_test") {
  sources = [
    "../os.h",
    "rawsocket_test.cc",
  ]

  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//zircon/system/ulib/fbl",
  ]
}

# Defines a component for testing POSIX sockets.
#
# Parameters
#
#   component_name
#     The name of the component to be instantiated.
#     Type: string
#
#   expects_path (optional)
#     The path to a `.json5` file containing expectations for results
#     of non-passing tests.
#     Type: string
#     Default: The test will be run without expectations.
#
#   manifest (optional)
#     The path to a manifest used to run the component.
#     Type: string
#     Default: An `expect_include` dep must be provided.
#
#   expect_include_dep (optional)
#     The name of an `expect_includes` target used to run the component.
#     Type: string
template("posix_socket_test_component") {
  component_label = target_name
  assert(
      defined(invoker.component_name),
      "`component_name` must be specified when calling posix_socket_test_component($target_name)")
  _component_name = invoker.component_name

  test_target = ":netstack_${component_label}_test"

  if (defined(invoker.expects_path)) {
    assert(
        defined(invoker.manifest),
        "`manifest` must be specified when calling posix_socket_test_component($target_name) with expectations")
    fuchsia_test_component_with_expectations("${_component_name}_component") {
      component_name = _component_name
      deps = [ test_target ]
      manifest = rebase_path(invoker.manifest)
      expectations = rebase_path(invoker.expects_path)
    }
  } else {
    fuchsia_unittest_component("${_component_name}_component") {
      component_name = _component_name
      deps = [ test_target ]
      if (defined(invoker.manifest)) {
        manifest = rebase_path(invoker.manifest)
      } else {
        assert(
            defined(invoker.expect_include_dep),
            "`expect_include_dep` must be specified when calling posix_socket_test_component($target_name) without a manifest")
        deps += [ invoker.expect_include_dep ]
      }
    }
  }
}

expect_includes("socket_test_includes") {
  includes = [
    "//src/connectivity/network/dns/meta/client.shard.cml",
    "//src/connectivity/network/netstack/meta/client-with-sync-udp-debug.shard.cml",
    "//src/sys/test_runners/gtest/default.shard.cml",
    "//sdk/lib/syslog/client.shard.cml",
  ]
}

expect_includes("name_provider_includes") {
  includes = [
    "//src/sys/test_runners/gtest/default.shard.cml",
    "//sdk/lib/syslog/client.shard.cml",
  ]
}

all_test_component_names = []

netstack2_syncudp_tests = [
  {
    label = streamsocket_label
    expect_include_dep = ":socket_test_includes"
  },
  {
    label = bsdsocket_label
    expect_include_dep = ":socket_test_includes"
  },
  {
    label = if_nameindex_label
    expect_include_dep = ":socket_test_includes"
  },
  {
    label = name_provider_service_not_present_label
    expect_include_dep = ":name_provider_includes"
  },
  {
    label = packetsocket_label
  },
  {
    label = rawsocket_label
  },
  {
    label = dgramsocket_label
    expects = true
  },
  {
    label = fuchsia_label
    expects = true
  },
]

foreach(test, netstack2_syncudp_tests) {
  _component_name = "netstack2_syncudp_${test.label}_test"
  posix_socket_test_component(test.label) {
    component_name = _component_name
    if (defined(test.expects) && test.expects) {
      expects_path = "expects/netstack2/${test.label}_syncudp.json5"
    }
    if (defined(test.expect_include_dep)) {
      expect_include_dep = test.expect_include_dep
    } else {
      manifest = "meta/netstack2/${test.label}.cml"
    }
  }
  all_test_component_names += [ _component_name ]
}

netstack2_fastudp_tests = [
  {
    label = bsdsocket_label
  },
  {
    label = dgramsocket_label
  },
  {
    label = if_nameindex_label
  },
  {
    label = fuchsia_label
    expects = true
  },
]

foreach(test, netstack2_fastudp_tests) {
  _component_name = "netstack2_fastudp_${test.label}_test"
  posix_socket_test_component(test.label) {
    component_name = _component_name
    if (defined(test.expects) && test.expects) {
      expects_path = "expects/netstack2/${test.label}_fastudp.json5"
    }
    manifest = "meta/netstack2/fastudp/${test.label}.cml"
  }
  all_test_component_names += [ _component_name ]
}

netstack3_tests = [
  {
    label = if_nameindex_label
  },
  {
    label = packetsocket_label
    expects = true
  },
  {
    label = rawsocket_label
    expects = true
  },
]

foreach(test, netstack3_tests) {
  _component_name = "netstack3_${test.label}_test"
  posix_socket_test_component(test.label) {
    component_name = _component_name
    if (defined(test.expects) && test.expects) {
      expects_path = "expects/netstack3/${test.label}.json5"
    }
    manifest = "meta/netstack3/${test.label}.cml"
  }
  all_test_component_names += [ _component_name ]
}

fuchsia_test_package("netstack-c-api-tests") {
  test_components = []
  foreach(test, all_test_component_names) {
    test_components += [ ":${test}_component" ]
  }

  deps = [
    # dns_resolver is under test.
    "//src/connectivity/network/dns:component",

    # netstack is under test.
    "//src/connectivity/network/netstack:component-with-fast-udp-debug",
    "//src/connectivity/network/netstack:component-with-sync-udp-debug",
    "//src/connectivity/network/netstack3:component-debug",

    # cat is used to test FD passing in :fuchsia_test.
    "//third_party/sbase:cat_bin",

    # used to run tests with expectations.
    "//src/lib/testing/expectation:expectation_comparer",
  ]
}

group("tests") {
  testonly = true
  public_deps = [ ":netstack-c-api-tests" ]
  if (host_os == "linux") {
    public_deps += [
      ":netstack_${bsdsocket_label}_test($host_toolchain)",
      ":netstack_${dgramsocket_label}_test($host_toolchain)",
      ":netstack_${if_nameindex_label}_test($host_toolchain)",
      ":netstack_${packetsocket_label}_test($host_toolchain)",
      ":netstack_${rawsocket_label}_test($host_toolchain)",
      ":netstack_${streamsocket_label}_test($host_toolchain)",
    ]
  }
}
