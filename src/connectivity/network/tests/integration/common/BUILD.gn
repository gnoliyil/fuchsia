# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/rust/rustc_library.gni")
import("//tools/cmc/build/expect_includes.gni")

rustc_library("netstack_testing_common") {
  edition = "2021"
  testonly = true
  deps = [
    ":client_includes",
    "//sdk/fidl/fuchsia.component:fuchsia.component_rust",
    "//sdk/fidl/fuchsia.hardware.network:fuchsia.hardware.network_rust",
    "//sdk/fidl/fuchsia.net:fuchsia.net_rust",
    "//sdk/fidl/fuchsia.net.debug:fuchsia.net.debug_rust",
    "//sdk/fidl/fuchsia.net.dhcp:fuchsia.net.dhcp_rust",
    "//sdk/fidl/fuchsia.net.dhcpv6:fuchsia.net.dhcpv6_rust",
    "//sdk/fidl/fuchsia.net.filter:fuchsia.net.filter_rust",
    "//sdk/fidl/fuchsia.net.interfaces:fuchsia.net.interfaces_rust",
    "//sdk/fidl/fuchsia.net.interfaces.admin:fuchsia.net.interfaces.admin_rust",
    "//sdk/fidl/fuchsia.net.multicast.admin:fuchsia.net.multicast.admin_rust",
    "//sdk/fidl/fuchsia.net.name:fuchsia.net.name_rust",
    "//sdk/fidl/fuchsia.net.neighbor:fuchsia.net.neighbor_rust",
    "//sdk/fidl/fuchsia.net.reachability:fuchsia.net.reachability_rust",
    "//sdk/fidl/fuchsia.net.routes:fuchsia.net.routes_rust",
    "//sdk/fidl/fuchsia.net.stack:fuchsia.net.stack_rust",
    "//sdk/fidl/fuchsia.net.tun:fuchsia.net.tun_rust",
    "//sdk/fidl/fuchsia.net.virtualization:fuchsia.net.virtualization_rust",
    "//sdk/fidl/fuchsia.posix.socket:fuchsia.posix.socket_rust",
    "//sdk/fidl/fuchsia.posix.socket.packet:fuchsia.posix.socket.packet_rust",
    "//sdk/fidl/fuchsia.posix.socket.raw:fuchsia.posix.socket.raw_rust",
    "//sdk/fidl/fuchsia.stash:fuchsia.stash_rust",
    "//src/connectivity/lib/net-declare",
    "//src/connectivity/lib/net-types",
    "//src/connectivity/lib/packet-formats",
    "//src/connectivity/lib/packet-formats-dhcp",
    "//src/connectivity/lib/ping",
    "//src/connectivity/network/dhcpv4/lib",
    "//src/connectivity/network/testing/netemul/fidl:fuchsia.netemul_rust",
    "//src/connectivity/network/testing/netemul/rust:lib",
    "//src/connectivity/network/testing/network-test-realm/fidl:fuchsia.net.test.realm_rust",
    "//src/lib/const-unwrap",
    "//src/lib/diagnostics/hierarchy/rust",
    "//src/lib/diagnostics/reader/rust",
    "//src/lib/diagnostics/selectors",
    "//src/lib/fake-clock/fidl:fidl_rust",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/network/fidl_fuchsia_net_interfaces_ext",
    "//src/lib/network/packet",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/sys/lib/component-events",
    "//src/sys/pkg/fidl/fuchsia.update.verify:fuchsia.update.verify_rust",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:assert_matches",
    "//third_party/rust_crates:async-trait",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:itertools",
    "//third_party/rust_crates:zerocopy",
  ]
  sources = [
    "src/constants.rs",
    "src/devices.rs",
    "src/dhcpv4.rs",
    "src/interfaces.rs",
    "src/lib.rs",
    "src/ndp.rs",
    "src/packets.rs",
    "src/ping.rs",
    "src/realms.rs",
  ]
  configs -= [ "//build/config/rust/lints:allow_unused_results" ]
}

expect_includes("client_includes") {
  includes = [ "client.shard.cml" ]
}
