# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/config.gni")
import(
    "//src/lib/testing/expectation/fuchsia_test_component_with_expectations.gni")
import(
    "//src/lib/testing/expectation/fuchsia_test_with_expectations_package.gni")

tests_with_expectations = [
  "device",
  "inspect",
  "sys",
]

tests_with_expectations_with_err_logs = [
  "bridge",
  "dhcp",
  "dns",
  "fidl",
  "forwarding",
  "ipv4",
  "ipv6",
  "management",
  "product-flow",
  "reachability",
  "socket",
]

long_tests = [ "multicast-forwarding" ]

foreach(test, tests_with_expectations_with_err_logs + long_tests) {
  name = "netstack-${test}-integration-test"
  fuchsia_test_component(name) {
    manifest = "meta/${name}.cml"
    deps = [ test ]
  }
}

foreach(test, tests_with_expectations) {
  name = "netstack-${test}-integration-test"
  fuchsia_test_component_with_expectations(name) {
    expectations = "expects/${name}.json5"
    manifest = "meta/${name}.cml"
    deps = [ test ]
  }
}

package_deps = [
  # netemul-sandbox-v2 is used to create hermetic test realms.
  "//src/connectivity/network/testing/netemul/service:netemul-sandbox",

  # netstack is under test.
  "//src/connectivity/network/netstack:component",
  "//src/connectivity/network/netstack:component-debug",
  "//src/connectivity/network/netstack:component-with-fast-udp-debug",

  # netstack3 is under test.
  "//src/connectivity/network/netstack3:component-debug",

  # reachability monitor is under test.
  "//src/connectivity/network/reachability:component_with_fake_time",

  # sampler config is tested as part of inspect integration tests.
  ":sampler-config",

  # stash_secure is used by dhcpd and netstack.
  "//src/sys/stash:stash_secure_v2",

  # DHCPv4 Server is used to test DHCP address acquisition.
  "//src/connectivity/network/dhcpv4/server:component",

  # DHCPv6 client is under test.
  "//src/connectivity/network/dhcpv6/client:component",

  # dns_resolver integration with netstack is tested.
  "//src/connectivity/network/dns:component_with_fake_time",

  # the DNS resolver under test uses the fake clock.
  "//src/lib/fake-clock/svc",

  # netcfg integration with netstack is tested.
  ":netcfg-netemul-config",
  ":netcfg-with-dhcpv6-netemul-config",
  ":netcfg-with-forwarding-netemul-config",
  "//src/connectivity/network/netcfg:component-advanced",
  "//src/connectivity/network/netcfg:component-basic",
]

fuchsia_test_package("netstack-integration-tests-with-expectations") {
  test_components = []
  foreach(test, tests_with_expectations) {
    test_components += [ ":netstack-${test}-integration-test" ]
  }

  deps = package_deps + [ "//src/lib/testing/expectation:expectation_comparer" ]
}

err_log_package_deps = []
foreach(test, tests_with_expectations_with_err_logs) {
  name = "netstack-${test}-integration-test"
  no_err_logs_package_name = "${name}-no-err-logs"
  fuchsia_test_with_expectations_package(no_err_logs_package_name) {
    test_components = [ ":${name}" ]
    expectations = "expects/${name}.json5"
    treatment_of_cases_with_error_logs = "SKIP_CASES_WITH_ERROR_LOGS"
    deps =
        package_deps + [ "//src/lib/testing/expectation:expectation_comparer" ]
  }
  with_err_logs_package_name = "${name}-with-err-logs"
  fuchsia_test_with_expectations_package(with_err_logs_package_name) {
    test_components = [ ":${name}" ]
    expectations = "expects/${name}.json5"
    treatment_of_cases_with_error_logs = "RUN_ONLY_CASES_WITH_ERROR_LOGS"
    deps =
        package_deps + [ "//src/lib/testing/expectation:expectation_comparer" ]
    test_specs = {
      log_settings = {
        max_severity = "ERROR"
      }
    }
  }
  err_log_package_deps += [
    ":${no_err_logs_package_name}",
    ":${with_err_logs_package_name}",
  ]
}

fuchsia_test_package("netstack-long-integration-tests") {
  test_components = []
  foreach(test, long_tests) {
    test_components += [ ":netstack-${test}-integration-test" ]
  }

  deps = package_deps
  test_specs = {
    # Longer timeout to reduce flake (fxbug.dev/104137)
    timeout_secs = 720
  }
}

resource("netcfg-netemul-config") {
  testonly = true
  sources = [ "management/config/empty.json" ]
  outputs = [ "netcfg/empty.json" ]
}

resource("netcfg-with-dhcpv6-netemul-config") {
  testonly = true
  sources = [ "management/config/dhcpv6.json" ]
  outputs = [ "netcfg/dhcpv6.json" ]
}

resource("netcfg-with-forwarding-netemul-config") {
  testonly = true
  sources = [ "management/config/forwarding.json" ]
  outputs = [ "netcfg/forwarding.json" ]
}

resource("sampler-config") {
  sources = [ "//src/diagnostics/config/sampler/netstack.json" ]
  outputs = [ "data/sampler-config/netstack.json" ]
}

group("tests") {
  testonly = true
  deps = [
           ":netstack-integration-tests-with-expectations",
           "guest:netstack-guest-integration-tests",
           "macros:netstack_testing_macros_test",
         ] + err_log_package_deps

  if (!is_coverage) {
    # TODO(fxbug.dev/104137): Re-enable this test when it passes with
    # the coverage variant.
    deps += [ ":netstack-long-integration-tests" ]
  }
}
