# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/config.gni")
import(
    "//src/lib/testing/expectation/fuchsia_test_component_with_expectations.gni")
import(
    "//src/lib/testing/expectation/fuchsia_test_with_expectations_package.gni")

tests = [
  "device",
  "inspect",
  "sys",
]

tests_with_err_logs = [
  {
    label = "bridge"
  },
  {
    label = "dhcp"
  },
  {
    label = "dns"
  },
  {
    label = "fidl"
  },
  {
    label = "forwarding"
  },
  {
    label = "ipv4"
  },
  {
    label = "ipv6"
  },
  {
    label = "management"
  },
  {
    label = "product-flow"
  },
  {
    label = "reachability"
  },
  {
    label = "socket"
  },
]

long_tests_with_err_logs = [
  {
    label = "multicast-forwarding"
    long_test = true
  },
]

foreach(test, tests) {
  name = "netstack-${test}-integration-test"
  fuchsia_test_component_with_expectations(name) {
    expectations = "expects/${name}.json5"
    manifest = "meta/${name}.cml"
    deps = [ test ]
  }
}

foreach(test, tests_with_err_logs + long_tests_with_err_logs) {
  name = "netstack-${test.label}-integration-test"
  fuchsia_test_component(name) {
    manifest = "meta/${name}.cml"
    deps = [ test.label ]
  }
}

package_deps = [
  # netemul-sandbox-v2 is used to create hermetic test realms.
  "//src/connectivity/network/testing/netemul/service:netemul-sandbox",

  # netstack is under test.
  ":netstack-empty-netemul-config",
  ":netstack-specified-procs-netemul-config",
  "//src/connectivity/network/netstack:component",
  "//src/connectivity/network/netstack:component-debug",
  "//src/connectivity/network/netstack:component-with-fast-udp-debug",

  # netstack3 is under test.
  "//src/connectivity/network/netstack3:component-debug",

  # reachability monitor is under test.
  "//src/connectivity/network/reachability:component_with_fake_time",

  # sampler config is tested as part of inspect integration tests.
  ":sampler-config",

  # stash_secure is used by dhcpd and netstack.
  "//src/sys/stash:stash_secure_v2",

  # DHCPv4 Server is used to test DHCP address acquisition.
  "//src/connectivity/network/dhcpv4/server:component",

  # DHCPv6 client is under test.
  "//src/connectivity/network/dhcpv6/client:component",

  # dns_resolver integration with netstack is tested.
  "//src/connectivity/network/dns:component_with_fake_time",

  # the DNS resolver under test uses the fake clock.
  "//src/lib/fake-clock/svc",

  # netcfg integration with netstack is tested.
  ":netcfg-netemul-config",
  ":netcfg-with-dhcpv6-netemul-config",
  ":netcfg-with-forwarding-netemul-config",
  "//src/connectivity/network/netcfg:component-advanced",
  "//src/connectivity/network/netcfg:component-basic",
]

fuchsia_test_package("netstack-integration-tests") {
  test_components = []
  foreach(test, tests) {
    test_components += [ ":netstack-${test}-integration-test" ]
  }

  deps = package_deps + [ "//src/lib/testing/expectation:expectation_comparer" ]
}

err_log_package_deps = []
long_test_err_log_package_deps = []
foreach(test, tests_with_err_logs + long_tests_with_err_logs) {
  name = "netstack-${test.label}-integration-test"
  no_err_logs_package_name = "${name}-no-err-logs"
  fuchsia_test_with_expectations_package(no_err_logs_package_name) {
    test_components = [ ":${name}" ]
    expectations = "expects/${name}.json5"
    treatment_of_cases_with_error_logs = "SKIP_CASES_WITH_ERROR_LOGS"
    deps =
        package_deps + [ "//src/lib/testing/expectation:expectation_comparer" ]
    if (defined(test.long_test) && test.long_test) {
      test_specs = {
        # Longer timeout to reduce flake (fxbug.dev/104137)
        timeout_secs = 720
      }
    }
  }
  with_err_logs_package_name = "${name}-with-err-logs"
  fuchsia_test_with_expectations_package(with_err_logs_package_name) {
    test_components = [ ":${name}" ]
    expectations = "expects/${name}.json5"
    treatment_of_cases_with_error_logs = "RUN_ONLY_CASES_WITH_ERROR_LOGS"
    deps =
        package_deps + [ "//src/lib/testing/expectation:expectation_comparer" ]
    test_specs = {
      log_settings = {
        max_severity = "ERROR"
      }
      if (defined(test.long_test) && test.long_test) {
        # Longer timeout to reduce flake (fxbug.dev/104137)
        timeout_secs = 720
      }
    }
  }
  if (defined(test.long_test) && test.long_test) {
    long_test_err_log_package_deps += [
      ":${no_err_logs_package_name}",
      ":${with_err_logs_package_name}",
    ]
  } else {
    err_log_package_deps += [
      ":${no_err_logs_package_name}",
      ":${with_err_logs_package_name}",
    ]
  }
}

resource("netcfg-netemul-config") {
  testonly = true
  sources = [ "management/config/empty.json" ]
  outputs = [ "netcfg/empty.json" ]
}

resource("netcfg-with-dhcpv6-netemul-config") {
  testonly = true
  sources = [ "management/config/dhcpv6.json" ]
  outputs = [ "netcfg/dhcpv6.json" ]
}

resource("netcfg-with-forwarding-netemul-config") {
  testonly = true
  sources = [ "management/config/forwarding.json" ]
  outputs = [ "netcfg/forwarding.json" ]
}

resource("netstack-empty-netemul-config") {
  testonly = true
  sources = [ "inspect/config/empty.json" ]
  outputs = [ "netstack/empty.json" ]
}

resource("netstack-specified-procs-netemul-config") {
  testonly = true
  sources = [ "inspect/config/specified_procs.json" ]
  outputs = [ "netstack/specified_procs.json" ]
}

resource("sampler-config") {
  sources = [ "//src/diagnostics/config/sampler/netstack.json" ]
  outputs = [ "data/sampler-config/netstack.json" ]
}

# We keep tests that involve the virtualization stack (and especially guest
# images) restricted to a separate builder.  See https://fxbug.dev/122994 for
# more details.
group("tests-involving-guests") {
  testonly = true
  deps = [ "guest:netstack-guest-integration-tests" ]
}

group("tests") {
  testonly = true

  # See comment above about tests-involving-guests
  assert_no_deps = [ "guest:*" ]
  deps = [
           ":netstack-integration-tests",
           "macros:netstack_testing_macros_test",
         ] + err_log_package_deps

  if (!is_coverage) {
    # TODO(fxbug.dev/104137): Re-enable this test when it passes with
    # the coverage variant.
    deps += long_test_err_log_package_deps
  }
}
