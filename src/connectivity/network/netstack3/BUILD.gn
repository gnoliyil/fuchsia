# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/rust/rustc_binary.gni")

common_deps = [
  "//sdk/fidl/fuchsia.hardware.network:fuchsia.hardware.network_rust",
  "//sdk/fidl/fuchsia.net:fuchsia.net_rust",
  "//sdk/fidl/fuchsia.net.debug:fuchsia.net.debug_rust",
  "//sdk/fidl/fuchsia.net.filter:fuchsia.net.filter_rust",
  "//sdk/fidl/fuchsia.net.interfaces:fuchsia.net.interfaces_rust",
  "//sdk/fidl/fuchsia.net.interfaces.admin:fuchsia.net.interfaces.admin_rust",
  "//sdk/fidl/fuchsia.net.root:fuchsia.net.root_rust",
  "//sdk/fidl/fuchsia.net.routes:fuchsia.net.routes_rust",
  "//sdk/fidl/fuchsia.net.stack:fuchsia.net.stack_rust",
  "//sdk/fidl/fuchsia.posix:fuchsia.posix_rust",
  "//sdk/fidl/fuchsia.posix.socket:fuchsia.posix.socket_rust",
  "//sdk/fidl/fuchsia.posix.socket.packet:fuchsia.posix.socket.packet_rust",
  "//sdk/fidl/fuchsia.posix.socket.raw:fuchsia.posix.socket.raw_rust",
  "//src/connectivity/lib/net-declare",
  "//src/connectivity/lib/net-types",
  "//src/connectivity/lib/network-device/rust",
  "//src/connectivity/lib/packet-formats",
  "//src/connectivity/network/lib/explicit",
  "//src/lib/async-utils",
  "//src/lib/const-unwrap",
  "//src/lib/cstr",
  "//src/lib/diagnostics/inspect/runtime/rust",
  "//src/lib/diagnostics/inspect/rust",
  "//src/lib/fidl/rust/fidl",
  "//src/lib/fuchsia",
  "//src/lib/fuchsia-async",
  "//src/lib/fuchsia-component",
  "//src/lib/fuchsia-runtime",
  "//src/lib/network/fidl_fuchsia_net_ext",
  "//src/lib/network/fidl_fuchsia_net_interfaces_ext",
  "//src/lib/network/fidl_fuchsia_net_routes_ext",
  "//src/lib/network/packet",
  "//src/lib/trace/rust:trace",
  "//src/lib/trace/rust:trace-provider",
  "//src/lib/zircon/rust:fuchsia-zircon",
  "//src/sys/pkg/fidl/fuchsia.update.verify:fuchsia.update.verify_rust",
  "//third_party/rust_crates:anyhow",
  "//third_party/rust_crates:assert_matches",
  "//third_party/rust_crates:derivative",
  "//third_party/rust_crates:either",
  "//third_party/rust_crates:futures",
  "//third_party/rust_crates:itertools",
  "//third_party/rust_crates:nonzero_ext",
  "//third_party/rust_crates:once_cell",
  "//third_party/rust_crates:rand",
  "//third_party/rust_crates:thiserror",
  "//third_party/rust_crates:tracing",
  "//zircon/system/ulib/backtrace-request/rust",
]

common_test_deps = [
  "//src/connectivity/lib/fidl_fuchsia_net_stack_ext",
  "//src/connectivity/lib/ip-test-macro",
  "//src/connectivity/lib/net-declare",
  "//src/connectivity/network/testing/netemul/network-context/fidl:network_rust",
  "//src/connectivity/network/testing/netemul/rust:lib",
  "//src/lib/network/fidl_fuchsia_net_ext",
  "//src/lib/testing/fixture",
  "//src/lib/zircon/rust:fuchsia-zircon-status",
  "//third_party/rust_crates:futures-lite",
  "//third_party/rust_crates:itertools",
  "//third_party/rust_crates:test-case",
  "//third_party/rust_crates:tracing",
  "//third_party/rust_crates:tracing-subscriber",
]

common_sources = [
  "src/bindings/debug_fidl_worker.rs",
  "src/bindings/devices.rs",
  "src/bindings/filter_worker.rs",
  "src/bindings/integration_tests.rs",
  "src/bindings/interfaces_admin.rs",
  "src/bindings/interfaces_watcher.rs",
  "src/bindings/macros.rs",
  "src/bindings/mod.rs",
  "src/bindings/netdevice_worker.rs",
  "src/bindings/root_fidl_worker.rs",
  "src/bindings/routes_fidl_worker.rs",
  "src/bindings/socket/datagram.rs",
  "src/bindings/socket/mod.rs",
  "src/bindings/socket/packet.rs",
  "src/bindings/socket/queue.rs",
  "src/bindings/socket/raw.rs",
  "src/bindings/socket/stream.rs",
  "src/bindings/socket/worker.rs",
  "src/bindings/stack_fidl_worker.rs",
  "src/bindings/timers.rs",
  "src/bindings/util.rs",
  "src/bindings/verifier_worker.rs",
  "src/main.rs",
]

rustc_binary("bin") {
  name = "netstack3"
  edition = "2021"
  with_unit_tests = true

  deps = [ "core:netstack3-core" ] + common_deps

  test_deps = common_test_deps

  sources = common_sources
  configs -= [ "//build/config/rust/lints:allow_unused_results" ]
}

rustc_binary("bin-instrumented") {
  name = "netstack3-instrumented"
  edition = "2021"
  with_unit_tests = true

  deps = [ "core:netstack3-core-instrumented" ] + common_deps
  features = [ "instrumented" ]

  test_deps = common_test_deps

  sources = common_sources
  configs -= [ "//build/config/rust/lints:allow_unused_results" ]
}

fuchsia_component("component") {
  component_name = "netstack3"
  manifest = "meta/netstack3.cml"
  deps = [ ":bin" ]
}

# Component with debugging instrumentation enabled. This should be used for
# tests but not benchmarks.
fuchsia_component("component-debug") {
  component_name = "netstack3-debug"
  manifest = "meta/netstack3_debug.cml"
  deps = [ ":bin-instrumented" ]
  testonly = true
}

# Variant of `:component` whose component name shows up in the package as
# #meta/netstack.cm and can be used in place of Netstack2 when assembling
# images.
fuchsia_component("component-dropin") {
  component_name = "netstack"
  manifest = "meta/netstack3.cml"
  deps = [ ":bin" ]
}

fuchsia_unittest_component("netstack3-bin_test") {
  deps = [
    ":bin_test",
    "//src/connectivity/network/testing/netemul/service:netemul-sandbox",
  ]
}

fuchsia_unittest_component("netstack3-bin-instrumented_test") {
  deps = [
    ":bin-instrumented_test",
    "//src/connectivity/network/testing/netemul/service:netemul-sandbox",
  ]
}

fuchsia_test_package("netstack3-tests") {
  test_components = [
    ":netstack3-bin_test",
    ":netstack3-bin-instrumented_test",
  ]
}

rustc_binary("netstack3-benchmarks") {
  name = "netstack3_benchmarks"
  testonly = true
  edition = "2018"
  sources = [ "bench/main.rs" ]
  source_root = "bench/main.rs"
  deps = [
    "core:netstack3-core-benchmarks",
    "//src/developer/fuchsia-criterion",
  ]
  configs -= [ "//build/config/rust/lints:allow_unused_results" ]
}

fuchsia_package_with_single_component("netstack3_benchmarks") {
  deps = [ ":netstack3-benchmarks" ]
  testonly = true
  manifest = "bench/meta/netstack3-benchmarks.cml"
}

group("tests") {
  testonly = true
  deps = [
    ":netstack3-tests",
    "core:tests",
  ]
}
