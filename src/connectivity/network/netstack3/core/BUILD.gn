# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/fuzz.gni")
import("//build/rust/rustc_fuzzer.gni")
import("//build/rust/rustc_library.gni")
import("//build/rust/rustc_test.gni")

lib_sources = [
  "src/algorithm/mod.rs",
  "src/algorithm/port_alloc.rs",
  "src/benchmarks.rs",
  "src/context.rs",
  "src/convert.rs",
  "src/data_structures/id_map.rs",
  "src/data_structures/id_map_collection.rs",
  "src/data_structures/mod.rs",
  "src/data_structures/ref_counted_hash_map.rs",
  "src/data_structures/socketmap.rs",
  "src/data_structures/token_bucket.rs",
  "src/device/arp.rs",
  "src/device/ethernet.rs",
  "src/device/link.rs",
  "src/device/loopback.rs",
  "src/device/mod.rs",
  "src/device/ndp.rs",
  "src/device/queue/fifo.rs",
  "src/device/queue/mod.rs",
  "src/device/queue/rx.rs",
  "src/device/queue/tx.rs",
  "src/device/socket.rs",
  "src/device/state.rs",
  "src/error.rs",
  "src/fuzz.rs",
  "src/ip/device/dad.rs",
  "src/ip/device/integration.rs",
  "src/ip/device/mod.rs",
  "src/ip/device/nud.rs",
  "src/ip/device/route_discovery.rs",
  "src/ip/device/router_solicitation.rs",
  "src/ip/device/slaac.rs",
  "src/ip/device/state.rs",
  "src/ip/forwarding.rs",
  "src/ip/gmp/igmp.rs",
  "src/ip/gmp/mld.rs",
  "src/ip/gmp/mod.rs",
  "src/ip/icmp.rs",
  "src/ip/integration.rs",
  "src/ip/ipv6.rs",
  "src/ip/mod.rs",
  "src/ip/path_mtu.rs",
  "src/ip/reassembly.rs",
  "src/ip/socket.rs",
  "src/ip/types.rs",
  "src/lib.rs",
  "src/lock_ordering.rs",
  "src/macros.rs",
  "src/socket/address.rs",
  "src/socket/datagram.rs",
  "src/socket/mod.rs",
  "src/socket/posix.rs",
  "src/sync.rs",
  "src/testutil.rs",
  "src/transport/integration.rs",
  "src/transport/mod.rs",
  "src/transport/tcp/buffer.rs",
  "src/transport/tcp/congestion/cubic.rs",
  "src/transport/tcp/congestion/mod.rs",
  "src/transport/tcp/mod.rs",
  "src/transport/tcp/rtt.rs",
  "src/transport/tcp/segment.rs",
  "src/transport/tcp/seqnum.rs",
  "src/transport/tcp/socket/demux.rs",
  "src/transport/tcp/socket/icmp.rs",
  "src/transport/tcp/socket/isn.rs",
  "src/transport/tcp/socket/mod.rs",
  "src/transport/tcp/state.rs",
  "src/transport/udp.rs",
]

lib_deps = [
  # TODO(https://github.com/rust-lang-nursery/portability-wg/issues/11):
  # remove this module.
  "fakealloc",
  "lock-order",
  "//src/connectivity/lib/net-types",
  "//src/connectivity/lib/packet-formats",
  "//src/connectivity/network/lib/explicit",
  "//src/connectivity/network/lib/todo_unused",
  "//src/lib/const-unwrap",
  "//src/lib/mundane",
  "//src/lib/network/packet",
  "//third_party/rust_crates:assert_matches",
  "//third_party/rust_crates:derivative",
  "//third_party/rust_crates:either",
  "//third_party/rust_crates:log",
  "//third_party/rust_crates:nonzero_ext",
  "//third_party/rust_crates:rand",
  "//third_party/rust_crates:siphasher",
  "//third_party/rust_crates:smallvec",
  "//third_party/rust_crates:thiserror",
  "//third_party/rust_crates:zerocopy",
]

lib_test_deps = [
  "proptest-support",
  "teststd",
  "//src/connectivity/lib/ip-test-macro",
  "//src/connectivity/lib/net-declare",
  "//third_party/rust_crates:assert_matches",
  "//third_party/rust_crates:itertools",
  "//third_party/rust_crates:proptest",
  "//third_party/rust_crates:rand_xorshift",
  "//third_party/rust_crates:test-case",
]

lib_not_fuzz_deps = [
  # TODO(https://github.com/rust-lang/rust/issues/62502): remove this module.
  "fakestd",
]

lib_instrumented_deps = [ "sync:netstack3_sync_instrumented" ]

lib_not_instrumented_deps = [ "sync:netstack3_sync_not_instrumented" ]

rustc_library("netstack3-core") {
  version = "0.1.0"
  edition = "2021"

  deps = lib_deps + lib_not_fuzz_deps + lib_not_instrumented_deps

  features = []

  sources = lib_sources

  configs -= [ "//build/config/rust/lints:allow_unused_results" ]
}

# A variant of the netstack3-core library that has additional instrumentation
# that is useful for debugging and testing, like recursive lock detection.
rustc_library("netstack3-core-instrumented") {
  version = "0.1.0"
  edition = "2021"

  deps = lib_deps + lib_not_fuzz_deps + lib_instrumented_deps

  features = [ "instrumented" ]

  sources = lib_sources

  configs -= [ "//build/config/rust/lints:allow_unused_results" ]
}

rustc_test("netstack3-core_test") {
  name = "netstack3_core_lib_test"
  edition = "2021"

  deps = lib_deps + lib_test_deps + lib_not_fuzz_deps + lib_instrumented_deps

  features = [ "instrumented" ]

  sources = lib_sources

  configs -= [ "//build/config/rust/lints:allow_unused_results" ]
}

fuchsia_unittest_package("netstack3-core-test-package") {
  package_name = "netstack3-core-test"
  deps = [ ":netstack3-core_test" ]
}

config("benchmark") {
  rustflags = [
    "--cfg=benchmark",
    "--cfg=test",
  ]
}

rustc_library("netstack3-core-benchmarks") {
  name = "netstack3_core_benchmarks"
  edition = "2021"
  testonly = true
  with_unit_tests = true
  sources = lib_sources
  deps = lib_deps + lib_test_deps + lib_not_fuzz_deps +
         lib_not_instrumented_deps + [ "//third_party/rust_crates:criterion" ]
  configs -= [ "//build/config/rust/lints:allow_unused_results" ]
  configs += [ ":benchmark" ]
}

config("fuzz") {
  rustflags = [
    "--cfg=fuzz",
    "--cfg=test",
  ]
}

rustc_fuzzer("fuzz-single-device") {
  edition = "2021"
  rustfunction = "single_device_arbitrary_packets"

  sources = lib_sources
  deps = lib_deps + lib_test_deps + lib_instrumented_deps + [
           "//src/connectivity/lib/fuzz-util",
           "//src/connectivity/lib/net-declare",
           "//src/connectivity/lib/net-types",
           "//src/lib/fuzzing/rust:fuzz",
           "//src/lib/network/packet",
           "//third_party/rust_crates:arbitrary",
           "//third_party/rust_crates:lazy_static",
           "//third_party/rust_crates:log",
         ]

  features = [
    "instrumented",
    # Logging is turned off by default so that the fuzzer can run faster. It can
    # be enabled to be included in the output the fuzzer prints (only on
    # failure) by enabling any of the following features. Enabling multiple is
    # equivalent to enabling the most verbose.
    #   "log_trace"
    #   "log_debug"
    #   "log_info"
  ]

  configs -= [ "//build/config/rust/lints:allow_unused_results" ]
  configs += [ ":fuzz" ]
}

fuchsia_fuzzer_component("fuzz-single-device-component") {
  manifest = "meta/fuzz-single-device.cml"
  deps = [ ":fuzz-single-device" ]
}

if (is_fuchsia) {
  fuchsia_fuzzer_package("netstack3-core-fuzzers") {
    rust_fuzzer_components = [ ":fuzz-single-device-component" ]
  }
} else {
  group("netstack3-core-fuzzers") {
    testonly = true
    deps = [ ":fuzz-single-device" ]
  }
}
group("tests") {
  testonly = true
  public_deps = [
    ":netstack3-core-fuzzers",
    ":netstack3-core-test-package",
    ":netstack3-core_test($host_toolchain)",
    "lock-order:tests",
    "sync:tests",
  ]
}
