# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bind/bind.gni")
import("//build/components.gni")
import("//build/drivers.gni")

all_hdrs = [
  "convert.h",
  "device.h",
  "driver.h",
  "debug.h",
]

all_src = [
  "convert.cc",
  "device.cc",
  "driver.cc",
]

all_deps = [
  ":wlanif_bind",
  "//sdk/banjo/fuchsia.hardware.wlan.fullmac:fuchsia.hardware.wlan.fullmac_banjo_cpp",
  "//sdk/fidl/fuchsia.wlan.common:fuchsia.wlan.common_banjo_c",
  "//sdk/fidl/fuchsia.wlan.device:fuchsia.wlan.device_hlcpp",
  "//sdk/fidl/fuchsia.wlan.internal:fuchsia.wlan.internal_banjo_c",
  "//sdk/fidl/fuchsia.wlan.internal:fuchsia.wlan.internal_hlcpp",
  "//sdk/fidl/fuchsia.wlan.mlme:fuchsia.wlan.mlme_c_client",
  "//sdk/fidl/fuchsia.wlan.mlme:fuchsia.wlan.mlme_c_server",
  "//sdk/fidl/fuchsia.wlan.mlme:fuchsia.wlan.mlme_hlcpp",
  "//src/connectivity/wlan/drivers/lib/log/cpp",
  "//src/connectivity/wlan/lib/common/cpp:common",
  "//src/devices/lib/driver",
  "//src/lib/ddk",
  "//zircon/system/ulib/async:async-cpp",
  "//zircon/system/ulib/async-loop:async-loop-cpp",
  "//zircon/system/ulib/async-loop:async-loop-default",
]

source_set("lib_source") {
  public = all_hdrs
  sources = all_src
  public_deps = all_deps
  include_dirs = [ "src/connectivity/wlan/drivers/wlanif/" ]

  # TODO(https://fxbug.dev/58162): delete the below and fix compiler warnings
  configs += [ "//build/config:Wno-conversion" ]
}

driver_bind_rules("wlanif_bind") {
  rules = "wlanif.bind"
  header_output = "wlanif-bind.h"
  bind_output = "wlanif.bindbc"
  deps = [ "//src/devices/bind/fuchsia.wlan" ]
}

fuchsia_driver("wlanif_driver-driver") {
  output_name = "wlanif"

  deps = [ ":lib_source" ]
  configs += [ "//build/config/fuchsia:enable_zircon_asserts" ]
}

fuchsia_driver_component("wlanif_driver") {
  component_name = "wlanif"
  deps = [ ":wlanif_driver-driver" ]
  info = "wlanif_driver-info.json"
  colocate = true
}

fuchsia_driver_package("wlanif") {
  driver_components = [ ":wlanif_driver" ]
}
