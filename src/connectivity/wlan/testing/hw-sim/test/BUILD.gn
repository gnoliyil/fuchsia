# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/testing/environments.gni")

fuchsia_component("scan-contemporary-privacy") {
  testonly = true
  manifest = "meta/scan_contemporary_privacy.cml"
  deps = [ "scan_contemporary_privacy" ]
}

fuchsia_component("scan-legacy-privacy") {
  testonly = true
  manifest = "meta/scan_legacy_privacy.cml"
  deps = [ "scan_legacy_privacy" ]
}

fuchsia_component("connect-to-all-modern-bss-protections") {
  testonly = true
  manifest = "meta/connect_to_all_modern_bss_protections.cml"
  deps = [ "connect_to_all_modern_bss_protections" ]
}

fuchsia_component("connect-to-open-network") {
  testonly = true
  manifest = "meta/connect_to_open_network.cml"
  deps = [ "connect_to_open_network" ]
}

fuchsia_component("connect-to-wpa1-network") {
  testonly = true
  manifest = "meta/connect_to_wpa1_network.cml"
  deps = [ "connect_to_wpa1_network" ]
}

fuchsia_component("connect-with-bad-password") {
  testonly = true
  manifest = "meta/connect_with_bad_password.cml"
  deps = [ "connect_with_bad_password" ]
}

fuchsia_component("connect-with-failed-association") {
  testonly = true
  manifest = "meta/connect_with_failed_association.cml"
  deps = [ "connect_with_failed_association" ]
}

fuchsia_component("connect-with-wrong-credential-type") {
  testonly = true
  manifest = "meta/connect_with_wrong_credential_type.cml"
  deps = [ "connect_with_wrong_credential_type" ]
}

fuchsia_component("ethernet-tx-rx") {
  testonly = true
  manifest = "meta/ethernet_tx_rx.cml"
  deps = [ "ethernet_tx_rx" ]
}

fuchsia_component("handle-tx-event-hooks") {
  testonly = true
  manifest = "meta/handle-tx-event-hooks.cml"
  deps = [ "handle_tx_event_hooks" ]
}

fuchsia_component("multiple-clients-ap") {
  testonly = true
  manifest = "meta/multiple_clients_ap.cml"
  deps = [ "multiple_clients_ap" ]
}

fuchsia_component("open-ap-connect") {
  testonly = true
  manifest = "meta/open_ap_connect.cml"
  deps = [ "open_ap_connect" ]
}

fuchsia_component("reconnect-to-wpa2-network") {
  testonly = true
  manifest = "meta/reconnect_to_wpa2_network.cml"
  deps = [ "reconnect_to_wpa2_network" ]
}

fuchsia_component("set-country") {
  testonly = true
  manifest = "meta/set_country.cml"
  deps = [ "set_country" ]
}

fuchsia_component("sim-client-vs-sim-ap") {
  testonly = true
  manifest = "meta/sim_client_vs_sim_ap.cml"
  deps = [ "sim_client_vs_sim_ap" ]
}

fuchsia_component("simulate-scan") {
  testonly = true
  manifest = "meta/simulate_scan.cml"
  deps = [ "simulate_scan" ]
}

fuchsia_component("verify-ethernet") {
  testonly = true
  manifest = "meta/verify_ethernet.cml"
  deps = [ "verify_ethernet" ]
}

fuchsia_component("verify-wlan-inspect") {
  testonly = true
  manifest = "meta/verify_wlan_inspect.cml"
  deps = [ "verify_wlan_inspect" ]
}

fuchsia_component("run-without-regulatory-manager") {
  testonly = true
  manifest = "meta/run_without_regulatory_manager.cml"
  deps = [ "run_without_regulatory_manager" ]
}

fuchsia_component("autoconnect-idle-iface") {
  testonly = true
  manifest = "meta/autoconnect_idle_iface.cml"
  deps = [ "autoconnect_idle_iface" ]
}
shared_deps = [
  "//sdk/lib/driver_test_realm/simple",
  "//src/connectivity/location/regulatory_region:regulatory_region_component",
  "//src/connectivity/wlan/testing:wlan_test_driver_deps",
  "//src/connectivity/wlan/wlancfg:service",
  "//src/connectivity/wlan/wlandevicemonitor:wlandevicemonitor-legacy-wlanstack-values",
  "//src/connectivity/wlan/wlandevicemonitor:wlandevicemonitor_component",
  "//src/connectivity/wlan/wlanstack:wlanstack-comp",
  "//src/sys/stash:stash_secure_v2",
]

hw_sim_test_components_for_all_privacies = [
  ":autoconnect-idle-iface",
  ":connect-to-all-modern-bss-protections",
  ":connect-to-open-network",
  ":connect-with-failed-association",
  ":connect-with-wrong-credential-type",
  ":ethernet-tx-rx",
  ":handle-tx-event-hooks",
  ":multiple-clients-ap",
  ":open-ap-connect",
  ":reconnect-to-wpa2-network",
  ":run-without-regulatory-manager",
  ":set-country",
  ":sim-client-vs-sim-ap",
  ":simulate-scan",
  ":verify-ethernet",
  ":verify-wlan-inspect",
]

fuchsia_test_package("wlan-hw-sim-contemporary-privacy-tests") {
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
  test_components = [ ":scan-contemporary-privacy" ]
  test_components += hw_sim_test_components_for_all_privacies
  deps = [ "//src/connectivity/wlan/wlanstack:wlanstack-values" ]
  deps += shared_deps
}

fuchsia_test_package("wlan-hw-sim-legacy-privacy-tests") {
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
  test_components = [
    ":connect-with-bad-password",
    ":connect-to-wpa1-network",
    ":scan-legacy-privacy",
  ]
  test_components += hw_sim_test_components_for_all_privacies
  deps = [ "//src/connectivity/wlan/wlanstack:wlanstack-legacy-privacy-values" ]
  deps += shared_deps
}

fuchsia_component("rate-selection") {
  testonly = true
  manifest = "meta/rate_selection.cml"
  deps = [ "rate_selection" ]
}

fuchsia_test_package("wlan-hw-sim-rate-selection-tests") {
  test_specs = {
    environments = [ nuc_env ]
    log_settings = {
      max_severity = "ERROR"
    }
  }

  test_components = [ ":rate-selection" ]
  deps = [ "//src/connectivity/wlan/wlanstack:wlanstack-values" ]
  deps += shared_deps
}

group("wlan-hw-sim-component-tests") {
  testonly = true
  deps = [
    ":wlan-hw-sim-contemporary-privacy-tests",
    ":wlan-hw-sim-legacy-privacy-tests",
    ":wlan-hw-sim-rate-selection-tests",
  ]
}
