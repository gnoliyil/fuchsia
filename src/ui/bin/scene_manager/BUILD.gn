# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/fidl/fidl.gni")
import("//build/rust/rustc_binary.gni")

rustc_binary("scene_manager_bin") {
  name = "scene_manager"
  with_unit_tests = true
  edition = "2021"

  deps = [
    ":input_config_lib",
    "//sdk/fidl/fuchsia.accessibility:fuchsia.accessibility_rust",
    "//sdk/fidl/fuchsia.accessibility.scene:fuchsia.accessibility.scene_rust",
    "//sdk/fidl/fuchsia.element:fuchsia.element_rust",
    "//sdk/fidl/fuchsia.factory:fuchsia.factory_rust",
    "//sdk/fidl/fuchsia.input.injection:fuchsia.input.injection_rust",
    "//sdk/fidl/fuchsia.input.interaction:fuchsia.input.interaction_rust",
    "//sdk/fidl/fuchsia.input.interaction.observation:fuchsia.input.interaction.observation_rust",
    "//sdk/fidl/fuchsia.input.wayland:fuchsia.input.wayland_rust",
    "//sdk/fidl/fuchsia.lightsensor:fuchsia.lightsensor_rust",
    "//sdk/fidl/fuchsia.recovery.policy:fuchsia.recovery.policy_rust",
    "//sdk/fidl/fuchsia.recovery.ui:fuchsia.recovery.ui_rust",
    "//sdk/fidl/fuchsia.session.scene:fuchsia.session.scene_rust",
    "//sdk/fidl/fuchsia.settings:fuchsia.settings_rust",
    "//sdk/fidl/fuchsia.ui.accessibility.view:fuchsia.ui.accessibility.view_rust",
    "//sdk/fidl/fuchsia.ui.brightness:fuchsia.ui.brightness_rust",
    "//sdk/fidl/fuchsia.ui.composition:fuchsia.ui.composition_rust",
    "//sdk/fidl/fuchsia.ui.display.color:fuchsia.ui.display.color_rust",
    "//sdk/fidl/fuchsia.ui.display.singleton:fuchsia.ui.display.singleton_rust",
    "//sdk/fidl/fuchsia.ui.focus:fuchsia.ui.focus_rust",
    "//sdk/fidl/fuchsia.ui.input.config:fuchsia.ui.input.config_rust",
    "//sdk/fidl/fuchsia.ui.pointerinjector.configuration:fuchsia.ui.pointerinjector.configuration_rust",
    "//sdk/fidl/fuchsia.ui.policy:fuchsia.ui.policy_rust",
    "//sdk/fidl/fuchsia.ui.scenic:fuchsia.ui.scenic_rust",
    "//sdk/fidl/fuchsia.ui.shortcut:fuchsia.ui.shortcut_rust",
    "//sdk/fidl/fuchsia.ui.views:fuchsia.ui.views_rust",
    "//src/intl:icudtl",
    "//src/lib/diagnostics/inspect/runtime/rust",
    "//src/lib/diagnostics/inspect/rust",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/icu_data/rust",
    "//src/lib/trace/rust:trace-provider",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/ui/lib/focus_chain_provider:lib_with_includes",
    "//src/ui/lib/input_pipeline",
    "//src/ui/lib/scene_management",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:serde_json",
    "//third_party/rust_crates:tracing",
  ]

  test_deps = [
    "//sdk/fidl/fuchsia.ui.scenic:fuchsia.ui.scenic_rust",
    "//src/lib/ui/fuchsia-scenic",
    "//src/ui/lib/scene_management:scene_management_mocks",
    "//third_party/rust_crates:assert_matches",
  ]

  sources = [
    "src/color_transform_manager.rs",
    "src/factory_reset_countdown_server.rs",
    "src/factory_reset_device_server.rs",
    "src/input_config_server.rs",
    "src/input_device_registry_server.rs",
    "src/input_pipeline.rs",
    "src/light_sensor_server.rs",
    "src/main.rs",
    "src/media_buttons_listener_registry_server.rs",
  ]
}

fuchsia_component_manifest("manifest") {
  component_name = "scene_manager"
  manifest = "meta/scene_manager.cml"
}

fuchsia_component("scene_manager_component") {
  cm_label = ":manifest"
  deps = [ ":scene_manager_bin" ]
}

# TODO(fxbug.dev/106573): Remove test-only target when
# default config values are available.
group("scene_manager_component_for_test") {
  deps = [
    ":config_for_test",
    ":scene_manager_component",
  ]
}

fuchsia_package("scene_manager") {
  deps = [ ":scene_manager_component" ]
}

fuchsia_unittest_package("scene_manager_tests") {
  deps = [ ":scene_manager_bin_test" ]
}

fuchsia_structured_config_rust_lib("input_config_lib") {
  cm_label = ":manifest"
}

fuchsia_structured_config_values("config_for_test") {
  visibility = [ ":scene_manager_component_for_test" ]
  cm_label = ":manifest"
  values = {
    idle_threshold_minutes = 15
    supported_input_devices = [
      "button",
      "keyboard",
      "lightsensor",
      "mouse",
      "touchscreen",
    ]
  }
}
