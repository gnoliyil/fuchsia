# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")

group("tests") {
  testonly = true
  public_deps = [ ":view_tests" ]
}

group("integration-tests") {
  testonly = true
  public_deps = [
    ":flatland-a11y-view-test",
    ":flatland-scene-integration-test",
    ":gfx-a11y-view-test",
    ":gfx-scene-integration-test",
  ]
}

executable("view_tests") {
  output_name = "view_tests"

  testonly = true

  sources = [
    "a11y_view_semantics_test.cc",
    "gfx_accessibility_view_test.cc",
    "view_coordinate_converter_test.cc",
    "view_manager_test.cc",
  ]
  public_deps = [ "//sdk/fidl/fuchsia.accessibility.semantics:fuchsia.accessibility.semantics_hlcpp" ]
  deps = [
    "//sdk/fidl/fuchsia.accessibility:fuchsia.accessibility_hlcpp",
    "//sdk/lib/fidl/cpp",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/sys/cpp/testing:unit",
    "//sdk/lib/syslog/cpp",
    "//src/lib/fsl",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/json_parser",
    "//src/lib/testing/loop_fixture",
    "//src/ui/a11y/bin/a11y_manager/tests/util",
    "//src/ui/a11y/lib/annotation",
    "//src/ui/a11y/lib/annotation/tests/mocks",
    "//src/ui/a11y/lib/semantics",
    "//src/ui/a11y/lib/semantics/tests/mocks",
    "//src/ui/a11y/lib/testing:view_ref_helper",
    "//src/ui/a11y/lib/view",
    "//src/ui/a11y/lib/view/tests/mocks",
    "//src/ui/input/lib/injector/tests/mocks",
    "//third_party/glm",
    "//third_party/googletest:gmock",
    "//third_party/rapidjson",
  ]
}

executable("gfx-a11y-view-test-bin") {
  testonly = true
  sources = [ "gfx_a11y_view_test.cc" ]
  output_name = "gfx-a11y-view-test"
  deps = [
    "//sdk/fidl/fuchsia.accessibility.semantics:fuchsia.accessibility.semantics_hlcpp",
    "//sdk/fidl/fuchsia.logger:fuchsia.logger_hlcpp",
    "//sdk/fidl/fuchsia.tracing.provider:fuchsia.tracing.provider_hlcpp",
    "//sdk/fidl/fuchsia.ui.accessibility.view:fuchsia.ui.accessibility.view_hlcpp",
    "//sdk/fidl/fuchsia.ui.scenic:fuchsia.ui.scenic_hlcpp",
    "//sdk/lib/sys/component/cpp/testing:cpp",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/ui/scenic/cpp",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//src/ui/testing/ui_test_manager",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

fuchsia_test_component("gfx-a11y-view-test-component") {
  testonly = true
  manifest = "meta/gfx-a11y-view-test.cml"
  deps = [ ":gfx-a11y-view-test-bin" ]
}

fuchsia_test_package("gfx-a11y-view-test") {
  test_components = [ ":gfx-a11y-view-test-component" ]
  test_specs = {
    log_settings = {
      # TODO(fxbug.dev/93081): Investigate flakes and remove allowing ERROR severity.
      max_severity = "ERROR"
    }
    environments = [
      {
        dimensions = {
          # Ensure the device has Vulkan.
          device_type = "AEMU"
        }
      },
    ]
  }
}

executable("gfx-scene-integration-test-bin") {
  testonly = true
  sources = [ "gfx_scene_integration_test.cc" ]
  output_name = "gfx-scene-integration-test"
  deps = [
    "//sdk/fidl/fuchsia.accessibility.semantics:fuchsia.accessibility.semantics_hlcpp",
    "//sdk/fidl/fuchsia.logger:fuchsia.logger_hlcpp",
    "//sdk/fidl/fuchsia.tracing.provider:fuchsia.tracing.provider_hlcpp",
    "//sdk/fidl/fuchsia.ui.accessibility.view:fuchsia.ui.accessibility.view_hlcpp",
    "//sdk/fidl/fuchsia.ui.app:fuchsia.ui.app_hlcpp",
    "//sdk/fidl/fuchsia.ui.composition:fuchsia.ui.composition_hlcpp",
    "//sdk/fidl/fuchsia.ui.scenic:fuchsia.ui.scenic_hlcpp",
    "//sdk/lib/sys/component/cpp/testing:cpp",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/ui/scenic/cpp",
    "//src/lib/fsl",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//src/ui/testing/ui_test_manager",
    "//src/ui/testing/util",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

fuchsia_test_component("gfx-scene-integration-test-component") {
  testonly = true
  manifest = "meta/gfx-scene-integration-test.cml"
  deps = [ ":gfx-scene-integration-test-bin" ]
}

fuchsia_test_package("gfx-scene-integration-test") {
  test_components = [ ":gfx-scene-integration-test-component" ]
  test_specs = {
    log_settings = {
      # TODO(fxbug.dev/93081): Investigate flakes and remove allowing ERROR severity.
      max_severity = "ERROR"
    }
    environments = [
      {
        dimensions = {
          # Ensure the device has Vulkan.
          device_type = "AEMU"
        }
      },
    ]
  }
}

executable("flatland-a11y-view-test-bin") {
  testonly = true
  sources = [ "flatland_a11y_view_test.cc" ]
  output_name = "flatland-a11y-view-test"
  deps = [
    "//sdk/fidl/fuchsia.accessibility.scene:fuchsia.accessibility.scene_hlcpp",
    "//sdk/fidl/fuchsia.logger:fuchsia.logger_hlcpp",
    "//sdk/fidl/fuchsia.tracing.provider:fuchsia.tracing.provider_hlcpp",
    "//sdk/fidl/fuchsia.ui.composition:fuchsia.ui.composition_hlcpp",
    "//sdk/lib/sys/component/cpp/testing:cpp",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/ui/scenic/cpp",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//src/ui/a11y/lib/view",
    "//src/ui/testing/ui_test_manager",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

fuchsia_test_component("flatland-a11y-view-test-component") {
  testonly = true
  manifest = "meta/flatland-a11y-view-test.cml"
  deps = [ ":flatland-a11y-view-test-bin" ]
}

fuchsia_test_package("flatland-a11y-view-test") {
  test_components = [ ":flatland-a11y-view-test-component" ]
  test_specs = {
    log_settings = {
      # TODO(fxbug.dev/93081): Investigate flakes and remove allowing ERROR severity.
      max_severity = "ERROR"
    }
    environments = [
      {
        dimensions = {
          # Ensure the device has Vulkan.
          device_type = "AEMU"
        }
      },
    ]
  }
}

executable("flatland-scene-integration-test-bin") {
  testonly = true
  sources = [ "flatland_scene_integration_test.cc" ]
  output_name = "flatland-scene-integration-test"
  deps = [
    "//sdk/fidl/fuchsia.accessibility.scene:fuchsia.accessibility.scene_hlcpp",
    "//sdk/fidl/fuchsia.logger:fuchsia.logger_hlcpp",
    "//sdk/fidl/fuchsia.tracing.provider:fuchsia.tracing.provider_hlcpp",
    "//sdk/fidl/fuchsia.ui.app:fuchsia.ui.app_hlcpp",
    "//sdk/fidl/fuchsia.ui.composition:fuchsia.ui.composition_hlcpp",
    "//sdk/fidl/fuchsia.ui.scenic:fuchsia.ui.scenic_hlcpp",
    "//sdk/lib/sys/component/cpp/testing:cpp",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/ui/scenic/cpp",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//src/ui/testing/ui_test_manager",
    "//src/ui/testing/util",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

fuchsia_test_component("flatland-scene-integration-test-component") {
  testonly = true
  manifest = "meta/flatland-scene-integration-test.cml"
  deps = [ ":flatland-scene-integration-test-bin" ]
}

fuchsia_test_package("flatland-scene-integration-test") {
  test_components = [ ":flatland-scene-integration-test-component" ]
  test_specs = {
    log_settings = {
      # TODO(fxbug.dev/93081): Investigate flakes and remove allowing ERROR severity.
      max_severity = "ERROR"
    }
    environments = [
      {
        dimensions = {
          # Ensure the device has Vulkan.
          device_type = "AEMU"
        }
      },
    ]
  }
}
