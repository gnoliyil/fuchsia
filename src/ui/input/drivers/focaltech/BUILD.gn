# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bind/bind.gni")
import("//build/cipd.gni")
import("//build/components.gni")
import("//build/drivers.gni")
import("//build/test.gni")

driver_bind_rules("focaltech_touch_bind") {
  rules = "focaltech_touch.bind"
  bind_output = "focaltech.bindbc"
  tests = "bind_tests.json"

  # TODO(fxb/115757): Remove this once we no longer need to generate
  # fragments for composite bind rules.
  disable_fragment_gen = true
  deps = [
    "//src/devices/bind/fuchsia.hardware.gpio",
    "//src/devices/bind/fuchsia.i2c",
  ]
}

group("tests") {
  testonly = true
  deps = [
    ":focaltech-test",
    ":focaltech_touch_bind_test",
  ]
}

source_set("firmware-sherlock") {
  sources = [ "ft_firmware_sherlock.cc" ]
  cflags_cc = [ "-Wno-newline-eof" ]
}

group("common") {
  public_deps = [
    ":focaltech_touch_bind",
    "//sdk/banjo/fuchsia.hardware.gpio:fuchsia.hardware.gpio_banjo_cpp",
    "//sdk/banjo/fuchsia.hardware.test:fuchsia.hardware.test_banjo_cpp",
    "//sdk/fidl/fuchsia.input.report:fuchsia.input.report_cpp_wire",
    "//src/devices/i2c/lib/device-protocol-i2c-channel",
    "//src/devices/lib/driver",
    "//src/devices/lib/driver:driver_runtime",
    "//src/devices/lib/focaltech",
    "//src/lib/ddk",
    "//src/lib/ddktl",
    "//zircon/system/ulib/fbl",
    "//zircon/system/ulib/inspect",
    "//zircon/system/ulib/sync",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/zx",
  ]
}

fuchsia_driver("focaltech-driver") {
  output_name = "focaltech"
  configs += [
    "//build/config:all_source",
    "//build/config/fuchsia:enable_zircon_asserts",
  ]
  sources = [
    "ft_device.cc",
    "ft_firmware.cc",
    "ft_firmware_none.cc",
  ]
  deps = [ ":common" ]
}

fuchsia_driver_component("focaltech") {
  component_name = "focaltech"
  deps = [ ":focaltech-driver" ]
  info = "focaltech-info.json"
  manifest = "meta/focaltech.cml"
}

fuchsia_driver("focaltech-sherlock-driver") {
  output_name = "focaltech-sherlock"
  configs += [
    "//build/config:all_source",
    "//build/config/fuchsia:enable_zircon_asserts",
  ]
  sources = [
    "ft_device.cc",
    "ft_firmware.cc",
  ]
  deps = [ ":common" ]

  if (internal_access) {
    deps += [ ":firmware-sherlock" ]
  } else {
    sources += [ "ft_firmware_none.cc" ]
  }
}

fuchsia_driver_component("focaltech-sherlock") {
  component_name = "focaltech-sherlock"
  deps = [ ":focaltech-sherlock-driver" ]
  info = "focaltech-sherlock-info.json"
  manifest = "meta/focaltech-sherlock.cml"
}

test("focaltech-test-bin") {
  output_name = "focaltech-test"
  configs += [ "//build/config:all_source" ]
  sources = [
    "ft_device.cc",
    "ft_device_test.cc",
    "ft_firmware.cc",
  ]
  deps = [
    ":common",
    "//sdk/banjo/fuchsia.hardware.gpio:fuchsia.hardware.gpio_banjo_cpp_mock",
    "//sdk/lib/async-loop-testing/cpp",
    "//sdk/lib/component/outgoing/cpp",
    "//src/devices/i2c/testing/fake-i2c",
    "//src/devices/testing/mock-ddk",
    "//zircon/system/ulib/zx",
    "//zircon/system/ulib/zxtest",
  ]
  defines = [ "FT_TEST" ]
}

fuchsia_unittest_package("focaltech-test") {
  deps = [ ":focaltech-test-bin" ]
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
}
