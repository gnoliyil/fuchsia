# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/config.gni")

# Example:
# ```
#   # Creates the shell command 'audio-output-pipeline-benchmark-astro'.
#   audio_pipeline_benchmark("audio-output-pipeline-benchmark-astro") {
#     config = "//path/to/audio_core_config.json"
#   }
# ```
#
# Parameters
#
#     config_files (required)
#       Path to config files, which must include an audio_core_config.json file.
#       Type: string
#
#     manifest_shards (optional)
#       A list of extra manifest files to merge into the benchmark's manifest.
#       Type: list of paths
#
#      deps (optional)
#        Usual GN meaning.
#
template("audio_pipeline_benchmark") {
  assert(defined(invoker.config_files))

  package_name = target_name

  # Create the manifest file.
  generated_file("${package_name}-manifest-base") {
    contents = "{"
    contents += "  program: { \"binary\": \"bin/${package_name}\" },"
    contents += "  use: ["
    contents += "      {"
    contents += "          directory: \"pkg\","
    contents += "          from: \"framework\","
    contents += "          rights: [ \"r*\" ],"
    contents += "          path: \"/config/data\","
    contents += "          subdir: \"config-data-for-test\","
    contents += "      },"
    contents += "  ],"
    contents += "}"
    outputs = [ "${target_gen_dir}/${package_name}.base.cml" ]
    output_conversion = "string"
    testonly = true
  }

  base_manifest_file = get_target_outputs(":${package_name}-manifest-base")
  base_manifest_file = base_manifest_file[0]

  cmc_merge("${package_name}-manifest-merged") {
    testonly = true
    output_name = "${package_name}.merged.cml"
    sources = [
      "//src/media/audio/audio_core/tools/output_pipeline_benchmark/meta/pipeline_benchmark.cml",
      base_manifest_file,
    ]
    if (defined(invoker.manifest_shards)) {
      sources += invoker.manifest_shards
    }
    deps = [ ":${package_name}-manifest-base" ]
  }
  manifest_file = get_target_outputs(":${package_name}-manifest-merged")
  manifest_file = manifest_file[0]

  executable("${package_name}-bin") {
    output_name = package_name
    testonly = true

    sources = [
      "//src/media/audio/audio_core/tools/output_pipeline_benchmark/main.cc",
      "//src/media/audio/audio_core/tools/output_pipeline_benchmark/output_pipeline_benchmark.cc",
      "//src/media/audio/audio_core/tools/output_pipeline_benchmark/output_pipeline_benchmark.h",
    ]

    deps = [
      "//sdk/fidl/fuchsia.scheduler:fuchsia.scheduler_hlcpp",
      "//src/lib/fxl",
      "//src/media/audio/audio_core/v1:audio_core_lib",
      "//src/media/audio/audio_core/v1/testing",
      "//src/media/audio/lib/analysis",
      "//src/media/audio/lib/clock/testing",
      "//src/media/audio/lib/effects_loader",
      "//src/media/audio/lib/format",
      "//src/media/audio/lib/processing:prebuilt_coefficient_tables",
      "//src/performance/lib/gperftools",
      "//zircon/system/ulib/perftest",
    ]
  }

  resource("${package_name}-config") {
    sources = invoker.config_files
    outputs = [ "config-data-for-test/{{source_file_part}}" ]
    testonly = true
  }

  fuchsia_package_with_single_component(package_name) {
    testonly = true
    manifest = manifest_file
    manifest_deps = [ ":${package_name}-manifest-merged" ]
    deps = [
      ":${package_name}-bin",
      ":${package_name}-config",
    ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }
}
