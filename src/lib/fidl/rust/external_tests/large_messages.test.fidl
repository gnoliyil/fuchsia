// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fidl.rust.test.external;

using zx;

type LargeMessageTable = table {
    1: str string:MAX;
};

type LargeMessageUnion = flexible resource union {
    1: str string:MAX;
};

type LargeMessageStruct = struct {
    str string:MAX;
};

type LargeMessageResourced = resource struct {
    str string:MAX;
    expect_handles uint64;
    handles array<zx.handle:optional, 64>;
};

protocol OverflowingProtocol {
    @experimental_overflowing(request=true)
    TwoWayRequestOnly(LargeMessageUnion) -> (table {});

    @experimental_overflowing(response=true)
    TwoWayResponseOnly(table {}) -> (LargeMessageTable);

    @experimental_overflowing(request=true, response=true)
    TwoWayBothRequestAndResponse(LargeMessageStruct) -> (LargeMessageStruct);

    @experimental_overflowing(request=true)
    OneWayCall(LargeMessageTable);

    @experimental_overflowing(response=true)
    -> OnOneWayReplyEvent(LargeMessageUnion);

    @experimental_overflowing(request=true, response=true)
    Resourced(LargeMessageResourced) -> (LargeMessageResourced);
};
