# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/test.gni")
import("//build/zircon/migrated_targets.gni")

zx_library("zxdump") {
  sdk = "source"
  sdk_headers = [
    "lib/zxdump/buffer.h",
    "lib/zxdump/dump.h",
    "lib/zxdump/fd-writer.h",
    "lib/zxdump/task.h",
    "lib/zxdump/types.h",
    "lib/zxdump/zstd-writer.h",
  ]

  public_deps = [
    # <lib/zxdump/types.h> has #include <zircon/types.h>.
    "//zircon/system/public",

    # <lib/zxdump/fd-writer.h> has #include <lib/fit/result.h>.
    "//zircon/system/ulib/zx",

    # <lib/zxdump/dump.h> has #include <lib/fit/function.h>.
    "//sdk/lib/fit",

    # <lib/zxdump/fd-writer.h> has #include <fbl/unique_fd.h>.
    "//zircon/system/ulib/fbl",

    # <lib/zxdump/types.h> has #include <lib/stdcompat/span.h>.
    "//sdk/lib/stdcompat",
  ]

  if (is_fuchsia) {
    public_deps += [
      # <lib/zxdump/dump.h> has #include <lib/zx/process.h>.
      "//zircon/system/ulib/zx",
    ]
  }

  sources = [
    "buffer-impl.cc",
    "buffer-impl.h",
    "core.h",
    "dump-file-mmap.cc",
    "dump-file-mmap.h",
    "dump-file-stdio.cc",
    "dump-file-stdio.h",
    "dump-file-zstd.cc",
    "dump-file-zstd.h",
    "dump-file.cc",
    "dump-file.h",
    "error.cc",
    "fd-writer.cc",
    "job-archive.h",
    "live-memory-cache.h",
    "read-memory-string.cc",
    "read-memory.cc",
    "read.cc",
    "rights.h",
    "task.cc",
    "zstd-writer.cc",
  ]

  # Test code can use private headers from sources.
  friend = [ ":*" ]

  defines = [ "ZSTD_STATIC_LINKING_ONLY" ]

  deps = [
    "//src/lib/elfldltl",
    "//third_party/rapidjson",
    "//third_party/zstd",
    "//zircon/system/ulib/fbl",
  ]

  if (is_fuchsia) {
    sources += [
      "dump.cc",
      "live-memory-cache.cc",
      "root.cc",
    ]
    deps += [
      "//sdk/fidl/fuchsia.boot:fuchsia.boot_cpp_wire",
      "//sdk/fidl/fuchsia.kernel:fuchsia.kernel_cpp_wire",
      "//sdk/lib/component/incoming/cpp",
      "//sdk/lib/fdio",
      "//sdk/lib/stdcompat",
      "//src/zircon/lib/zircon",
      "//zircon/system/ulib/zx",
    ]
  } else {
    sources += [ "stub-root.cc" ]
  }
}

source_set("piped-command") {
  visibility = [ ":*" ]

  public = [ "piped-command.h" ]
  public_deps = [
    "//zircon/system/ulib/fbl",
    "//zircon/system/ulib/zx",
  ]

  sources = [ "piped-command.cc" ]
  if (is_fuchsia) {
    sources += [ "piped-command-fuchsia.cc" ]
    public_deps += [ "//sdk/lib/fdio" ]
    deps = [
      "//sdk/lib/fdio",
      "//zircon/system/ulib/zx",
    ]
  } else {
    sources += [ "piped-command-posix.cc" ]
  }
}

source_set("test-pipe-reader") {
  visibility = [ ":*" ]
  testonly = true

  public = [ "test-pipe-reader.h" ]
  public_deps = [ "//zircon/system/ulib/fbl" ]

  sources = [ "test-pipe-reader.cc" ]
  deps = [ "//third_party/googletest:gtest" ]
}

source_set("test-data-holder") {
  visibility = [ ":*" ]
  testonly = true

  public = [ "test-data-holder.h" ]
  public_deps = [
    ":zxdump",
    "//third_party/googletest:gtest",
  ]

  sources = [ "test-data-holder.cc" ]
}

source_set("test-tool-process") {
  visibility = [ ":*" ]
  testonly = true

  public = [ "test-tool-process.h" ]
  public_deps = [
    "//sdk/lib/stdcompat",
    "//zircon/system/ulib/fbl",
  ]

  sources = [ "test-tool-process.cc" ]
  deps = [
    ":piped-command",
    ":zxdump",
    "//third_party/googletest:gtest",
  ]

  if (is_fuchsia) {
    public_deps += [ "//zircon/system/ulib/zx" ]
    deps += [
      "//sdk/fidl/fuchsia.boot:fuchsia.boot_cpp_wire",
      "//sdk/fidl/fuchsia.kernel:fuchsia.kernel_cpp_wire",
      "//sdk/lib/component/outgoing/cpp",
      "//src/lib/storage/vfs/cpp",
      "//zircon/system/ulib/async-loop:async-loop-cpp",
      "//zircon/system/ulib/async-loop:async-loop-default",
    ]
  }

  data_deps = [ ":zstd-for-test" ]
}

zstd_label = "//third_party/zstd:zstdcli(${toolchain_variant.base})"

if (is_host) {
  host_test_data("zstd-for-test") {
    visibility = [ ":*" ]
    deps = [ zstd_label ]
    sources = [ get_label_info(zstd_label, "root_out_dir") + "/zstd" ]
  }
} else {
  group("zstd-for-test") {
    visibility = [ ":*" ]
    testonly = true
    deps = [ zstd_label ]
  }
}

test("zxdump-unittests") {
  sources = [
    "dump-file-tests.cc",
    "error-tests.cc",
    "fd-writer-tests.cc",
    "piped-command-tests.cc",
    "test-file.h",
    "writer-tests.h",
    "zstd-writer-tests.cc",
  ]
  deps = [
    ":piped-command",
    ":test-data-holder",
    ":test-pipe-reader",
    ":test-tool-process",
    ":zxdump",
    "//sdk/lib/fit",
    "//src/lib/elfldltl",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//zircon/system/ulib/fbl",
  ]

  # Depend on the base toolchain in case both the child and this target use
  # the same variant, so that the copy under the expected name can be found
  # at runtime.
  data_deps = [ ":zxdump-test-child(${toolchain_variant.base})" ]

  if (is_fuchsia) {
    sources += [
      "dump-tests.cc",
      "dump-tests.h",
      "gcore-tests.cc",
      "read-tests.cc",
      "task-tests.cc",
    ]
    deps += [
      "//sdk/lib/fdio",
      "//zircon/system/ulib/zx",
      "//zircon/system/ulib/zx",
    ]
    data_deps += [
      ":gcore(${toolchain_variant.base})",
      "//third_party/sbase:cat_bin(${toolchain_variant.base})",
    ]
  }
}

executable("zxdump-test-child") {
  testonly = true

  # Don't sanitize the test program in ways that give it too much accessible
  # memory to fit into a reasonably-sized dump file.
  exclude_toolchain_tags = [ "uses-shadow" ]

  sources = [ "test-child.cc" ]
  deps = [
    "//sdk/lib/stdcompat",
    "//zircon/system/ulib/fbl",
  ]
  if (is_fuchsia) {
    deps += [
      "//sdk/lib/fdio",
      "//src/zircon/lib/zircon",
      "//zircon/system/ulib/zx",
    ]
  }

  if (is_host) {
    base_out_dir = get_label_info(":$target_name(${toolchain_variant.base})",
                                  "root_out_dir")
    metadata = {
      test_runtime_deps = [ "$base_out_dir/$target_name" ]
    }
  }
}

fuchsia_unittest_package("zxdump-tests") {
  deps = [ ":zxdump-unittests" ]
  manifest = "meta/zxdump-tests.cml"
}

group("tests") {
  testonly = true

  deps = [
    ":zxdump-tests",
    ":zxdump-unittests($host_toolchain)",

    # TODO(mcgrathr): just to get them built for now
    ":zxdump-tools",
  ]
}

executable("gcore") {
  sources = [ "gcore.cc" ]
  deps = [
    ":zxdump",
    "//sdk/lib/fit",
    "//third_party/rapidjson",
    "//zircon/system/ulib/fbl",
  ]
}

group("tools") {
  deps = [ ":gcore" ]
}

fuchsia_shell_package("zxdump-tools") {
  deps = [ ":tools" ]
}
