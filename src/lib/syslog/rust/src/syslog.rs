// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Generated by src/lib/syslog/rust/bindgen.sh using bindgen 0.60.1

use fuchsia_zircon::sys::{zx_handle_t, zx_status_t};
use usize as size_t;

pub const FX_LOG_TRACE: fx_log_severity_t = 16;
pub const FX_LOG_DEBUG: fx_log_severity_t = 32;
pub const FX_LOG_INFO: fx_log_severity_t = 48;
pub const FX_LOG_WARNING: fx_log_severity_t = 64;
pub const FX_LOG_ERROR: fx_log_severity_t = 80;
pub const FX_LOG_FATAL: fx_log_severity_t = 96;
pub const FX_LOG_SEVERITY_DEFAULT: fx_log_severity_t = 48;
pub type fx_log_severity_t = i8;
#[repr(C)]
pub struct fx_logger_config {
    pub min_severity: fx_log_severity_t,
    pub log_sink_channel: zx_handle_t,
    pub log_sink_socket: zx_handle_t,
    pub tags: *const *const ::std::os::raw::c_char,
    pub num_tags: size_t,
}
pub type fx_logger_config_t = fx_logger_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fx_logger {
    _unused: [u8; 0],
}
pub type fx_logger_t = fx_logger;
extern "C" {
    pub fn fx_logger_create(
        config: *const fx_logger_config_t,
        out_logger: *mut *mut fx_logger_t,
    ) -> zx_status_t;
}
extern "C" {
    pub fn fx_logger_destroy(logger: *mut fx_logger_t);
}
extern "C" {
    pub fn fx_logger_get_min_severity(logger: *mut fx_logger_t) -> fx_log_severity_t;
}
extern "C" {
    pub fn fx_logger_set_min_severity(
        logger: *mut fx_logger_t,
        severity: fx_log_severity_t,
    ) -> zx_status_t;
}
extern "C" {
    pub fn fx_logger_get_connection_status(logger: *mut fx_logger_t) -> zx_status_t;
}
extern "C" {
    pub fn fx_logger_log(
        logger: *mut fx_logger_t,
        severity: fx_log_severity_t,
        tag: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
    ) -> zx_status_t;
}
extern "C" {
    pub fn fx_log_get_logger() -> *mut fx_logger_t;
}
extern "C" {
    pub fn fx_log_reconfigure(config: *const fx_logger_config_t) -> zx_status_t;
}
