// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Generated by src/lib/usb_rs/bindgen.sh using bindgen 0.64.0

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

use zerocopy::{AsBytes, FromBytes, FromZeroes, Unaligned};

// Configure linkage for MacOS.
#[cfg(target_os = "macos")]
#[link(name = "IOKit", kind = "framework")]
#[link(name = "CoreFoundation", kind = "framework")]
extern "C" {}

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const USB_DIR_OUT: u32 = 0;
pub const USB_DIR_IN: u32 = 128;
pub const USB_TYPE_MASK: u32 = 96;
pub const USB_TYPE_STANDARD: u32 = 0;
pub const USB_TYPE_CLASS: u32 = 32;
pub const USB_TYPE_VENDOR: u32 = 64;
pub const USB_TYPE_RESERVED: u32 = 96;
pub const USB_RECIP_MASK: u32 = 31;
pub const USB_RECIP_DEVICE: u32 = 0;
pub const USB_RECIP_INTERFACE: u32 = 1;
pub const USB_RECIP_ENDPOINT: u32 = 2;
pub const USB_RECIP_OTHER: u32 = 3;
pub const USB_RECIP_PORT: u32 = 4;
pub const USB_RECIP_RPIPE: u32 = 5;
pub const USB_REQ_GET_STATUS: u32 = 0;
pub const USB_REQ_CLEAR_FEATURE: u32 = 1;
pub const USB_REQ_SET_FEATURE: u32 = 3;
pub const USB_REQ_SET_ADDRESS: u32 = 5;
pub const USB_REQ_GET_DESCRIPTOR: u32 = 6;
pub const USB_REQ_SET_DESCRIPTOR: u32 = 7;
pub const USB_REQ_GET_CONFIGURATION: u32 = 8;
pub const USB_REQ_SET_CONFIGURATION: u32 = 9;
pub const USB_REQ_GET_INTERFACE: u32 = 10;
pub const USB_REQ_SET_INTERFACE: u32 = 11;
pub const USB_REQ_SYNCH_FRAME: u32 = 12;
pub const USB_REQ_SET_SEL: u32 = 48;
pub const USB_REQ_SET_ISOCH_DELAY: u32 = 49;
pub const USB_REQ_SET_ENCRYPTION: u32 = 13;
pub const USB_REQ_GET_ENCRYPTION: u32 = 14;
pub const USB_REQ_RPIPE_ABORT: u32 = 14;
pub const USB_REQ_SET_HANDSHAKE: u32 = 15;
pub const USB_REQ_RPIPE_RESET: u32 = 15;
pub const USB_REQ_GET_HANDSHAKE: u32 = 16;
pub const USB_REQ_SET_CONNECTION: u32 = 17;
pub const USB_REQ_SET_SECURITY_DATA: u32 = 18;
pub const USB_REQ_GET_SECURITY_DATA: u32 = 19;
pub const USB_REQ_SET_WUSB_DATA: u32 = 20;
pub const USB_REQ_LOOPBACK_DATA_WRITE: u32 = 21;
pub const USB_REQ_LOOPBACK_DATA_READ: u32 = 22;
pub const USB_REQ_SET_INTERFACE_DS: u32 = 23;
pub const USB_DEVICE_SELF_POWERED: u32 = 0;
pub const USB_DEVICE_REMOTE_WAKEUP: u32 = 1;
pub const USB_DEVICE_TEST_MODE: u32 = 2;
pub const USB_DEVICE_BATTERY: u32 = 2;
pub const USB_DEVICE_B_HNP_ENABLE: u32 = 3;
pub const USB_DEVICE_WUSB_DEVICE: u32 = 3;
pub const USB_DEVICE_A_HNP_SUPPORT: u32 = 4;
pub const USB_DEVICE_A_ALT_HNP_SUPPORT: u32 = 5;
pub const USB_DEVICE_DEBUG_MODE: u32 = 6;
pub const TEST_J: u32 = 1;
pub const TEST_K: u32 = 2;
pub const TEST_SE0_NAK: u32 = 3;
pub const TEST_PACKET: u32 = 4;
pub const TEST_FORCE_EN: u32 = 5;
pub const USB_DEVICE_U1_ENABLE: u32 = 48;
pub const USB_DEVICE_U2_ENABLE: u32 = 49;
pub const USB_DEVICE_LTM_ENABLE: u32 = 50;
pub const USB_INTRF_FUNC_SUSPEND: u32 = 0;
pub const USB_INTR_FUNC_SUSPEND_OPT_MASK: u32 = 65280;
pub const USB_INTRF_FUNC_SUSPEND_LP: u32 = 256;
pub const USB_INTRF_FUNC_SUSPEND_RW: u32 = 512;
pub const USB_INTRF_STAT_FUNC_RW_CAP: u32 = 1;
pub const USB_INTRF_STAT_FUNC_RW: u32 = 2;
pub const USB_ENDPOINT_HALT: u32 = 0;
pub const USB_DEV_STAT_U1_ENABLED: u32 = 2;
pub const USB_DEV_STAT_U2_ENABLED: u32 = 3;
pub const USB_DEV_STAT_LTM_ENABLED: u32 = 4;
pub const USB_DT_DEVICE: u32 = 1;
pub const USB_DT_CONFIG: u32 = 2;
pub const USB_DT_STRING: u32 = 3;
pub const USB_DT_INTERFACE: u32 = 4;
pub const USB_DT_ENDPOINT: u32 = 5;
pub const USB_DT_DEVICE_QUALIFIER: u32 = 6;
pub const USB_DT_OTHER_SPEED_CONFIG: u32 = 7;
pub const USB_DT_INTERFACE_POWER: u32 = 8;
pub const USB_DT_OTG: u32 = 9;
pub const USB_DT_DEBUG: u32 = 10;
pub const USB_DT_INTERFACE_ASSOCIATION: u32 = 11;
pub const USB_DT_SECURITY: u32 = 12;
pub const USB_DT_KEY: u32 = 13;
pub const USB_DT_ENCRYPTION_TYPE: u32 = 14;
pub const USB_DT_BOS: u32 = 15;
pub const USB_DT_DEVICE_CAPABILITY: u32 = 16;
pub const USB_DT_WIRELESS_ENDPOINT_COMP: u32 = 17;
pub const USB_DT_WIRE_ADAPTER: u32 = 33;
pub const USB_DT_RPIPE: u32 = 34;
pub const USB_DT_CS_RADIO_CONTROL: u32 = 35;
pub const USB_DT_PIPE_USAGE: u32 = 36;
pub const USB_DT_SS_ENDPOINT_COMP: u32 = 48;
pub const USB_DT_CS_DEVICE: u32 = 33;
pub const USB_DT_CS_CONFIG: u32 = 34;
pub const USB_DT_CS_STRING: u32 = 35;
pub const USB_DT_CS_INTERFACE: u32 = 36;
pub const USB_DT_CS_ENDPOINT: u32 = 37;
pub const USB_DT_DEVICE_SIZE: u32 = 18;
pub const USB_CLASS_PER_INTERFACE: u32 = 0;
pub const USB_CLASS_AUDIO: u32 = 1;
pub const USB_CLASS_COMM: u32 = 2;
pub const USB_CLASS_HID: u32 = 3;
pub const USB_CLASS_PHYSICAL: u32 = 5;
pub const USB_CLASS_STILL_IMAGE: u32 = 6;
pub const USB_CLASS_PRINTER: u32 = 7;
pub const USB_CLASS_MASS_STORAGE: u32 = 8;
pub const USB_CLASS_HUB: u32 = 9;
pub const USB_CLASS_CDC_DATA: u32 = 10;
pub const USB_CLASS_CSCID: u32 = 11;
pub const USB_CLASS_CONTENT_SEC: u32 = 13;
pub const USB_CLASS_VIDEO: u32 = 14;
pub const USB_CLASS_WIRELESS_CONTROLLER: u32 = 224;
pub const USB_CLASS_MISC: u32 = 239;
pub const USB_CLASS_APP_SPEC: u32 = 254;
pub const USB_CLASS_VENDOR_SPEC: u32 = 255;
pub const USB_SUBCLASS_VENDOR_SPEC: u32 = 255;
pub const USB_DT_CONFIG_SIZE: u32 = 9;
pub const USB_CONFIG_ATT_ONE: u32 = 128;
pub const USB_CONFIG_ATT_SELFPOWER: u32 = 64;
pub const USB_CONFIG_ATT_WAKEUP: u32 = 32;
pub const USB_CONFIG_ATT_BATTERY: u32 = 16;
pub const USB_DT_INTERFACE_SIZE: u32 = 9;
pub const USB_DT_ENDPOINT_SIZE: u32 = 7;
pub const USB_DT_ENDPOINT_AUDIO_SIZE: u32 = 9;
pub const USB_ENDPOINT_NUMBER_MASK: u32 = 15;
pub const USB_ENDPOINT_DIR_MASK: u32 = 128;
pub const USB_ENDPOINT_XFERTYPE_MASK: u32 = 3;
pub const USB_ENDPOINT_XFER_CONTROL: u32 = 0;
pub const USB_ENDPOINT_XFER_ISOC: u32 = 1;
pub const USB_ENDPOINT_XFER_BULK: u32 = 2;
pub const USB_ENDPOINT_XFER_INT: u32 = 3;
pub const USB_ENDPOINT_MAX_ADJUSTABLE: u32 = 128;
pub const USB_EP_MAXP_MULT_SHIFT: u32 = 11;
pub const USB_EP_MAXP_MULT_MASK: u32 = 6144;
pub const USB_ENDPOINT_INTRTYPE: u32 = 48;
pub const USB_ENDPOINT_INTR_PERIODIC: u32 = 0;
pub const USB_ENDPOINT_INTR_NOTIFICATION: u32 = 16;
pub const USB_ENDPOINT_SYNCTYPE: u32 = 12;
pub const USB_ENDPOINT_SYNC_NONE: u32 = 0;
pub const USB_ENDPOINT_SYNC_ASYNC: u32 = 4;
pub const USB_ENDPOINT_SYNC_ADAPTIVE: u32 = 8;
pub const USB_ENDPOINT_SYNC_SYNC: u32 = 12;
pub const USB_ENDPOINT_USAGE_MASK: u32 = 48;
pub const USB_ENDPOINT_USAGE_DATA: u32 = 0;
pub const USB_ENDPOINT_USAGE_FEEDBACK: u32 = 16;
pub const USB_ENDPOINT_USAGE_IMPLICIT_FB: u32 = 32;
pub const USB_DT_SS_EP_COMP_SIZE: u32 = 6;
pub const USB_OTG_SRP: u32 = 1;
pub const USB_OTG_HNP: u32 = 2;
pub const USB_DT_INTERFACE_ASSOCIATION_SIZE: u32 = 8;
pub const USB_ENC_TYPE_UNSECURE: u32 = 0;
pub const USB_ENC_TYPE_WIRED: u32 = 1;
pub const USB_ENC_TYPE_CCM_1: u32 = 2;
pub const USB_ENC_TYPE_RSA_1: u32 = 3;
pub const USB_DT_BOS_SIZE: u32 = 5;
pub const USB_CAP_TYPE_WIRELESS_USB: u32 = 1;
pub const USB_WIRELESS_P2P_DRD: u32 = 2;
pub const USB_WIRELESS_BEACON_MASK: u32 = 12;
pub const USB_WIRELESS_BEACON_SELF: u32 = 4;
pub const USB_WIRELESS_BEACON_DIRECTED: u32 = 8;
pub const USB_WIRELESS_BEACON_NONE: u32 = 12;
pub const USB_WIRELESS_PHY_53: u32 = 1;
pub const USB_WIRELESS_PHY_80: u32 = 2;
pub const USB_WIRELESS_PHY_107: u32 = 4;
pub const USB_WIRELESS_PHY_160: u32 = 8;
pub const USB_WIRELESS_PHY_200: u32 = 16;
pub const USB_WIRELESS_PHY_320: u32 = 32;
pub const USB_WIRELESS_PHY_400: u32 = 64;
pub const USB_WIRELESS_PHY_480: u32 = 128;
pub const USB_CAP_TYPE_EXT: u32 = 2;
pub const USB_LPM_SUPPORT: u32 = 2;
pub const USB_BESL_SUPPORT: u32 = 4;
pub const USB_BESL_BASELINE_VALID: u32 = 8;
pub const USB_BESL_DEEP_VALID: u32 = 16;
pub const USB_DT_USB_EXT_CAP_SIZE: u32 = 7;
pub const USB_SS_CAP_TYPE: u32 = 3;
pub const USB_LTM_SUPPORT: u32 = 2;
pub const USB_LOW_SPEED_OPERATION: u32 = 1;
pub const USB_FULL_SPEED_OPERATION: u32 = 2;
pub const USB_HIGH_SPEED_OPERATION: u32 = 4;
pub const USB_5GBPS_OPERATION: u32 = 8;
pub const USB_DT_USB_SS_CAP_SIZE: u32 = 10;
pub const CONTAINER_ID_TYPE: u32 = 4;
pub const USB_DT_USB_SS_CONTN_ID_SIZE: u32 = 20;
pub const USB_ENDPOINT_SWITCH_MASK: u32 = 3;
pub const USB_ENDPOINT_SWITCH_NO: u32 = 0;
pub const USB_ENDPOINT_SWITCH_SWITCH: u32 = 1;
pub const USB_ENDPOINT_SWITCH_SCALE: u32 = 2;
pub const USB3_LPM_DISABLED: u32 = 0;
pub const USB3_LPM_U1_MAX_TIMEOUT: u32 = 127;
pub const USB3_LPM_U2_MAX_TIMEOUT: u32 = 254;
pub const USB3_LPM_DEVICE_INITIATED: u32 = 255;
pub const USB3_LPM_MAX_U1_SEL_PEL: u32 = 255;
pub const USB3_LPM_MAX_U2_SEL_PEL: u32 = 65535;
pub const USB_SELF_POWER_VBUS_MAX_DRAW: u32 = 100;
pub const ADFS_SUPER_MAGIC: u32 = 44533;
pub const AFFS_SUPER_MAGIC: u32 = 44543;
pub const AFS_SUPER_MAGIC: u32 = 1397113167;
pub const AUTOFS_SUPER_MAGIC: u32 = 391;
pub const CODA_SUPER_MAGIC: u32 = 1937076805;
pub const CRAMFS_MAGIC: u32 = 684539205;
pub const CRAMFS_MAGIC_WEND: u32 = 1161678120;
pub const DEBUGFS_MAGIC: u32 = 1684170528;
pub const SECURITYFS_MAGIC: u32 = 1935894131;
pub const SELINUX_MAGIC: u32 = 4185718668;
pub const SMACK_MAGIC: u32 = 1128357203;
pub const RAMFS_MAGIC: u32 = 2240043254;
pub const TMPFS_MAGIC: u32 = 16914836;
pub const HUGETLBFS_MAGIC: u32 = 2508478710;
pub const SQUASHFS_MAGIC: u32 = 1936814952;
pub const ECRYPTFS_SUPER_MAGIC: u32 = 61791;
pub const EFS_SUPER_MAGIC: u32 = 4278867;
pub const EXT2_SUPER_MAGIC: u32 = 61267;
pub const EXT3_SUPER_MAGIC: u32 = 61267;
pub const XENFS_SUPER_MAGIC: u32 = 2881100148;
pub const EXT4_SUPER_MAGIC: u32 = 61267;
pub const BTRFS_SUPER_MAGIC: u32 = 2435016766;
pub const NILFS_SUPER_MAGIC: u32 = 13364;
pub const F2FS_SUPER_MAGIC: u32 = 4076150800;
pub const HPFS_SUPER_MAGIC: u32 = 4187351113;
pub const ISOFS_SUPER_MAGIC: u32 = 38496;
pub const JFFS2_SUPER_MAGIC: u32 = 29366;
pub const PSTOREFS_MAGIC: u32 = 1634035564;
pub const EFIVARFS_MAGIC: u32 = 3730735588;
pub const HOSTFS_SUPER_MAGIC: u32 = 12648430;
pub const MINIX_SUPER_MAGIC: u32 = 4991;
pub const MINIX_SUPER_MAGIC2: u32 = 5007;
pub const MINIX2_SUPER_MAGIC: u32 = 9320;
pub const MINIX2_SUPER_MAGIC2: u32 = 9336;
pub const MINIX3_SUPER_MAGIC: u32 = 19802;
pub const MSDOS_SUPER_MAGIC: u32 = 19780;
pub const NCP_SUPER_MAGIC: u32 = 22092;
pub const NFS_SUPER_MAGIC: u32 = 26985;
pub const OPENPROM_SUPER_MAGIC: u32 = 40865;
pub const QNX4_SUPER_MAGIC: u32 = 47;
pub const QNX6_SUPER_MAGIC: u32 = 1746473250;
pub const REISERFS_SUPER_MAGIC: u32 = 1382369651;
pub const REISERFS_SUPER_MAGIC_STRING: &[u8; 9usize] = b"ReIsErFs\0";
pub const REISER2FS_SUPER_MAGIC_STRING: &[u8; 10usize] = b"ReIsEr2Fs\0";
pub const REISER2FS_JR_SUPER_MAGIC_STRING: &[u8; 10usize] = b"ReIsEr3Fs\0";
pub const SMB_SUPER_MAGIC: u32 = 20859;
pub const CGROUP_SUPER_MAGIC: u32 = 2613483;
pub const STACK_END_MAGIC: u32 = 1470918301;
pub const V9FS_MAGIC: u32 = 16914839;
pub const BDEVFS_MAGIC: u32 = 1650746742;
pub const BINFMTFS_MAGIC: u32 = 1112100429;
pub const DEVPTS_SUPER_MAGIC: u32 = 7377;
pub const FUTEXFS_SUPER_MAGIC: u32 = 195894762;
pub const PIPEFS_MAGIC: u32 = 1346981957;
pub const PROC_SUPER_MAGIC: u32 = 40864;
pub const SOCKFS_MAGIC: u32 = 1397703499;
pub const SYSFS_MAGIC: u32 = 1650812274;
pub const USBDEVICE_SUPER_MAGIC: u32 = 40866;
pub const MTD_INODE_FS_MAGIC: u32 = 288389204;
pub const ANON_INODE_FS_MAGIC: u32 = 151263540;
pub const BTRFS_TEST_MAGIC: u32 = 1936880249;
pub const USBDEVFS_MAXDRIVERNAME: u32 = 255;
pub const USBDEVFS_URB_SHORT_NOT_OK: u32 = 1;
pub const USBDEVFS_URB_ISO_ASAP: u32 = 2;
pub const USBDEVFS_URB_BULK_CONTINUATION: u32 = 4;
pub const USBDEVFS_URB_NO_FSBR: u32 = 32;
pub const USBDEVFS_URB_ZERO_PACKET: u32 = 64;
pub const USBDEVFS_URB_NO_INTERRUPT: u32 = 128;
pub const USBDEVFS_URB_TYPE_ISO: u32 = 0;
pub const USBDEVFS_URB_TYPE_INTERRUPT: u32 = 1;
pub const USBDEVFS_URB_TYPE_CONTROL: u32 = 2;
pub const USBDEVFS_URB_TYPE_BULK: u32 = 3;
pub const USBDEVFS_CAP_ZERO_PACKET: u32 = 1;
pub const USBDEVFS_CAP_BULK_CONTINUATION: u32 = 2;
pub const USBDEVFS_CAP_NO_PACKET_SIZE_LIM: u32 = 4;
pub const USBDEVFS_CAP_BULK_SCATTER_GATHER: u32 = 8;
pub const USBDEVFS_CAP_REAP_AFTER_DISCONNECT: u32 = 16;
pub const USBDEVFS_DISCONNECT_CLAIM_IF_DRIVER: u32 = 1;
pub const USBDEVFS_DISCONNECT_CLAIM_EXCEPT_DRIVER: u32 = 2;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__kernel_fd_set), "::", stringify!(fds_bits))
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__kernel_fsid_t), "::", stringify!(val))
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
#[doc = " struct usb_ctrlrequest - SETUP data for a USB device control request\n @bRequestType: matches the USB bmRequestType field\n @bRequest: matches the USB bRequest field\n @wValue: matches the USB wValue field (le16 byte order)\n @wIndex: matches the USB wIndex field (le16 byte order)\n @wLength: matches the USB wLength field (le16 byte order)\n\n This structure is used to send control requests to a USB device.  It matches\n the different fields of the USB 2.0 Spec section 9.3, table 9-2.  See the\n USB spec for a fuller description of the different fields, and what they are\n used for.\n\n Note that the driver for any interface can issue control requests.\n For most devices, interfaces don't coordinate with each other, so\n such requests may be made at any time."]
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_ctrlrequest {
    pub bRequestType: __u8,
    pub bRequest: __u8,
    pub wValue: __le16,
    pub wIndex: __le16,
    pub wLength: __le16,
}
#[test]
fn bindgen_test_layout_usb_ctrlrequest() {
    const UNINIT: ::std::mem::MaybeUninit<usb_ctrlrequest> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_ctrlrequest>(),
        8usize,
        concat!("Size of: ", stringify!(usb_ctrlrequest))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_ctrlrequest>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_ctrlrequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequestType) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_ctrlrequest), "::", stringify!(bRequestType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequest) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(usb_ctrlrequest), "::", stringify!(bRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wValue) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(usb_ctrlrequest), "::", stringify!(wValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wIndex) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(usb_ctrlrequest), "::", stringify!(wIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLength) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(usb_ctrlrequest), "::", stringify!(wLength))
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, FromZeroes, FromBytes, AsBytes, Unaligned)]
pub struct usb_descriptor_header {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
}
#[test]
fn bindgen_test_layout_usb_descriptor_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_descriptor_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_descriptor_header>(),
        2usize,
        concat!("Size of: ", stringify!(usb_descriptor_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_descriptor_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_descriptor_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_descriptor_header), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_descriptor_header),
            "::",
            stringify!(bDescriptorType)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, FromZeroes, FromBytes, AsBytes, Unaligned)]
pub struct usb_device_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bcdUSB: __le16,
    pub bDeviceClass: __u8,
    pub bDeviceSubClass: __u8,
    pub bDeviceProtocol: __u8,
    pub bMaxPacketSize0: __u8,
    pub idVendor: __le16,
    pub idProduct: __le16,
    pub bcdDevice: __le16,
    pub iManufacturer: __u8,
    pub iProduct: __u8,
    pub iSerialNumber: __u8,
    pub bNumConfigurations: __u8,
}
#[test]
fn bindgen_test_layout_usb_device_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_device_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_device_descriptor>(),
        18usize,
        concat!("Size of: ", stringify!(usb_device_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_device_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_device_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_device_descriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdUSB) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(usb_device_descriptor), "::", stringify!(bcdUSB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceClass) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(bDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceSubClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(bDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceProtocol) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(bDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxPacketSize0) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(bMaxPacketSize0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idVendor) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(usb_device_descriptor), "::", stringify!(idVendor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idProduct) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(idProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdDevice) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(bcdDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iManufacturer) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(iManufacturer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iProduct) as usize - ptr as usize },
        15usize,
        concat!("Offset of field: ", stringify!(usb_device_descriptor), "::", stringify!(iProduct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iSerialNumber) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(iSerialNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumConfigurations) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_device_descriptor),
            "::",
            stringify!(bNumConfigurations)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_config_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub wTotalLength: __le16,
    pub bNumInterfaces: __u8,
    pub bConfigurationValue: __u8,
    pub iConfiguration: __u8,
    pub bmAttributes: __u8,
    pub bMaxPower: __u8,
}
#[test]
fn bindgen_test_layout_usb_config_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_config_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_config_descriptor>(),
        9usize,
        concat!("Size of: ", stringify!(usb_config_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_config_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_config_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_config_descriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_config_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wTotalLength) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_config_descriptor),
            "::",
            stringify!(wTotalLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumInterfaces) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_config_descriptor),
            "::",
            stringify!(bNumInterfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bConfigurationValue) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_config_descriptor),
            "::",
            stringify!(bConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iConfiguration) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_config_descriptor),
            "::",
            stringify!(iConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_config_descriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxPower) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_config_descriptor),
            "::",
            stringify!(bMaxPower)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_string_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub wData: [__le16; 1usize],
}
#[test]
fn bindgen_test_layout_usb_string_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_string_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_string_descriptor>(),
        4usize,
        concat!("Size of: ", stringify!(usb_string_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_string_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_string_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_string_descriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_string_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wData) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(usb_string_descriptor), "::", stringify!(wData))
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, FromZeroes, FromBytes, AsBytes, Unaligned)]
pub struct usb_interface_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bInterfaceNumber: __u8,
    pub bAlternateSetting: __u8,
    pub bNumEndpoints: __u8,
    pub bInterfaceClass: __u8,
    pub bInterfaceSubClass: __u8,
    pub bInterfaceProtocol: __u8,
    pub iInterface: __u8,
}
#[test]
fn bindgen_test_layout_usb_interface_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_interface_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_interface_descriptor>(),
        9usize,
        concat!("Size of: ", stringify!(usb_interface_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_interface_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_interface_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceNumber) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_descriptor),
            "::",
            stringify!(bInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAlternateSetting) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_descriptor),
            "::",
            stringify!(bAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumEndpoints) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_descriptor),
            "::",
            stringify!(bNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_descriptor),
            "::",
            stringify!(bInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceSubClass) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_descriptor),
            "::",
            stringify!(bInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceProtocol) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_descriptor),
            "::",
            stringify!(bInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_descriptor),
            "::",
            stringify!(iInterface)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, FromZeroes, FromBytes, AsBytes, Unaligned)]
pub struct usb_endpoint_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bEndpointAddress: __u8,
    pub bmAttributes: __u8,
    pub wMaxPacketSize: __le16,
    pub bInterval: __u8,
    pub bRefresh: __u8,
    pub bSynchAddress: __u8,
}
#[test]
fn bindgen_test_layout_usb_endpoint_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_endpoint_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_endpoint_descriptor>(),
        9usize,
        concat!("Size of: ", stringify!(usb_endpoint_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_endpoint_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_endpoint_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_endpoint_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_endpoint_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEndpointAddress) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_endpoint_descriptor),
            "::",
            stringify!(bEndpointAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_endpoint_descriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wMaxPacketSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_endpoint_descriptor),
            "::",
            stringify!(wMaxPacketSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterval) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_endpoint_descriptor),
            "::",
            stringify!(bInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRefresh) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_endpoint_descriptor),
            "::",
            stringify!(bRefresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSynchAddress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_endpoint_descriptor),
            "::",
            stringify!(bSynchAddress)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_ss_ep_comp_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bMaxBurst: __u8,
    pub bmAttributes: __u8,
    pub wBytesPerInterval: __le16,
}
#[test]
fn bindgen_test_layout_usb_ss_ep_comp_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_ss_ep_comp_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_ss_ep_comp_descriptor>(),
        6usize,
        concat!("Size of: ", stringify!(usb_ss_ep_comp_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_ss_ep_comp_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_ss_ep_comp_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_ep_comp_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_ep_comp_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxBurst) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_ep_comp_descriptor),
            "::",
            stringify!(bMaxBurst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_ep_comp_descriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wBytesPerInterval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_ep_comp_descriptor),
            "::",
            stringify!(wBytesPerInterval)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_qualifier_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bcdUSB: __le16,
    pub bDeviceClass: __u8,
    pub bDeviceSubClass: __u8,
    pub bDeviceProtocol: __u8,
    pub bMaxPacketSize0: __u8,
    pub bNumConfigurations: __u8,
    pub bRESERVED: __u8,
}
#[test]
fn bindgen_test_layout_usb_qualifier_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_qualifier_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_qualifier_descriptor>(),
        10usize,
        concat!("Size of: ", stringify!(usb_qualifier_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_qualifier_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_qualifier_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_qualifier_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_qualifier_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdUSB) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_qualifier_descriptor),
            "::",
            stringify!(bcdUSB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceClass) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_qualifier_descriptor),
            "::",
            stringify!(bDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceSubClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_qualifier_descriptor),
            "::",
            stringify!(bDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceProtocol) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_qualifier_descriptor),
            "::",
            stringify!(bDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxPacketSize0) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_qualifier_descriptor),
            "::",
            stringify!(bMaxPacketSize0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumConfigurations) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_qualifier_descriptor),
            "::",
            stringify!(bNumConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRESERVED) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_qualifier_descriptor),
            "::",
            stringify!(bRESERVED)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_otg_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bmAttributes: __u8,
}
#[test]
fn bindgen_test_layout_usb_otg_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_otg_descriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_otg_descriptor>(),
        3usize,
        concat!("Size of: ", stringify!(usb_otg_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_otg_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_otg_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_otg_descriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_otg_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_otg_descriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_debug_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bDebugInEndpoint: __u8,
    pub bDebugOutEndpoint: __u8,
}
#[test]
fn bindgen_test_layout_usb_debug_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_debug_descriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_debug_descriptor>(),
        4usize,
        concat!("Size of: ", stringify!(usb_debug_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_debug_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_debug_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_debug_descriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_debug_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDebugInEndpoint) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_debug_descriptor),
            "::",
            stringify!(bDebugInEndpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDebugOutEndpoint) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_debug_descriptor),
            "::",
            stringify!(bDebugOutEndpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_interface_assoc_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bFirstInterface: __u8,
    pub bInterfaceCount: __u8,
    pub bFunctionClass: __u8,
    pub bFunctionSubClass: __u8,
    pub bFunctionProtocol: __u8,
    pub iFunction: __u8,
}
#[test]
fn bindgen_test_layout_usb_interface_assoc_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_interface_assoc_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_interface_assoc_descriptor>(),
        8usize,
        concat!("Size of: ", stringify!(usb_interface_assoc_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_interface_assoc_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_interface_assoc_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_assoc_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_assoc_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFirstInterface) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_assoc_descriptor),
            "::",
            stringify!(bFirstInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceCount) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_assoc_descriptor),
            "::",
            stringify!(bInterfaceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFunctionClass) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_assoc_descriptor),
            "::",
            stringify!(bFunctionClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFunctionSubClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_assoc_descriptor),
            "::",
            stringify!(bFunctionSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFunctionProtocol) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_assoc_descriptor),
            "::",
            stringify!(bFunctionProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iFunction) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_interface_assoc_descriptor),
            "::",
            stringify!(iFunction)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_security_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub wTotalLength: __le16,
    pub bNumEncryptionTypes: __u8,
}
#[test]
fn bindgen_test_layout_usb_security_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_security_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_security_descriptor>(),
        5usize,
        concat!("Size of: ", stringify!(usb_security_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_security_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_security_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_security_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_security_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wTotalLength) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_security_descriptor),
            "::",
            stringify!(wTotalLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumEncryptionTypes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_security_descriptor),
            "::",
            stringify!(bNumEncryptionTypes)
        )
    );
}
#[repr(C, packed)]
pub struct usb_key_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub tTKID: [__u8; 3usize],
    pub bReserved: __u8,
    pub bKeyData: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_usb_key_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_key_descriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_key_descriptor>(),
        6usize,
        concat!("Size of: ", stringify!(usb_key_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_key_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_key_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_key_descriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_key_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tTKID) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(usb_key_descriptor), "::", stringify!(tTKID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
        5usize,
        concat!("Offset of field: ", stringify!(usb_key_descriptor), "::", stringify!(bReserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bKeyData) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(usb_key_descriptor), "::", stringify!(bKeyData))
    );
}
impl Default for usb_key_descriptor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for usb_key_descriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "usb_key_descriptor {{ bLength: {:?}, bDescriptorType: {:?}, tTKID: {:?}, bReserved: {:?}, bKeyData: {:?} }}" , self . bLength , self . bDescriptorType , self . tTKID , self . bReserved , self . bKeyData)
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_encryption_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bEncryptionType: __u8,
    pub bEncryptionValue: __u8,
    pub bAuthKeyIndex: __u8,
}
#[test]
fn bindgen_test_layout_usb_encryption_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_encryption_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_encryption_descriptor>(),
        5usize,
        concat!("Size of: ", stringify!(usb_encryption_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_encryption_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_encryption_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_encryption_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_encryption_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEncryptionType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_encryption_descriptor),
            "::",
            stringify!(bEncryptionType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEncryptionValue) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_encryption_descriptor),
            "::",
            stringify!(bEncryptionValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAuthKeyIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_encryption_descriptor),
            "::",
            stringify!(bAuthKeyIndex)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_bos_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub wTotalLength: __le16,
    pub bNumDeviceCaps: __u8,
}
#[test]
fn bindgen_test_layout_usb_bos_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_bos_descriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_bos_descriptor>(),
        5usize,
        concat!("Size of: ", stringify!(usb_bos_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_bos_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_bos_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_bos_descriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_bos_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wTotalLength) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_bos_descriptor),
            "::",
            stringify!(wTotalLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumDeviceCaps) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_bos_descriptor),
            "::",
            stringify!(bNumDeviceCaps)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_dev_cap_header {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bDevCapabilityType: __u8,
}
#[test]
fn bindgen_test_layout_usb_dev_cap_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_dev_cap_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_dev_cap_header>(),
        3usize,
        concat!("Size of: ", stringify!(usb_dev_cap_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_dev_cap_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_dev_cap_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_dev_cap_header), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_dev_cap_header),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_dev_cap_header),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_wireless_cap_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bDevCapabilityType: __u8,
    pub bmAttributes: __u8,
    pub wPHYRates: __le16,
    pub bmTFITXPowerInfo: __u8,
    pub bmFFITXPowerInfo: __u8,
    pub bmBandGroup: __le16,
    pub bReserved: __u8,
}
#[test]
fn bindgen_test_layout_usb_wireless_cap_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_wireless_cap_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_wireless_cap_descriptor>(),
        11usize,
        concat!("Size of: ", stringify!(usb_wireless_cap_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_wireless_cap_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_wireless_cap_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_cap_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_cap_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_cap_descriptor),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_cap_descriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wPHYRates) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_cap_descriptor),
            "::",
            stringify!(wPHYRates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmTFITXPowerInfo) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_cap_descriptor),
            "::",
            stringify!(bmTFITXPowerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmFFITXPowerInfo) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_cap_descriptor),
            "::",
            stringify!(bmFFITXPowerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmBandGroup) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_cap_descriptor),
            "::",
            stringify!(bmBandGroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_cap_descriptor),
            "::",
            stringify!(bReserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_ext_cap_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bDevCapabilityType: __u8,
    pub bmAttributes: __le32,
}
#[test]
fn bindgen_test_layout_usb_ext_cap_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_ext_cap_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_ext_cap_descriptor>(),
        7usize,
        concat!("Size of: ", stringify!(usb_ext_cap_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_ext_cap_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_ext_cap_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_ext_cap_descriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ext_cap_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ext_cap_descriptor),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ext_cap_descriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_ss_cap_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bDevCapabilityType: __u8,
    pub bmAttributes: __u8,
    pub wSpeedSupported: __le16,
    pub bFunctionalitySupport: __u8,
    pub bU1devExitLat: __u8,
    pub bU2DevExitLat: __le16,
}
#[test]
fn bindgen_test_layout_usb_ss_cap_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_ss_cap_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_ss_cap_descriptor>(),
        10usize,
        concat!("Size of: ", stringify!(usb_ss_cap_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_ss_cap_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_ss_cap_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_ss_cap_descriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_cap_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_cap_descriptor),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_cap_descriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wSpeedSupported) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_cap_descriptor),
            "::",
            stringify!(wSpeedSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFunctionalitySupport) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_cap_descriptor),
            "::",
            stringify!(bFunctionalitySupport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bU1devExitLat) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_cap_descriptor),
            "::",
            stringify!(bU1devExitLat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bU2DevExitLat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_cap_descriptor),
            "::",
            stringify!(bU2DevExitLat)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_ss_container_id_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bDevCapabilityType: __u8,
    pub bReserved: __u8,
    pub ContainerID: [__u8; 16usize],
}
#[test]
fn bindgen_test_layout_usb_ss_container_id_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_ss_container_id_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_ss_container_id_descriptor>(),
        20usize,
        concat!("Size of: ", stringify!(usb_ss_container_id_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_ss_container_id_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_ss_container_id_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_container_id_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_container_id_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_container_id_descriptor),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_container_id_descriptor),
            "::",
            stringify!(bReserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContainerID) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_ss_container_id_descriptor),
            "::",
            stringify!(ContainerID)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_wireless_ep_comp_descriptor {
    pub bLength: __u8,
    pub bDescriptorType: __u8,
    pub bMaxBurst: __u8,
    pub bMaxSequence: __u8,
    pub wMaxStreamDelay: __le16,
    pub wOverTheAirPacketSize: __le16,
    pub bOverTheAirInterval: __u8,
    pub bmCompAttributes: __u8,
}
#[test]
fn bindgen_test_layout_usb_wireless_ep_comp_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<usb_wireless_ep_comp_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_wireless_ep_comp_descriptor>(),
        10usize,
        concat!("Size of: ", stringify!(usb_wireless_ep_comp_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_wireless_ep_comp_descriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_wireless_ep_comp_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_ep_comp_descriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_ep_comp_descriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxBurst) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_ep_comp_descriptor),
            "::",
            stringify!(bMaxBurst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxSequence) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_ep_comp_descriptor),
            "::",
            stringify!(bMaxSequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wMaxStreamDelay) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_ep_comp_descriptor),
            "::",
            stringify!(wMaxStreamDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOverTheAirPacketSize) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_ep_comp_descriptor),
            "::",
            stringify!(wOverTheAirPacketSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bOverTheAirInterval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_ep_comp_descriptor),
            "::",
            stringify!(bOverTheAirInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmCompAttributes) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_wireless_ep_comp_descriptor),
            "::",
            stringify!(bmCompAttributes)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_handshake {
    pub bMessageNumber: __u8,
    pub bStatus: __u8,
    pub tTKID: [__u8; 3usize],
    pub bReserved: __u8,
    pub CDID: [__u8; 16usize],
    pub nonce: [__u8; 16usize],
    pub MIC: [__u8; 8usize],
}
#[test]
fn bindgen_test_layout_usb_handshake() {
    const UNINIT: ::std::mem::MaybeUninit<usb_handshake> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_handshake>(),
        46usize,
        concat!("Size of: ", stringify!(usb_handshake))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_handshake>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_handshake))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMessageNumber) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_handshake), "::", stringify!(bMessageNumber))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bStatus) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(usb_handshake), "::", stringify!(bStatus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tTKID) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(usb_handshake), "::", stringify!(tTKID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
        5usize,
        concat!("Offset of field: ", stringify!(usb_handshake), "::", stringify!(bReserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CDID) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(usb_handshake), "::", stringify!(CDID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonce) as usize - ptr as usize },
        22usize,
        concat!("Offset of field: ", stringify!(usb_handshake), "::", stringify!(nonce))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MIC) as usize - ptr as usize },
        38usize,
        concat!("Offset of field: ", stringify!(usb_handshake), "::", stringify!(MIC))
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_connection_context {
    pub CHID: [__u8; 16usize],
    pub CDID: [__u8; 16usize],
    pub CK: [__u8; 16usize],
}
#[test]
fn bindgen_test_layout_usb_connection_context() {
    const UNINIT: ::std::mem::MaybeUninit<usb_connection_context> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_connection_context>(),
        48usize,
        concat!("Size of: ", stringify!(usb_connection_context))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_connection_context>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_connection_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CHID) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_connection_context), "::", stringify!(CHID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CDID) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(usb_connection_context), "::", stringify!(CDID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CK) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(usb_connection_context), "::", stringify!(CK))
    );
}
pub const usb_device_speed_USB_SPEED_UNKNOWN: usb_device_speed = 0;
pub const usb_device_speed_USB_SPEED_LOW: usb_device_speed = 1;
pub const usb_device_speed_USB_SPEED_FULL: usb_device_speed = 2;
pub const usb_device_speed_USB_SPEED_HIGH: usb_device_speed = 3;
pub const usb_device_speed_USB_SPEED_WIRELESS: usb_device_speed = 4;
pub const usb_device_speed_USB_SPEED_SUPER: usb_device_speed = 5;
pub type usb_device_speed = ::std::os::raw::c_uint;
pub const usb_device_state_USB_STATE_NOTATTACHED: usb_device_state = 0;
pub const usb_device_state_USB_STATE_ATTACHED: usb_device_state = 1;
pub const usb_device_state_USB_STATE_POWERED: usb_device_state = 2;
pub const usb_device_state_USB_STATE_RECONNECTING: usb_device_state = 3;
pub const usb_device_state_USB_STATE_UNAUTHENTICATED: usb_device_state = 4;
pub const usb_device_state_USB_STATE_DEFAULT: usb_device_state = 5;
pub const usb_device_state_USB_STATE_ADDRESS: usb_device_state = 6;
pub const usb_device_state_USB_STATE_CONFIGURED: usb_device_state = 7;
pub const usb_device_state_USB_STATE_SUSPENDED: usb_device_state = 8;
pub type usb_device_state = ::std::os::raw::c_uint;
pub const usb3_link_state_USB3_LPM_U0: usb3_link_state = 0;
pub const usb3_link_state_USB3_LPM_U1: usb3_link_state = 1;
pub const usb3_link_state_USB3_LPM_U2: usb3_link_state = 2;
pub const usb3_link_state_USB3_LPM_U3: usb3_link_state = 3;
pub type usb3_link_state = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usb_set_sel_req {
    pub u1_sel: __u8,
    pub u1_pel: __u8,
    pub u2_sel: __le16,
    pub u2_pel: __le16,
}
#[test]
fn bindgen_test_layout_usb_set_sel_req() {
    const UNINIT: ::std::mem::MaybeUninit<usb_set_sel_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_set_sel_req>(),
        6usize,
        concat!("Size of: ", stringify!(usb_set_sel_req))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_set_sel_req>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_set_sel_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u1_sel) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usb_set_sel_req), "::", stringify!(u1_sel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u1_pel) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(usb_set_sel_req), "::", stringify!(u1_pel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2_sel) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(usb_set_sel_req), "::", stringify!(u2_sel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2_pel) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(usb_set_sel_req), "::", stringify!(u2_pel))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_ctrltransfer {
    pub bRequestType: __u8,
    pub bRequest: __u8,
    pub wValue: __u16,
    pub wIndex: __u16,
    pub wLength: __u16,
    pub timeout: __u32,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_usbdevfs_ctrltransfer() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_ctrltransfer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_ctrltransfer>(),
        24usize,
        concat!("Size of: ", stringify!(usbdevfs_ctrltransfer))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_ctrltransfer>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_ctrltransfer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequestType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ctrltransfer),
            "::",
            stringify!(bRequestType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequest) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(usbdevfs_ctrltransfer), "::", stringify!(bRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wValue) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(usbdevfs_ctrltransfer), "::", stringify!(wValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wIndex) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(usbdevfs_ctrltransfer), "::", stringify!(wIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLength) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(usbdevfs_ctrltransfer), "::", stringify!(wLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(usbdevfs_ctrltransfer), "::", stringify!(timeout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(usbdevfs_ctrltransfer), "::", stringify!(data))
    );
}
impl Default for usbdevfs_ctrltransfer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_bulktransfer {
    pub ep: ::std::os::raw::c_uint,
    pub len: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_usbdevfs_bulktransfer() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_bulktransfer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_bulktransfer>(),
        24usize,
        concat!("Size of: ", stringify!(usbdevfs_bulktransfer))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_bulktransfer>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_bulktransfer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ep) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usbdevfs_bulktransfer), "::", stringify!(ep))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(usbdevfs_bulktransfer), "::", stringify!(len))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(usbdevfs_bulktransfer), "::", stringify!(timeout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(usbdevfs_bulktransfer), "::", stringify!(data))
    );
}
impl Default for usbdevfs_bulktransfer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usbdevfs_setinterface {
    pub interface: ::std::os::raw::c_uint,
    pub altsetting: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_usbdevfs_setinterface() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_setinterface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_setinterface>(),
        8usize,
        concat!("Size of: ", stringify!(usbdevfs_setinterface))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_setinterface>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_setinterface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_setinterface),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altsetting) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_setinterface),
            "::",
            stringify!(altsetting)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_disconnectsignal {
    pub signr: ::std::os::raw::c_uint,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_usbdevfs_disconnectsignal() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_disconnectsignal> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_disconnectsignal>(),
        16usize,
        concat!("Size of: ", stringify!(usbdevfs_disconnectsignal))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_disconnectsignal>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_disconnectsignal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnectsignal),
            "::",
            stringify!(signr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnectsignal),
            "::",
            stringify!(context)
        )
    );
}
impl Default for usbdevfs_disconnectsignal {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_getdriver {
    pub interface: ::std::os::raw::c_uint,
    pub driver: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_usbdevfs_getdriver() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_getdriver> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_getdriver>(),
        260usize,
        concat!("Size of: ", stringify!(usbdevfs_getdriver))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_getdriver>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_getdriver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usbdevfs_getdriver), "::", stringify!(interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(usbdevfs_getdriver), "::", stringify!(driver))
    );
}
impl Default for usbdevfs_getdriver {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usbdevfs_connectinfo {
    pub devnum: ::std::os::raw::c_uint,
    pub slow: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_usbdevfs_connectinfo() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_connectinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_connectinfo>(),
        8usize,
        concat!("Size of: ", stringify!(usbdevfs_connectinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_connectinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_connectinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devnum) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usbdevfs_connectinfo), "::", stringify!(devnum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slow) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(usbdevfs_connectinfo), "::", stringify!(slow))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct usbdevfs_iso_packet_desc {
    pub length: ::std::os::raw::c_uint,
    pub actual_length: ::std::os::raw::c_uint,
    pub status: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_usbdevfs_iso_packet_desc() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_iso_packet_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_iso_packet_desc>(),
        12usize,
        concat!("Size of: ", stringify!(usbdevfs_iso_packet_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_iso_packet_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_iso_packet_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_iso_packet_desc),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actual_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_iso_packet_desc),
            "::",
            stringify!(actual_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_iso_packet_desc),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
pub struct usbdevfs_urb {
    pub type_: ::std::os::raw::c_uchar,
    pub endpoint: ::std::os::raw::c_uchar,
    pub status: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub buffer: *mut ::std::os::raw::c_void,
    pub buffer_length: ::std::os::raw::c_int,
    pub actual_length: ::std::os::raw::c_int,
    pub start_frame: ::std::os::raw::c_int,
    pub __bindgen_anon_1: usbdevfs_urb__bindgen_ty_1,
    pub error_count: ::std::os::raw::c_int,
    pub signr: ::std::os::raw::c_uint,
    pub usercontext: *mut ::std::os::raw::c_void,
    pub iso_frame_desc: __IncompleteArrayField<usbdevfs_iso_packet_desc>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union usbdevfs_urb__bindgen_ty_1 {
    pub number_of_packets: ::std::os::raw::c_int,
    pub stream_id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_usbdevfs_urb__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_urb__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_urb__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(usbdevfs_urb__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_urb__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_urb__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_of_packets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb__bindgen_ty_1),
            "::",
            stringify!(number_of_packets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb__bindgen_ty_1),
            "::",
            stringify!(stream_id)
        )
    );
}
impl Default for usbdevfs_urb__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for usbdevfs_urb__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "usbdevfs_urb__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_usbdevfs_urb() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_urb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_urb>(),
        56usize,
        concat!("Size of: ", stringify!(usbdevfs_urb))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_urb>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_urb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(endpoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_length) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(buffer_length))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actual_length) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(actual_length))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_frame) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(start_frame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_count) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(error_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signr) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(signr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usercontext) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(usercontext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso_frame_desc) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(usbdevfs_urb), "::", stringify!(iso_frame_desc))
    );
}
impl Default for usbdevfs_urb {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for usbdevfs_urb {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "usbdevfs_urb {{ type: {:?}, endpoint: {:?}, status: {:?}, flags: {:?}, buffer: {:?}, buffer_length: {:?}, actual_length: {:?}, start_frame: {:?}, __bindgen_anon_1: {:?}, error_count: {:?}, signr: {:?}, usercontext: {:?}, iso_frame_desc: {:?} }}" , self . type_ , self . endpoint , self . status , self . flags , self . buffer , self . buffer_length , self . actual_length , self . start_frame , self . __bindgen_anon_1 , self . error_count , self . signr , self . usercontext , self . iso_frame_desc)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_ioctl {
    pub ifno: ::std::os::raw::c_int,
    pub ioctl_code: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_usbdevfs_ioctl() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_ioctl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_ioctl>(),
        16usize,
        concat!("Size of: ", stringify!(usbdevfs_ioctl))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_ioctl>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_ioctl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifno) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usbdevfs_ioctl), "::", stringify!(ifno))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioctl_code) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(usbdevfs_ioctl), "::", stringify!(ioctl_code))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(usbdevfs_ioctl), "::", stringify!(data))
    );
}
impl Default for usbdevfs_ioctl {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_hub_portinfo {
    pub nports: ::std::os::raw::c_char,
    pub port: [::std::os::raw::c_char; 127usize],
}
#[test]
fn bindgen_test_layout_usbdevfs_hub_portinfo() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_hub_portinfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_hub_portinfo>(),
        128usize,
        concat!("Size of: ", stringify!(usbdevfs_hub_portinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_hub_portinfo>(),
        1usize,
        concat!("Alignment of ", stringify!(usbdevfs_hub_portinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nports) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usbdevfs_hub_portinfo), "::", stringify!(nports))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(usbdevfs_hub_portinfo), "::", stringify!(port))
    );
}
impl Default for usbdevfs_hub_portinfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_disconnect_claim {
    pub interface: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub driver: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_usbdevfs_disconnect_claim() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_disconnect_claim> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_disconnect_claim>(),
        264usize,
        concat!("Size of: ", stringify!(usbdevfs_disconnect_claim))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_disconnect_claim>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_disconnect_claim))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnect_claim),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnect_claim),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnect_claim),
            "::",
            stringify!(driver)
        )
    );
}
impl Default for usbdevfs_disconnect_claim {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct usbdevfs_streams {
    pub num_streams: ::std::os::raw::c_uint,
    pub num_eps: ::std::os::raw::c_uint,
    pub eps: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_usbdevfs_streams() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_streams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_streams>(),
        8usize,
        concat!("Size of: ", stringify!(usbdevfs_streams))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_streams>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_streams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_streams) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(usbdevfs_streams), "::", stringify!(num_streams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_eps) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(usbdevfs_streams), "::", stringify!(num_eps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(usbdevfs_streams), "::", stringify!(eps))
    );
}
pub const USBDEVFS_CONTROL_: ::std::os::raw::c_ulong = 3222820096;
pub const USBDEVFS_CONTROL: ::std::os::raw::c_ulong = 3222820096;
pub const USBDEVFS_BULK_: ::std::os::raw::c_ulong = 3222820098;
pub const USBDEVFS_BULK: ::std::os::raw::c_ulong = 3222820098;
pub const USBDEVFS_RESETEP_: ::std::os::raw::c_ulong = 2147767555;
pub const USBDEVFS_RESETEP: ::std::os::raw::c_ulong = 2147767555;
pub const USBDEVFS_SETINTERFACE_: ::std::os::raw::c_ulong = 2148029700;
pub const USBDEVFS_SETINTERFACE: ::std::os::raw::c_ulong = 2148029700;
pub const USBDEVFS_SETCONFIGURATION_: ::std::os::raw::c_ulong = 2147767557;
pub const USBDEVFS_SETCONFIGURATION: ::std::os::raw::c_ulong = 2147767557;
pub const USBDEVFS_GETDRIVER_: ::std::os::raw::c_ulong = 1090802952;
pub const USBDEVFS_GETDRIVER: ::std::os::raw::c_ulong = 1090802952;
pub const USBDEVFS_SUBMITURB_: ::std::os::raw::c_ulong = 2151175434;
pub const USBDEVFS_SUBMITURB: ::std::os::raw::c_ulong = 2151175434;
pub const USBDEVFS_DISCARDURB_: ::std::os::raw::c_ulong = 21771;
pub const USBDEVFS_DISCARDURB: ::std::os::raw::c_ulong = 21771;
pub const USBDEVFS_REAPURB_: ::std::os::raw::c_ulong = 1074287884;
pub const USBDEVFS_REAPURB: ::std::os::raw::c_ulong = 1074287884;
pub const USBDEVFS_REAPURBNDELAY_: ::std::os::raw::c_ulong = 1074287885;
pub const USBDEVFS_REAPURBNDELAY: ::std::os::raw::c_ulong = 1074287885;
pub const USBDEVFS_DISCSIGNAL_: ::std::os::raw::c_ulong = 2148553998;
pub const USBDEVFS_DISCSIGNAL: ::std::os::raw::c_ulong = 2148553998;
pub const USBDEVFS_CLAIMINTERFACE_: ::std::os::raw::c_ulong = 2147767567;
pub const USBDEVFS_CLAIMINTERFACE: ::std::os::raw::c_ulong = 2147767567;
pub const USBDEVFS_RELEASEINTERFACE_: ::std::os::raw::c_ulong = 2147767568;
pub const USBDEVFS_RELEASEINTERFACE: ::std::os::raw::c_ulong = 2147767568;
pub const USBDEVFS_CONNECTINFO_: ::std::os::raw::c_ulong = 1074287889;
pub const USBDEVFS_CONNECTINFO: ::std::os::raw::c_ulong = 1074287889;
pub const USBDEVFS_IOCTL_: ::std::os::raw::c_ulong = 3222295826;
pub const USBDEVFS_IOCTL: ::std::os::raw::c_ulong = 3222295826;
pub const USBDEVFS_HUB_PORTINFO_: ::std::os::raw::c_ulong = 2155894035;
pub const USBDEVFS_HUB_PORTINFO: ::std::os::raw::c_ulong = 2155894035;
pub const USBDEVFS_RESET_: ::std::os::raw::c_ulong = 21780;
pub const USBDEVFS_RESET: ::std::os::raw::c_ulong = 21780;
pub const USBDEVFS_CLEAR_HALT_: ::std::os::raw::c_ulong = 2147767573;
pub const USBDEVFS_CLEAR_HALT: ::std::os::raw::c_ulong = 2147767573;
pub const USBDEVFS_DISCONNECT_: ::std::os::raw::c_ulong = 21782;
pub const USBDEVFS_DISCONNECT: ::std::os::raw::c_ulong = 21782;
pub const USBDEVFS_CONNECT_: ::std::os::raw::c_ulong = 21783;
pub const USBDEVFS_CONNECT: ::std::os::raw::c_ulong = 21783;
pub const USBDEVFS_CLAIM_PORT_: ::std::os::raw::c_ulong = 2147767576;
pub const USBDEVFS_CLAIM_PORT: ::std::os::raw::c_ulong = 2147767576;
pub const USBDEVFS_RELEASE_PORT_: ::std::os::raw::c_ulong = 2147767577;
pub const USBDEVFS_RELEASE_PORT: ::std::os::raw::c_ulong = 2147767577;
pub const USBDEVFS_GET_CAPABILITIES_: ::std::os::raw::c_ulong = 2147767578;
pub const USBDEVFS_GET_CAPABILITIES: ::std::os::raw::c_ulong = 2147767578;
pub const USBDEVFS_DISCONNECT_CLAIM_: ::std::os::raw::c_ulong = 2164806939;
pub const USBDEVFS_DISCONNECT_CLAIM: ::std::os::raw::c_ulong = 2164806939;
pub const USBDEVFS_ALLOC_STREAMS_: ::std::os::raw::c_ulong = 2148029724;
pub const USBDEVFS_ALLOC_STREAMS: ::std::os::raw::c_ulong = 2148029724;
pub const USBDEVFS_FREE_STREAMS_: ::std::os::raw::c_ulong = 2148029725;
pub const USBDEVFS_FREE_STREAMS: ::std::os::raw::c_ulong = 2148029725;
