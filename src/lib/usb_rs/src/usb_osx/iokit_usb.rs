// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Generated by src/lib/usb_rs/bindgen_mac.sh using bindgen 0.65.1

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(improper_ctypes)]
#![allow(clippy::approx_constant)]

// Configure linkage for MacOS.
#[cfg(target_os = "macos")]
#[link(name = "IOKit", kind = "framework")]
#[link(name = "CoreFoundation", kind = "framework")]
extern "C" {}

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") { 7 - (index % 8) } else { index % 8 };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") { 7 - (index % 8) } else { index % 8 };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index =
                    if cfg!(target_endian = "big") { bit_width as usize - 1 - i } else { i };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") { bit_width as usize - 1 - i } else { i };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __COREFOUNDATION_COREFOUNDATION__: u32 = 1;
pub const __COREFOUNDATION__: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130300;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const _JBLEN: u32 = 37;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const __PRI_8_LENGTH_MODIFIER__: &[u8; 3] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
pub const PRId8: &[u8; 4] = b"hhd\0";
pub const PRIi8: &[u8; 4] = b"hhi\0";
pub const PRIo8: &[u8; 4] = b"hho\0";
pub const PRIu8: &[u8; 4] = b"hhu\0";
pub const PRIx8: &[u8; 4] = b"hhx\0";
pub const PRIX8: &[u8; 4] = b"hhX\0";
pub const PRId16: &[u8; 3] = b"hd\0";
pub const PRIi16: &[u8; 3] = b"hi\0";
pub const PRIo16: &[u8; 3] = b"ho\0";
pub const PRIu16: &[u8; 3] = b"hu\0";
pub const PRIx16: &[u8; 3] = b"hx\0";
pub const PRIX16: &[u8; 3] = b"hX\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRId64: &[u8; 4] = b"lld\0";
pub const PRIi64: &[u8; 4] = b"lli\0";
pub const PRIo64: &[u8; 4] = b"llo\0";
pub const PRIu64: &[u8; 4] = b"llu\0";
pub const PRIx64: &[u8; 4] = b"llx\0";
pub const PRIX64: &[u8; 4] = b"llX\0";
pub const PRIdLEAST8: &[u8; 4] = b"hhd\0";
pub const PRIiLEAST8: &[u8; 4] = b"hhi\0";
pub const PRIoLEAST8: &[u8; 4] = b"hho\0";
pub const PRIuLEAST8: &[u8; 4] = b"hhu\0";
pub const PRIxLEAST8: &[u8; 4] = b"hhx\0";
pub const PRIXLEAST8: &[u8; 4] = b"hhX\0";
pub const PRIdLEAST16: &[u8; 3] = b"hd\0";
pub const PRIiLEAST16: &[u8; 3] = b"hi\0";
pub const PRIoLEAST16: &[u8; 3] = b"ho\0";
pub const PRIuLEAST16: &[u8; 3] = b"hu\0";
pub const PRIxLEAST16: &[u8; 3] = b"hx\0";
pub const PRIXLEAST16: &[u8; 3] = b"hX\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIdLEAST64: &[u8; 4] = b"lld\0";
pub const PRIiLEAST64: &[u8; 4] = b"lli\0";
pub const PRIoLEAST64: &[u8; 4] = b"llo\0";
pub const PRIuLEAST64: &[u8; 4] = b"llu\0";
pub const PRIxLEAST64: &[u8; 4] = b"llx\0";
pub const PRIXLEAST64: &[u8; 4] = b"llX\0";
pub const PRIdFAST8: &[u8; 4] = b"hhd\0";
pub const PRIiFAST8: &[u8; 4] = b"hhi\0";
pub const PRIoFAST8: &[u8; 4] = b"hho\0";
pub const PRIuFAST8: &[u8; 4] = b"hhu\0";
pub const PRIxFAST8: &[u8; 4] = b"hhx\0";
pub const PRIXFAST8: &[u8; 4] = b"hhX\0";
pub const PRIdFAST16: &[u8; 3] = b"hd\0";
pub const PRIiFAST16: &[u8; 3] = b"hi\0";
pub const PRIoFAST16: &[u8; 3] = b"ho\0";
pub const PRIuFAST16: &[u8; 3] = b"hu\0";
pub const PRIxFAST16: &[u8; 3] = b"hx\0";
pub const PRIXFAST16: &[u8; 3] = b"hX\0";
pub const PRIdFAST32: &[u8; 2] = b"d\0";
pub const PRIiFAST32: &[u8; 2] = b"i\0";
pub const PRIoFAST32: &[u8; 2] = b"o\0";
pub const PRIuFAST32: &[u8; 2] = b"u\0";
pub const PRIxFAST32: &[u8; 2] = b"x\0";
pub const PRIXFAST32: &[u8; 2] = b"X\0";
pub const PRIdFAST64: &[u8; 4] = b"lld\0";
pub const PRIiFAST64: &[u8; 4] = b"lli\0";
pub const PRIoFAST64: &[u8; 4] = b"llo\0";
pub const PRIuFAST64: &[u8; 4] = b"llu\0";
pub const PRIxFAST64: &[u8; 4] = b"llx\0";
pub const PRIXFAST64: &[u8; 4] = b"llX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"jd\0";
pub const PRIiMAX: &[u8; 3] = b"ji\0";
pub const PRIoMAX: &[u8; 3] = b"jo\0";
pub const PRIuMAX: &[u8; 3] = b"ju\0";
pub const PRIxMAX: &[u8; 3] = b"jx\0";
pub const PRIXMAX: &[u8; 3] = b"jX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNd64: &[u8; 4] = b"lld\0";
pub const SCNi64: &[u8; 4] = b"lli\0";
pub const SCNo64: &[u8; 4] = b"llo\0";
pub const SCNu64: &[u8; 4] = b"llu\0";
pub const SCNx64: &[u8; 4] = b"llx\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNdLEAST64: &[u8; 4] = b"lld\0";
pub const SCNiLEAST64: &[u8; 4] = b"lli\0";
pub const SCNoLEAST64: &[u8; 4] = b"llo\0";
pub const SCNuLEAST64: &[u8; 4] = b"llu\0";
pub const SCNxLEAST64: &[u8; 4] = b"llx\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNdFAST16: &[u8; 3] = b"hd\0";
pub const SCNiFAST16: &[u8; 3] = b"hi\0";
pub const SCNoFAST16: &[u8; 3] = b"ho\0";
pub const SCNuFAST16: &[u8; 3] = b"hu\0";
pub const SCNxFAST16: &[u8; 3] = b"hx\0";
pub const SCNdFAST32: &[u8; 2] = b"d\0";
pub const SCNiFAST32: &[u8; 2] = b"i\0";
pub const SCNoFAST32: &[u8; 2] = b"o\0";
pub const SCNuFAST32: &[u8; 2] = b"u\0";
pub const SCNxFAST32: &[u8; 2] = b"x\0";
pub const SCNdFAST64: &[u8; 4] = b"lld\0";
pub const SCNiFAST64: &[u8; 4] = b"lli\0";
pub const SCNoFAST64: &[u8; 4] = b"llo\0";
pub const SCNuFAST64: &[u8; 4] = b"llu\0";
pub const SCNxFAST64: &[u8; 4] = b"llx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"jd\0";
pub const SCNiMAX: &[u8; 3] = b"ji\0";
pub const SCNoMAX: &[u8; 3] = b"jo\0";
pub const SCNuMAX: &[u8; 3] = b"ju\0";
pub const SCNxMAX: &[u8; 3] = b"jx\0";
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __COREFOUNDATION_CFBASE__: u32 = 1;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 1;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 0;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const __COREFOUNDATION_CFAVAILABILITY__: u32 = 1;
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130300;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const UNIVERSAL_INTERFACES_VERSION: u32 = 1024;
pub const PRAGMA_IMPORT: u32 = 0;
pub const PRAGMA_ONCE: u32 = 0;
pub const PRAGMA_STRUCT_PACK: u32 = 1;
pub const PRAGMA_STRUCT_PACKPUSH: u32 = 1;
pub const PRAGMA_STRUCT_ALIGN: u32 = 0;
pub const PRAGMA_ENUM_PACK: u32 = 0;
pub const PRAGMA_ENUM_ALWAYSINT: u32 = 0;
pub const PRAGMA_ENUM_OPTIONS: u32 = 0;
pub const TYPE_EXTENDED: u32 = 0;
pub const TYPE_LONGDOUBLE_IS_DOUBLE: u32 = 0;
pub const TYPE_LONGLONG: u32 = 1;
pub const FUNCTION_PASCAL: u32 = 0;
pub const FUNCTION_DECLSPEC: u32 = 0;
pub const FUNCTION_WIN32CC: u32 = 0;
pub const TARGET_API_MAC_OS8: u32 = 0;
pub const TARGET_API_MAC_CARBON: u32 = 1;
pub const TARGET_API_MAC_OSX: u32 = 1;
pub const TARGET_CARBON: u32 = 1;
pub const OLDROUTINENAMES: u32 = 0;
pub const OPAQUE_TOOLBOX_STRUCTS: u32 = 1;
pub const OPAQUE_UPP_TYPES: u32 = 1;
pub const ACCESSOR_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const CALL_NOT_IN_CARBON: u32 = 0;
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_OSUTILS: u32 = 0;
pub const kInvalidID: u32 = 0;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const kCFCoreFoundationVersionNumber10_0: f64 = 196.4;
pub const kCFCoreFoundationVersionNumber10_0_3: f64 = 196.5;
pub const kCFCoreFoundationVersionNumber10_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_2: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_3: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_4: f64 = 227.3;
pub const kCFCoreFoundationVersionNumber10_2: f64 = 263.0;
pub const kCFCoreFoundationVersionNumber10_2_1: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_2: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_3: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_4: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_5: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_6: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_7: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_8: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_3: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_1: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_2: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_3: f64 = 299.3;
pub const kCFCoreFoundationVersionNumber10_3_4: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_5: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_6: f64 = 299.32;
pub const kCFCoreFoundationVersionNumber10_3_7: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_8: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_9: f64 = 299.35;
pub const kCFCoreFoundationVersionNumber10_4: f64 = 368.0;
pub const kCFCoreFoundationVersionNumber10_4_1: f64 = 368.1;
pub const kCFCoreFoundationVersionNumber10_4_2: f64 = 368.11;
pub const kCFCoreFoundationVersionNumber10_4_3: f64 = 368.18;
pub const kCFCoreFoundationVersionNumber10_4_4_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_5_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_6_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_7: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_8: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_9: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_10: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_11: f64 = 368.31;
pub const kCFCoreFoundationVersionNumber10_5: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_1: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_2: f64 = 476.1;
pub const kCFCoreFoundationVersionNumber10_5_3: f64 = 476.13;
pub const kCFCoreFoundationVersionNumber10_5_4: f64 = 476.14;
pub const kCFCoreFoundationVersionNumber10_5_5: f64 = 476.15;
pub const kCFCoreFoundationVersionNumber10_5_6: f64 = 476.17;
pub const kCFCoreFoundationVersionNumber10_5_7: f64 = 476.18;
pub const kCFCoreFoundationVersionNumber10_5_8: f64 = 476.19;
pub const kCFCoreFoundationVersionNumber10_6: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_1: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_2: f64 = 550.13;
pub const kCFCoreFoundationVersionNumber10_6_3: f64 = 550.19;
pub const kCFCoreFoundationVersionNumber10_6_4: f64 = 550.29;
pub const kCFCoreFoundationVersionNumber10_6_5: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_6: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_7: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_8: f64 = 550.43;
pub const kCFCoreFoundationVersionNumber10_7: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_1: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_2: f64 = 635.15;
pub const kCFCoreFoundationVersionNumber10_7_3: f64 = 635.19;
pub const kCFCoreFoundationVersionNumber10_7_4: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_7_5: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_8: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_1: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_2: f64 = 744.12;
pub const kCFCoreFoundationVersionNumber10_8_3: f64 = 744.18;
pub const kCFCoreFoundationVersionNumber10_8_4: f64 = 744.19;
pub const kCFCoreFoundationVersionNumber10_9: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_1: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_2: f64 = 855.14;
pub const kCFCoreFoundationVersionNumber10_10: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_1: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_2: u32 = 1152;
pub const kCFCoreFoundationVersionNumber10_10_3: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_4: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_5: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_Max: u32 = 1199;
pub const kCFCoreFoundationVersionNumber10_11: u32 = 1253;
pub const kCFCoreFoundationVersionNumber10_11_1: f64 = 1255.1;
pub const kCFCoreFoundationVersionNumber10_11_2: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_3: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_4: f64 = 1258.1;
pub const kCFCoreFoundationVersionNumber10_11_Max: u32 = 1299;
pub const ISA_PTRAUTH_DISCRIMINATOR: u32 = 27361;
pub const __COREFOUNDATION_CFARRAY__: u32 = 1;
pub const __COREFOUNDATION_CFBAG__: u32 = 1;
pub const __COREFOUNDATION_CFBINARYHEAP__: u32 = 1;
pub const __COREFOUNDATION_CFBITVECTOR__: u32 = 1;
pub const __COREFOUNDATION_CFBYTEORDER__: u32 = 1;
pub const CF_USE_OSBYTEORDER_H: u32 = 1;
pub const __COREFOUNDATION_CFCALENDAR__: u32 = 1;
pub const __COREFOUNDATION_CFLOCALE__: u32 = 1;
pub const __COREFOUNDATION_CFDICTIONARY__: u32 = 1;
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__: u32 = 1;
pub const __COREFOUNDATION_CFDATE__: u32 = 1;
pub const __COREFOUNDATION_CFTIMEZONE__: u32 = 1;
pub const __COREFOUNDATION_CFDATA__: u32 = 1;
pub const __COREFOUNDATION_CFSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFCHARACTERSET__: u32 = 1;
pub const __COREFOUNDATION_CFERROR__: u32 = 1;
pub const kCFStringEncodingInvalidId: u32 = 4294967295;
pub const __kCFStringInlineBufferLength: u32 = 64;
pub const __COREFOUNDATION_CFCGTYPES__: u32 = 1;
pub const CGFLOAT_IS_DOUBLE: u32 = 1;
pub const CGFLOAT_DEFINED: u32 = 1;
pub const CGVECTOR_DEFINED: u32 = 1;
pub const __COREFOUNDATION_CFDATEFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBERFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFPREFERENCES__: u32 = 1;
pub const __COREFOUNDATION_CFPROPERTYLIST__: u32 = 1;
pub const __COREFOUNDATION_CFSTREAM__: u32 = 1;
pub const __COREFOUNDATION_CFURL__: u32 = 1;
pub const __COREFOUNDATION_CFRUNLOOP__: u32 = 1;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const __COREFOUNDATION_CFSOCKET__: u32 = 1;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: u32 = 200112;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SYNC: u32 = 128;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_DSYNC: u32 = 4194304;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const DISPATCH_API_VERSION: u32 = 20181008;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT: u32 = 0;
pub const OS_OBJECT_USE_OBJC: u32 = 0;
pub const OS_OBJECT_SWIFT3: u32 = 0;
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE: u32 = 0;
pub const __OS_WORKGROUP_ATTR_SIZE__: u32 = 60;
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__: u32 = 56;
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__: u32 = 36;
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT: u32 = 799564724;
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT: u32 = 799564740;
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT: u32 = 1386695757;
pub const DISPATCH_SWIFT3_OVERLAY: u32 = 0;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const DISPATCH_TIME_NOW: u32 = 0;
pub const DISPATCH_TIME_FOREVER: i32 = -1;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const DISPATCH_APPLY_AUTO_AVAILABLE: u32 = 1;
pub const DISPATCH_QUEUE_PRIORITY_HIGH: u32 = 2;
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT: u32 = 0;
pub const DISPATCH_QUEUE_PRIORITY_LOW: i32 = -2;
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND: i32 = -32768;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const DISPATCH_MACH_SEND_DEAD: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_NORMAL: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_WARN: u32 = 2;
pub const DISPATCH_MEMORYPRESSURE_CRITICAL: u32 = 4;
pub const DISPATCH_PROC_EXIT: u32 = 2147483648;
pub const DISPATCH_PROC_FORK: u32 = 1073741824;
pub const DISPATCH_PROC_EXEC: u32 = 536870912;
pub const DISPATCH_PROC_SIGNAL: u32 = 134217728;
pub const DISPATCH_VNODE_DELETE: u32 = 1;
pub const DISPATCH_VNODE_WRITE: u32 = 2;
pub const DISPATCH_VNODE_EXTEND: u32 = 4;
pub const DISPATCH_VNODE_ATTRIB: u32 = 8;
pub const DISPATCH_VNODE_LINK: u32 = 16;
pub const DISPATCH_VNODE_RENAME: u32 = 32;
pub const DISPATCH_VNODE_REVOKE: u32 = 64;
pub const DISPATCH_VNODE_FUNLOCK: u32 = 256;
pub const DISPATCH_TIMER_STRICT: u32 = 1;
pub const DISPATCH_ONCE_INLINE_FASTPATH: u32 = 1;
pub const DISPATCH_IO_STREAM: u32 = 0;
pub const DISPATCH_IO_RANDOM: u32 = 1;
pub const DISPATCH_IO_STOP: u32 = 1;
pub const DISPATCH_IO_STRICT_INTERVAL: u32 = 1;
pub const __COREFOUNDATION_CFSET__: u32 = 1;
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__: u32 = 1;
pub const __COREFOUNDATION_CFTREE__: u32 = 1;
pub const __COREFOUNDATION_CFURLACCESS__: u32 = 1;
pub const __COREFOUNDATION_CFUUID__: u32 = 1;
pub const __COREFOUNDATION_CFUTILITIES__: u32 = 1;
pub const __COREFOUNDATION_CFBUNDLE__: u32 = 1;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const __COREFOUNDATION_CFMESSAGEPORT__: u32 = 1;
pub const __COREFOUNDATION_CFPLUGIN__: u32 = 1;
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE: u32 = 1;
pub const __COREFOUNDATION_CFMACHPORT__: u32 = 1;
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFURLENUMERATOR__: u32 = 1;
pub const __COREFOUNDATION_CFFILESECURITY__: u32 = 1;
pub const KAUTH_GUID_SIZE: u32 = 16;
pub const KAUTH_NTSID_MAX_AUTHORITIES: u32 = 16;
pub const KAUTH_NTSID_HDRSIZE: u32 = 8;
pub const KAUTH_EXTLOOKUP_SUCCESS: u32 = 0;
pub const KAUTH_EXTLOOKUP_BADRQ: u32 = 1;
pub const KAUTH_EXTLOOKUP_FAILURE: u32 = 2;
pub const KAUTH_EXTLOOKUP_FATAL: u32 = 3;
pub const KAUTH_EXTLOOKUP_INPROG: u32 = 100;
pub const KAUTH_EXTLOOKUP_VALID_UID: u32 = 1;
pub const KAUTH_EXTLOOKUP_VALID_UGUID: u32 = 2;
pub const KAUTH_EXTLOOKUP_VALID_USID: u32 = 4;
pub const KAUTH_EXTLOOKUP_VALID_GID: u32 = 8;
pub const KAUTH_EXTLOOKUP_VALID_GGUID: u32 = 16;
pub const KAUTH_EXTLOOKUP_VALID_GSID: u32 = 32;
pub const KAUTH_EXTLOOKUP_WANT_UID: u32 = 64;
pub const KAUTH_EXTLOOKUP_WANT_UGUID: u32 = 128;
pub const KAUTH_EXTLOOKUP_WANT_USID: u32 = 256;
pub const KAUTH_EXTLOOKUP_WANT_GID: u32 = 512;
pub const KAUTH_EXTLOOKUP_WANT_GGUID: u32 = 1024;
pub const KAUTH_EXTLOOKUP_WANT_GSID: u32 = 2048;
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP: u32 = 4096;
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP: u32 = 8192;
pub const KAUTH_EXTLOOKUP_ISMEMBER: u32 = 16384;
pub const KAUTH_EXTLOOKUP_VALID_PWNAM: u32 = 32768;
pub const KAUTH_EXTLOOKUP_WANT_PWNAM: u32 = 65536;
pub const KAUTH_EXTLOOKUP_VALID_GRNAM: u32 = 131072;
pub const KAUTH_EXTLOOKUP_WANT_GRNAM: u32 = 262144;
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS: u32 = 524288;
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS: u32 = 1048576;
pub const KAUTH_EXTLOOKUP_REGISTER: u32 = 0;
pub const KAUTH_EXTLOOKUP_RESULT: u32 = 1;
pub const KAUTH_EXTLOOKUP_WORKER: u32 = 2;
pub const KAUTH_EXTLOOKUP_DEREGISTER: u32 = 4;
pub const KAUTH_GET_CACHE_SIZES: u32 = 8;
pub const KAUTH_SET_CACHE_SIZES: u32 = 16;
pub const KAUTH_CLEAR_CACHES: u32 = 32;
pub const IDENTITYSVC_ENTITLEMENT: &[u8; 30] = b"com.apple.private.identitysvc\0";
pub const KAUTH_ACE_KINDMASK: u32 = 15;
pub const KAUTH_ACE_PERMIT: u32 = 1;
pub const KAUTH_ACE_DENY: u32 = 2;
pub const KAUTH_ACE_AUDIT: u32 = 3;
pub const KAUTH_ACE_ALARM: u32 = 4;
pub const KAUTH_ACE_INHERITED: u32 = 16;
pub const KAUTH_ACE_FILE_INHERIT: u32 = 32;
pub const KAUTH_ACE_DIRECTORY_INHERIT: u32 = 64;
pub const KAUTH_ACE_LIMIT_INHERIT: u32 = 128;
pub const KAUTH_ACE_ONLY_INHERIT: u32 = 256;
pub const KAUTH_ACE_SUCCESS: u32 = 512;
pub const KAUTH_ACE_FAILURE: u32 = 1024;
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS: u32 = 480;
pub const KAUTH_ACE_GENERIC_ALL: u32 = 2097152;
pub const KAUTH_ACE_GENERIC_EXECUTE: u32 = 4194304;
pub const KAUTH_ACE_GENERIC_WRITE: u32 = 8388608;
pub const KAUTH_ACE_GENERIC_READ: u32 = 16777216;
pub const KAUTH_ACL_MAX_ENTRIES: u32 = 128;
pub const KAUTH_ACL_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_ACL_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_ACL_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_MAGIC: u32 = 19710317;
pub const KAUTH_FILESEC_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_FILESEC_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_FILESEC_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_XATTR: &[u8; 26] = b"com.apple.system.Security\0";
pub const KAUTH_ENDIAN_HOST: u32 = 1;
pub const KAUTH_ENDIAN_DISK: u32 = 2;
pub const KAUTH_VNODE_READ_DATA: u32 = 2;
pub const KAUTH_VNODE_LIST_DIRECTORY: u32 = 2;
pub const KAUTH_VNODE_WRITE_DATA: u32 = 4;
pub const KAUTH_VNODE_ADD_FILE: u32 = 4;
pub const KAUTH_VNODE_EXECUTE: u32 = 8;
pub const KAUTH_VNODE_SEARCH: u32 = 8;
pub const KAUTH_VNODE_DELETE: u32 = 16;
pub const KAUTH_VNODE_APPEND_DATA: u32 = 32;
pub const KAUTH_VNODE_ADD_SUBDIRECTORY: u32 = 32;
pub const KAUTH_VNODE_DELETE_CHILD: u32 = 64;
pub const KAUTH_VNODE_READ_ATTRIBUTES: u32 = 128;
pub const KAUTH_VNODE_WRITE_ATTRIBUTES: u32 = 256;
pub const KAUTH_VNODE_READ_EXTATTRIBUTES: u32 = 512;
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const KAUTH_VNODE_READ_SECURITY: u32 = 2048;
pub const KAUTH_VNODE_WRITE_SECURITY: u32 = 4096;
pub const KAUTH_VNODE_TAKE_OWNERSHIP: u32 = 8192;
pub const KAUTH_VNODE_CHANGE_OWNER: u32 = 8192;
pub const KAUTH_VNODE_SYNCHRONIZE: u32 = 1048576;
pub const KAUTH_VNODE_LINKTARGET: u32 = 33554432;
pub const KAUTH_VNODE_CHECKIMMUTABLE: u32 = 67108864;
pub const KAUTH_VNODE_ACCESS: u32 = 2147483648;
pub const KAUTH_VNODE_NOIMMUTABLE: u32 = 1073741824;
pub const KAUTH_VNODE_SEARCHBYANYONE: u32 = 536870912;
pub const KAUTH_VNODE_GENERIC_READ_BITS: u32 = 2690;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS: u32 = 5492;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS: u32 = 8;
pub const KAUTH_VNODE_GENERIC_ALL_BITS: u32 = 8190;
pub const KAUTH_VNODE_WRITE_RIGHTS: u32 = 100676980;
pub const __DARWIN_ACL_READ_DATA: u32 = 2;
pub const __DARWIN_ACL_LIST_DIRECTORY: u32 = 2;
pub const __DARWIN_ACL_WRITE_DATA: u32 = 4;
pub const __DARWIN_ACL_ADD_FILE: u32 = 4;
pub const __DARWIN_ACL_EXECUTE: u32 = 8;
pub const __DARWIN_ACL_SEARCH: u32 = 8;
pub const __DARWIN_ACL_DELETE: u32 = 16;
pub const __DARWIN_ACL_APPEND_DATA: u32 = 32;
pub const __DARWIN_ACL_ADD_SUBDIRECTORY: u32 = 32;
pub const __DARWIN_ACL_DELETE_CHILD: u32 = 64;
pub const __DARWIN_ACL_READ_ATTRIBUTES: u32 = 128;
pub const __DARWIN_ACL_WRITE_ATTRIBUTES: u32 = 256;
pub const __DARWIN_ACL_READ_EXTATTRIBUTES: u32 = 512;
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const __DARWIN_ACL_READ_SECURITY: u32 = 2048;
pub const __DARWIN_ACL_WRITE_SECURITY: u32 = 4096;
pub const __DARWIN_ACL_CHANGE_OWNER: u32 = 8192;
pub const __DARWIN_ACL_SYNCHRONIZE: u32 = 1048576;
pub const __DARWIN_ACL_EXTENDED_ALLOW: u32 = 1;
pub const __DARWIN_ACL_EXTENDED_DENY: u32 = 2;
pub const __DARWIN_ACL_ENTRY_INHERITED: u32 = 16;
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT: u32 = 32;
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT: u32 = 64;
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT: u32 = 128;
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT: u32 = 256;
pub const __DARWIN_ACL_FLAG_NO_INHERIT: u32 = 131072;
pub const ACL_MAX_ENTRIES: u32 = 128;
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__: u32 = 1;
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__: u32 = 1;
pub const __COREFOUNDATION_CFUSERNOTIFICATION__: u32 = 1;
pub const __COREFOUNDATION_CFXMLNODE__: u32 = 1;
pub const __CFXMLNode_DEPRECATION_MSG: &[u8; 83] =
    b"CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const __COREFOUNDATION_CFXMLPARSER__: u32 = 1;
pub const __CFXMLParser_DEPRECATION_MSG: &[u8; 85] =
    b"CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const __COREFOUNDATION_CFPLUGINCOM__: u32 = 1;
pub const SEVERITY_SUCCESS: u32 = 0;
pub const SEVERITY_ERROR: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_PERMANENT: u32 = 128;
pub const VM_FLAGS_TPRO: u32 = 4096;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278669471;
pub const VM_FLAGS_USER_MAP: u32 = 4288106655;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG: u32 = 2;
pub const VM_LEDGER_FLAGS: u32 = 3;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PGUARD: u32 = 13;
pub const VM_MEMORY_MALLOC_PROB_GUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_COLORSYNC: u32 = 104;
pub const VM_MEMORY_BTINFO: u32 = 105;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const VM_MEMORY_COUNT: u32 = 256;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MAIN_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_IOCOMPRESSIONSTATS_PORT: u32 = 32;
pub const HOST_MEMORY_ERROR_PORT: u32 = 33;
pub const HOST_MAX_SPECIAL_PORT: u32 = 33;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const PPNUM_MAX: u32 = 4294967295;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_I386_INVOP: u32 = 1;
pub const EXC_I386_DIV: u32 = 1;
pub const EXC_I386_INTO: u32 = 2;
pub const EXC_I386_NOEXT: u32 = 3;
pub const EXC_I386_EXTOVR: u32 = 4;
pub const EXC_I386_EXTERR: u32 = 5;
pub const EXC_I386_EMERR: u32 = 6;
pub const EXC_I386_BOUND: u32 = 7;
pub const EXC_I386_SSEEXTERR: u32 = 8;
pub const EXC_I386_SGL: u32 = 1;
pub const EXC_I386_BPT: u32 = 2;
pub const EXC_I386_DIVERR: u32 = 0;
pub const EXC_I386_SGLSTP: u32 = 1;
pub const EXC_I386_NMIFLT: u32 = 2;
pub const EXC_I386_BPTFLT: u32 = 3;
pub const EXC_I386_INTOFLT: u32 = 4;
pub const EXC_I386_BOUNDFLT: u32 = 5;
pub const EXC_I386_INVOPFLT: u32 = 6;
pub const EXC_I386_NOEXTFLT: u32 = 7;
pub const EXC_I386_DBLFLT: u32 = 8;
pub const EXC_I386_EXTOVRFLT: u32 = 9;
pub const EXC_I386_INVTSSFLT: u32 = 10;
pub const EXC_I386_SEGNPFLT: u32 = 11;
pub const EXC_I386_STKFLT: u32 = 12;
pub const EXC_I386_GPFLT: u32 = 13;
pub const EXC_I386_PGFLT: u32 = 14;
pub const EXC_I386_EXTERRFLT: u32 = 16;
pub const EXC_I386_ALIGNFLT: u32 = 17;
pub const EXC_I386_ENDPERR: u32 = 33;
pub const EXC_I386_ENOEXTFLT: u32 = 32;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const EXCEPTION_IDENTITY_PROTECTED: u32 = 4;
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED: u32 = 536870912;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3758096384;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const I386_THREAD_STATE_MAX: u32 = 614;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const FPC_IE: u32 = 1;
pub const FPC_IM: u32 = 1;
pub const FPC_DE: u32 = 2;
pub const FPC_DM: u32 = 2;
pub const FPC_ZE: u32 = 4;
pub const FPC_ZM: u32 = 4;
pub const FPC_OE: u32 = 8;
pub const FPC_OM: u32 = 8;
pub const FPC_UE: u32 = 16;
pub const FPC_PE: u32 = 32;
pub const FPC_PC: u32 = 768;
pub const FPC_PC_24: u32 = 0;
pub const FPC_PC_53: u32 = 512;
pub const FPC_PC_64: u32 = 768;
pub const FPC_RC: u32 = 3072;
pub const FPC_RC_RN: u32 = 0;
pub const FPC_RC_RD: u32 = 1024;
pub const FPC_RC_RU: u32 = 2048;
pub const FPC_RC_CHOP: u32 = 3072;
pub const FPC_IC: u32 = 4096;
pub const FPC_IC_PROJ: u32 = 0;
pub const FPC_IC_AFF: u32 = 4096;
pub const FPS_IE: u32 = 1;
pub const FPS_DE: u32 = 2;
pub const FPS_ZE: u32 = 4;
pub const FPS_OE: u32 = 8;
pub const FPS_UE: u32 = 16;
pub const FPS_PE: u32 = 32;
pub const FPS_SF: u32 = 64;
pub const FPS_ES: u32 = 128;
pub const FPS_C0: u32 = 256;
pub const FPS_C1: u32 = 512;
pub const FPS_C2: u32 = 1024;
pub const FPS_TOS: u32 = 14336;
pub const FPS_TOS_SHIFT: u32 = 11;
pub const FPS_C3: u32 = 16384;
pub const FPS_BUSY: u32 = 32768;
pub const FP_NO: u32 = 0;
pub const FP_SOFT: u32 = 1;
pub const FP_287: u32 = 2;
pub const FP_387: u32 = 3;
pub const FP_FXSR: u32 = 4;
pub const EFL_CF: u32 = 1;
pub const EFL_PF: u32 = 4;
pub const EFL_AF: u32 = 16;
pub const EFL_ZF: u32 = 64;
pub const EFL_SF: u32 = 128;
pub const EFL_TF: u32 = 256;
pub const EFL_IF: u32 = 512;
pub const EFL_DF: u32 = 1024;
pub const EFL_OF: u32 = 2048;
pub const EFL_IOPL: u32 = 12288;
pub const EFL_IOPL_KERNEL: u32 = 0;
pub const EFL_IOPL_USER: u32 = 12288;
pub const EFL_NT: u32 = 16384;
pub const EFL_RF: u32 = 65536;
pub const EFL_VM: u32 = 131072;
pub const EFL_AC: u32 = 262144;
pub const EFL_VIF: u32 = 524288;
pub const EFL_VIP: u32 = 1048576;
pub const EFL_ID: u32 = 2097152;
pub const EFL_CLR: u32 = 4294475816;
pub const EFL_SET: u32 = 2;
pub const EFL_USER_SET: u32 = 512;
pub const EFL_USER_CLEAR: u32 = 94208;
pub const i386_THREAD_STATE: u32 = 1;
pub const i386_FLOAT_STATE: u32 = 2;
pub const i386_EXCEPTION_STATE: u32 = 3;
pub const x86_THREAD_STATE32: u32 = 1;
pub const x86_FLOAT_STATE32: u32 = 2;
pub const x86_EXCEPTION_STATE32: u32 = 3;
pub const x86_THREAD_STATE64: u32 = 4;
pub const x86_FLOAT_STATE64: u32 = 5;
pub const x86_EXCEPTION_STATE64: u32 = 6;
pub const x86_THREAD_STATE: u32 = 7;
pub const x86_FLOAT_STATE: u32 = 8;
pub const x86_EXCEPTION_STATE: u32 = 9;
pub const x86_DEBUG_STATE32: u32 = 10;
pub const x86_DEBUG_STATE64: u32 = 11;
pub const x86_DEBUG_STATE: u32 = 12;
pub const THREAD_STATE_NONE: u32 = 13;
pub const x86_AVX_STATE32: u32 = 16;
pub const x86_AVX_STATE64: u32 = 17;
pub const x86_AVX_STATE: u32 = 18;
pub const x86_AVX512_STATE32: u32 = 19;
pub const x86_AVX512_STATE64: u32 = 20;
pub const x86_AVX512_STATE: u32 = 21;
pub const x86_PAGEIN_STATE: u32 = 22;
pub const x86_THREAD_FULL_STATE64: u32 = 23;
pub const x86_INSTRUCTION_STATE: u32 = 24;
pub const x86_LAST_BRANCH_STATE: u32 = 25;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const USER_CODE_SELECTOR: u32 = 23;
pub const USER_DATA_SELECTOR: u32 = 31;
pub const KERN_CODE_SELECTOR: u32 = 8;
pub const KERN_DATA_SELECTOR: u32 = 16;
pub const MACHINE_THREAD_STATE: u32 = 7;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_BASIC_INFO_64: u32 = 5;
pub const TASK_BASIC_INFO: u32 = 5;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_NONE: u32 = 0;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG: u32 = 1;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const THREAD_MAX_SPECIAL_PORT: u32 = 3;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const I386_PGBYTES: u32 = 4096;
pub const I386_PGSHIFT: u32 = 12;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const TASK_FLAVOR_MAX: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const THREAD_FLAVOR_MAX: u32 = 2;
pub const _MACH_INIT_: u32 = 1;
pub const NAME_SERVER_SLOT: u32 = 0;
pub const ENVIRONMENT_SLOT: u32 = 1;
pub const SERVICE_SLOT: u32 = 2;
pub const MACH_PORTS_SLOTS_USED: u32 = 3;
pub const IOKIT: u32 = 1;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const kIOReturnSuccess: u32 = 0;
pub const OSTYPES_K64_REV: u32 = 2;
pub const PRIIOByteCount: &[u8; 2] = b"u\0";
pub const IOPhysSize: u32 = 32;
pub const kIOKitBuildVersionKey: &[u8; 18] = b"IOKitBuildVersion\0";
pub const kIOKitDiagnosticsKey: &[u8; 17] = b"IOKitDiagnostics\0";
pub const kIORegistryPlanesKey: &[u8; 17] = b"IORegistryPlanes\0";
pub const kIOCatalogueKey: &[u8; 12] = b"IOCatalogue\0";
pub const kIOServicePlane: &[u8; 10] = b"IOService\0";
pub const kIOPowerPlane: &[u8; 8] = b"IOPower\0";
pub const kIODeviceTreePlane: &[u8; 13] = b"IODeviceTree\0";
pub const kIOAudioPlane: &[u8; 8] = b"IOAudio\0";
pub const kIOFireWirePlane: &[u8; 11] = b"IOFireWire\0";
pub const kIOUSBPlane: &[u8; 6] = b"IOUSB\0";
pub const kIORegistryEntryIDKey: &[u8; 18] = b"IORegistryEntryID\0";
pub const kIORegistryEntryPropertyKeysKey: &[u8; 28] = b"IORegistryEntryPropertyKeys\0";
pub const kIORegistryEntryAllowableSetPropertiesKey: &[u8; 38] =
    b"IORegistryEntryAllowableSetProperties\0";
pub const kIORegistryEntryDefaultLockingSetPropertiesKey: &[u8; 43] =
    b"IORegistryEntryDefaultLockingSetProperties\0";
pub const kIOServiceClass: &[u8; 10] = b"IOService\0";
pub const kIOResourcesClass: &[u8; 12] = b"IOResources\0";
pub const kIOClassKey: &[u8; 8] = b"IOClass\0";
pub const kIOProbeScoreKey: &[u8; 13] = b"IOProbeScore\0";
pub const kIOKitDebugKey: &[u8; 11] = b"IOKitDebug\0";
pub const kIOUserClassKey: &[u8; 12] = b"IOUserClass\0";
pub const kIOUserClassesKey: &[u8; 14] = b"IOUserClasses\0";
pub const kIOSupportedPropertiesKey: &[u8; 22] = b"IOSupportedProperties\0";
pub const kIOUserServicePropertiesKey: &[u8; 24] = b"IOUserServiceProperties\0";
pub const kIOProviderClassKey: &[u8; 16] = b"IOProviderClass\0";
pub const kIONameMatchKey: &[u8; 12] = b"IONameMatch\0";
pub const kIOPropertyMatchKey: &[u8; 16] = b"IOPropertyMatch\0";
pub const kIOPropertyExistsMatchKey: &[u8; 22] = b"IOPropertyExistsMatch\0";
pub const kIOPathMatchKey: &[u8; 12] = b"IOPathMatch\0";
pub const kIOLocationMatchKey: &[u8; 16] = b"IOLocationMatch\0";
pub const kIOParentMatchKey: &[u8; 14] = b"IOParentMatch\0";
pub const kIOResourceMatchKey: &[u8; 16] = b"IOResourceMatch\0";
pub const kIOResourceMatchedKey: &[u8; 18] = b"IOResourceMatched\0";
pub const kIOMatchedServiceCountKey: &[u8; 27] = b"IOMatchedServiceCountMatch\0";
pub const kIONameMatchedKey: &[u8; 14] = b"IONameMatched\0";
pub const kIOMatchCategoryKey: &[u8; 16] = b"IOMatchCategory\0";
pub const kIODefaultMatchCategoryKey: &[u8; 23] = b"IODefaultMatchCategory\0";
pub const kIOMatchedPersonalityKey: &[u8; 21] = b"IOMatchedPersonality\0";
pub const kIORematchPersonalityKey: &[u8; 21] = b"IORematchPersonality\0";
pub const kIORematchCountKey: &[u8; 15] = b"IORematchCount\0";
pub const kIODEXTMatchCountKey: &[u8; 17] = b"IODEXTMatchCount\0";
pub const kIOUserClientEntitlementsKey: &[u8; 25] = b"IOUserClientEntitlements\0";
pub const kIOServiceDEXTEntitlementsKey: &[u8; 26] = b"IOServiceDEXTEntitlements\0";
pub const kIODriverKitEntitlementKey: &[u8; 30] = b"com.apple.developer.driverkit\0";
pub const kIODriverKitUserClientEntitlementsKey: &[u8; 48] =
    b"com.apple.developer.driverkit.userclient-access\0";
pub const kIODriverKitRequiredEntitlementsKey: &[u8; 42] =
    b"com.apple.private.driverkit.driver-access\0";
pub const kIODriverKitTestDriverEntitlementKey: &[u8; 40] =
    b"com.apple.private.driverkit.test-driver\0";
pub const kIODriverKitUserClientEntitlementAllowAnyKey: &[u8; 58] =
    b"com.apple.developer.driverkit.allow-any-userclient-access\0";
pub const kIODriverKitUserClientEntitlementAdministratorKey: &[u8; 44] =
    b"com.apple.developer.driverkit.administrator\0";
pub const kIODriverKitUserClientEntitlementCommunicatesWithDriversKey: &[u8; 56] =
    b"com.apple.developer.driverkit.communicates-with-drivers\0";
pub const kIODriverKitUserClientEntitlementAllowThirdPartyUserClientsKey: &[u8; 60] =
    b"com.apple.developer.driverkit.allow-third-party-userclients\0";
pub const kIODriverKitUSBTransportEntitlementKey: &[u8; 44] =
    b"com.apple.developer.driverkit.transport.usb\0";
pub const kIODriverKitHIDTransportEntitlementKey: &[u8; 44] =
    b"com.apple.developer.driverkit.transport.hid\0";
pub const kIODriverKitHIDFamilyDeviceEntitlementKey: &[u8; 48] =
    b"com.apple.developer.driverkit.family.hid.device\0";
pub const kIODriverKitHIDFamilyEventServiceEntitlementKey: &[u8; 54] =
    b"com.apple.developer.driverkit.family.hid.eventservice\0";
pub const kIODriverKitTransportBuiltinEntitlementKey: &[u8; 38] =
    b"com.apple.developer.driverkit.builtin\0";
pub const kIONVRAMReadAccessKey: &[u8; 42] = b"com.apple.private.iokit.nvram-read-access\0";
pub const kIONVRAMWriteAccessKey: &[u8; 43] = b"com.apple.private.iokit.nvram-write-access\0";
pub const kIOResourcesSetPropertyKey: &[u8; 48] =
    b"com.apple.private.iokit.ioresources.setproperty\0";
pub const kIONVRAMSystemAllowKey: &[u8; 43] = b"com.apple.private.iokit.system-nvram-allow\0";
pub const kIOMatchDeferKey: &[u8; 13] = b"IOMatchDefer\0";
pub const kIOAllCPUInitializedKey: &[u8; 20] = b"IOAllCPUInitialized\0";
pub const kIOUserClientClassKey: &[u8; 18] = b"IOUserClientClass\0";
pub const kIOMapperIDKey: &[u8; 11] = b"IOMapperID\0";
pub const kIOUserClientCrossEndianKey: &[u8; 24] = b"IOUserClientCrossEndian\0";
pub const kIOUserClientCrossEndianCompatibleKey: &[u8; 34] = b"IOUserClientCrossEndianCompatible\0";
pub const kIOUserClientSharedInstanceKey: &[u8; 27] = b"IOUserClientSharedInstance\0";
pub const kIOUserClientDefaultLockingKey: &[u8; 27] = b"IOUserClientDefaultLocking\0";
pub const kIOUserClientDefaultLockingSetPropertiesKey: &[u8; 40] =
    b"IOUserClientDefaultLockingSetProperties\0";
pub const kIOUserClientDefaultLockingSingleThreadExternalMethodKey: &[u8; 53] =
    b"IOUserClientDefaultLockingSingleThreadExternalMethod\0";
pub const kIOUserClientCreatorKey: &[u8; 20] = b"IOUserClientCreator\0";
pub const kIOUserServerCDHashKey: &[u8; 19] = b"IOUserServerCDHash\0";
pub const kIOUserUserClientKey: &[u8; 17] = b"IOUserUserClient\0";
pub const kIOUserServerOneProcessKey: &[u8; 23] = b"IOUserServerOneProcess\0";
pub const kIOUserServerPreserveUserspaceRebootKey: &[u8; 36] =
    b"IOUserServerPreserveUserspaceReboot\0";
pub const kIOPublishNotification: &[u8; 17] = b"IOServicePublish\0";
pub const kIOFirstPublishNotification: &[u8; 22] = b"IOServiceFirstPublish\0";
pub const kIOMatchedNotification: &[u8; 17] = b"IOServiceMatched\0";
pub const kIOFirstMatchNotification: &[u8; 20] = b"IOServiceFirstMatch\0";
pub const kIOTerminatedNotification: &[u8; 19] = b"IOServiceTerminate\0";
pub const kIOWillTerminateNotification: &[u8; 23] = b"IOServiceWillTerminate\0";
pub const kIOGeneralInterest: &[u8; 18] = b"IOGeneralInterest\0";
pub const kIOBusyInterest: &[u8; 15] = b"IOBusyInterest\0";
pub const kIOAppPowerStateInterest: &[u8; 24] = b"IOAppPowerStateInterest\0";
pub const kIOPriorityPowerStateInterest: &[u8; 29] = b"IOPriorityPowerStateInterest\0";
pub const kIOPlatformDeviceMessageKey: &[u8; 24] = b"IOPlatformDeviceMessage\0";
pub const kIOCFPlugInTypesKey: &[u8; 16] = b"IOCFPlugInTypes\0";
pub const kIOCompatibilityMatchKey: &[u8; 21] = b"IOCompatibilityMatch\0";
pub const kIOCompatibilityPropertiesKey: &[u8; 26] = b"IOCompatibilityProperties\0";
pub const kIOPathKey: &[u8; 7] = b"IOPath\0";
pub const kIOCommandPoolSizeKey: &[u8; 18] = b"IOCommandPoolSize\0";
pub const kIOMaximumPriorityCountKey: &[u8; 23] = b"IOMaximumPriorityCount\0";
pub const kIOMaximumBlockCountReadKey: &[u8; 24] = b"IOMaximumBlockCountRead\0";
pub const kIOMaximumBlockCountWriteKey: &[u8; 25] = b"IOMaximumBlockCountWrite\0";
pub const kIOMaximumByteCountReadKey: &[u8; 23] = b"IOMaximumByteCountRead\0";
pub const kIOMaximumByteCountWriteKey: &[u8; 24] = b"IOMaximumByteCountWrite\0";
pub const kIOMaximumSegmentCountReadKey: &[u8; 26] = b"IOMaximumSegmentCountRead\0";
pub const kIOMaximumSegmentCountWriteKey: &[u8; 27] = b"IOMaximumSegmentCountWrite\0";
pub const kIOMaximumSegmentByteCountReadKey: &[u8; 30] = b"IOMaximumSegmentByteCountRead\0";
pub const kIOMaximumSegmentByteCountWriteKey: &[u8; 31] = b"IOMaximumSegmentByteCountWrite\0";
pub const kIOMinimumSegmentAlignmentByteCountKey: &[u8; 35] =
    b"IOMinimumSegmentAlignmentByteCount\0";
pub const kIOMaximumSegmentAddressableBitCountKey: &[u8; 36] =
    b"IOMaximumSegmentAddressableBitCount\0";
pub const kIOMinimumSaturationByteCountKey: &[u8; 29] = b"IOMinimumSaturationByteCount\0";
pub const kIOMaximumSwapWriteKey: &[u8; 19] = b"IOMaximumSwapWrite\0";
pub const kIOIconKey: &[u8; 7] = b"IOIcon\0";
pub const kIOBundleResourceFileKey: &[u8; 21] = b"IOBundleResourceFile\0";
pub const kIOBusBadgeKey: &[u8; 11] = b"IOBusBadge\0";
pub const kIODeviceIconKey: &[u8; 13] = b"IODeviceIcon\0";
pub const kIOPlatformSerialNumberKey: &[u8; 23] = b"IOPlatformSerialNumber\0";
pub const kIOPlatformUUIDKey: &[u8; 15] = b"IOPlatformUUID\0";
pub const kIONVRAMBootArgsKey: &[u8; 10] = b"boot-args\0";
pub const kIONVRAMDeletePropertyKey: &[u8; 24] = b"IONVRAM-DELETE-PROPERTY\0";
pub const kIONVRAMSyncNowPropertyKey: &[u8; 25] = b"IONVRAM-SYNCNOW-PROPERTY\0";
pub const kIONVRAMActivateCSRConfigPropertyKey: &[u8; 24] = b"IONVRAM-ARMCSR-PROPERTY\0";
pub const kIODTNVRAMPanicInfoKey: &[u8; 16] = b"aapl,panic-info\0";
pub const kIOBootDeviceKey: &[u8; 13] = b"IOBootDevice\0";
pub const kIOBootDevicePathKey: &[u8; 17] = b"IOBootDevicePath\0";
pub const kIOBootDeviceSizeKey: &[u8; 17] = b"IOBootDeviceSize\0";
pub const kOSBuildVersionKey: &[u8; 17] = b"OS Build Version\0";
pub const kIOStateNotificationItemCreateKey: &[u8; 41] =
    b"com.apple.iokit.statenotification.create\0";
pub const kIOStateNotificationItemSetKey: &[u8; 38] = b"com.apple.iokit.statenotification.set\0";
pub const kIOStateNotificationItemCopyKey: &[u8; 39] = b"com.apple.iokit.statenotification.copy\0";
pub const kIOStateNotificationNameKey: &[u8; 39] = b"com.apple.iokit.statenotification.name\0";
pub const kIOStateNotificationEntitlementSetKey: &[u8; 50] =
    b"com.apple.iokit.statenotification.entitlement-set\0";
pub const kIOStateNotificationEntitlementGetKey: &[u8; 50] =
    b"com.apple.iokit.statenotification.entitlement-get\0";
pub const kIOSystemStateClamshellKey: &[u8; 29] = b"com.apple.iokit.pm.clamshell\0";
pub const kIOSystemStateSleepDescriptionKey: &[u8; 36] = b"com.apple.iokit.pm.sleepdescription\0";
pub const kIOSystemStateSleepDescriptionReasonKey: &[u8; 31] = b"com.apple.iokit.pm.sleepreason\0";
pub const kIOSystemStateSleepDescriptionHibernateStateKey: &[u8; 34] =
    b"com.apple.iokit.pm.hibernatestate\0";
pub const kIOSystemStateWakeDescriptionKey: &[u8; 35] = b"com.apple.iokit.pm.wakedescription\0";
pub const kIOSystemStateWakeDescriptionWakeReasonKey: &[u8; 30] =
    b"com.apple.iokit.pm.wakereason\0";
pub const kIOSystemStateHaltDescriptionKey: &[u8; 35] = b"com.apple.iokit.pm.haltdescription\0";
pub const kIOSystemStateHaltDescriptionHaltStateKey: &[u8; 29] = b"com.apple.iokit.pm.haltstate\0";
pub const kIOSystemStatePowerSourceDescriptionKey: &[u8; 42] =
    b"com.apple.iokit.pm.powersourcedescription\0";
pub const kIOSystemStatePowerSourceDescriptionACAttachedKey: &[u8; 30] =
    b"com.apple.iokit.pm.acattached\0";
pub const kIOUSB30Bitrate5Gbps: u64 = 5000000000;
pub const kIOUSB30Bitrate10Gbps: u64 = 10000000000;
pub const kIOUSB32Bitrate20Gbps: u64 = 20000000000;
pub const kIOUSBTransportDextEntitlement: &[u8; 44] =
    b"com.apple.developer.driverkit.transport.usb\0";
pub const kIOUSBHostVMEntitlement: &[u8; 27] = b"com.apple.vm.device-access\0";
pub const kIOUSBHostControllerInterfaceEntitlement: &[u8; 50] =
    b"com.apple.developer.usb.host-controller-interface\0";
pub const kIOUSBBillboardEntitlement: &[u8; 34] = b"com.apple.developer.usb.billboard\0";
pub const kUSBHostMatchingPropertySpeed: &[u8; 9] = b"USBSpeed\0";
pub const kUSBHostMatchingPropertyPortType: &[u8; 12] = b"USBPortType\0";
pub const kUSBHostMatchingPropertyVendorID: &[u8; 9] = b"idVendor\0";
pub const kUSBHostMatchingPropertyProductID: &[u8; 10] = b"idProduct\0";
pub const kUSBHostMatchingPropertyProductIDMask: &[u8; 14] = b"idProductMask\0";
pub const kUSBHostMatchingPropertyProductIDArray: &[u8; 15] = b"idProductArray\0";
pub const kUSBHostMatchingPropertyDeviceClass: &[u8; 13] = b"bDeviceClass\0";
pub const kUSBHostMatchingPropertyDeviceSubClass: &[u8; 16] = b"bDeviceSubClass\0";
pub const kUSBHostMatchingPropertyDeviceProtocol: &[u8; 16] = b"bDeviceProtocol\0";
pub const kUSBHostMatchingPropertyDeviceReleaseNumber: &[u8; 10] = b"bcdDevice\0";
pub const kUSBHostMatchingPropertyConfigurationValue: &[u8; 20] = b"bConfigurationValue\0";
pub const kUSBHostMatchingPropertyInterfaceClass: &[u8; 16] = b"bInterfaceClass\0";
pub const kUSBHostMatchingPropertyInterfaceSubClass: &[u8; 19] = b"bInterfaceSubClass\0";
pub const kUSBHostMatchingPropertyInterfaceProtocol: &[u8; 19] = b"bInterfaceProtocol\0";
pub const kUSBHostMatchingPropertyInterfaceNumber: &[u8; 17] = b"bInterfaceNumber\0";
pub const kUSBHostPropertyLocationID: &[u8; 11] = b"locationID\0";
pub const kUSBHostPropertyDebugOptions: &[u8; 17] = b"kUSBDebugOptions\0";
pub const kUSBHostPropertyWakePowerSupply: &[u8; 20] = b"kUSBWakePowerSupply\0";
pub const kUSBHostPropertySleepPowerSupply: &[u8; 21] = b"kUSBSleepPowerSupply\0";
pub const kUSBHostPropertyWakePortCurrentLimit: &[u8; 25] = b"kUSBWakePortCurrentLimit\0";
pub const kUSBHostPropertySleepPortCurrentLimit: &[u8; 26] = b"kUSBSleepPortCurrentLimit\0";
pub const kUSBHostPropertyFailedRemoteWake: &[u8; 21] = b"kUSBFailedRemoteWake\0";
pub const kUSBHostPropertyBusCurrentPoolID: &[u8; 20] = b"UsbBusCurrentPoolID\0";
pub const kUSBHostPropertySmcBusCurrentPoolID: &[u8; 23] = b"UsbSmcBusCurrentPoolID\0";
pub const kUSBHostPropertyForcePower: &[u8; 14] = b"UsbForcePower\0";
pub const kUSBHostPropertyForceLinkSpeed: &[u8; 13] = b"UsbLinkSpeed\0";
pub const kUSBHostPropertyForceHardwareException: &[u8; 21] = b"UsbHardwareException\0";
pub const kUSBHostPropertyAllowSoftRetry: &[u8; 18] = b"UsbAllowSoftRetry\0";
pub const kUSBHostPropertyExclusiveOwner: &[u8; 18] = b"UsbExclusiveOwner\0";
pub const kUSBHostUserClientPropertyEntitlementRequired: &[u8; 33] =
    b"UsbUserClientEntitlementRequired\0";
pub const kUSBHostUserClientPropertyEnableReset: &[u8; 25] = b"UsbUserClientEnableReset\0";
pub const kUSBHostUserClientPropertyEnableDataToggleReset: &[u8; 35] =
    b"UsbUserClientEnableDataToggleReset\0";
pub const kUSBHostDevicePropertyVendorString: &[u8; 17] = b"kUSBVendorString\0";
pub const kUSBHostDevicePropertySerialNumberString: &[u8; 23] = b"kUSBSerialNumberString\0";
pub const kUSBHostDevicePropertyContainerID: &[u8; 16] = b"kUSBContainerID\0";
pub const kUSBHostDevicePropertyFailedRequestedPower: &[u8; 25] = b"kUSBFailedRequestedPower\0";
pub const kUSBHostDevicePropertyResumeRecoveryTime: &[u8; 23] = b"kUSBResumeRecoveryTime\0";
pub const kUSBHostDevicePropertyPreferredConfiguration: &[u8; 27] = b"kUSBPreferredConfiguration\0";
pub const kUSBHostDevicePropertyPreferredRecoveryConfiguration: &[u8; 35] =
    b"kUSBPreferredRecoveryConfiguration\0";
pub const kUSBHostDevicePropertyCurrentConfiguration: &[u8; 25] = b"kUSBCurrentConfiguration\0";
pub const kUSBHostDevicePropertyRemoteWakeOverride: &[u8; 23] = b"kUSBRemoteWakeOverride\0";
pub const kUSBHostDevicePropertyConfigurationDescriptorOverride: &[u8; 36] =
    b"kUSBConfigurationDescriptorOverride\0";
pub const kUSBHostDevicePropertyDeviceDescriptorOverride: &[u8; 29] =
    b"kUSBDeviceDescriptorOverride\0";
pub const kUSBHostDevicePropertyConfigurationCurrentOverride: &[u8; 33] =
    b"kUSBConfigurationCurrentOverride\0";
pub const kUSBHostDevicePropertyResetDurationOverride: &[u8; 26] = b"kUSBResetDurationOverride\0";
pub const kUSBHostDevicePropertyDesiredChargingCurrent: &[u8; 27] = b"kUSBDesiredChargingCurrent\0";
pub const kUSBHostDevicePropertyDescriptorOverride: &[u8; 23] = b"kUSBDescriptorOverride\0";
pub const kUSBHostDescriptorOverrideVendorStringIndex: &[u8; 39] =
    b"UsbDescriptorOverrideVendorStringIndex\0";
pub const kUSBHostDescriptorOverrideProductStringIndex: &[u8; 40] =
    b"UsbDescriptorOverrideProductStringIndex\0";
pub const kUSBHostDescriptorOverrideSerialNumberStringIndex: &[u8; 45] =
    b"UsbDescriptorOverrideSerialNumberStringIndex\0";
pub const kUSBHostDevicePropertyDeviceECID: &[u8; 15] = b"kUSBDeviceECID\0";
pub const kUSBHostDevicePropertyEnableLPM: &[u8; 23] = b"UsbLinkPowerManagement\0";
pub const kUSBHostDevicePropertyDisablePortLPM: &[u8; 29] = b"kUSBHostDeviceDisablePortLPM\0";
pub const kUSBHostDevicePropertyStreamsSupported: &[u8; 20] = b"UsbStreamsSupported\0";
pub const kUSBHostDevicePropertyEnumerationState: &[u8; 20] = b"UsbEnumerationState\0";
pub const kUSBHostDevicePropertySignature: &[u8; 19] = b"UsbDeviceSignature\0";
pub const kUSBHostDevicePropertyTunnel: &[u8; 10] = b"UsbTunnel\0";
pub const kUSBHostBillboardDevicePropertyNumberOfAlternateModes: &[u8; 24] =
    b"bNumberOfAlternateModes\0";
pub const kUSBHostBillboardDevicePropertyPreferredAlternateMode: &[u8; 24] =
    b"bPreferredAlternateMode\0";
pub const kUSBHostBillboardDevicePropertyVCONNPower: &[u8; 11] = b"VCONNPower\0";
pub const kUSBHostBillboardDevicePropertyConfigured: &[u8; 13] = b"bmConfigured\0";
pub const kUSBHostBillboardDevicePropertyAdditionalFailureInfo: &[u8; 22] =
    b"bAdditonalFailureInfo\0";
pub const kUSBHostBillboardDevicePropertyBcdVersion: &[u8; 11] = b"BcdVersion\0";
pub const kUSBHostBillboardDevicePropertySVID: &[u8; 6] = b"wSVID\0";
pub const kUSBHostBillboardDevicePropertyAlternateMode: &[u8; 15] = b"bAlternateMode\0";
pub const kUSBHostBillboardDevicePropertyAlternateModeStringIndex: &[u8; 21] =
    b"iAlternateModeString\0";
pub const kUSBHostBillboardDevicePropertyAlternateModeString: &[u8; 20] = b"AlternateModeString\0";
pub const kUSBHostBillboardDevicePropertyAddtionalInfoURLIndex: &[u8; 18] = b"iAddtionalInfoURL\0";
pub const kUSBHostBillboardDevicePropertyAddtionalInfoURL: &[u8; 17] = b"AddtionalInfoURL\0";
pub const kUSBHostBillboardDevicePropertydwAlternateModeVdo: &[u8; 19] = b"dwAlternateModeVdo\0";
pub const kUSBHostInterfacePropertyAlternateSetting: &[u8; 18] = b"bAlternateSetting\0";
pub const kUSBHostPortPropertyStatus: &[u8; 12] = b"port-status\0";
pub const kUSBHostPortPropertyOvercurrent: &[u8; 23] = b"UsbHostPortOvercurrent\0";
pub const kUSBHostPortPropertyPortNumber: &[u8; 5] = b"port\0";
pub const kUSBHostPortPropertyRemovable: &[u8; 10] = b"removable\0";
pub const kUSBHostPortPropertyTestMode: &[u8; 13] = b"kUSBTestMode\0";
pub const kUSBHostPortPropertyUsb3ComplianceMode: &[u8; 39] =
    b"kUSBHostPortPropertyUsb3ComplianceMode\0";
pub const kUSBHostPortPropertySimulateInterrupt: &[u8; 22] = b"kUSBSimulateInterrupt\0";
pub const kUSBHostPortPropertyBusCurrentAllocation: &[u8; 25] = b"kUSBBusCurrentAllocation\0";
pub const kUSBHostPortPropertyBusCurrentSleepAllocation: &[u8; 30] =
    b"kUSBBusCurrentSleepAllocation\0";
pub const kUSBHostPortPropertyConnectable: &[u8; 15] = b"UsbConnectable\0";
pub const kUSBHostPortPropertyConnectorType: &[u8; 13] = b"UsbConnector\0";
pub const kUSBHostPortPropertyMux: &[u8; 7] = b"UsbMux\0";
pub const kUSBHostPortPropertyCompanionIndex: &[u8; 19] = b"kUSBCompanionIndex\0";
pub const kUSBHostPortPropertyDisconnectInterval: &[u8; 23] = b"kUSBDisconnectInterval\0";
pub const kUSBHostPortPropertyUsbCPortNumber: &[u8; 15] = b"UsbCPortNumber\0";
pub const kUSBHostPortPropertyCompanionPortNumber: &[u8; 23] = b"UsbCompanionPortNumber\0";
pub const kUSBHostPortPropertyPowerSource: &[u8; 15] = b"UsbPowerSource\0";
pub const kUSBHostPortPropertyUSB3Mode: &[u8; 9] = b"Usb3Mode\0";
pub const kUSBHostPortPropertyExternalDeviceResetController: &[u8; 42] =
    b"kUSBHostPortExternalDeviceResetController\0";
pub const kUSBHostPortPropertyExternalDevicePowerController: &[u8; 42] =
    b"kUSBHostPortExternalDevicePowerController\0";
pub const kUSBHostPortPropertyCardReader: &[u8; 31] = b"kUSBHostPortPropertyCardReader\0";
pub const kUSBHostPortPropertyCardReaderValidateDescriptors: &[u8; 50] =
    b"kUSBHostPortPropertyCardReaderValidateDescriptors\0";
pub const kUSBHostPortPropertyLinkSpeedLimit: &[u8; 26] = b"UsbHostPortLinkSpeedLimit\0";
pub const kUSBHostHubPropertyPowerSupply: &[u8; 19] = b"kUSBHubPowerSupply\0";
pub const kUSBHostHubPropertyIdlePolicy: &[u8; 18] = b"kUSBHubIdlePolicy\0";
pub const kUSBHostHubPropertyStartupDelay: &[u8; 20] = b"kUSBHubStartupDelay\0";
pub const kUSBHostHubPropertyPortSequenceDelay: &[u8; 25] = b"kUSBHubPortSequenceDelay\0";
pub const kUSBHostHubPropertyHubPowerSupplyType: &[u8; 23] = b"kUSBHubPowerSupplyType\0";
pub const kUSBHostControllerPropertyIsochronousRequiresContiguous: &[u8; 34] =
    b"kUSBIsochronousRequiresContiguous\0";
pub const kUSBHostControllerPropertySleepSupported: &[u8; 19] = b"kUSBSleepSupported\0";
pub const kUSBHostControllerPropertyRTD3Supported: &[u8; 17] = b"UsbRTD3Supported\0";
pub const kUSBHostControllerPropertyMuxEnabled: &[u8; 15] = b"kUSBMuxEnabled\0";
pub const kUSBHostControllerPropertyCompanion: &[u8; 14] = b"kUSBCompanion\0";
pub const kUSBHostControllerPropertyLowSpeedCompanion: &[u8; 22] = b"kUSBLowSpeedCompanion\0";
pub const kUSBHostControllerPropertyFullSpeedCompanion: &[u8; 23] = b"kUSBFullSpeedCompanion\0";
pub const kUSBHostControllerPropertyHighSpeedCompanion: &[u8; 23] = b"kUSBHighSpeedCompanion\0";
pub const kUSBHostControllerPropertySuperSpeedCompanion: &[u8; 24] = b"kUSBSuperSpeedCompanion\0";
pub const kUSBHostControllerPropertyRevision: &[u8; 9] = b"Revision\0";
pub const kUSBHostControllerPropertyCompanionControllerName: &[u8; 27] =
    b"UsbCompanionControllerName\0";
pub const kUSBHostControllerPropertyDisableWakeSources: &[u8; 36] =
    b"UsbHostControllerDisableWakeSources\0";
pub const kUSBHostControllerPropertyPersistFullSpeedIsochronous: &[u8; 45] =
    b"UsbHostControllerPersistFullSpeedIsochronous\0";
pub const kUSBHostControllerPropertyDeferRegisterService: &[u8; 38] =
    b"UsbHostControllerDeferRegisterService\0";
pub const kUSBHostControllerPropertyStreamPolicy: &[u8; 30] = b"UsbHostControllerStreamPolicy\0";
pub const kUSBHostControllerPropertyUSB2LPMPolicy: &[u8; 31] = b"UsbHostControllerUSB2LPMPolicy\0";
pub const kUSBHostControllerPropertyUSB3LPMPolicy: &[u8; 31] = b"UsbHostControllerUSB3LPMPolicy\0";
pub const kUSBHostControllerPropertyUSB4LPMPolicy: &[u8; 31] = b"UsbHostControllerUSB4LPMPolicy\0";
pub const kUSBHostControllerPropertyTierLimit: &[u8; 27] = b"UsbHostControllerTierLimit\0";
pub const kUSBHostControllerPropertyInterruptRMBS: &[u8; 31] = b"UsbHostControllerInterruptRMBS\0";
pub const kUSBHostControllerPropertyIsochronousRMBS: &[u8; 33] =
    b"UsbHostControllerIsochronousRMBS\0";
pub const kIOUSBHostDeviceClassName: &[u8; 16] = b"IOUSBHostDevice\0";
pub const kIOUSBHostInterfaceClassName: &[u8; 19] = b"IOUSBHostInterface\0";
pub const kUSBHostDevicePropertyAddress: &[u8; 12] = b"kUSBAddress\0";
pub const kUSBHostDevicePropertyManufacturerStringIndex: &[u8; 14] = b"iManufacturer\0";
pub const kUSBHostDevicePropertySerialNumberStringIndex: &[u8; 14] = b"iSerialNumber\0";
pub const kUSBHostDevicePropertyProductStringIndex: &[u8; 9] = b"iProduct\0";
pub const kUSBHostDevicePropertyProductString: &[u8; 18] = b"kUSBProductString\0";
pub const kUSBHostDevicePropertyNumConfigs: &[u8; 19] = b"bNumConfigurations\0";
pub const kUSBHostDevicePropertyMaxPacketSize: &[u8; 16] = b"bMaxPacketSize0\0";
pub const kUSBHostDevicePropertyStandardVersion: &[u8; 7] = b"bcdUSB\0";
pub const kUSBHostInterfacePropertyStringIndex: &[u8; 11] = b"iInterface\0";
pub const kUSBHostInterfacePropertyString: &[u8; 11] = b"kUSBString\0";
pub const kUSBHostInterfacePropertyNumEndpoints: &[u8; 14] = b"bNumEndpoints\0";
pub const kAppleMaxPortCurrent: &[u8; 23] = b"AAPL,current-available\0";
pub const kAppleCurrentExtra: &[u8; 19] = b"AAPL,current-extra\0";
pub const kAppleMaxPortCurrentInSleep: &[u8; 31] = b"AAPL,max-port-current-in-sleep\0";
pub const kAppleCurrentExtraInSleep: &[u8; 28] = b"AAPL,current-extra-in-sleep\0";
pub const kAppleExternalConnectorBitmap: &[u8; 29] = b"AAPL,ExternalConnectorBitmap\0";
pub const kUSBBillboardVConnNoPowerReq: u32 = 15;
pub const kUSBDeviceClass: &[u8; 13] = b"bDeviceClass\0";
pub const kUSBDeviceSubClass: &[u8; 16] = b"bDeviceSubClass\0";
pub const kUSBDeviceProtocol: &[u8; 16] = b"bDeviceProtocol\0";
pub const kUSBDeviceMaxPacketSize: &[u8; 16] = b"bMaxPacketSize0\0";
pub const kUSBVendorID: &[u8; 9] = b"idVendor\0";
pub const kUSBVendorName: &[u8; 9] = b"idVendor\0";
pub const kUSBProductID: &[u8; 10] = b"idProduct\0";
pub const kUSBProductName: &[u8; 10] = b"idProduct\0";
pub const kUSBDeviceReleaseNumber: &[u8; 10] = b"bcdDevice\0";
pub const kUSBManufacturerStringIndex: &[u8; 14] = b"iManufacturer\0";
pub const kUSBProductStringIndex: &[u8; 9] = b"iProduct\0";
pub const kUSBSerialNumberStringIndex: &[u8; 14] = b"iSerialNumber\0";
pub const kUSBDeviceNumConfigs: &[u8; 19] = b"bNumConfigurations\0";
pub const kUSBInterfaceNumber: &[u8; 17] = b"bInterfaceNumber\0";
pub const kUSBAlternateSetting: &[u8; 18] = b"bAlternateSetting\0";
pub const kUSBNumEndpoints: &[u8; 14] = b"bNumEndpoints\0";
pub const kUSBInterfaceClass: &[u8; 16] = b"bInterfaceClass\0";
pub const kUSBInterfaceSubClass: &[u8; 19] = b"bInterfaceSubClass\0";
pub const kUSBInterfaceProtocol: &[u8; 19] = b"bInterfaceProtocol\0";
pub const kUSBInterfaceStringIndex: &[u8; 11] = b"iInterface\0";
pub const kUSBConfigurationValue: &[u8; 20] = b"bConfigurationValue\0";
pub const kUSBInterfaceString: &[u8; 11] = b"kUSBString\0";
pub const kUSB1284DeviceID: &[u8; 15] = b"1284 Device ID\0";
pub const kUSBCompatibilityMatch: &[u8; 22] = b"USBCompatibilityMatch\0";
pub const kUSBStandardVersion: &[u8; 7] = b"bcdUSB\0";
pub const kUSBSpecReleaseNumber: &[u8; 7] = b"bcdUSB\0";
pub const kUSBContainerID: &[u8; 16] = b"kUSBContainerID\0";
pub const kUSBProductString: &[u8; 18] = b"kUSBProductString\0";
pub const kUSBVendorString: &[u8; 17] = b"kUSBVendorString\0";
pub const kUSBSerialNumberString: &[u8; 23] = b"kUSBSerialNumberString\0";
pub const kCallInterfaceOpenWithGate: &[u8; 27] = b"kCallInterfaceOpenWithGate\0";
pub const kUSBDevicePropertyBusPowerAvailable: &[u8; 20] = b"Bus Power Available\0";
pub const kUSBDevicePropertyLocationID: &[u8; 11] = b"locationID\0";
pub const kUSBProductIDMask: &[u8; 14] = b"idProductMask\0";
pub const kUSBProductIdsArrayName: &[u8; 15] = b"idProductArray\0";
pub const kUSBSuspendPort: &[u8; 13] = b"kSuspendPort\0";
pub const kUSBExpressCardCantWake: &[u8; 20] = b"ExpressCardCantWake\0";
pub const kUSBDeviceResumeRecoveryTime: &[u8; 23] = b"kUSBResumeRecoveryTime\0";
pub const kUSBOutOfSpecMPSOK: &[u8; 19] = b"Out of spec MPS OK\0";
pub const kOverrideIfAtLocationID: &[u8; 23] = b"OverrideIfAtLocationID\0";
pub const kUSBDeviceCurrentConfiguration: &[u8; 25] = b"kUSBCurrentConfiguration\0";
pub const kUSBDeviceRemoteWakeOverride: &[u8; 23] = b"kUSBRemoteWakeOverride\0";
pub const kUSBDeviceConfigurationCurrentOverride: &[u8; 33] = b"kUSBConfigurationCurrentOverride\0";
pub const kUSBDeviceResetDurationOverride: &[u8; 26] = b"kUSBResetDurationOverride\0";
pub const kUSBDeviceFailedRequestedPower: &[u8; 25] = b"kUSBFailedRequestedPower\0";
pub const kUSBPropertyRemovable: &[u8; 10] = b"removable\0";
pub const kUSBPropertyTestMode: &[u8; 13] = b"kUSBTestMode\0";
pub const kUSBPropertyDebugLevel: &[u8; 17] = b"kUSBDebugOptions\0";
pub const kUSBHubPropertyPowerSupply: &[u8; 19] = b"kUSBHubPowerSupply\0";
pub const kUSBControllerSleepSupported: &[u8; 19] = b"kUSBSleepSupported\0";
pub const kUSBPortPropertyBusCurrentAllocation: &[u8; 25] = b"kUSBBusCurrentAllocation\0";
pub const kUSBPreferredInterface: &[u8; 20] = b"Preferred Interface\0";
pub const kUSBPreferredInterfacePriority: &[u8; 9] = b"priority\0";
pub const kOverrideAllowLowPower: &[u8; 23] = b"kOverrideAllowLowPower\0";
pub const kUSBUserClientEntitlementRequired: &[u8; 33] = b"UsbUserClientEntitlementRequired\0";
pub const kUSBDevicePropertySpeed: &[u8; 13] = b"Device Speed\0";
pub const kUSBDevicePropertyAddress: &[u8; 12] = b"kUSBAddress\0";
pub const kUSBPreferredConfiguration: &[u8; 27] = b"kUSBPreferredConfiguration\0";
pub const kUSBControllerNeedsContiguousMemoryForIsoch: &[u8; 34] =
    b"kUSBIsochronousRequiresContiguous\0";
pub const kUSBHubDontAllowLowPower: &[u8; 18] = b"kUSBHubIdlePolicy\0";
pub const kConfigurationDescriptorOverride: &[u8; 36] = b"kUSBConfigurationDescriptorOverride\0";
pub const kAppleRevocableExtraCurrent: &[u8; 29] = b"AAPL,revocable-extra-current\0";
pub const kAppleExternalSuperSpeedPorts: &[u8; 21] = b"AAPL,ExternalSSPorts\0";
pub const kAppleUnconnectedSuperSpeedPorts: &[u8; 24] = b"AAPL,UnconnectedSSPorts\0";
pub const kAppleAcpiRootHubDepth: &[u8; 20] = b"AAPL,root-hub-depth\0";
pub const kAppleStandardPortCurrentInSleep: &[u8; 36] = b"AAPL,standard-port-current-in-sleep\0";
pub const kAppleInternalUSBDevice: &[u8; 21] = b"AAPL,device-internal\0";
pub const kUSBBusID: &[u8; 12] = b"AAPL,bus-id\0";
pub const kApplePowerSupply: &[u8; 18] = b"AAPL,power-supply\0";
pub const kAppleCurrentAvailable: &[u8; 23] = b"AAPL,current-available\0";
pub const kAppleCurrentInSleep: &[u8; 22] = b"AAPL,current-in-sleep\0";
pub const kApplePortCurrentInSleep: &[u8; 27] = b"AAPL,port-current-in-sleep\0";
pub const kOverrideAttachedToCPU: &[u8; 23] = b"kOverrideAttachedToCPU\0";
pub const kEHCIIsochMaxBusStall: u32 = 25000;
pub const kXHCIIsochMaxBusStall: u32 = 25000;
pub const kOHCIIsochMaxBusStall: u32 = 25000;
pub const kUHCIIsochMaxBusStall: u32 = 10000;
pub const kMaxBusStall10uS: u32 = 10000;
pub const kMaxBusStall25uS: u32 = 25000;
pub const kIOUSBDeviceClassName: &[u8; 12] = b"IOUSBDevice\0";
pub const kIOUSBInterfaceClassName: &[u8; 15] = b"IOUSBInterface\0";
pub const NDR_PROTOCOL_2_0: u32 = 0;
pub const NDR_INT_BIG_ENDIAN: u32 = 0;
pub const NDR_INT_LITTLE_ENDIAN: u32 = 1;
pub const NDR_FLOAT_IEEE: u32 = 0;
pub const NDR_FLOAT_VAX: u32 = 1;
pub const NDR_FLOAT_CRAY: u32 = 2;
pub const NDR_FLOAT_IBM: u32 = 3;
pub const NDR_CHAR_ASCII: u32 = 0;
pub const NDR_CHAR_EBCDIC: u32 = 1;
pub const __NDR_convert__: u32 = 0;
pub const __NDR_convert__int_rep__: u32 = 0;
pub const __NDR_convert__char_rep__: u32 = 0;
pub const __NDR_convert__float_rep__: u32 = 0;
pub const MACH_NOTIFY_FIRST: u32 = 64;
pub const MACH_NOTIFY_PORT_DELETED: u32 = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: u32 = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: u32 = 69;
pub const MACH_NOTIFY_NO_SENDERS: u32 = 70;
pub const MACH_NOTIFY_SEND_ONCE: u32 = 71;
pub const MACH_NOTIFY_DEAD_NAME: u32 = 72;
pub const MACH_NOTIFY_LAST: u32 = 77;
pub const __MigTypeCheck: u32 = 1;
pub const __MigPackStructs: u32 = 1;
pub const MIG_TYPE_ERROR: i32 = -300;
pub const MIG_REPLY_MISMATCH: i32 = -301;
pub const MIG_REMOTE_ERROR: i32 = -302;
pub const MIG_BAD_ID: i32 = -303;
pub const MIG_BAD_ARGUMENTS: i32 = -304;
pub const MIG_NO_REPLY: i32 = -305;
pub const MIG_EXCEPTION: i32 = -306;
pub const MIG_ARRAY_TOO_LARGE: i32 = -307;
pub const MIG_SERVER_DIED: i32 = -308;
pub const MIG_TRAILER_ERROR: i32 = -309;
pub const mach_port_MSG_COUNT: u32 = 43;
pub const ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_MEMORY_INFO_NAME_MAX_LEN: u32 = 80;
pub const MAX_ZTRACE_DEPTH: u32 = 15;
pub const ZOP_ALLOC: u32 = 1;
pub const ZOP_FREE: u32 = 0;
pub const LOCKGROUP_MAX_NAME: u32 = 64;
pub const LOCKGROUP_ATTR_STAT: u32 = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: u64 = 27973006578180434;
pub const MACH_CORE_FILEHEADER_V2_SIGNATURE: u64 = 7161089684267036482;
pub const MACH_CORE_FILEHEADER_MAXFILES: u32 = 16;
pub const MACH_CORE_FILEHEADER_NAMELEN: u32 = 16;
pub const MACH_CORE_FILEHEADER_V2_FLAG_LOG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_FILEHEADER_V2_FLAG_EXISTING_COREFILE_KEY_FORMAT_NIST_P256: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAG_NEXT_COREFILE_KEY_FORMAT_NIST_P256: u32 = 65536;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_COREFILE_KEY_FORMAT_MASK: u32 = 65536;
pub const MACH_CORE_DETAILS_V2_FLAG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_ZLIB: u32 = 256;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_LZ4: u32 = 512;
pub const KOBJECT_DESCRIPTION_LENGTH: u32 = 512;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(__mbstate8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(_mbstateL))
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for __mbstate_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__mbstate_t {{ union }}")
    }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __darwin_pthread_handler_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_opaque_pthread_attr_t), "::", stringify!(__sig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_opaque_pthread_cond_t), "::", stringify!(__sig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_opaque_pthread_mutex_t), "::", stringify!(__sig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_opaque_pthread_once_t), "::", stringify!(__sig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_opaque_pthread_rwlock_t), "::", stringify!(__sig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_opaque_pthread_t), "::", stringify!(__sig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_opaque_pthread_t), "::", stringify!(__opaque))
    );
}
impl Default for _opaque_pthread_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<fd_set>(), 128usize, concat!("Size of: ", stringify!(fd_set)));
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fd_set), "::", stringify!(fds_bits))
    );
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneEntry() {
    const UNINIT: ::std::mem::MaybeUninit<_RuneEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RuneEntry>(),
        24usize,
        concat!("Size of: ", stringify!(_RuneEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__min) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_RuneEntry), "::", stringify!(__min))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__max) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_RuneEntry), "::", stringify!(__max))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__map) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_RuneEntry), "::", stringify!(__map))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__types) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_RuneEntry), "::", stringify!(__types))
    );
}
impl Default for _RuneEntry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[test]
fn bindgen_test_layout__RuneRange() {
    const UNINIT: ::std::mem::MaybeUninit<_RuneRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RuneRange>(),
        16usize,
        concat!("Size of: ", stringify!(_RuneRange))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nranges) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_RuneRange), "::", stringify!(__nranges))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ranges) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_RuneRange), "::", stringify!(__ranges))
    );
}
impl Default for _RuneRange {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneCharClass() {
    const UNINIT: ::std::mem::MaybeUninit<_RuneCharClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RuneCharClass>(),
        20usize,
        concat!("Size of: ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneCharClass>(),
        4usize,
        concat!("Alignment of ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_RuneCharClass), "::", stringify!(__name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_RuneCharClass), "::", stringify!(__mask))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[test]
fn bindgen_test_layout__RuneLocale() {
    const UNINIT: ::std::mem::MaybeUninit<_RuneLocale> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RuneLocale>(),
        3208usize,
        concat!("Size of: ", stringify!(_RuneLocale))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneLocale>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneLocale))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__magic) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__magic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__encoding) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__encoding))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sgetrune) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__sgetrune))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sputrune) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__sputrune))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__invalid_rune) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__invalid_rune))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__runetype) as usize - ptr as usize },
        60usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__runetype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__maplower) as usize - ptr as usize },
        1084usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__maplower))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mapupper) as usize - ptr as usize },
        2108usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__mapupper))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__runetype_ext) as usize - ptr as usize },
        3136usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__runetype_ext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__maplower_ext) as usize - ptr as usize },
        3152usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__maplower_ext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mapupper_ext) as usize - ptr as usize },
        3168usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__mapupper_ext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__variable) as usize - ptr as usize },
        3184usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__variable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__variable_len) as usize - ptr as usize },
        3192usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__variable_len))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ncharclasses) as usize - ptr as usize },
        3196usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__ncharclasses))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__charclasses) as usize - ptr as usize },
        3200usize,
        concat!("Offset of field: ", stringify!(_RuneLocale), "::", stringify!(__charclasses))
    );
}
impl Default for _RuneLocale {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    const UNINIT: ::std::mem::MaybeUninit<lconv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<lconv>(), 96usize, concat!("Size of: ", stringify!(lconv)));
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decimal_point) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(decimal_point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thousands_sep) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(thousands_sep))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grouping) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(grouping))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_curr_symbol) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(int_curr_symbol))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currency_symbol) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(currency_symbol))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_decimal_point) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(mon_decimal_point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_thousands_sep) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(mon_thousands_sep))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_grouping) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(mon_grouping))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positive_sign) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(positive_sign))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negative_sign) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(negative_sign))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_frac_digits) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(int_frac_digits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frac_digits) as usize - ptr as usize },
        81usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(frac_digits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_cs_precedes) as usize - ptr as usize },
        82usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(p_cs_precedes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_sep_by_space) as usize - ptr as usize },
        83usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(p_sep_by_space))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_cs_precedes) as usize - ptr as usize },
        84usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(n_cs_precedes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sep_by_space) as usize - ptr as usize },
        85usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(n_sep_by_space))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_sign_posn) as usize - ptr as usize },
        86usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(p_sign_posn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sign_posn) as usize - ptr as usize },
        87usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(n_sign_posn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_cs_precedes) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(int_p_cs_precedes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_cs_precedes) as usize - ptr as usize },
        89usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(int_n_cs_precedes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_sep_by_space) as usize - ptr as usize },
        90usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(int_p_sep_by_space))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_sep_by_space) as usize - ptr as usize },
        91usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(int_n_sep_by_space))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_sign_posn) as usize - ptr as usize },
        92usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(int_p_sign_posn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_sign_posn) as usize - ptr as usize },
        93usize,
        concat!("Offset of field: ", stringify!(lconv), "::", stringify!(int_n_sign_posn))
    );
}
impl Default for lconv {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: u128) -> u128;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: u128) -> u128;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: u128) -> u128;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: u128) -> u128;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: u128, arg2: *mut u128) -> u128;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: u128, arg2: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: u128, arg2: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: u128) -> u128;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: u128) -> u128;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: u128) -> u128;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: u128) -> u128;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: u128, arg2: u128, arg3: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: u128) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: u128) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: u128, arg2: u128, arg3: u128) -> u128;
}
extern "C" {
    pub fn __inff() -> f32;
}
extern "C" {
    pub fn __inf() -> f64;
}
extern "C" {
    pub fn __infl() -> u128;
}
extern "C" {
    pub fn __nan() -> f32;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[test]
fn bindgen_test_layout___float2() {
    const UNINIT: ::std::mem::MaybeUninit<__float2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__float2>(),
        8usize,
        concat!("Size of: ", stringify!(__float2))
    );
    assert_eq!(
        ::std::mem::align_of::<__float2>(),
        4usize,
        concat!("Alignment of ", stringify!(__float2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sinval) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__float2), "::", stringify!(__sinval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cosval) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__float2), "::", stringify!(__cosval))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
#[test]
fn bindgen_test_layout___double2() {
    const UNINIT: ::std::mem::MaybeUninit<__double2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__double2>(),
        16usize,
        concat!("Size of: ", stringify!(__double2))
    );
    assert_eq!(
        ::std::mem::align_of::<__double2>(),
        8usize,
        concat!("Alignment of ", stringify!(__double2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sinval) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__double2), "::", stringify!(__sinval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cosval) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__double2), "::", stringify!(__cosval))
    );
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    const UNINIT: ::std::mem::MaybeUninit<exception> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(exception), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(exception), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(exception), "::", stringify!(arg1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(exception), "::", stringify!(arg2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(exception), "::", stringify!(retval))
    );
}
impl Default for exception {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn longjmperror();
}
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_thread_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__eax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ebx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ecx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ecx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__edx) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__edi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__esi) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ebp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__esp) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__eflags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__eip) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mmst_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mmst_reg) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_mmst_reg), "::", stringify!(__mmst_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mmst_rsrv) as usize - ptr as usize },
        10usize,
        concat!("Offset of field: ", stringify!(__darwin_mmst_reg), "::", stringify!(__mmst_rsrv))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_xmm_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__xmm_reg) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_xmm_reg), "::", stringify!(__xmm_reg))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_ymm_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ymm_reg) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_ymm_reg), "::", stringify!(__ymm_reg))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_zmm_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__zmm_reg) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_zmm_reg), "::", stringify!(__zmm_reg))
    );
}
impl Default for __darwin_zmm_reg {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_opmask_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opmask_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_opmask_reg),
            "::",
            stringify!(__opmask_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_float_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
impl Default for __darwin_i386_float_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_avx_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
}
impl Default for __darwin_i386_avx_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_avx512_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
}
impl Default for __darwin_i386_avx512_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_exception_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_debug_state32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout___x86_instruction_state() {
    const UNINIT: ::std::mem::MaybeUninit<__x86_instruction_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__x86_instruction_state>(),
        2456usize,
        concat!("Size of: ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_instruction_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_stream_valid_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_stream_valid_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__out_of_synch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__out_of_synch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_bytes) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_cacheline) as usize - ptr as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_cacheline)
        )
    );
}
impl Default for __x86_instruction_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout___last_branch_record() {
    const UNINIT: ::std::mem::MaybeUninit<__last_branch_record> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__last_branch_record>(),
        24usize,
        concat!("Size of: ", stringify!(__last_branch_record))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_record>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_record))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__from_ip) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__last_branch_record), "::", stringify!(__from_ip))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__to_ip) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__last_branch_record), "::", stringify!(__to_ip))
    );
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[test]
fn bindgen_test_layout___last_branch_state() {
    const UNINIT: ::std::mem::MaybeUninit<__last_branch_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__last_branch_state>(),
        776usize,
        concat!("Size of: ", stringify!(__last_branch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lbr_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_state),
            "::",
            stringify!(__lbr_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lbrs) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__last_branch_state), "::", stringify!(__lbrs))
    );
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___x86_pagein_state() {
    const UNINIT: ::std::mem::MaybeUninit<__x86_pagein_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__x86_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pagein_error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_thread_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rbx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rcx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rcx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rdx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rdi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rsi) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rbp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rsp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r10) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r11) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r12) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r13) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r14) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r15) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rip) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rflags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_thread_full_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        200usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gsbase) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__gsbase)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_float_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
impl Default for __darwin_x86_float_state64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_avx_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
}
impl Default for __darwin_x86_avx_state64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_avx512_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh8) as usize - ptr as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh9) as usize - ptr as usize },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh10) as usize - ptr as usize },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh11) as usize - ptr as usize },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh12) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh13) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh14) as usize - ptr as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh15) as usize - ptr as usize },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm16) as usize - ptr as usize },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm17) as usize - ptr as usize },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm18) as usize - ptr as usize },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm19) as usize - ptr as usize },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm20) as usize - ptr as usize },
        1676usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm21) as usize - ptr as usize },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm22) as usize - ptr as usize },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm23) as usize - ptr as usize },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm24) as usize - ptr as usize },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm25) as usize - ptr as usize },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm26) as usize - ptr as usize },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm27) as usize - ptr as usize },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm27)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm28) as usize - ptr as usize },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm28)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm29) as usize - ptr as usize },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm29)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm30) as usize - ptr as usize },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm30)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm31) as usize - ptr as usize },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm31)
        )
    );
}
impl Default for __darwin_x86_avx512_state64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_exception_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_debug_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_cpmu_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext32), "::", stringify!(__es))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext32), "::", stringify!(__ss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext32), "::", stringify!(__fs))
    );
}
impl Default for __darwin_mcontext32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext_avx32), "::", stringify!(__es))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext_avx32), "::", stringify!(__ss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext_avx32), "::", stringify!(__fs))
    );
}
impl Default for __darwin_mcontext_avx32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx512_32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx512_32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext64), "::", stringify!(__es))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext64), "::", stringify!(__ss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        184usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext64), "::", stringify!(__fs))
    );
}
impl Default for __darwin_mcontext64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64_full() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext64_full> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64_full>(),
        744usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext64_full), "::", stringify!(__es))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext64_full), "::", stringify!(__ss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        216usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext64_full), "::", stringify!(__fs))
    );
}
impl Default for __darwin_mcontext64_full {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext_avx64), "::", stringify!(__es))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext_avx64), "::", stringify!(__ss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        184usize,
        concat!("Offset of field: ", stringify!(__darwin_mcontext_avx64), "::", stringify!(__fs))
    );
}
impl Default for __darwin_mcontext_avx64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64_full() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx64_full> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64_full>(),
        1064usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx64_full {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx512_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx512_64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64_full() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx512_64_full> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64_full>(),
        2664usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64_full))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx512_64_full {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mcontext_t = *mut __darwin_mcontext64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_sigaltstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_sigaltstack), "::", stringify!(ss_sp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__darwin_sigaltstack), "::", stringify!(ss_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__darwin_sigaltstack), "::", stringify!(ss_flags))
    );
}
impl Default for __darwin_sigaltstack {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_ucontext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_onstack) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__darwin_ucontext), "::", stringify!(uc_onstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__darwin_ucontext), "::", stringify!(uc_sigmask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__darwin_ucontext), "::", stringify!(uc_stack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(__darwin_ucontext), "::", stringify!(uc_link))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcsize) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(__darwin_ucontext), "::", stringify!(uc_mcsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(__darwin_ucontext), "::", stringify!(uc_mcontext))
    );
}
impl Default for __darwin_ucontext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<sigval>(), 8usize, concat!("Size of: ", stringify!(sigval)));
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigval), "::", stringify!(sival_int))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigval), "::", stringify!(sival_ptr))
    );
}
impl Default for sigval {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for sigval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "sigval {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigevent), "::", stringify!(sigev_notify))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(sigevent), "::", stringify!(sigev_signo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sigevent), "::", stringify!(sigev_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify_function) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(sigevent), "::", stringify!(sigev_notify_function))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify_attributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
impl Default for sigevent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for sigevent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "sigevent {{ sigev_notify: {:?}, sigev_signo: {:?}, sigev_value: {:?}, sigev_notify_function: {:?}, sigev_notify_attributes: {:?} }}" , self . sigev_notify , self . sigev_signo , self . sigev_value , self . sigev_notify_function , self . sigev_notify_attributes)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    const UNINIT: ::std::mem::MaybeUninit<__siginfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(si_signo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(si_errno))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(si_code))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(si_pid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(si_uid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(si_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(si_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_value) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(si_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(si_band))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(__siginfo), "::", stringify!(__pad))
    );
}
impl Default for __siginfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for __siginfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "__siginfo {{ si_signo: {:?}, si_errno: {:?}, si_code: {:?}, si_pid: {:?}, si_uid: {:?}, si_status: {:?}, si_addr: {:?}, si_value: {:?}, si_band: {:?}, __pad: {:?} }}" , self . si_signo , self . si_errno , self . si_code , self . si_pid , self . si_uid , self . si_status , self . si_addr , self . si_value , self . si_band , self . __pad)
    }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    const UNINIT: ::std::mem::MaybeUninit<__sigaction_u> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sa_handler) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sigaction_u), "::", stringify!(__sa_handler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sa_sigaction) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sigaction_u), "::", stringify!(__sa_sigaction))
    );
}
impl Default for __sigaction_u {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for __sigaction_u {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__sigaction_u {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<__sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sigaction), "::", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_tramp) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__sigaction), "::", stringify!(sa_tramp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__sigaction), "::", stringify!(sa_mask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(__sigaction), "::", stringify!(sa_flags))
    );
}
impl Default for __sigaction {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for __sigaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "__sigaction {{ __sigaction_u: {:?}, sa_tramp: {:?}, sa_mask: {:?}, sa_flags: {:?} }}",
            self.__sigaction_u, self.sa_tramp, self.sa_mask, self.sa_flags
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigaction), "::", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sigaction), "::", stringify!(sa_mask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(sigaction), "::", stringify!(sa_flags))
    );
}
impl Default for sigaction {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for sigaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "sigaction {{ __sigaction_u: {:?}, sa_mask: {:?}, sa_flags: {:?} }}",
            self.__sigaction_u, self.sa_mask, self.sa_flags
        )
    }
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    const UNINIT: ::std::mem::MaybeUninit<sigvec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<sigvec>(), 16usize, concat!("Size of: ", stringify!(sigvec)));
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_handler) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigvec), "::", stringify!(sv_handler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_mask) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sigvec), "::", stringify!(sv_mask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_flags) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(sigvec), "::", stringify!(sv_flags))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigstack), "::", stringify!(ss_sp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sigstack), "::", stringify!(ss_onstack))
    );
}
impl Default for sigstack {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_uint, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
pub type max_align_t = u128;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<__sbuf>(), 16usize, concat!("Size of: ", stringify!(__sbuf)));
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sbuf), "::", stringify!(_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__sbuf), "::", stringify!(_size))
    );
}
impl Default for __sbuf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_p))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_r))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_w))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_file))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_bf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_lbfsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_cookie))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_close))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_read))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_seek))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_write))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_ub))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_extra))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_ur))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_ubuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_nbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_lb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_blksize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_offset))
    );
}
impl Default for __sFILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_sec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_usec))
    );
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    const UNINIT: ::std::mem::MaybeUninit<rusage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<rusage>(), 144usize, concat!("Size of: ", stringify!(rusage)));
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_utime) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_utime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_stime) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_stime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_maxrss) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_maxrss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_ixrss) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_ixrss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_idrss) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_idrss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_isrss) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_isrss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_minflt) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_minflt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_majflt) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_majflt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nswap) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_nswap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_inblock) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_inblock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_oublock) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_oublock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_msgsnd) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_msgsnd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_msgrcv) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_msgrcv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nsignals) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_nsignals))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nvcsw) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_nvcsw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nivcsw) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(rusage), "::", stringify!(ru_nivcsw))
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rusage_info_v0), "::", stringify!(ri_uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rusage_info_v0), "::", stringify!(ri_user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rusage_info_v0), "::", stringify!(ri_system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rusage_info_v0), "::", stringify!(ri_pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rusage_info_v0), "::", stringify!(ri_wired_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rusage_info_v1), "::", stringify!(ri_uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rusage_info_v1), "::", stringify!(ri_user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rusage_info_v1), "::", stringify!(ri_system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rusage_info_v1), "::", stringify!(ri_pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rusage_info_v1), "::", stringify!(ri_wired_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rusage_info_v2), "::", stringify!(ri_uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rusage_info_v2), "::", stringify!(ri_user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rusage_info_v2), "::", stringify!(ri_system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rusage_info_v2), "::", stringify!(ri_pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rusage_info_v2), "::", stringify!(ri_wired_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rusage_info_v3), "::", stringify!(ri_uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rusage_info_v3), "::", stringify!(ri_user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rusage_info_v3), "::", stringify!(ri_system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rusage_info_v3), "::", stringify!(ri_pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rusage_info_v3), "::", stringify!(ri_wired_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rusage_info_v4), "::", stringify!(ri_uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rusage_info_v4), "::", stringify!(ri_user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rusage_info_v4), "::", stringify!(ri_system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rusage_info_v4), "::", stringify!(ri_pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rusage_info_v4), "::", stringify!(ri_wired_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!("Offset of field: ", stringify!(rusage_info_v4), "::", stringify!(ri_instructions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!("Offset of field: ", stringify!(rusage_info_v4), "::", stringify!(ri_cycles))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_runnable_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v5() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v5>(),
        304usize,
        concat!("Size of: ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v5>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rusage_info_v5), "::", stringify!(ri_uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rusage_info_v5), "::", stringify!(ri_user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rusage_info_v5), "::", stringify!(ri_system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rusage_info_v5), "::", stringify!(ri_pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rusage_info_v5), "::", stringify!(ri_wired_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!("Offset of field: ", stringify!(rusage_info_v5), "::", stringify!(ri_instructions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!("Offset of field: ", stringify!(rusage_info_v5), "::", stringify!(ri_cycles))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize },
        296usize,
        concat!("Offset of field: ", stringify!(rusage_info_v5), "::", stringify!(ri_flags))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
#[test]
fn bindgen_test_layout_rusage_info_v6() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v6>(),
        464usize,
        concat!("Size of: ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v6>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_wired_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_instructions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_cycles))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize },
        296usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_ptime) as usize - ptr as usize },
        304usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_user_ptime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_ptime) as usize - ptr as usize },
        312usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_system_ptime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pinstructions) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pinstructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pcycles) as usize - ptr as usize },
        328usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_pcycles))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_energy_nj) as usize - ptr as usize },
        336usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_energy_nj))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_penergy_nj) as usize - ptr as usize },
        344usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_penergy_nj))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_reserved) as usize - ptr as usize },
        352usize,
        concat!("Offset of field: ", stringify!(rusage_info_v6), "::", stringify!(ri_reserved))
    );
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    const UNINIT: ::std::mem::MaybeUninit<rlimit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<rlimit>(), 16usize, concat!("Size of: ", stringify!(rlimit)));
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rlimit), "::", stringify!(rlim_cur))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(rlimit), "::", stringify!(rlim_max))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    const UNINIT: ::std::mem::MaybeUninit<proc_rlimit_control_wakeupmon> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wm_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wm_rate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    const UNINIT: ::std::mem::MaybeUninit<wait> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<wait>(), 4usize, concat!("Size of: ", stringify!(wait)));
    assert_eq!(::std::mem::align_of::<wait>(), 4usize, concat!("Alignment of ", stringify!(wait)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_status) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_T) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_S) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
impl Default for wait {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for wait {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "wait {{ union }}")
    }
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<div_t>(), 8usize, concat!("Size of: ", stringify!(div_t)));
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(rem))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<ldiv_t>(), 16usize, concat!("Size of: ", stringify!(ldiv_t)));
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(rem))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(rem))
    );
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_daemon$1050"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_sec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_nsec))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<tm>(), 56usize, concat!("Size of: ", stringify!(tm)));
    assert_eq!(::std::mem::align_of::<tm>(), 8usize, concat!("Alignment of ", stringify!(tm)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_sec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_min))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_hour))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_mday))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_mon))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_year))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_wday))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_yday))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_isdst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_gmtoff))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_zone))
    );
}
impl Default for tm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(imaxdiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(imaxdiv_t), "::", stringify!(rem))
    );
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _Block_copy(aBlock: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _Block_release(aBlock: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _Block_object_assign(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _Block_object_dispose(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut _NSConcreteGlobalBlock: [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub static mut _NSConcreteStackBlock: [*mut ::std::os::raw::c_void; 32usize];
}
pub type UInt8 = ::std::os::raw::c_uchar;
pub type SInt8 = ::std::os::raw::c_schar;
pub type UInt16 = ::std::os::raw::c_ushort;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type SInt32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
#[test]
fn bindgen_test_layout_wide() {
    const UNINIT: ::std::mem::MaybeUninit<wide> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<wide>(), 8usize, concat!("Size of: ", stringify!(wide)));
    assert_eq!(::std::mem::align_of::<wide>(), 2usize, concat!("Alignment of ", stringify!(wide)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wide), "::", stringify!(lo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(wide), "::", stringify!(hi))
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
#[test]
fn bindgen_test_layout_UnsignedWide() {
    const UNINIT: ::std::mem::MaybeUninit<UnsignedWide> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UnsignedWide>(),
        8usize,
        concat!("Size of: ", stringify!(UnsignedWide))
    );
    assert_eq!(
        ::std::mem::align_of::<UnsignedWide>(),
        2usize,
        concat!("Alignment of ", stringify!(UnsignedWide))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(UnsignedWide), "::", stringify!(lo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(UnsignedWide), "::", stringify!(hi))
    );
}
pub type SInt64 = ::std::os::raw::c_longlong;
pub type UInt64 = ::std::os::raw::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::std::os::raw::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = f32;
pub type Float64 = f64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Float80 {
    pub exp: SInt16,
    pub man: [UInt16; 4usize],
}
#[test]
fn bindgen_test_layout_Float80() {
    const UNINIT: ::std::mem::MaybeUninit<Float80> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Float80>(),
        10usize,
        concat!("Size of: ", stringify!(Float80))
    );
    assert_eq!(
        ::std::mem::align_of::<Float80>(),
        2usize,
        concat!("Alignment of ", stringify!(Float80))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exp) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Float80), "::", stringify!(exp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).man) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(Float80), "::", stringify!(man))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Float96 {
    pub exp: [SInt16; 2usize],
    pub man: [UInt16; 4usize],
}
#[test]
fn bindgen_test_layout_Float96() {
    const UNINIT: ::std::mem::MaybeUninit<Float96> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Float96>(),
        12usize,
        concat!("Size of: ", stringify!(Float96))
    );
    assert_eq!(
        ::std::mem::align_of::<Float96>(),
        2usize,
        concat!("Alignment of ", stringify!(Float96))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exp) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Float96), "::", stringify!(exp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).man) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Float96), "::", stringify!(man))
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct Float32Point {
    pub x: Float32,
    pub y: Float32,
}
#[test]
fn bindgen_test_layout_Float32Point() {
    const UNINIT: ::std::mem::MaybeUninit<Float32Point> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Float32Point>(),
        8usize,
        concat!("Size of: ", stringify!(Float32Point))
    );
    assert_eq!(
        ::std::mem::align_of::<Float32Point>(),
        2usize,
        concat!("Alignment of ", stringify!(Float32Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Float32Point), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Float32Point), "::", stringify!(y))
    );
}
pub type Ptr = *mut ::std::os::raw::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::std::os::raw::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::std::os::raw::c_void;
pub type ConstLogicalAddress = *const ::std::os::raw::c_void;
pub type PhysicalAddress = *mut ::std::os::raw::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::std::os::raw::c_ulong;
pub type ByteOffset = ::std::os::raw::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::std::os::raw::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::std::os::raw::c_uchar;
pub type ProcPtr = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_long>;
pub type Register68kProcPtr = ::std::option::Option<unsafe extern "C" fn()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::std::os::raw::c_void;
pub type URefCon = *mut ::std::os::raw::c_void;
pub type SRefCon = *mut ::std::os::raw::c_void;
pub const noErr: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const kNilOptions: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const kVariableLengthArray: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const kUnknownType: _bindgen_ty_4 = 1061109567;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::std::os::raw::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::std::os::raw::c_uchar; 256usize];
pub type Str63 = [::std::os::raw::c_uchar; 64usize];
pub type Str32 = [::std::os::raw::c_uchar; 33usize];
pub type Str31 = [::std::os::raw::c_uchar; 32usize];
pub type Str27 = [::std::os::raw::c_uchar; 28usize];
pub type Str15 = [::std::os::raw::c_uchar; 16usize];
pub type Str32Field = [::std::os::raw::c_uchar; 34usize];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::std::os::raw::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::std::os::raw::c_uchar;
pub type ConstStr255Param = *const ::std::os::raw::c_uchar;
pub type ConstStr63Param = *const ::std::os::raw::c_uchar;
pub type ConstStr32Param = *const ::std::os::raw::c_uchar;
pub type ConstStr31Param = *const ::std::os::raw::c_uchar;
pub type ConstStr27Param = *const ::std::os::raw::c_uchar;
pub type ConstStr15Param = *const ::std::os::raw::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
#[test]
fn bindgen_test_layout_ProcessSerialNumber() {
    const UNINIT: ::std::mem::MaybeUninit<ProcessSerialNumber> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ProcessSerialNumber>(),
        8usize,
        concat!("Size of: ", stringify!(ProcessSerialNumber))
    );
    assert_eq!(
        ::std::mem::align_of::<ProcessSerialNumber>(),
        2usize,
        concat!("Alignment of ", stringify!(ProcessSerialNumber))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).highLongOfPSN) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProcessSerialNumber),
            "::",
            stringify!(highLongOfPSN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowLongOfPSN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProcessSerialNumber),
            "::",
            stringify!(lowLongOfPSN)
        )
    );
}
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Point {
    pub v: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_Point() {
    const UNINIT: ::std::mem::MaybeUninit<Point> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Point>(), 4usize, concat!("Size of: ", stringify!(Point)));
    assert_eq!(
        ::std::mem::align_of::<Point>(),
        2usize,
        concat!("Alignment of ", stringify!(Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(h))
    );
}
pub type PointPtr = *mut Point;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Rect {
    pub top: ::std::os::raw::c_short,
    pub left: ::std::os::raw::c_short,
    pub bottom: ::std::os::raw::c_short,
    pub right: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_Rect() {
    const UNINIT: ::std::mem::MaybeUninit<Rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Rect>(), 8usize, concat!("Size of: ", stringify!(Rect)));
    assert_eq!(::std::mem::align_of::<Rect>(), 2usize, concat!("Alignment of ", stringify!(Rect)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Rect), "::", stringify!(top))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(Rect), "::", stringify!(left))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Rect), "::", stringify!(bottom))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(Rect), "::", stringify!(right))
    );
}
pub type RectPtr = *mut Rect;
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
#[test]
fn bindgen_test_layout_FixedPoint() {
    const UNINIT: ::std::mem::MaybeUninit<FixedPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FixedPoint>(),
        8usize,
        concat!("Size of: ", stringify!(FixedPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<FixedPoint>(),
        2usize,
        concat!("Alignment of ", stringify!(FixedPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(FixedPoint), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(FixedPoint), "::", stringify!(y))
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
#[test]
fn bindgen_test_layout_FixedRect() {
    const UNINIT: ::std::mem::MaybeUninit<FixedRect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FixedRect>(),
        16usize,
        concat!("Size of: ", stringify!(FixedRect))
    );
    assert_eq!(
        ::std::mem::align_of::<FixedRect>(),
        2usize,
        concat!("Alignment of ", stringify!(FixedRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(FixedRect), "::", stringify!(left))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(FixedRect), "::", stringify!(top))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(FixedRect), "::", stringify!(right))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(FixedRect), "::", stringify!(bottom))
    );
}
pub type CharParameter = ::std::os::raw::c_short;
pub const normal: _bindgen_ty_5 = 0;
pub const bold: _bindgen_ty_5 = 1;
pub const italic: _bindgen_ty_5 = 2;
pub const underline: _bindgen_ty_5 = 4;
pub const outline: _bindgen_ty_5 = 8;
pub const shadow: _bindgen_ty_5 = 16;
pub const condense: _bindgen_ty_5 = 32;
pub const extend: _bindgen_ty_5 = 64;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type Style = ::std::os::raw::c_uchar;
pub type StyleParameter = ::std::os::raw::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeBaseRecord {
    _unused: [u8; 0],
}
pub type TimeBase = *mut TimeBaseRecord;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
#[test]
fn bindgen_test_layout_TimeRecord() {
    const UNINIT: ::std::mem::MaybeUninit<TimeRecord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TimeRecord>(),
        20usize,
        concat!("Size of: ", stringify!(TimeRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<TimeRecord>(),
        2usize,
        concat!("Alignment of ", stringify!(TimeRecord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(TimeRecord), "::", stringify!(value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(TimeRecord), "::", stringify!(scale))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(TimeRecord), "::", stringify!(base))
    );
}
impl Default for TimeRecord {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
#[test]
fn bindgen_test_layout_NumVersion() {
    const UNINIT: ::std::mem::MaybeUninit<NumVersion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NumVersion>(),
        4usize,
        concat!("Size of: ", stringify!(NumVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<NumVersion>(),
        1usize,
        concat!("Alignment of ", stringify!(NumVersion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonRelRev) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(NumVersion), "::", stringify!(nonRelRev))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(NumVersion), "::", stringify!(stage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minorAndBugRev) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(NumVersion), "::", stringify!(minorAndBugRev))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).majorRev) as usize - ptr as usize },
        3usize,
        concat!("Offset of field: ", stringify!(NumVersion), "::", stringify!(majorRev))
    );
}
pub const developStage: _bindgen_ty_6 = 32;
pub const alphaStage: _bindgen_ty_6 = 64;
pub const betaStage: _bindgen_ty_6 = 96;
pub const finalStage: _bindgen_ty_6 = 128;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union NumVersionVariant {
    pub parts: NumVersion,
    pub whole: UInt32,
}
#[test]
fn bindgen_test_layout_NumVersionVariant() {
    const UNINIT: ::std::mem::MaybeUninit<NumVersionVariant> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NumVersionVariant>(),
        4usize,
        concat!("Size of: ", stringify!(NumVersionVariant))
    );
    assert_eq!(
        ::std::mem::align_of::<NumVersionVariant>(),
        2usize,
        concat!("Alignment of ", stringify!(NumVersionVariant))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parts) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(NumVersionVariant), "::", stringify!(parts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).whole) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(NumVersionVariant), "::", stringify!(whole))
    );
}
impl Default for NumVersionVariant {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for NumVersionVariant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "NumVersionVariant {{ union }}")
    }
}
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::std::os::raw::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
#[test]
fn bindgen_test_layout_VersRec() {
    const UNINIT: ::std::mem::MaybeUninit<VersRec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VersRec>(),
        518usize,
        concat!("Size of: ", stringify!(VersRec))
    );
    assert_eq!(
        ::std::mem::align_of::<VersRec>(),
        2usize,
        concat!("Alignment of ", stringify!(VersRec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numericVersion) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(VersRec), "::", stringify!(numericVersion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).countryCode) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(VersRec), "::", stringify!(countryCode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortVersion) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(VersRec), "::", stringify!(shortVersion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        262usize,
        concat!("Offset of field: ", stringify!(VersRec), "::", stringify!(reserved))
    );
}
impl Default for VersRec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
extern "C" {
    pub fn Debugger();
}
extern "C" {
    pub fn DebugStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreak();
}
extern "C" {
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub static mut kCFCoreFoundationVersionNumber: f64;
}
pub type CFTypeID = ::std::os::raw::c_ulong;
pub type CFOptionFlags = ::std::os::raw::c_ulong;
pub type CFHashCode = ::std::os::raw::c_ulong;
pub type CFIndex = ::std::os::raw::c_long;
pub type CFTypeRef = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFString {
    _unused: [u8; 0],
}
pub type CFStringRef = *const __CFString;
pub type CFMutableStringRef = *mut __CFString;
pub type CFPropertyListRef = CFTypeRef;
pub type CFComparisonResult = CFIndex;
pub const kCFCompareLessThan: _bindgen_ty_7 = -1;
pub const kCFCompareEqualTo: _bindgen_ty_7 = 0;
pub const kCFCompareGreaterThan: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
pub type CFComparatorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        val1: *const ::std::os::raw::c_void,
        val2: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult,
>;
pub const kCFNotFound: CFIndex = -1;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFRange {
    pub location: CFIndex,
    pub length: CFIndex,
}
#[test]
fn bindgen_test_layout_CFRange() {
    const UNINIT: ::std::mem::MaybeUninit<CFRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRange>(),
        16usize,
        concat!("Size of: ", stringify!(CFRange))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRange>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFRange), "::", stringify!(location))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFRange), "::", stringify!(length))
    );
}
extern "C" {
    pub fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNull {
    _unused: [u8; 0],
}
pub type CFNullRef = *const __CFNull;
extern "C" {
    pub fn CFNullGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFNull: CFNullRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAllocator {
    _unused: [u8; 0],
}
pub type CFAllocatorRef = *const __CFAllocator;
extern "C" {
    pub static kCFAllocatorDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMalloc: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorNull: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorUseContext: CFAllocatorRef;
}
pub type CFAllocatorRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFAllocatorReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFAllocatorCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
pub type CFAllocatorAllocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocSize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorReallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorDeallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, info: *mut ::std::os::raw::c_void),
>;
pub type CFAllocatorPreferredSizeCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        size: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> CFIndex,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFAllocatorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}
#[test]
fn bindgen_test_layout_CFAllocatorContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFAllocatorContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFAllocatorContext>(),
        72usize,
        concat!("Size of: ", stringify!(CFAllocatorContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFAllocatorContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFAllocatorContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFAllocatorContext), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFAllocatorContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFAllocatorContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFAllocatorContext), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocate) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(CFAllocatorContext), "::", stringify!(allocate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reallocate) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(CFAllocatorContext), "::", stringify!(reallocate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deallocate) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(CFAllocatorContext), "::", stringify!(deallocate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preferredSize) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(preferredSize)
        )
    );
}
impl Default for CFAllocatorContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
}
extern "C" {
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorCreate(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    ) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorAllocate(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorReallocate(
        allocator: CFAllocatorRef,
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFAllocatorGetPreferredSizeForSize(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: *mut CFAllocatorContext);
}
extern "C" {
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
}
extern "C" {
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
}
extern "C" {
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFRelease(cf: CFTypeRef);
}
extern "C" {
    pub fn CFAutorelease(arg: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
}
extern "C" {
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
}
extern "C" {
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
}
extern "C" {
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
}
pub const ptrauth_key_ptrauth_key_asia: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_asib: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_asda: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_asdb: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_process_independent_code: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_process_dependent_code: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_process_independent_data: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_process_dependent_data: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_function_pointer: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_return_address: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_frame_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_block_function: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_cxx_vtable_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_method_list_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_isa_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_super_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_block_descriptor_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_sel_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_objc_class_ro_pointer: ptrauth_key = 2;
pub type ptrauth_key = ::std::os::raw::c_uint;
pub type ptrauth_extra_data_t = ::std::os::raw::c_ulong;
pub type ptrauth_generic_signature_t = ::std::os::raw::c_ulong;
pub type CFArrayRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFArrayReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFArrayCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFArrayEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFArrayCallBacks {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}
#[test]
fn bindgen_test_layout_CFArrayCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFArrayCallBacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFArrayCallBacks>(),
        40usize,
        concat!("Size of: ", stringify!(CFArrayCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFArrayCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFArrayCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFArrayCallBacks), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFArrayCallBacks), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFArrayCallBacks), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(CFArrayCallBacks), "::", stringify!(equal))
    );
}
extern "C" {
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
}
pub type CFArrayApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFArray {
    _unused: [u8; 0],
}
pub type CFArrayRef = *const __CFArray;
pub type CFMutableArrayRef = *mut __CFArray;
extern "C" {
    pub fn CFArrayGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFArrayCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theArray: CFArrayRef,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayGetCount(theArray: CFArrayRef) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetCountOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayContainsValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFArrayGetValueAtIndex(
        theArray: CFArrayRef,
        idx: CFIndex,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFArrayGetValues(
        theArray: CFArrayRef,
        range: CFRange,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayApplyFunction(
        theArray: CFArrayRef,
        range: CFRange,
        applier: CFArrayApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayGetFirstIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetLastIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayBSearchValues(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFArrayInsertValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArraySetValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex);
}
extern "C" {
    pub fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef);
}
extern "C" {
    pub fn CFArrayReplaceValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        newValues: *mut *const ::std::os::raw::c_void,
        newCount: CFIndex,
    );
}
extern "C" {
    pub fn CFArrayExchangeValuesAtIndices(
        theArray: CFMutableArrayRef,
        idx1: CFIndex,
        idx2: CFIndex,
    );
}
extern "C" {
    pub fn CFArraySortValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayAppendArray(
        theArray: CFMutableArrayRef,
        otherArray: CFArrayRef,
        otherRange: CFRange,
    );
}
pub type CFBagRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFBagReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFBagCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFBagEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFBagHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFBagCallBacks {
    pub version: CFIndex,
    pub retain: CFBagRetainCallBack,
    pub release: CFBagReleaseCallBack,
    pub copyDescription: CFBagCopyDescriptionCallBack,
    pub equal: CFBagEqualCallBack,
    pub hash: CFBagHashCallBack,
}
#[test]
fn bindgen_test_layout_CFBagCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFBagCallBacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFBagCallBacks>(),
        48usize,
        concat!("Size of: ", stringify!(CFBagCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFBagCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFBagCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFBagCallBacks), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFBagCallBacks), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFBagCallBacks), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFBagCallBacks), "::", stringify!(copyDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(CFBagCallBacks), "::", stringify!(equal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(CFBagCallBacks), "::", stringify!(hash))
    );
}
extern "C" {
    pub static kCFTypeBagCallBacks: CFBagCallBacks;
}
extern "C" {
    pub static kCFCopyStringBagCallBacks: CFBagCallBacks;
}
pub type CFBagApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBag {
    _unused: [u8; 0],
}
pub type CFBagRef = *const __CFBag;
pub type CFMutableBagRef = *mut __CFBag;
extern "C" {
    pub fn CFBagGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBagCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theBag: CFBagRef,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagGetCount(theBag: CFBagRef) -> CFIndex;
}
extern "C" {
    pub fn CFBagGetCountOfValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFBagContainsValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValue(
        theBag: CFBagRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBagGetValueIfPresent(
        theBag: CFBagRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValues(theBag: CFBagRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagApplyFunction(
        theBag: CFBagRef,
        applier: CFBagApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBagAddValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagReplaceValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagSetValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveAllValues(theBag: CFMutableBagRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCompareContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFBinaryHeapCompareContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFBinaryHeapCompareContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFBinaryHeapCompareContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFBinaryHeapCompareContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFBinaryHeapCompareContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFBinaryHeapCompareContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFBinaryHeapCompareContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFBinaryHeapCallBacks {
    pub version: CFIndex,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: CFAllocatorRef,
            ptr: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(allocator: CFAllocatorRef, ptr: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(
            ptr1: *const ::std::os::raw::c_void,
            ptr2: *const ::std::os::raw::c_void,
            context: *mut ::std::os::raw::c_void,
        ) -> CFComparisonResult,
    >,
}
#[test]
fn bindgen_test_layout_CFBinaryHeapCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFBinaryHeapCallBacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFBinaryHeapCallBacks>(),
        40usize,
        concat!("Size of: ", stringify!(CFBinaryHeapCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFBinaryHeapCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFBinaryHeapCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFBinaryHeapCallBacks), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFBinaryHeapCallBacks), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFBinaryHeapCallBacks), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(CFBinaryHeapCallBacks), "::", stringify!(compare))
    );
}
extern "C" {
    pub static kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
}
pub type CFBinaryHeapApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(val: *const ::std::os::raw::c_void, context: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBinaryHeap {
    _unused: [u8; 0],
}
pub type CFBinaryHeapRef = *mut __CFBinaryHeap;
extern "C" {
    pub fn CFBinaryHeapGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBinaryHeapCreate(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBinaryHeapCallBacks,
        compareContext: *const CFBinaryHeapCompareContext,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapCreateCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        heap: CFBinaryHeapRef,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapGetCountOfValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapContainsValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimumIfPresent(
        heap: CFBinaryHeapRef,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapApplyFunction(
        heap: CFBinaryHeapRef,
        applier: CFBinaryHeapApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef);
}
extern "C" {
    pub fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef);
}
pub type CFBit = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBitVector {
    _unused: [u8; 0],
}
pub type CFBitVectorRef = *const __CFBitVector;
pub type CFMutableBitVectorRef = *mut __CFBitVector;
extern "C" {
    pub fn CFBitVectorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBitVectorCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        numBits: CFIndex,
    ) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        bv: CFBitVectorRef,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorGetCount(bv: CFBitVectorRef) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> Boolean;
}
extern "C" {
    pub fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) -> CFBit;
}
extern "C" {
    pub fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: *mut UInt8);
}
extern "C" {
    pub fn CFBitVectorGetFirstIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetLastIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange);
}
extern "C" {
    pub fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit);
}
pub const OSUnknownByteOrder: _bindgen_ty_8 = 0;
pub const OSLittleEndian: _bindgen_ty_8 = 1;
pub const OSBigEndian: _bindgen_ty_8 = 2;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const __CFByteOrder_CFByteOrderUnknown: __CFByteOrder = 0;
pub const __CFByteOrder_CFByteOrderLittleEndian: __CFByteOrder = 1;
pub const __CFByteOrder_CFByteOrderBigEndian: __CFByteOrder = 2;
pub type __CFByteOrder = ::std::os::raw::c_uint;
pub type CFByteOrder = CFIndex;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFSwappedFloat32 {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_CFSwappedFloat32() {
    const UNINIT: ::std::mem::MaybeUninit<CFSwappedFloat32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFSwappedFloat32>(),
        4usize,
        concat!("Size of: ", stringify!(CFSwappedFloat32))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSwappedFloat32>(),
        4usize,
        concat!("Alignment of ", stringify!(CFSwappedFloat32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFSwappedFloat32), "::", stringify!(v))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFSwappedFloat64 {
    pub v: u64,
}
#[test]
fn bindgen_test_layout_CFSwappedFloat64() {
    const UNINIT: ::std::mem::MaybeUninit<CFSwappedFloat64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFSwappedFloat64>(),
        8usize,
        concat!("Size of: ", stringify!(CFSwappedFloat64))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSwappedFloat64>(),
        8usize,
        concat!("Alignment of ", stringify!(CFSwappedFloat64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFSwappedFloat64), "::", stringify!(v))
    );
}
pub type CFDictionaryRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFDictionaryReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFDictionaryCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFDictionaryEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFDictionaryHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFDictionaryKeyCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}
#[test]
fn bindgen_test_layout_CFDictionaryKeyCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFDictionaryKeyCallBacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFDictionaryKeyCallBacks>(),
        48usize,
        concat!("Size of: ", stringify!(CFDictionaryKeyCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFDictionaryKeyCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFDictionaryKeyCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(CFDictionaryKeyCallBacks), "::", stringify!(equal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(CFDictionaryKeyCallBacks), "::", stringify!(hash))
    );
}
extern "C" {
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
extern "C" {
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFDictionaryValueCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}
#[test]
fn bindgen_test_layout_CFDictionaryValueCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFDictionaryValueCallBacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFDictionaryValueCallBacks>(),
        40usize,
        concat!("Size of: ", stringify!(CFDictionaryValueCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFDictionaryValueCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFDictionaryValueCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(equal)
        )
    );
}
extern "C" {
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
}
pub type CFDictionaryApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDictionary {
    _unused: [u8; 0],
}
pub type CFDictionaryRef = *const __CFDictionary;
pub type CFMutableDictionaryRef = *mut __CFDictionary;
extern "C" {
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDictionaryCreate(
        allocator: CFAllocatorRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateCopy(
        allocator: CFAllocatorRef,
        theDict: CFDictionaryRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theDict: CFDictionaryRef,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryGetCount(theDict: CFDictionaryRef) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryContainsKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryContainsValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetValue(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFDictionaryGetValueIfPresent(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetKeysAndValues(
        theDict: CFDictionaryRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryApplyFunction(
        theDict: CFDictionaryRef,
        applier: CFDictionaryApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryAddValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionarySetValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryReplaceValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef);
}
pub type CFNotificationName = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNotificationCenter {
    _unused: [u8; 0],
}
pub type CFNotificationCenterRef = *mut __CFNotificationCenter;
pub type CFNotificationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        center: CFNotificationCenterRef,
        observer: *mut ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
    ),
>;
pub type CFNotificationSuspensionBehavior = CFIndex;
pub const CFNotificationSuspensionBehaviorDrop: _bindgen_ty_9 = 1;
pub const CFNotificationSuspensionBehaviorCoalesce: _bindgen_ty_9 = 2;
pub const CFNotificationSuspensionBehaviorHold: _bindgen_ty_9 = 3;
pub const CFNotificationSuspensionBehaviorDeliverImmediately: _bindgen_ty_9 = 4;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNotificationCenterGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNotificationCenterGetLocalCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDistributedCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDarwinNotifyCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterAddObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        callBack: CFNotificationCallback,
        name: CFStringRef,
        object: *const ::std::os::raw::c_void,
        suspensionBehavior: CFNotificationSuspensionBehavior,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveEveryObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterPostNotification(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        deliverImmediately: Boolean,
    );
}
pub const kCFNotificationDeliverImmediately: _bindgen_ty_10 = 1;
pub const kCFNotificationPostToAllSessions: _bindgen_ty_10 = 2;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNotificationCenterPostNotificationWithOptions(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        options: CFOptionFlags,
    );
}
pub type CFLocaleIdentifier = CFStringRef;
pub type CFLocaleKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFLocale {
    _unused: [u8; 0],
}
pub type CFLocaleRef = *const __CFLocale;
extern "C" {
    pub fn CFLocaleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFLocaleGetSystem() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyCurrent() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLanguageIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
        allocator: CFAllocatorRef,
        lcode: LangCode,
        rcode: RegionCode,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
        allocator: CFAllocatorRef,
        lcid: u32,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
        localeIdentifier: CFLocaleIdentifier,
    ) -> u32;
}
pub type CFLocaleLanguageDirection = CFIndex;
pub const kCFLocaleLanguageDirectionUnknown: _bindgen_ty_11 = 0;
pub const kCFLocaleLanguageDirectionLeftToRight: _bindgen_ty_11 = 1;
pub const kCFLocaleLanguageDirectionRightToLeft: _bindgen_ty_11 = 2;
pub const kCFLocaleLanguageDirectionTopToBottom: _bindgen_ty_11 = 3;
pub const kCFLocaleLanguageDirectionBottomToTop: _bindgen_ty_11 = 4;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFLocaleGetLanguageCharacterDirection(
        isoLangCode: CFStringRef,
    ) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleCreateComponentsFromLocaleIdentifier(
        allocator: CFAllocatorRef,
        localeID: CFLocaleIdentifier,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromComponents(
        allocator: CFAllocatorRef,
        dictionary: CFDictionaryRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreate(
        allocator: CFAllocatorRef,
        localeIdentifier: CFLocaleIdentifier,
    ) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) -> CFTypeRef;
}
extern "C" {
    pub fn CFLocaleCopyDisplayNameForPropertyValue(
        displayLocale: CFLocaleRef,
        key: CFLocaleKey,
        value: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
}
extern "C" {
    pub static kCFLocaleIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleLanguageCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCountryCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleScriptCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleVariantCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleExemplarCharacterSet: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendarIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendar: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollationIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleUsesMetricSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleMeasurementSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleDecimalSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleGroupingSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencySymbol: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencyCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollatorIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
}
pub type CFCalendarIdentifier = CFStringRef;
extern "C" {
    pub static kCFGregorianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFBuddhistCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFChineseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFHebrewCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCivilCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFJapaneseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFPersianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIndianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFISO8601Calendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicTabularCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
}
pub type CFTimeInterval = f64;
pub type CFAbsoluteTime = CFTimeInterval;
extern "C" {
    pub fn CFAbsoluteTimeGetCurrent() -> CFAbsoluteTime;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDate {
    _unused: [u8; 0],
}
pub type CFDateRef = *const __CFDate;
extern "C" {
    pub fn CFDateGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) -> CFDateRef;
}
extern "C" {
    pub fn CFDateGetAbsoluteTime(theDate: CFDateRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFDateGetTimeIntervalSinceDate(
        theDate: CFDateRef,
        otherDate: CFDateRef,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFDateCompare(
        theDate: CFDateRef,
        otherDate: CFDateRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTimeZone {
    _unused: [u8; 0],
}
pub type CFTimeZoneRef = *const __CFTimeZone;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFGregorianDate {
    pub year: SInt32,
    pub month: SInt8,
    pub day: SInt8,
    pub hour: SInt8,
    pub minute: SInt8,
    pub second: f64,
}
#[test]
fn bindgen_test_layout_CFGregorianDate() {
    const UNINIT: ::std::mem::MaybeUninit<CFGregorianDate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFGregorianDate>(),
        16usize,
        concat!("Size of: ", stringify!(CFGregorianDate))
    );
    assert_eq!(
        ::std::mem::align_of::<CFGregorianDate>(),
        8usize,
        concat!("Alignment of ", stringify!(CFGregorianDate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFGregorianDate), "::", stringify!(year))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(CFGregorianDate), "::", stringify!(month))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        5usize,
        concat!("Offset of field: ", stringify!(CFGregorianDate), "::", stringify!(day))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(CFGregorianDate), "::", stringify!(hour))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        7usize,
        concat!("Offset of field: ", stringify!(CFGregorianDate), "::", stringify!(minute))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFGregorianDate), "::", stringify!(second))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFGregorianUnits {
    pub years: SInt32,
    pub months: SInt32,
    pub days: SInt32,
    pub hours: SInt32,
    pub minutes: SInt32,
    pub seconds: f64,
}
#[test]
fn bindgen_test_layout_CFGregorianUnits() {
    const UNINIT: ::std::mem::MaybeUninit<CFGregorianUnits> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFGregorianUnits>(),
        32usize,
        concat!("Size of: ", stringify!(CFGregorianUnits))
    );
    assert_eq!(
        ::std::mem::align_of::<CFGregorianUnits>(),
        8usize,
        concat!("Alignment of ", stringify!(CFGregorianUnits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).years) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFGregorianUnits), "::", stringify!(years))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).months) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(CFGregorianUnits), "::", stringify!(months))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).days) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFGregorianUnits), "::", stringify!(days))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hours) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(CFGregorianUnits), "::", stringify!(hours))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minutes) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFGregorianUnits), "::", stringify!(minutes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFGregorianUnits), "::", stringify!(seconds))
    );
}
pub type CFGregorianUnitFlags = CFOptionFlags;
pub const kCFGregorianUnitsYears: _bindgen_ty_12 = 1;
pub const kCFGregorianUnitsMonths: _bindgen_ty_12 = 2;
pub const kCFGregorianUnitsDays: _bindgen_ty_12 = 4;
pub const kCFGregorianUnitsHours: _bindgen_ty_12 = 8;
pub const kCFGregorianUnitsMinutes: _bindgen_ty_12 = 16;
pub const kCFGregorianUnitsSeconds: _bindgen_ty_12 = 32;
pub const kCFGregorianAllUnits: _bindgen_ty_12 = 16777215;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) -> Boolean;
}
extern "C" {
    pub fn CFGregorianDateGetAbsoluteTime(
        gdate: CFGregorianDate,
        tz: CFTimeZoneRef,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef)
        -> CFGregorianDate;
}
extern "C" {
    pub fn CFAbsoluteTimeAddGregorianUnits(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        units: CFGregorianUnits,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(
        at1: CFAbsoluteTime,
        at2: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        unitFlags: CFOptionFlags,
    ) -> CFGregorianUnits;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFData {
    _unused: [u8; 0],
}
pub type CFDataRef = *const __CFData;
pub type CFMutableDataRef = *mut __CFData;
extern "C" {
    pub fn CFDataGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDataCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateWithBytesNoCopy(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theData: CFDataRef,
    ) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataGetLength(theData: CFDataRef) -> CFIndex;
}
extern "C" {
    pub fn CFDataGetBytePtr(theData: CFDataRef) -> *const UInt8;
}
extern "C" {
    pub fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) -> *mut UInt8;
}
extern "C" {
    pub fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: *mut UInt8);
}
extern "C" {
    pub fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex);
}
extern "C" {
    pub fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex);
}
extern "C" {
    pub fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: *const UInt8, length: CFIndex);
}
extern "C" {
    pub fn CFDataReplaceBytes(
        theData: CFMutableDataRef,
        range: CFRange,
        newBytes: *const UInt8,
        newLength: CFIndex,
    );
}
extern "C" {
    pub fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange);
}
pub type CFDataSearchFlags = CFOptionFlags;
pub const kCFDataSearchBackwards: _bindgen_ty_13 = 1;
pub const kCFDataSearchAnchored: _bindgen_ty_13 = 2;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFDataFind(
        theData: CFDataRef,
        dataToFind: CFDataRef,
        searchRange: CFRange,
        compareOptions: CFDataSearchFlags,
    ) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCharacterSet {
    _unused: [u8; 0],
}
pub type CFCharacterSetRef = *const __CFCharacterSet;
pub type CFMutableCharacterSetRef = *mut __CFCharacterSet;
pub type CFCharacterSetPredefinedSet = CFIndex;
pub const kCFCharacterSetControl: _bindgen_ty_14 = 1;
pub const kCFCharacterSetWhitespace: _bindgen_ty_14 = 2;
pub const kCFCharacterSetWhitespaceAndNewline: _bindgen_ty_14 = 3;
pub const kCFCharacterSetDecimalDigit: _bindgen_ty_14 = 4;
pub const kCFCharacterSetLetter: _bindgen_ty_14 = 5;
pub const kCFCharacterSetLowercaseLetter: _bindgen_ty_14 = 6;
pub const kCFCharacterSetUppercaseLetter: _bindgen_ty_14 = 7;
pub const kCFCharacterSetNonBase: _bindgen_ty_14 = 8;
pub const kCFCharacterSetDecomposable: _bindgen_ty_14 = 9;
pub const kCFCharacterSetAlphaNumeric: _bindgen_ty_14 = 10;
pub const kCFCharacterSetPunctuation: _bindgen_ty_14 = 11;
pub const kCFCharacterSetCapitalizedLetter: _bindgen_ty_14 = 13;
pub const kCFCharacterSetSymbol: _bindgen_ty_14 = 14;
pub const kCFCharacterSetNewline: _bindgen_ty_14 = 15;
pub const kCFCharacterSetIllegal: _bindgen_ty_14 = 12;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFCharacterSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCharacterSetGetPredefined(
        theSetIdentifier: CFCharacterSetPredefinedSet,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInRange(
        alloc: CFAllocatorRef,
        theRange: CFRange,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInString(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithBitmapRepresentation(
        alloc: CFAllocatorRef,
        theData: CFDataRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateInvertedSet(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsSupersetOfSet(
        theSet: CFCharacterSetRef,
        theOtherset: CFCharacterSetRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateMutableCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetIsLongCharacterMember(
        theSet: CFCharacterSetRef,
        theChar: UTF32Char,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateBitmapRepresentation(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange);
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInRange(
        theSet: CFMutableCharacterSetRef,
        theRange: CFRange,
    );
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef);
}
extern "C" {
    pub fn CFCharacterSetIntersect(
        theSet: CFMutableCharacterSetRef,
        theOtherSet: CFCharacterSetRef,
    );
}
extern "C" {
    pub fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef);
}
pub type CFErrorDomain = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFError {
    _unused: [u8; 0],
}
pub type CFErrorRef = *mut __CFError;
extern "C" {
    pub fn CFErrorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFErrorDomainPOSIX: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainOSStatus: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainMach: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainCocoa: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorLocalizedDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureReasonKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorUnderlyingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorURLKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorFilePathKey: CFStringRef;
}
extern "C" {
    pub fn CFErrorCreate(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfo: CFDictionaryRef,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorCreateWithUserInfoKeysAndValues(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfoKeys: *const *const ::std::os::raw::c_void,
        userInfoValues: *const *const ::std::os::raw::c_void,
        numUserInfoValues: CFIndex,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorGetDomain(err: CFErrorRef) -> CFErrorDomain;
}
extern "C" {
    pub fn CFErrorGetCode(err: CFErrorRef) -> CFIndex;
}
extern "C" {
    pub fn CFErrorCopyUserInfo(err: CFErrorRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFErrorCopyDescription(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyFailureReason(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) -> CFStringRef;
}
pub type CFStringEncoding = UInt32;
pub type CFStringBuiltInEncodings = CFStringEncoding;
pub const kCFStringEncodingMacRoman: _bindgen_ty_15 = 0;
pub const kCFStringEncodingWindowsLatin1: _bindgen_ty_15 = 1280;
pub const kCFStringEncodingISOLatin1: _bindgen_ty_15 = 513;
pub const kCFStringEncodingNextStepLatin: _bindgen_ty_15 = 2817;
pub const kCFStringEncodingASCII: _bindgen_ty_15 = 1536;
pub const kCFStringEncodingUnicode: _bindgen_ty_15 = 256;
pub const kCFStringEncodingUTF8: _bindgen_ty_15 = 134217984;
pub const kCFStringEncodingNonLossyASCII: _bindgen_ty_15 = 3071;
pub const kCFStringEncodingUTF16: _bindgen_ty_15 = 256;
pub const kCFStringEncodingUTF16BE: _bindgen_ty_15 = 268435712;
pub const kCFStringEncodingUTF16LE: _bindgen_ty_15 = 335544576;
pub const kCFStringEncodingUTF32: _bindgen_ty_15 = 201326848;
pub const kCFStringEncodingUTF32BE: _bindgen_ty_15 = 402653440;
pub const kCFStringEncodingUTF32LE: _bindgen_ty_15 = 469762304;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringCreateWithPascalString(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCString(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytes(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharacters(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithPascalStringNoCopy(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCStringNoCopy(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: *mut __va_list_tag,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        errorPtr: *mut CFErrorRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        arguments: *mut __va_list_tag,
        errorPtr: *mut CFErrorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        theString: CFStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableWithExternalCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *mut UniChar,
        numChars: CFIndex,
        capacity: CFIndex,
        externalCharactersAllocator: CFAllocatorRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringGetLength(theString: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) -> UniChar;
}
extern "C" {
    pub fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: *mut UniChar);
}
extern "C" {
    pub fn CFStringGetPascalString(
        theString: CFStringRef,
        buffer: StringPtr,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetCString(
        theString: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetPascalStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> ConstStringPtr;
}
extern "C" {
    pub fn CFStringGetCStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CFStringGetCharactersPtr(theString: CFStringRef) -> *const UniChar;
}
extern "C" {
    pub fn CFStringGetBytes(
        theString: CFStringRef,
        range: CFRange,
        encoding: CFStringEncoding,
        lossByte: UInt8,
        isExternalRepresentation: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
        usedBufLen: *mut CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateFromExternalRepresentation(
        alloc: CFAllocatorRef,
        data: CFDataRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateExternalRepresentation(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        encoding: CFStringEncoding,
        lossByte: UInt8,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFStringGetSmallestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetFastestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetSystemEncoding() -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetMaximumSizeForEncoding(
        length: CFIndex,
        encoding: CFStringEncoding,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetFileSystemRepresentation(
        string: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateWithFileSystemRepresentation(
        alloc: CFAllocatorRef,
        buffer: *const ::std::os::raw::c_char,
    ) -> CFStringRef;
}
pub type CFStringCompareFlags = CFOptionFlags;
pub const kCFCompareCaseInsensitive: _bindgen_ty_16 = 1;
pub const kCFCompareBackwards: _bindgen_ty_16 = 4;
pub const kCFCompareAnchored: _bindgen_ty_16 = 8;
pub const kCFCompareNonliteral: _bindgen_ty_16 = 16;
pub const kCFCompareLocalized: _bindgen_ty_16 = 32;
pub const kCFCompareNumerically: _bindgen_ty_16 = 64;
pub const kCFCompareDiacriticInsensitive: _bindgen_ty_16 = 128;
pub const kCFCompareWidthInsensitive: _bindgen_ty_16 = 256;
pub const kCFCompareForcedOrdering: _bindgen_ty_16 = 512;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFStringCompareWithOptionsAndLocale(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompareWithOptions(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompare(
        theString1: CFStringRef,
        theString2: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringFindWithOptionsAndLocale(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringFindWithOptions(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateArrayWithFindResults(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringFind(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringGetRangeOfComposedCharactersAtIndex(
        theString: CFStringRef,
        theIndex: CFIndex,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringFindCharacterFromSet(
        theString: CFStringRef,
        theSet: CFCharacterSetRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetLineBounds(
        theString: CFStringRef,
        range: CFRange,
        lineBeginIndex: *mut CFIndex,
        lineEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetParagraphBounds(
        string: CFStringRef,
        range: CFRange,
        parBeginIndex: *mut CFIndex,
        parEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetHyphenationLocationBeforeIndex(
        string: CFStringRef,
        location: CFIndex,
        limitRange: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
        character: *mut UTF32Char,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateByCombiningStrings(
        alloc: CFAllocatorRef,
        theArray: CFArrayRef,
        separatorString: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateArrayBySeparatingStrings(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        separatorString: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringGetIntValue(str_: CFStringRef) -> SInt32;
}
extern "C" {
    pub fn CFStringGetDoubleValue(str_: CFStringRef) -> f64;
}
extern "C" {
    pub fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef);
}
extern "C" {
    pub fn CFStringAppendCharacters(
        theString: CFMutableStringRef,
        chars: *const UniChar,
        numChars: CFIndex,
    );
}
extern "C" {
    pub fn CFStringAppendPascalString(
        theString: CFMutableStringRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendCString(
        theString: CFMutableStringRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendFormat(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    );
}
extern "C" {
    pub fn CFStringAppendFormatAndArguments(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn CFStringInsert(str_: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef);
}
extern "C" {
    pub fn CFStringDelete(theString: CFMutableStringRef, range: CFRange);
}
extern "C" {
    pub fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringFindAndReplace(
        theString: CFMutableStringRef,
        stringToFind: CFStringRef,
        replacementString: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringSetExternalCharactersNoCopy(
        theString: CFMutableStringRef,
        chars: *mut UniChar,
        length: CFIndex,
        capacity: CFIndex,
    );
}
extern "C" {
    pub fn CFStringPad(
        theString: CFMutableStringRef,
        padString: CFStringRef,
        length: CFIndex,
        indexIntoPad: CFIndex,
    );
}
extern "C" {
    pub fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef);
}
extern "C" {
    pub fn CFStringTrimWhitespace(theString: CFMutableStringRef);
}
extern "C" {
    pub fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef);
}
pub type CFStringNormalizationForm = CFIndex;
pub const kCFStringNormalizationFormD: _bindgen_ty_17 = 0;
pub const kCFStringNormalizationFormKD: _bindgen_ty_17 = 1;
pub const kCFStringNormalizationFormC: _bindgen_ty_17 = 2;
pub const kCFStringNormalizationFormKC: _bindgen_ty_17 = 3;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm);
}
extern "C" {
    pub fn CFStringFold(
        theString: CFMutableStringRef,
        theFlags: CFStringCompareFlags,
        theLocale: CFLocaleRef,
    );
}
extern "C" {
    pub fn CFStringTransform(
        string: CFMutableStringRef,
        range: *mut CFRange,
        transform: CFStringRef,
        reverse: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub static kCFStringTransformStripCombiningMarks: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHiragana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformHiraganaKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformMandarinLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHangul: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinArabic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHebrew: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinThai: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinCyrillic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinGreek: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToXMLHex: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToUnicodeName: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformStripDiacritics: CFStringRef;
}
extern "C" {
    pub fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) -> Boolean;
}
extern "C" {
    pub fn CFStringGetListOfAvailableEncodings() -> *const CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringConvertEncodingToNSStringEncoding(
        encoding: CFStringEncoding,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn CFStringConvertNSStringEncodingToEncoding(
        encoding: ::std::os::raw::c_ulong,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) -> UInt32;
}
extern "C" {
    pub fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringGetMostCompatibleMacStringEncoding(
        encoding: CFStringEncoding,
    ) -> CFStringEncoding;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStringInlineBuffer {
    pub buffer: [UniChar; 64usize],
    pub theString: CFStringRef,
    pub directUniCharBuffer: *const UniChar,
    pub directCStringBuffer: *const ::std::os::raw::c_char,
    pub rangeToBuffer: CFRange,
    pub bufferedRangeStart: CFIndex,
    pub bufferedRangeEnd: CFIndex,
}
#[test]
fn bindgen_test_layout_CFStringInlineBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<CFStringInlineBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFStringInlineBuffer>(),
        184usize,
        concat!("Size of: ", stringify!(CFStringInlineBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<CFStringInlineBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(CFStringInlineBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFStringInlineBuffer), "::", stringify!(buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).theString) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(CFStringInlineBuffer), "::", stringify!(theString))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).directUniCharBuffer) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(directUniCharBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).directCStringBuffer) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(directCStringBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeToBuffer) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(rangeToBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferedRangeStart) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(bufferedRangeStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferedRangeEnd) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(bufferedRangeEnd)
        )
    );
}
impl Default for CFStringInlineBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn CFShow(obj: CFTypeRef);
}
extern "C" {
    pub fn CFShowStr(str_: CFStringRef);
}
extern "C" {
    pub fn __CFStringMakeConstantString(cStr: *const ::std::os::raw::c_char) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTimeZoneCopySystem() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneResetSystem();
}
extern "C" {
    pub fn CFTimeZoneCopyDefault() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneSetDefault(tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFTimeZoneCopyKnownNames() -> CFArrayRef;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviationDictionary() -> CFDictionaryRef;
}
extern "C" {
    pub fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef);
}
extern "C" {
    pub fn CFTimeZoneCreate(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        data: CFDataRef,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithTimeIntervalFromGMT(
        allocator: CFAllocatorRef,
        ti: CFTimeInterval,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithName(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        tryAbbrev: Boolean,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneGetName(tz: CFTimeZoneRef) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetData(tz: CFTimeZoneRef) -> CFDataRef;
}
extern "C" {
    pub fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> Boolean;
}
extern "C" {
    pub fn CFTimeZoneGetDaylightSavingTimeOffset(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneGetNextDaylightSavingTimeTransition(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFAbsoluteTime;
}
pub type CFTimeZoneNameStyle = CFIndex;
pub const kCFTimeZoneNameStyleStandard: _bindgen_ty_18 = 0;
pub const kCFTimeZoneNameStyleShortStandard: _bindgen_ty_18 = 1;
pub const kCFTimeZoneNameStyleDaylightSaving: _bindgen_ty_18 = 2;
pub const kCFTimeZoneNameStyleShortDaylightSaving: _bindgen_ty_18 = 3;
pub const kCFTimeZoneNameStyleGeneric: _bindgen_ty_18 = 4;
pub const kCFTimeZoneNameStyleShortGeneric: _bindgen_ty_18 = 5;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFTimeZoneCopyLocalizedName(
        tz: CFTimeZoneRef,
        style: CFTimeZoneNameStyle,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCalendar {
    _unused: [u8; 0],
}
pub type CFCalendarRef = *mut __CFCalendar;
extern "C" {
    pub fn CFCalendarGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCalendarCopyCurrent() -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarCreateWithIdentifier(
        allocator: CFAllocatorRef,
        identifier: CFCalendarIdentifier,
    ) -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarGetIdentifier(calendar: CFCalendarRef) -> CFCalendarIdentifier;
}
extern "C" {
    pub fn CFCalendarCopyLocale(calendar: CFCalendarRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex);
}
extern "C" {
    pub fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex);
}
pub type CFCalendarUnit = CFOptionFlags;
pub const kCFCalendarUnitEra: _bindgen_ty_19 = 2;
pub const kCFCalendarUnitYear: _bindgen_ty_19 = 4;
pub const kCFCalendarUnitMonth: _bindgen_ty_19 = 8;
pub const kCFCalendarUnitDay: _bindgen_ty_19 = 16;
pub const kCFCalendarUnitHour: _bindgen_ty_19 = 32;
pub const kCFCalendarUnitMinute: _bindgen_ty_19 = 64;
pub const kCFCalendarUnitSecond: _bindgen_ty_19 = 128;
pub const kCFCalendarUnitWeek: _bindgen_ty_19 = 256;
pub const kCFCalendarUnitWeekday: _bindgen_ty_19 = 512;
pub const kCFCalendarUnitWeekdayOrdinal: _bindgen_ty_19 = 1024;
pub const kCFCalendarUnitQuarter: _bindgen_ty_19 = 2048;
pub const kCFCalendarUnitWeekOfMonth: _bindgen_ty_19 = 4096;
pub const kCFCalendarUnitWeekOfYear: _bindgen_ty_19 = 8192;
pub const kCFCalendarUnitYearForWeekOfYear: _bindgen_ty_19 = 16384;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFCalendarGetMinimumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetMaximumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetRangeOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetOrdinalityOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarGetTimeRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
        at: CFAbsoluteTime,
        startp: *mut CFAbsoluteTime,
        tip: *mut CFTimeInterval,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarComposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarDecomposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub const kCFCalendarComponentsWrap: _bindgen_ty_20 = 1;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFCalendarAddComponents(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarGetComponentDifference(
        calendar: CFCalendarRef,
        startingAT: CFAbsoluteTime,
        resultAT: CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub type CGFloat = f64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CGPoint {
    pub x: CGFloat,
    pub y: CGFloat,
}
#[test]
fn bindgen_test_layout_CGPoint() {
    const UNINIT: ::std::mem::MaybeUninit<CGPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CGPoint>(),
        16usize,
        concat!("Size of: ", stringify!(CGPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<CGPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(CGPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CGPoint), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CGPoint), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CGSize {
    pub width: CGFloat,
    pub height: CGFloat,
}
#[test]
fn bindgen_test_layout_CGSize() {
    const UNINIT: ::std::mem::MaybeUninit<CGSize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<CGSize>(), 16usize, concat!("Size of: ", stringify!(CGSize)));
    assert_eq!(
        ::std::mem::align_of::<CGSize>(),
        8usize,
        concat!("Alignment of ", stringify!(CGSize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CGSize), "::", stringify!(width))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CGSize), "::", stringify!(height))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CGVector {
    pub dx: CGFloat,
    pub dy: CGFloat,
}
#[test]
fn bindgen_test_layout_CGVector() {
    const UNINIT: ::std::mem::MaybeUninit<CGVector> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CGVector>(),
        16usize,
        concat!("Size of: ", stringify!(CGVector))
    );
    assert_eq!(
        ::std::mem::align_of::<CGVector>(),
        8usize,
        concat!("Alignment of ", stringify!(CGVector))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dx) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CGVector), "::", stringify!(dx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dy) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CGVector), "::", stringify!(dy))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CGRect {
    pub origin: CGPoint,
    pub size: CGSize,
}
#[test]
fn bindgen_test_layout_CGRect() {
    const UNINIT: ::std::mem::MaybeUninit<CGRect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<CGRect>(), 32usize, concat!("Size of: ", stringify!(CGRect)));
    assert_eq!(
        ::std::mem::align_of::<CGRect>(),
        8usize,
        concat!("Alignment of ", stringify!(CGRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).origin) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CGRect), "::", stringify!(origin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CGRect), "::", stringify!(size))
    );
}
pub type CGRectEdge = u32;
pub const CGRectMinXEdge: _bindgen_ty_21 = 0;
pub const CGRectMinYEdge: _bindgen_ty_21 = 1;
pub const CGRectMaxXEdge: _bindgen_ty_21 = 2;
pub const CGRectMaxYEdge: _bindgen_ty_21 = 3;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CGAffineTransform {
    pub a: CGFloat,
    pub b: CGFloat,
    pub c: CGFloat,
    pub d: CGFloat,
    pub tx: CGFloat,
    pub ty: CGFloat,
}
#[test]
fn bindgen_test_layout_CGAffineTransform() {
    const UNINIT: ::std::mem::MaybeUninit<CGAffineTransform> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CGAffineTransform>(),
        48usize,
        concat!("Size of: ", stringify!(CGAffineTransform))
    );
    assert_eq!(
        ::std::mem::align_of::<CGAffineTransform>(),
        8usize,
        concat!("Alignment of ", stringify!(CGAffineTransform))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CGAffineTransform), "::", stringify!(a))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CGAffineTransform), "::", stringify!(b))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CGAffineTransform), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CGAffineTransform), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tx) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(CGAffineTransform), "::", stringify!(tx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(CGAffineTransform), "::", stringify!(ty))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CGAffineTransformComponents {
    pub scale: CGSize,
    pub horizontalShear: CGFloat,
    pub rotation: CGFloat,
    pub translation: CGVector,
}
#[test]
fn bindgen_test_layout_CGAffineTransformComponents() {
    const UNINIT: ::std::mem::MaybeUninit<CGAffineTransformComponents> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CGAffineTransformComponents>(),
        48usize,
        concat!("Size of: ", stringify!(CGAffineTransformComponents))
    );
    assert_eq!(
        ::std::mem::align_of::<CGAffineTransformComponents>(),
        8usize,
        concat!("Alignment of ", stringify!(CGAffineTransformComponents))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CGAffineTransformComponents),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizontalShear) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CGAffineTransformComponents),
            "::",
            stringify!(horizontalShear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CGAffineTransformComponents),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).translation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CGAffineTransformComponents),
            "::",
            stringify!(translation)
        )
    );
}
pub type CFDateFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDateFormatter {
    _unused: [u8; 0],
}
pub type CFDateFormatterRef = *mut __CFDateFormatter;
extern "C" {
    pub fn CFDateFormatterCreateDateFormatFromTemplate(
        allocator: CFAllocatorRef,
        tmplate: CFStringRef,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterGetTypeID() -> CFTypeID;
}
pub type CFDateFormatterStyle = CFIndex;
pub const kCFDateFormatterNoStyle: _bindgen_ty_22 = 0;
pub const kCFDateFormatterShortStyle: _bindgen_ty_22 = 1;
pub const kCFDateFormatterMediumStyle: _bindgen_ty_22 = 2;
pub const kCFDateFormatterLongStyle: _bindgen_ty_22 = 3;
pub const kCFDateFormatterFullStyle: _bindgen_ty_22 = 4;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub type CFISO8601DateFormatOptions = CFOptionFlags;
pub const kCFISO8601DateFormatWithYear: _bindgen_ty_23 = 1;
pub const kCFISO8601DateFormatWithMonth: _bindgen_ty_23 = 2;
pub const kCFISO8601DateFormatWithWeekOfYear: _bindgen_ty_23 = 4;
pub const kCFISO8601DateFormatWithDay: _bindgen_ty_23 = 16;
pub const kCFISO8601DateFormatWithTime: _bindgen_ty_23 = 32;
pub const kCFISO8601DateFormatWithTimeZone: _bindgen_ty_23 = 64;
pub const kCFISO8601DateFormatWithSpaceBetweenDateAndTime: _bindgen_ty_23 = 128;
pub const kCFISO8601DateFormatWithDashSeparatorInDate: _bindgen_ty_23 = 256;
pub const kCFISO8601DateFormatWithColonSeparatorInTime: _bindgen_ty_23 = 512;
pub const kCFISO8601DateFormatWithColonSeparatorInTimeZone: _bindgen_ty_23 = 1024;
pub const kCFISO8601DateFormatWithFractionalSeconds: _bindgen_ty_23 = 2048;
pub const kCFISO8601DateFormatWithFullDate: _bindgen_ty_23 = 275;
pub const kCFISO8601DateFormatWithFullTime: _bindgen_ty_23 = 1632;
pub const kCFISO8601DateFormatWithInternetDateTime: _bindgen_ty_23 = 1907;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFDateFormatterCreateISO8601Formatter(
        allocator: CFAllocatorRef,
        formatOptions: CFISO8601DateFormatOptions,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        dateStyle: CFDateFormatterStyle,
        timeStyle: CFDateFormatterStyle,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithDate(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        date: CFDateRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithAbsoluteTime(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        at: CFAbsoluteTime,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateDateFromString(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
    ) -> CFDateRef;
}
extern "C" {
    pub fn CFDateFormatterGetAbsoluteTimeFromString(
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        atp: *mut CFAbsoluteTime,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDateFormatterSetProperty(
        formatter: CFDateFormatterRef,
        key: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFDateFormatterCopyProperty(
        formatter: CFDateFormatterRef,
        key: CFDateFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFDateFormatterIsLenient: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTimeZone: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendarName: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultFormat: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendar: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterAMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterPMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBoolean {
    _unused: [u8; 0],
}
pub type CFBooleanRef = *const __CFBoolean;
extern "C" {
    pub static kCFBooleanTrue: CFBooleanRef;
}
extern "C" {
    pub static kCFBooleanFalse: CFBooleanRef;
}
extern "C" {
    pub fn CFBooleanGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBooleanGetValue(boolean: CFBooleanRef) -> Boolean;
}
pub type CFNumberType = CFIndex;
pub const kCFNumberSInt8Type: _bindgen_ty_24 = 1;
pub const kCFNumberSInt16Type: _bindgen_ty_24 = 2;
pub const kCFNumberSInt32Type: _bindgen_ty_24 = 3;
pub const kCFNumberSInt64Type: _bindgen_ty_24 = 4;
pub const kCFNumberFloat32Type: _bindgen_ty_24 = 5;
pub const kCFNumberFloat64Type: _bindgen_ty_24 = 6;
pub const kCFNumberCharType: _bindgen_ty_24 = 7;
pub const kCFNumberShortType: _bindgen_ty_24 = 8;
pub const kCFNumberIntType: _bindgen_ty_24 = 9;
pub const kCFNumberLongType: _bindgen_ty_24 = 10;
pub const kCFNumberLongLongType: _bindgen_ty_24 = 11;
pub const kCFNumberFloatType: _bindgen_ty_24 = 12;
pub const kCFNumberDoubleType: _bindgen_ty_24 = 13;
pub const kCFNumberCFIndexType: _bindgen_ty_24 = 14;
pub const kCFNumberNSIntegerType: _bindgen_ty_24 = 15;
pub const kCFNumberCGFloatType: _bindgen_ty_24 = 16;
pub const kCFNumberMaxType: _bindgen_ty_24 = 16;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumber {
    _unused: [u8; 0],
}
pub type CFNumberRef = *const __CFNumber;
extern "C" {
    pub static kCFNumberPositiveInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNegativeInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNaN: CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNumberCreate(
        allocator: CFAllocatorRef,
        theType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetType(number: CFNumberRef) -> CFNumberType;
}
extern "C" {
    pub fn CFNumberGetByteSize(number: CFNumberRef) -> CFIndex;
}
extern "C" {
    pub fn CFNumberIsFloatType(number: CFNumberRef) -> Boolean;
}
extern "C" {
    pub fn CFNumberGetValue(
        number: CFNumberRef,
        theType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberCompare(
        number: CFNumberRef,
        otherNumber: CFNumberRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
pub type CFNumberFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumberFormatter {
    _unused: [u8; 0],
}
pub type CFNumberFormatterRef = *mut __CFNumberFormatter;
extern "C" {
    pub fn CFNumberFormatterGetTypeID() -> CFTypeID;
}
pub type CFNumberFormatterStyle = CFIndex;
pub const kCFNumberFormatterNoStyle: _bindgen_ty_25 = 0;
pub const kCFNumberFormatterDecimalStyle: _bindgen_ty_25 = 1;
pub const kCFNumberFormatterCurrencyStyle: _bindgen_ty_25 = 2;
pub const kCFNumberFormatterPercentStyle: _bindgen_ty_25 = 3;
pub const kCFNumberFormatterScientificStyle: _bindgen_ty_25 = 4;
pub const kCFNumberFormatterSpellOutStyle: _bindgen_ty_25 = 5;
pub const kCFNumberFormatterOrdinalStyle: _bindgen_ty_25 = 6;
pub const kCFNumberFormatterCurrencyISOCodeStyle: _bindgen_ty_25 = 8;
pub const kCFNumberFormatterCurrencyPluralStyle: _bindgen_ty_25 = 9;
pub const kCFNumberFormatterCurrencyAccountingStyle: _bindgen_ty_25 = 10;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNumberFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        style: CFNumberFormatterStyle,
    ) -> CFNumberFormatterRef;
}
extern "C" {
    pub fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) -> CFNumberFormatterStyle;
}
extern "C" {
    pub fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithNumber(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        number: CFNumberRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithValue(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        numberType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFStringRef;
}
pub type CFNumberFormatterOptionFlags = CFOptionFlags;
pub const kCFNumberFormatterParseIntegersOnly: _bindgen_ty_26 = 1;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNumberFormatterCreateNumberFromString(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        options: CFOptionFlags,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberFormatterGetValueFromString(
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        numberType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberFormatterSetProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFNumberFormatterCopyProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPlusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMultiplier: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterIsLenient: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
}
pub type CFNumberFormatterRoundingMode = CFIndex;
pub const kCFNumberFormatterRoundCeiling: _bindgen_ty_27 = 0;
pub const kCFNumberFormatterRoundFloor: _bindgen_ty_27 = 1;
pub const kCFNumberFormatterRoundDown: _bindgen_ty_27 = 2;
pub const kCFNumberFormatterRoundUp: _bindgen_ty_27 = 3;
pub const kCFNumberFormatterRoundHalfEven: _bindgen_ty_27 = 4;
pub const kCFNumberFormatterRoundHalfDown: _bindgen_ty_27 = 5;
pub const kCFNumberFormatterRoundHalfUp: _bindgen_ty_27 = 6;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
pub type CFNumberFormatterPadPosition = CFIndex;
pub const kCFNumberFormatterPadBeforePrefix: _bindgen_ty_28 = 0;
pub const kCFNumberFormatterPadAfterPrefix: _bindgen_ty_28 = 1;
pub const kCFNumberFormatterPadBeforeSuffix: _bindgen_ty_28 = 2;
pub const kCFNumberFormatterPadAfterSuffix: _bindgen_ty_28 = 3;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNumberFormatterGetDecimalInfoForCurrencyCode(
        currencyCode: CFStringRef,
        defaultFractionDigits: *mut i32,
        roundingIncrement: *mut f64,
    ) -> Boolean;
}
extern "C" {
    pub static kCFPreferencesAnyApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyUser: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentUser: CFStringRef;
}
extern "C" {
    pub fn CFPreferencesCopyAppValue(
        key: CFStringRef,
        applicationID: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesGetAppBooleanValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesGetAppIntegerValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPreferencesSetAppValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef);
}
extern "C" {
    pub fn CFPreferencesRemoveSuitePreferencesFromApp(
        applicationID: CFStringRef,
        suiteID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAppSynchronize(applicationID: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesCopyMultiple(
        keysToFetch: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFPreferencesSetValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSetMultiple(
        keysToSet: CFDictionaryRef,
        keysToRemove: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSynchronize(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyApplicationList(
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesCopyKeyList(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) -> Boolean;
}
pub type CFURLPathStyle = CFIndex;
pub const kCFURLPOSIXPathStyle: _bindgen_ty_29 = 0;
pub const kCFURLHFSPathStyle: _bindgen_ty_29 = 1;
pub const kCFURLWindowsPathStyle: _bindgen_ty_29 = 2;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURL {
    _unused: [u8; 0],
}
pub type CFURLRef = *const __CFURL;
extern "C" {
    pub fn CFURLGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFURLCreateWithBytes(
        allocator: CFAllocatorRef,
        URLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        encoding: CFStringEncoding,
        escapeWhitespace: Boolean,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateWithString(
        allocator: CFAllocatorRef,
        URLString: CFStringRef,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateAbsoluteURLWithBytes(
        alloc: CFAllocatorRef,
        relativeURLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
        useCompatibilityMode: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPath(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentation(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPathRelativeToBase(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentationRelativeToBase(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFileSystemRepresentation(
        url: CFURLRef,
        resolveAgainstBase: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetString(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetBaseURL(anURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCanBeDecomposed(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyScheme(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyNetLocation(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPath(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: *mut Boolean) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) -> CFStringRef;
}
extern "C" {
    pub fn CFURLHasDirectoryPath(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourceSpecifier(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyHostName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetPortNumber(anURL: CFURLRef) -> SInt32;
}
extern "C" {
    pub fn CFURLCopyUserName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPassword(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyParameterString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyQueryString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef)
        -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyLastPathComponent(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPathExtension(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        pathComponent: CFStringRef,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingLastPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        extension: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetBytes(url: CFURLRef, buffer: *mut UInt8, bufferLength: CFIndex) -> CFIndex;
}
pub type CFURLComponentType = CFIndex;
pub const kCFURLComponentScheme: _bindgen_ty_30 = 1;
pub const kCFURLComponentNetLocation: _bindgen_ty_30 = 2;
pub const kCFURLComponentPath: _bindgen_ty_30 = 3;
pub const kCFURLComponentResourceSpecifier: _bindgen_ty_30 = 4;
pub const kCFURLComponentUser: _bindgen_ty_30 = 5;
pub const kCFURLComponentPassword: _bindgen_ty_30 = 6;
pub const kCFURLComponentUserInfo: _bindgen_ty_30 = 7;
pub const kCFURLComponentHost: _bindgen_ty_30 = 8;
pub const kCFURLComponentPort: _bindgen_ty_30 = 9;
pub const kCFURLComponentParameterString: _bindgen_ty_30 = 10;
pub const kCFURLComponentQuery: _bindgen_ty_30 = 11;
pub const kCFURLComponentFragment: _bindgen_ty_30 = 12;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFURLGetByteRangeForComponent(
        url: CFURLRef,
        component: CFURLComponentType,
        rangeIncludingSeparators: *mut CFRange,
    ) -> CFRange;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
        allocator: CFAllocatorRef,
        origString: CFStringRef,
        charsToLeaveEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByAddingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveUnescaped: CFStringRef,
        legalURLCharactersToBeEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLIsFileReferenceURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateFileReferenceURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFilePathURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSRef {
    _unused: [u8; 0],
}
extern "C" {
    pub fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: *const FSRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFSRef(url: CFURLRef, fsRef: *mut FSRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValueTypeRefPtr: *mut ::std::os::raw::c_void,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertiesForKeys(
        url: CFURLRef,
        keys: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLSetResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLSetResourcePropertiesForKeys(
        url: CFURLRef,
        keyedPropertyValues: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub static kCFURLKeysOfUnsetValuesKey: CFStringRef;
}
extern "C" {
    pub fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef);
}
extern "C" {
    pub fn CFURLClearResourcePropertyCache(url: CFURLRef);
}
extern "C" {
    pub fn CFURLSetTemporaryResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
    );
}
extern "C" {
    pub fn CFURLResourceIsReachable(url: CFURLRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub static kCFURLNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsRegularFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsDirectoryKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSymbolicLinkKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsVolumeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPackageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsApplicationKey: CFStringRef;
}
extern "C" {
    pub static kCFURLApplicationIsScriptableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSystemImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUserImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsHiddenKey: CFStringRef;
}
extern "C" {
    pub static kCFURLHasHiddenExtensionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentAccessDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAttributeModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileContentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayShareFileContentKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayHaveExtendedAttributesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPurgeableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSparseKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLinkCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLParentDirectoryURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTypeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedTypeDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelNumberKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelColorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedLabelKey: CFStringRef;
}
extern "C" {
    pub static kCFURLEffectiveIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCustomIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPreferredIOBlockSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsReadableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsWritableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExcludedFromBackupKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTagNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCanonicalPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsMountTriggerKey: CFStringRef;
}
extern "C" {
    pub static kCFURLGenerationIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLDocumentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAddedToDirectoryDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLQuarantinePropertiesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeNamedPipe: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeDirectory: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeBlockSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeRegular: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSymbolicLink: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSocket: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeUnknown: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsAliasFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionNone: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionComplete: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeTotalCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeResourceCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsHardLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsBrowsableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeMaximumFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEjectableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRemovableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsInternalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsAutomountedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsLocalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsReadOnlyKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLForRemountingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeUUIDStringKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEncryptedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRootFileSystemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCompressionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileCloningKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeTypeNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSubtypeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeMountFromLocationKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUbiquitousItemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsExcludedFromSyncKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
}
pub type CFURLBookmarkCreationOptions = CFOptionFlags;
pub const kCFURLBookmarkCreationMinimalBookmarkMask: _bindgen_ty_31 = 512;
pub const kCFURLBookmarkCreationSuitableForBookmarkFile: _bindgen_ty_31 = 1024;
pub const kCFURLBookmarkCreationWithSecurityScope: _bindgen_ty_31 = 2048;
pub const kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess: _bindgen_ty_31 = 4096;
pub const kCFURLBookmarkCreationWithoutImplicitSecurityScope: _bindgen_ty_31 = 536870912;
pub const kCFURLBookmarkCreationPreferFileIDResolutionMask: _bindgen_ty_31 = 256;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub type CFURLBookmarkResolutionOptions = CFOptionFlags;
pub const kCFURLBookmarkResolutionWithoutUIMask: _bindgen_ty_32 = 256;
pub const kCFURLBookmarkResolutionWithoutMountingMask: _bindgen_ty_32 = 512;
pub const kCFURLBookmarkResolutionWithSecurityScope: _bindgen_ty_32 = 1024;
pub const kCFURLBookmarkResolutionWithoutImplicitStartAccessing: _bindgen_ty_32 = 32768;
pub const kCFBookmarkResolutionWithoutUIMask: _bindgen_ty_32 = 256;
pub const kCFBookmarkResolutionWithoutMountingMask: _bindgen_ty_32 = 512;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
pub type CFURLBookmarkFileCreationOptions = CFOptionFlags;
extern "C" {
    pub fn CFURLCreateBookmarkData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        options: CFURLBookmarkCreationOptions,
        resourcePropertiesToInclude: CFArrayRef,
        relativeToURL: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateByResolvingBookmarkData(
        allocator: CFAllocatorRef,
        bookmark: CFDataRef,
        options: CFURLBookmarkResolutionOptions,
        relativeToURL: CFURLRef,
        resourcePropertiesToInclude: CFArrayRef,
        isStale: *mut Boolean,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertiesToReturn: CFArrayRef,
        bookmark: CFDataRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertyForKeyFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertyKey: CFStringRef,
        bookmark: CFDataRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromFile(
        allocator: CFAllocatorRef,
        fileURL: CFURLRef,
        errorRef: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLWriteBookmarkDataToFile(
        bookmarkRef: CFDataRef,
        fileURL: CFURLRef,
        options: CFURLBookmarkFileCreationOptions,
        errorRef: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromAliasRecord(
        allocatorRef: CFAllocatorRef,
        aliasRecordDataRef: CFDataRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef);
}
pub type boolean_t = ::std::os::raw::c_uint;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_status() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_status>(),
        40usize,
        concat!("Size of: ", stringify!(mach_port_status))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_status>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_pset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_pset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_seqno) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_seqno))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_mscount) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_mscount))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_qlimit) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_qlimit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_msgcount) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_msgcount))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_sorights) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_sorights))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_srights) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_srights))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_pdrequest) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_pdrequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_nsrequest) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_nsrequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_flags) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(mach_port_status), "::", stringify!(mps_flags))
    );
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[test]
fn bindgen_test_layout_mach_port_limits() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_limits> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_limits>(),
        4usize,
        concat!("Size of: ", stringify!(mach_port_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_limits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpl_qlimit) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_port_limits), "::", stringify!(mpl_qlimit))
    );
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_mach_port_info_ext() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_info_ext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_info_ext>(),
        68usize,
        concat!("Size of: ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_info_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpie_status) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_port_info_ext), "::", stringify!(mpie_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpie_boost_cnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_boost_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(mach_port_info_ext), "::", stringify!(reserved))
    );
}
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
#[test]
fn bindgen_test_layout_mach_port_guard_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_guard_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_guard_info>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_guard_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_guard_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_guard_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpgi_guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_guard_info),
            "::",
            stringify!(mpgi_guard)
        )
    );
}
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_qos() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_qos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_qos>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_qos))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_qos>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_qos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(mach_port_qos), "::", stringify!(len))
    );
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
#[test]
fn bindgen_test_layout_mach_service_port_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_service_port_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_service_port_info>(),
        256usize,
        concat!("Size of: ", stringify!(mach_service_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_service_port_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_service_port_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mspi_string_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_service_port_info),
            "::",
            stringify!(mspi_string_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mspi_domain_type) as usize - ptr as usize },
        255usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_service_port_info),
            "::",
            stringify!(mspi_domain_type)
        )
    );
}
impl Default for mach_service_port_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_port_options__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_options__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_options__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_interval_port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(work_interval_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_port_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(service_port_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_port_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(service_port_name)
        )
    );
}
impl Default for mach_port_options__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for mach_port_options__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "mach_port_options__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_mach_port_options() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_options> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_options>(),
        24usize,
        concat!("Size of: ", stringify!(mach_port_options))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_port_options), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpl) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(mach_port_options), "::", stringify!(mpl))
    );
}
impl Default for mach_port_options {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for mach_port_options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "mach_port_options {{ flags: {:?}, mpl: {:?}, __bindgen_anon_1: {:?} }}",
            self.flags, self.mpl, self.__bindgen_anon_1
        )
    }
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_THREAD_SET_STATE:
    mach_port_guard_exception_codes = 5;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type CFRunLoopMode = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoop {
    _unused: [u8; 0],
}
pub type CFRunLoopRef = *mut __CFRunLoop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopSource {
    _unused: [u8; 0],
}
pub type CFRunLoopSourceRef = *mut __CFRunLoopSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopObserver {
    _unused: [u8; 0],
}
pub type CFRunLoopObserverRef = *mut __CFRunLoopObserver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopTimer {
    _unused: [u8; 0],
}
pub type CFRunLoopTimerRef = *mut __CFRunLoopTimer;
pub type CFRunLoopRunResult = SInt32;
pub const kCFRunLoopRunFinished: _bindgen_ty_33 = 1;
pub const kCFRunLoopRunStopped: _bindgen_ty_33 = 2;
pub const kCFRunLoopRunTimedOut: _bindgen_ty_33 = 3;
pub const kCFRunLoopRunHandledSource: _bindgen_ty_33 = 4;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
pub type CFRunLoopActivity = CFOptionFlags;
pub const kCFRunLoopEntry: _bindgen_ty_34 = 1;
pub const kCFRunLoopBeforeTimers: _bindgen_ty_34 = 2;
pub const kCFRunLoopBeforeSources: _bindgen_ty_34 = 4;
pub const kCFRunLoopBeforeWaiting: _bindgen_ty_34 = 32;
pub const kCFRunLoopAfterWaiting: _bindgen_ty_34 = 64;
pub const kCFRunLoopExit: _bindgen_ty_34 = 128;
pub const kCFRunLoopAllActivities: _bindgen_ty_34 = 268435455;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
extern "C" {
    pub static kCFRunLoopDefaultMode: CFRunLoopMode;
}
extern "C" {
    pub static kCFRunLoopCommonModes: CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopGetCurrent() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopGetMain() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) -> CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopRun();
}
extern "C" {
    pub fn CFRunLoopRunInMode(
        mode: CFRunLoopMode,
        seconds: CFTimeInterval,
        returnAfterSourceHandled: Boolean,
    ) -> CFRunLoopRunResult;
}
extern "C" {
    pub fn CFRunLoopIsWaiting(rl: CFRunLoopRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopWakeUp(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopStop(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopPerformBlock(
        rl: CFRunLoopRef,
        mode: CFTypeRef,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFRunLoopContainsSource(
        rl: CFRunLoopRef,
        source: CFRunLoopSourceRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopContainsObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopRemoveObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopContainsTimer(
        rl: CFRunLoopRef,
        timer: CFRunLoopTimerRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub schedule: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub perform: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_CFRunLoopSourceContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFRunLoopSourceContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopSourceContext>(),
        80usize,
        concat!("Size of: ", stringify!(CFRunLoopSourceContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopSourceContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopSourceContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext), "::", stringify!(equal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext), "::", stringify!(hash))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schedule) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(schedule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext), "::", stringify!(cancel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perform) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext), "::", stringify!(perform))
    );
}
impl Default for CFRunLoopSourceContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext1 {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub getPort: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *mut ::std::os::raw::c_void,
            size: CFIndex,
            allocator: CFAllocatorRef,
            info: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopSourceContext1() {
    const UNINIT: ::std::mem::MaybeUninit<CFRunLoopSourceContext1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopSourceContext1>(),
        72usize,
        concat!("Size of: ", stringify!(CFRunLoopSourceContext1))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopSourceContext1>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopSourceContext1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext1), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext1), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext1), "::", stringify!(equal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(CFRunLoopSourceContext1), "::", stringify!(hash))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(getPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perform) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(perform)
        )
    );
}
impl Default for CFRunLoopSourceContext1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopSourceCreate(
        allocator: CFAllocatorRef,
        order: CFIndex,
        context: *mut CFRunLoopSourceContext,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef);
}
extern "C" {
    pub fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopSourceGetContext(
        source: CFRunLoopSourceRef,
        context: *mut CFRunLoopSourceContext,
    );
}
extern "C" {
    pub fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopObserverContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopObserverContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFRunLoopObserverContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopObserverContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFRunLoopObserverContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopObserverContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopObserverContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFRunLoopObserverContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFRunLoopObserverContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CFRunLoopObserverCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        observer: CFRunLoopObserverRef,
        activity: CFRunLoopActivity,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopObserverCreate(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        callout: CFRunLoopObserverCallBack,
        context: *mut CFRunLoopObserverContext,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverCreateWithHandler(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef);
}
extern "C" {
    pub fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetContext(
        observer: CFRunLoopObserverRef,
        context: *mut CFRunLoopObserverContext,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopTimerContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopTimerContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFRunLoopTimerContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopTimerContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFRunLoopTimerContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopTimerContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopTimerContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFRunLoopTimerContext), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFRunLoopTimerContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFRunLoopTimerContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFRunLoopTimerContext), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFRunLoopTimerContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CFRunLoopTimerCallBack = ::std::option::Option<
    unsafe extern "C" fn(timer: CFRunLoopTimerRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopTimerCreate(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        callout: CFRunLoopTimerCallBack,
        context: *mut CFRunLoopTimerContext,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerCreateWithHandler(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime);
}
extern "C" {
    pub fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef);
}
extern "C" {
    pub fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: *mut CFRunLoopTimerContext);
}
extern "C" {
    pub fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSocket {
    _unused: [u8; 0],
}
pub type CFSocketRef = *mut __CFSocket;
pub type CFSocketError = CFIndex;
pub const kCFSocketSuccess: _bindgen_ty_35 = 0;
pub const kCFSocketError: _bindgen_ty_35 = -1;
pub const kCFSocketTimeout: _bindgen_ty_35 = -2;
pub type _bindgen_ty_35 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketSignature {
    pub protocolFamily: SInt32,
    pub socketType: SInt32,
    pub protocol: SInt32,
    pub address: CFDataRef,
}
#[test]
fn bindgen_test_layout_CFSocketSignature() {
    const UNINIT: ::std::mem::MaybeUninit<CFSocketSignature> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFSocketSignature>(),
        24usize,
        concat!("Size of: ", stringify!(CFSocketSignature))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSocketSignature>(),
        8usize,
        concat!("Alignment of ", stringify!(CFSocketSignature))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocolFamily) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketSignature),
            "::",
            stringify!(protocolFamily)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socketType) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(CFSocketSignature), "::", stringify!(socketType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFSocketSignature), "::", stringify!(protocol))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFSocketSignature), "::", stringify!(address))
    );
}
impl Default for CFSocketSignature {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketNoCallBack: _bindgen_ty_36 = 0;
pub const kCFSocketReadCallBack: _bindgen_ty_36 = 1;
pub const kCFSocketAcceptCallBack: _bindgen_ty_36 = 2;
pub const kCFSocketDataCallBack: _bindgen_ty_36 = 3;
pub const kCFSocketConnectCallBack: _bindgen_ty_36 = 4;
pub const kCFSocketWriteCallBack: _bindgen_ty_36 = 8;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
pub const kCFSocketAutomaticallyReenableReadCallBack: _bindgen_ty_37 = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: _bindgen_ty_37 = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: _bindgen_ty_37 = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: _bindgen_ty_37 = 8;
pub const kCFSocketLeaveErrors: _bindgen_ty_37 = 64;
pub const kCFSocketCloseOnInvalidate: _bindgen_ty_37 = 128;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
pub type CFSocketCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        s: CFSocketRef,
        type_: CFSocketCallBackType,
        address: CFDataRef,
        data: *const ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFSocketContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFSocketContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFSocketContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFSocketContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSocketContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFSocketContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFSocketContext), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFSocketContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFSocketContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFSocketContext), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFSocketContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CFSocketNativeHandle = ::std::os::raw::c_int;
extern "C" {
    pub fn CFSocketGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSocketCreate(
        allocator: CFAllocatorRef,
        protocolFamily: SInt32,
        socketType: SInt32,
        protocol: SInt32,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithNative(
        allocator: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateConnectedToSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
        timeout: CFTimeInterval,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketConnectToAddress(
        s: CFSocketRef,
        address: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketInvalidate(s: CFSocketRef);
}
extern "C" {
    pub fn CFSocketIsValid(s: CFSocketRef) -> Boolean;
}
extern "C" {
    pub fn CFSocketCopyAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketCopyPeerAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketGetContext(s: CFSocketRef, context: *mut CFSocketContext);
}
extern "C" {
    pub fn CFSocketGetNative(s: CFSocketRef) -> CFSocketNativeHandle;
}
extern "C" {
    pub fn CFSocketCreateRunLoopSource(
        allocator: CFAllocatorRef,
        s: CFSocketRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFSocketGetSocketFlags(s: CFSocketRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketSendData(
        s: CFSocketRef,
        address: CFDataRef,
        data: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: CFPropertyListRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: *mut CFPropertyListRef,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *const CFSocketSignature,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *mut CFSocketSignature,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketUnregister(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16);
}
extern "C" {
    pub fn CFSocketGetDefaultNameRegistryPortNumber() -> UInt16;
}
extern "C" {
    pub static kCFSocketCommandKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketNameKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketValueKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketResultKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketRegisterCommand: CFStringRef;
}
extern "C" {
    pub static kCFSocketRetrieveCommand: CFStringRef;
}
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_accessx_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<accessx_descriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<accessx_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<accessx_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_name_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_name_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_flags) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(accessx_descriptor), "::", stringify!(ad_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_pad) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(accessx_descriptor), "::", stringify!(ad_pad))
    );
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pselect$1050"]
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_select$1050"]
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type uuid_t = __darwin_uuid_t;
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<flock>(), 24usize, concat!("Size of: ", stringify!(flock)));
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(flock), "::", stringify!(l_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(flock), "::", stringify!(l_len))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(flock), "::", stringify!(l_pid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(flock), "::", stringify!(l_type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        22usize,
        concat!("Offset of field: ", stringify!(flock), "::", stringify!(l_whence))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[test]
fn bindgen_test_layout_flocktimeout() {
    const UNINIT: ::std::mem::MaybeUninit<flocktimeout> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flocktimeout>(),
        40usize,
        concat!("Size of: ", stringify!(flocktimeout))
    );
    assert_eq!(
        ::std::mem::align_of::<flocktimeout>(),
        8usize,
        concat!("Alignment of ", stringify!(flocktimeout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fl) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(flocktimeout), "::", stringify!(fl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(flocktimeout), "::", stringify!(timeout))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_radvisory() {
    const UNINIT: ::std::mem::MaybeUninit<radvisory> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radvisory>(),
        16usize,
        concat!("Size of: ", stringify!(radvisory))
    );
    assert_eq!(
        ::std::mem::align_of::<radvisory>(),
        8usize,
        concat!("Alignment of ", stringify!(radvisory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ra_offset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(radvisory), "::", stringify!(ra_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ra_count) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(radvisory), "::", stringify!(ra_count))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fsignatures() {
    const UNINIT: ::std::mem::MaybeUninit<fsignatures> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsignatures>(),
        56usize,
        concat!("Size of: ", stringify!(fsignatures))
    );
    assert_eq!(
        ::std::mem::align_of::<fsignatures>(),
        8usize,
        concat!("Alignment of ", stringify!(fsignatures))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_file_start) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fsignatures), "::", stringify!(fs_file_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_blob_start) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(fsignatures), "::", stringify!(fs_blob_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_blob_size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(fsignatures), "::", stringify!(fs_blob_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_fsignatures_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_fsignatures_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_cdhash) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(fsignatures), "::", stringify!(fs_cdhash))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_hash_type) as usize - ptr as usize },
        52usize,
        concat!("Offset of field: ", stringify!(fsignatures), "::", stringify!(fs_hash_type))
    );
}
impl Default for fsignatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fsupplement() {
    const UNINIT: ::std::mem::MaybeUninit<fsupplement> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsupplement>(),
        32usize,
        concat!("Size of: ", stringify!(fsupplement))
    );
    assert_eq!(
        ::std::mem::align_of::<fsupplement>(),
        8usize,
        concat!("Alignment of ", stringify!(fsupplement))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_file_start) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fsupplement), "::", stringify!(fs_file_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_blob_start) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(fsupplement), "::", stringify!(fs_blob_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_blob_size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(fsupplement), "::", stringify!(fs_blob_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_orig_fd) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(fsupplement), "::", stringify!(fs_orig_fd))
    );
}
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fchecklv() {
    const UNINIT: ::std::mem::MaybeUninit<fchecklv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fchecklv>(),
        24usize,
        concat!("Size of: ", stringify!(fchecklv))
    );
    assert_eq!(
        ::std::mem::align_of::<fchecklv>(),
        8usize,
        concat!("Alignment of ", stringify!(fchecklv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_file_start) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fchecklv), "::", stringify!(lv_file_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_error_message_size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(fchecklv), "::", stringify!(lv_error_message_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_error_message) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(fchecklv), "::", stringify!(lv_error_message))
    );
}
impl Default for fchecklv {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fgetsigsinfo() {
    const UNINIT: ::std::mem::MaybeUninit<fgetsigsinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fgetsigsinfo>(),
        16usize,
        concat!("Size of: ", stringify!(fgetsigsinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<fgetsigsinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(fgetsigsinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_file_start) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fgetsigsinfo), "::", stringify!(fg_file_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_info_request) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(fgetsigsinfo), "::", stringify!(fg_info_request))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_sig_is_platform) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_sig_is_platform)
        )
    );
}
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
#[test]
fn bindgen_test_layout_fstore() {
    const UNINIT: ::std::mem::MaybeUninit<fstore> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<fstore>(), 32usize, concat!("Size of: ", stringify!(fstore)));
    assert_eq!(
        ::std::mem::align_of::<fstore>(),
        8usize,
        concat!("Alignment of ", stringify!(fstore))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fstore), "::", stringify!(fst_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_posmode) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(fstore), "::", stringify!(fst_posmode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_offset) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(fstore), "::", stringify!(fst_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_length) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(fstore), "::", stringify!(fst_length))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_bytesalloc) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(fstore), "::", stringify!(fst_bytesalloc))
    );
}
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
#[test]
fn bindgen_test_layout_fpunchhole() {
    const UNINIT: ::std::mem::MaybeUninit<fpunchhole> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fpunchhole>(),
        24usize,
        concat!("Size of: ", stringify!(fpunchhole))
    );
    assert_eq!(
        ::std::mem::align_of::<fpunchhole>(),
        8usize,
        concat!("Alignment of ", stringify!(fpunchhole))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fpunchhole), "::", stringify!(fp_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(fpunchhole), "::", stringify!(reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(fpunchhole), "::", stringify!(fp_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_length) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(fpunchhole), "::", stringify!(fp_length))
    );
}
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
#[test]
fn bindgen_test_layout_ftrimactivefile() {
    const UNINIT: ::std::mem::MaybeUninit<ftrimactivefile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ftrimactivefile>(),
        16usize,
        concat!("Size of: ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        ::std::mem::align_of::<ftrimactivefile>(),
        8usize,
        concat!("Alignment of ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fta_offset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ftrimactivefile), "::", stringify!(fta_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fta_length) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ftrimactivefile), "::", stringify!(fta_length))
    );
}
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
#[test]
fn bindgen_test_layout_fspecread() {
    const UNINIT: ::std::mem::MaybeUninit<fspecread> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fspecread>(),
        24usize,
        concat!("Size of: ", stringify!(fspecread))
    );
    assert_eq!(
        ::std::mem::align_of::<fspecread>(),
        8usize,
        concat!("Alignment of ", stringify!(fspecread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsr_flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fspecread), "::", stringify!(fsr_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(fspecread), "::", stringify!(reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsr_offset) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(fspecread), "::", stringify!(fsr_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsr_length) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(fspecread), "::", stringify!(fsr_length))
    );
}
pub type fspecread_t = fspecread;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[test]
fn bindgen_test_layout_log2phys() {
    const UNINIT: ::std::mem::MaybeUninit<log2phys> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<log2phys>(),
        20usize,
        concat!("Size of: ", stringify!(log2phys))
    );
    assert_eq!(
        ::std::mem::align_of::<log2phys>(),
        4usize,
        concat!("Alignment of ", stringify!(log2phys))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2p_flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(log2phys), "::", stringify!(l2p_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2p_contigbytes) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(log2phys), "::", stringify!(l2p_contigbytes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2p_devoffset) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(log2phys), "::", stringify!(l2p_devoffset))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_init() -> filesec_t;
}
extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_retain(object: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_release(object: *mut ::std::os::raw::c_void);
}
pub const os_clockid_t_OS_CLOCK_MACH_ABSOLUTE_TIME: os_clockid_t = 32;
pub type os_clockid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_attr_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 60usize],
}
#[test]
fn bindgen_test_layout_os_workgroup_attr_opaque_s() {
    const UNINIT: ::std::mem::MaybeUninit<os_workgroup_attr_opaque_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<os_workgroup_attr_opaque_s>(),
        64usize,
        concat!("Size of: ", stringify!(os_workgroup_attr_opaque_s))
    );
    assert_eq!(
        ::std::mem::align_of::<os_workgroup_attr_opaque_s>(),
        4usize,
        concat!("Alignment of ", stringify!(os_workgroup_attr_opaque_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(os_workgroup_attr_opaque_s), "::", stringify!(sig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_attr_opaque_s),
            "::",
            stringify!(opaque)
        )
    );
}
impl Default for os_workgroup_attr_opaque_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_interval_data_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout_os_workgroup_interval_data_opaque_s() {
    const UNINIT: ::std::mem::MaybeUninit<os_workgroup_interval_data_opaque_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<os_workgroup_interval_data_opaque_s>(),
        60usize,
        concat!("Size of: ", stringify!(os_workgroup_interval_data_opaque_s))
    );
    assert_eq!(
        ::std::mem::align_of::<os_workgroup_interval_data_opaque_s>(),
        4usize,
        concat!("Alignment of ", stringify!(os_workgroup_interval_data_opaque_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_interval_data_opaque_s),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_interval_data_opaque_s),
            "::",
            stringify!(opaque)
        )
    );
}
impl Default for os_workgroup_interval_data_opaque_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_join_token_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 36usize],
}
#[test]
fn bindgen_test_layout_os_workgroup_join_token_opaque_s() {
    const UNINIT: ::std::mem::MaybeUninit<os_workgroup_join_token_opaque_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<os_workgroup_join_token_opaque_s>(),
        40usize,
        concat!("Size of: ", stringify!(os_workgroup_join_token_opaque_s))
    );
    assert_eq!(
        ::std::mem::align_of::<os_workgroup_join_token_opaque_s>(),
        4usize,
        concat!("Alignment of ", stringify!(os_workgroup_join_token_opaque_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_join_token_opaque_s),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_join_token_opaque_s),
            "::",
            stringify!(opaque)
        )
    );
}
impl Default for os_workgroup_join_token_opaque_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_s {
    _unused: [u8; 0],
}
pub type os_workgroup_t = *mut os_workgroup_s;
pub type os_workgroup_attr_s = os_workgroup_attr_opaque_s;
pub type os_workgroup_attr_t = *mut os_workgroup_attr_opaque_s;
extern "C" {
    pub fn os_workgroup_copy_port(
        wg: os_workgroup_t,
        mach_port_out: *mut mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_create_with_port(
        name: *const ::std::os::raw::c_char,
        mach_port: mach_port_t,
    ) -> os_workgroup_t;
}
extern "C" {
    pub fn os_workgroup_create_with_workgroup(
        name: *const ::std::os::raw::c_char,
        wg: os_workgroup_t,
    ) -> os_workgroup_t;
}
pub type os_workgroup_join_token_s = os_workgroup_join_token_opaque_s;
pub type os_workgroup_join_token_t = *mut os_workgroup_join_token_opaque_s;
extern "C" {
    pub fn os_workgroup_join(
        wg: os_workgroup_t,
        token_out: os_workgroup_join_token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_leave(wg: os_workgroup_t, token: os_workgroup_join_token_t);
}
pub type os_workgroup_index = u32;
pub type os_workgroup_working_arena_destructor_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn os_workgroup_set_working_arena(
        wg: os_workgroup_t,
        arena: *mut ::std::os::raw::c_void,
        max_workers: u32,
        destructor: os_workgroup_working_arena_destructor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_get_working_arena(
        wg: os_workgroup_t,
        index_out: *mut os_workgroup_index,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_workgroup_cancel(wg: os_workgroup_t);
}
extern "C" {
    pub fn os_workgroup_testcancel(wg: os_workgroup_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_max_parallel_threads_attr_s {
    _unused: [u8; 0],
}
pub type os_workgroup_mpt_attr_s = os_workgroup_max_parallel_threads_attr_s;
pub type os_workgroup_mpt_attr_t = *mut os_workgroup_max_parallel_threads_attr_s;
extern "C" {
    pub fn os_workgroup_max_parallel_threads(
        wg: os_workgroup_t,
        attr: os_workgroup_mpt_attr_t,
    ) -> ::std::os::raw::c_int;
}
pub type os_workgroup_interval_t = os_workgroup_t;
pub type os_workgroup_interval_data_s = os_workgroup_interval_data_opaque_s;
pub type os_workgroup_interval_data_t = *mut os_workgroup_interval_data_opaque_s;
extern "C" {
    pub fn os_workgroup_interval_start(
        wg: os_workgroup_interval_t,
        start: u64,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_update(
        wg: os_workgroup_interval_t,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_finish(
        wg: os_workgroup_interval_t,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
pub type os_workgroup_parallel_t = os_workgroup_t;
extern "C" {
    pub fn os_workgroup_parallel_create(
        name: *const ::std::os::raw::c_char,
        attr: os_workgroup_attr_t,
    ) -> os_workgroup_parallel_t;
}
pub type dispatch_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
#[test]
fn bindgen_test_layout_time_value() {
    const UNINIT: ::std::mem::MaybeUninit<time_value> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<time_value>(),
        8usize,
        concat!("Size of: ", stringify!(time_value))
    );
    assert_eq!(
        ::std::mem::align_of::<time_value>(),
        4usize,
        concat!("Alignment of ", stringify!(time_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(time_value), "::", stringify!(seconds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).microseconds) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(time_value), "::", stringify!(microseconds))
    );
}
pub type time_value_t = time_value;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
#[test]
fn bindgen_test_layout_mach_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<mach_timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_timespec>(),
        8usize,
        concat!("Size of: ", stringify!(mach_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_timespec>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_timespec), "::", stringify!(tv_sec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(mach_timespec), "::", stringify!(tv_nsec))
    );
}
pub type mach_timespec_t = mach_timespec;
pub type dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: _bindgen_ty_38 = 18446744073709551614;
pub type _bindgen_ty_38 = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;
}
extern "C" {
    pub fn dispatch_walltime(when: *const timespec, delta: i64) -> dispatch_time_t;
}
pub const QOS_CLASS_USER_INTERACTIVE: _bindgen_ty_39 = 33;
pub const QOS_CLASS_USER_INITIATED: _bindgen_ty_39 = 25;
pub const QOS_CLASS_DEFAULT: _bindgen_ty_39 = 21;
pub const QOS_CLASS_UTILITY: _bindgen_ty_39 = 17;
pub const QOS_CLASS_BACKGROUND: _bindgen_ty_39 = 9;
pub const QOS_CLASS_UNSPECIFIED: _bindgen_ty_39 = 0;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dispatch_object_t {
    pub _os_obj: *mut _os_object_s,
    pub _do: *mut dispatch_object_s,
    pub _dq: *mut dispatch_queue_s,
    pub _dqa: *mut dispatch_queue_attr_s,
    pub _dg: *mut dispatch_group_s,
    pub _ds: *mut dispatch_source_s,
    pub _dch: *mut dispatch_channel_s,
    pub _dm: *mut dispatch_mach_s,
    pub _dmsg: *mut dispatch_mach_msg_s,
    pub _dsema: *mut dispatch_semaphore_s,
    pub _ddata: *mut dispatch_data_s,
    pub _dchannel: *mut dispatch_io_s,
}
#[test]
fn bindgen_test_layout_dispatch_object_t() {
    const UNINIT: ::std::mem::MaybeUninit<dispatch_object_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dispatch_object_t>(),
        8usize,
        concat!("Size of: ", stringify!(dispatch_object_t))
    );
    assert_eq!(
        ::std::mem::align_of::<dispatch_object_t>(),
        8usize,
        concat!("Alignment of ", stringify!(dispatch_object_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._os_obj) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_os_obj))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._do) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_do))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dq) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_dq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dqa) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_dqa))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dg) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_dg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ds) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_ds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dch) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_dch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dm) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_dm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dmsg) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_dmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dsema) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_dsema))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ddata) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_ddata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dchannel) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dispatch_object_t), "::", stringify!(_dchannel))
    );
}
impl Default for dispatch_object_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for dispatch_object_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "dispatch_object_t {{ union }}")
    }
}
pub type dispatch_block_t = *mut ::std::os::raw::c_void;
pub type dispatch_qos_class_t = qos_class_t;
extern "C" {
    pub fn dispatch_retain(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_release(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_get_context(object: dispatch_object_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_set_context(object: dispatch_object_t, context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_set_finalizer_f(object: dispatch_object_t, finalizer: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_activate(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_suspend(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_resume(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_set_qos_class_floor(
        object: dispatch_object_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dispatch_wait(object: *mut ::std::os::raw::c_void, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_notify(
        object: *mut ::std::os::raw::c_void,
        queue: dispatch_object_t,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_cancel(object: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_testcancel(object: *mut ::std::os::raw::c_void) -> isize;
}
extern "C" {
    pub fn dispatch_debug(object: dispatch_object_t, message: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dispatch_debugv(
        object: dispatch_object_t,
        message: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    );
}
pub type dispatch_queue_t = *mut dispatch_queue_s;
pub type dispatch_queue_global_t = dispatch_queue_t;
pub type dispatch_queue_serial_t = dispatch_queue_t;
pub type dispatch_queue_main_t = dispatch_queue_serial_t;
pub type dispatch_queue_concurrent_t = dispatch_queue_t;
extern "C" {
    pub fn dispatch_async(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_sync(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_sync_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_and_wait_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_apply(
        iterations: usize,
        queue: dispatch_queue_t,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_apply_f(
        iterations: usize,
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: ::std::option::Option<
            unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, iteration: usize),
        >,
    );
}
extern "C" {
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_queue_s {
    pub _address: u8,
}
extern "C" {
    pub static mut _dispatch_main_q: dispatch_queue_s;
}
pub type dispatch_queue_priority_t = ::std::os::raw::c_long;
extern "C" {
    pub fn dispatch_get_global_queue(identifier: isize, flags: usize) -> dispatch_queue_global_t;
}
pub type dispatch_queue_attr_t = *mut dispatch_queue_attr_s;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_queue_attr_s {
    pub _address: u8,
}
extern "C" {
    pub static mut _dispatch_queue_attr_concurrent: dispatch_queue_attr_s;
}
extern "C" {
    pub fn dispatch_queue_attr_make_initially_inactive(
        attr: dispatch_queue_attr_t,
    ) -> dispatch_queue_attr_t;
}
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_INHERIT:
    dispatch_autorelease_frequency_t = 0;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM:
    dispatch_autorelease_frequency_t = 1;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_NEVER:
    dispatch_autorelease_frequency_t = 2;
pub type dispatch_autorelease_frequency_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_queue_attr_make_with_autorelease_frequency(
        attr: dispatch_queue_attr_t,
        frequency: dispatch_autorelease_frequency_t,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    pub fn dispatch_queue_attr_make_with_qos_class(
        attr: dispatch_queue_attr_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_queue_create_with_target$V2"]
    pub fn dispatch_queue_create_with_target(
        label: *const ::std::os::raw::c_char,
        attr: dispatch_queue_attr_t,
        target: dispatch_queue_t,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_create(
        label: *const ::std::os::raw::c_char,
        attr: dispatch_queue_attr_t,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_get_label(queue: dispatch_queue_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dispatch_queue_get_qos_class(
        queue: dispatch_queue_t,
        relative_priority_ptr: *mut ::std::os::raw::c_int,
    ) -> dispatch_qos_class_t;
}
extern "C" {
    pub fn dispatch_set_target_queue(object: dispatch_object_t, queue: dispatch_queue_t);
}
extern "C" {
    pub fn dispatch_main() -> !;
}
extern "C" {
    pub fn dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_after_f(
        when: dispatch_time_t,
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_sync(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_sync_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_set_specific(
        queue: dispatch_queue_t,
        key: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
        destructor: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_get_specific(
        queue: dispatch_queue_t,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_get_specific(key: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue$V2"]
    pub fn dispatch_assert_queue(queue: dispatch_queue_t);
}
extern "C" {
    pub fn dispatch_assert_queue_barrier(queue: dispatch_queue_t);
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue_not$V2"]
    pub fn dispatch_assert_queue_not(queue: dispatch_queue_t);
}
pub const dispatch_block_flags_t_DISPATCH_BLOCK_BARRIER: dispatch_block_flags_t = 1;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_DETACHED: dispatch_block_flags_t = 2;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ASSIGN_CURRENT: dispatch_block_flags_t = 4;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_NO_QOS_CLASS: dispatch_block_flags_t = 8;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_INHERIT_QOS_CLASS: dispatch_block_flags_t = 16;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ENFORCE_QOS_CLASS: dispatch_block_flags_t = 32;
pub type dispatch_block_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_block_create(
        flags: dispatch_block_flags_t,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_create_with_qos_class(
        flags: dispatch_block_flags_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_block_notify(
        block: dispatch_block_t,
        queue: dispatch_queue_t,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_block_cancel(block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_testcancel(block: dispatch_block_t) -> isize;
}
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_type_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_type_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_type_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_type_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad2)
        )
    );
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_port_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_port_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_port_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_port_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor32_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_descriptor32_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor64_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_descriptor64_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(mach_msg_ool_descriptor_t), "::", stringify!(size))
    );
}
impl Default for mach_msg_ool_descriptor_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor32_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_ports_descriptor32_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_ports_descriptor32_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor64_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_ports_descriptor64_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_ports_descriptor64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_ports_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(count)
        )
    );
}
impl Default for mach_msg_ool_ports_descriptor_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor32_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_guarded_port_descriptor32_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_guarded_port_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_guarded_port_descriptor32_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor64_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_guarded_port_descriptor64_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_guarded_port_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_guarded_port_descriptor64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_guarded_port_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_guarded_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_guarded_port_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[test]
fn bindgen_test_layout_mach_msg_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_msg_descriptor_t), "::", stringify!(port))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_of_line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(out_of_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ool_ports) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(ool_ports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_msg_descriptor_t), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guarded_port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(guarded_port)
        )
    );
}
impl Default for mach_msg_descriptor_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for mach_msg_descriptor_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "mach_msg_descriptor_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_body_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_body_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_body_t>(),
        4usize,
        concat!("Size of: ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_body_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_descriptor_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_body_t),
            "::",
            stringify!(msgh_descriptor_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[test]
fn bindgen_test_layout_mach_msg_header_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_header_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_header_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_header_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_bits) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_msg_header_t), "::", stringify!(msgh_bits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_size) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(mach_msg_header_t), "::", stringify!(msgh_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_remote_port) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_remote_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_local_port) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_local_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_voucher_port) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_voucher_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_id) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(mach_msg_header_t), "::", stringify!(msgh_id))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
#[test]
fn bindgen_test_layout_mach_msg_base_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_base_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_base_t>(),
        28usize,
        concat!("Size of: ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_base_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_msg_base_t), "::", stringify!(header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mach_msg_base_t), "::", stringify!(body))
    );
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_trailer_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_trailer_t>(),
        8usize,
        concat!("Size of: ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[test]
fn bindgen_test_layout_mach_msg_seqno_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_seqno_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_seqno_trailer_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_seqno_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_security_token_t() {
    const UNINIT: ::std::mem::MaybeUninit<security_token_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<security_token_t>(),
        8usize,
        concat!("Size of: ", stringify!(security_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<security_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(security_token_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(security_token_t), "::", stringify!(val))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_security_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_security_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_security_trailer_t>(),
        20usize,
        concat!("Size of: ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_security_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout_audit_token_t() {
    const UNINIT: ::std::mem::MaybeUninit<audit_token_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<audit_token_t>(),
        32usize,
        concat!("Size of: ", stringify!(audit_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(audit_token_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(audit_token_t), "::", stringify!(val))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_audit_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_audit_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_audit_trailer_t>(),
        52usize,
        concat!("Size of: ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_audit_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_audit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout_mach_msg_context_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_context_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_context_trailer_t>(),
        60usize,
        concat!("Size of: ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_context_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_audit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_context) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_msg_labels_t() {
    const UNINIT: ::std::mem::MaybeUninit<msg_labels_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msg_labels_t>(),
        4usize,
        concat!("Size of: ", stringify!(msg_labels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_labels_t>(),
        4usize,
        concat!("Alignment of ", stringify!(msg_labels_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sender) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(msg_labels_t), "::", stringify!(sender))
    );
}
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
#[test]
fn bindgen_test_layout_mach_msg_mac_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_mac_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_mac_trailer_t>(),
        68usize,
        concat!("Size of: ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_mac_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_audit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_context) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_ad) as usize - ptr as usize },
        60usize,
        concat!("Offset of field: ", stringify!(mach_msg_mac_trailer_t), "::", stringify!(msgh_ad))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_labels) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_labels)
        )
    );
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_send_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_empty_send_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_send_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_send_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_msg_empty_send_t), "::", stringify!(header))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_rcv_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_empty_rcv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_rcv_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_rcv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_msg_empty_rcv_t), "::", stringify!(header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mach_msg_empty_rcv_t), "::", stringify!(trailer))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_empty_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_msg_empty_t), "::", stringify!(send))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcv) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_msg_empty_t), "::", stringify!(rcv))
    );
}
impl Default for mach_msg_empty_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for mach_msg_empty_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "mach_msg_empty_t {{ union }}")
    }
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
pub type dispatch_source_t = *mut dispatch_source_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_source_type_s {
    _unused: [u8; 0],
}
pub type dispatch_source_type_t = *const dispatch_source_type_s;
extern "C" {
    pub static _dispatch_source_type_data_add: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_or: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_replace: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_send: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_recv: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_memorypressure: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_proc: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_read: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_signal: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_timer: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_vnode: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_write: dispatch_source_type_s;
}
pub type dispatch_source_mach_send_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_mach_recv_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_memorypressure_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_proc_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_vnode_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_timer_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_source_create(
        type_: dispatch_source_type_t,
        handle: usize,
        mask: usize,
        queue: dispatch_queue_t,
    ) -> dispatch_source_t;
}
extern "C" {
    pub fn dispatch_source_set_event_handler(source: dispatch_source_t, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_event_handler_f(
        source: dispatch_source_t,
        handler: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler(source: dispatch_source_t, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler_f(
        source: dispatch_source_t,
        handler: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_source_cancel(source: dispatch_source_t);
}
extern "C" {
    pub fn dispatch_source_testcancel(source: dispatch_source_t) -> isize;
}
extern "C" {
    pub fn dispatch_source_get_handle(source: dispatch_source_t) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_mask(source: dispatch_source_t) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_data(source: dispatch_source_t) -> usize;
}
extern "C" {
    pub fn dispatch_source_merge_data(source: dispatch_source_t, value: usize);
}
extern "C" {
    pub fn dispatch_source_set_timer(
        source: dispatch_source_t,
        start: dispatch_time_t,
        interval: u64,
        leeway: u64,
    );
}
extern "C" {
    pub fn dispatch_source_set_registration_handler(
        source: dispatch_source_t,
        handler: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_source_set_registration_handler_f(
        source: dispatch_source_t,
        handler: dispatch_function_t,
    );
}
pub type dispatch_group_t = *mut dispatch_group_s;
extern "C" {
    pub fn dispatch_group_create() -> dispatch_group_t;
}
extern "C" {
    pub fn dispatch_group_async(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_group_async_f(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_group_notify(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_group_notify_f(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_enter(group: dispatch_group_t);
}
extern "C" {
    pub fn dispatch_group_leave(group: dispatch_group_t);
}
pub type dispatch_semaphore_t = *mut dispatch_semaphore_s;
extern "C" {
    pub fn dispatch_semaphore_create(value: isize) -> dispatch_semaphore_t;
}
extern "C" {
    pub fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t) -> isize;
}
pub type dispatch_once_t = isize;
extern "C" {
    pub fn dispatch_once(predicate: *mut dispatch_once_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_once_f(
        predicate: *mut dispatch_once_t,
        context: *mut ::std::os::raw::c_void,
        function: dispatch_function_t,
    );
}
pub type dispatch_data_t = *mut dispatch_data_s;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_data_s {
    pub _address: u8,
}
extern "C" {
    pub static mut _dispatch_data_empty: dispatch_data_s;
}
extern "C" {
    pub static _dispatch_data_destructor_free: dispatch_block_t;
}
extern "C" {
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
}
extern "C" {
    pub fn dispatch_data_create(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        queue: dispatch_queue_t,
        destructor: dispatch_block_t,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_get_size(data: dispatch_data_t) -> usize;
}
extern "C" {
    pub fn dispatch_data_create_map(
        data: dispatch_data_t,
        buffer_ptr: *mut *const ::std::os::raw::c_void,
        size_ptr: *mut usize,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_concat(
        data1: dispatch_data_t,
        data2: dispatch_data_t,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_subrange(
        data: dispatch_data_t,
        offset: usize,
        length: usize,
    ) -> dispatch_data_t;
}
pub type dispatch_data_applier_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_data_apply(data: dispatch_data_t, applier: dispatch_data_applier_t) -> bool;
}
extern "C" {
    pub fn dispatch_data_copy_region(
        data: dispatch_data_t,
        location: usize,
        offset_ptr: *mut usize,
    ) -> dispatch_data_t;
}
pub type dispatch_fd_t = ::std::os::raw::c_int;
extern "C" {
    pub fn dispatch_read(
        fd: dispatch_fd_t,
        length: usize,
        queue: dispatch_queue_t,
        handler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_write(
        fd: dispatch_fd_t,
        data: dispatch_data_t,
        queue: dispatch_queue_t,
        handler: *mut ::std::os::raw::c_void,
    );
}
pub type dispatch_io_t = *mut dispatch_io_s;
pub type dispatch_io_type_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_create(
        type_: dispatch_io_type_t,
        fd: dispatch_fd_t,
        queue: dispatch_queue_t,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_path(
        type_: dispatch_io_type_t,
        path: *const ::std::os::raw::c_char,
        oflag: ::std::os::raw::c_int,
        mode: mode_t,
        queue: dispatch_queue_t,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_io(
        type_: dispatch_io_type_t,
        io: dispatch_io_t,
        queue: dispatch_queue_t,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
pub type dispatch_io_handler_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_io_read(
        channel: dispatch_io_t,
        offset: off_t,
        length: usize,
        queue: dispatch_queue_t,
        io_handler: dispatch_io_handler_t,
    );
}
extern "C" {
    pub fn dispatch_io_write(
        channel: dispatch_io_t,
        offset: off_t,
        data: dispatch_data_t,
        queue: dispatch_queue_t,
        io_handler: dispatch_io_handler_t,
    );
}
pub type dispatch_io_close_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_close(channel: dispatch_io_t, flags: dispatch_io_close_flags_t);
}
extern "C" {
    pub fn dispatch_io_barrier(channel: dispatch_io_t, barrier: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_io_get_descriptor(channel: dispatch_io_t) -> dispatch_fd_t;
}
extern "C" {
    pub fn dispatch_io_set_high_water(channel: dispatch_io_t, high_water: usize);
}
extern "C" {
    pub fn dispatch_io_set_low_water(channel: dispatch_io_t, low_water: usize);
}
pub type dispatch_io_interval_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_set_interval(
        channel: dispatch_io_t,
        interval: u64,
        flags: dispatch_io_interval_flags_t,
    );
}
pub type dispatch_workloop_t = dispatch_queue_t;
extern "C" {
    pub fn dispatch_workloop_create(label: *const ::std::os::raw::c_char) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_create_inactive(
        label: *const ::std::os::raw::c_char,
    ) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_set_autorelease_frequency(
        workloop: dispatch_workloop_t,
        frequency: dispatch_autorelease_frequency_t,
    );
}
extern "C" {
    pub fn dispatch_workloop_set_os_workgroup(
        workloop: dispatch_workloop_t,
        workgroup: os_workgroup_t,
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFStreamError {
    pub domain: CFIndex,
    pub error: SInt32,
}
#[test]
fn bindgen_test_layout_CFStreamError() {
    const UNINIT: ::std::mem::MaybeUninit<CFStreamError> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFStreamError>(),
        16usize,
        concat!("Size of: ", stringify!(CFStreamError))
    );
    assert_eq!(
        ::std::mem::align_of::<CFStreamError>(),
        8usize,
        concat!("Alignment of ", stringify!(CFStreamError))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFStreamError), "::", stringify!(domain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFStreamError), "::", stringify!(error))
    );
}
pub type CFStreamPropertyKey = CFStringRef;
pub type CFStreamStatus = CFIndex;
pub const kCFStreamStatusNotOpen: _bindgen_ty_40 = 0;
pub const kCFStreamStatusOpening: _bindgen_ty_40 = 1;
pub const kCFStreamStatusOpen: _bindgen_ty_40 = 2;
pub const kCFStreamStatusReading: _bindgen_ty_40 = 3;
pub const kCFStreamStatusWriting: _bindgen_ty_40 = 4;
pub const kCFStreamStatusAtEnd: _bindgen_ty_40 = 5;
pub const kCFStreamStatusClosed: _bindgen_ty_40 = 6;
pub const kCFStreamStatusError: _bindgen_ty_40 = 7;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub type CFStreamEventType = CFOptionFlags;
pub const kCFStreamEventNone: _bindgen_ty_41 = 0;
pub const kCFStreamEventOpenCompleted: _bindgen_ty_41 = 1;
pub const kCFStreamEventHasBytesAvailable: _bindgen_ty_41 = 2;
pub const kCFStreamEventCanAcceptBytes: _bindgen_ty_41 = 4;
pub const kCFStreamEventErrorOccurred: _bindgen_ty_41 = 8;
pub const kCFStreamEventEndEncountered: _bindgen_ty_41 = 16;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamClientContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFStreamClientContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFStreamClientContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFStreamClientContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFStreamClientContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFStreamClientContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFStreamClientContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFStreamClientContext), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFStreamClientContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFStreamClientContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFStreamClientContext), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStreamClientContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFStreamClientContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFReadStream {
    _unused: [u8; 0],
}
pub type CFReadStreamRef = *mut __CFReadStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFWriteStream {
    _unused: [u8; 0],
}
pub type CFWriteStreamRef = *mut __CFWriteStream;
pub type CFReadStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFReadStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFWriteStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFWriteStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFReadStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFWriteStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static mut kCFStreamPropertyDataWritten: CFStreamPropertyKey;
}
extern "C" {
    pub fn CFReadStreamCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithBuffer(
        alloc: CFAllocatorRef,
        buffer: *mut UInt8,
        bufferCapacity: CFIndex,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithAllocatedBuffers(
        alloc: CFAllocatorRef,
        bufferAllocator: CFAllocatorRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithFile(
        alloc: CFAllocatorRef,
        fileURL: CFURLRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFStreamCreateBoundPair(
        alloc: CFAllocatorRef,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
        transferBufferSize: CFIndex,
    );
}
extern "C" {
    pub static mut kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
}
extern "C" {
    pub static kCFStreamErrorDomainSOCKS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxy: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyHost: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyPort: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSVersion: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion4: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion5: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSUser: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSPassword: CFStringRef;
}
extern "C" {
    pub static kCFStreamErrorDomainSSL: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySocketSecurityLevel: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNone: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
}
extern "C" {
    pub fn CFStreamCreatePairWithSocket(
        alloc: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithSocketToHost(
        alloc: CFAllocatorRef,
        host: CFStringRef,
        port: UInt32,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithPeerSocketSignature(
        alloc: CFAllocatorRef,
        signature: *const CFSocketSignature,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFReadStreamGetStatus(stream: CFReadStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFReadStreamCopyError(stream: CFReadStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFWriteStreamCopyError(stream: CFWriteStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFReadStreamOpen(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamOpen(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamClose(stream: CFReadStreamRef);
}
extern "C" {
    pub fn CFWriteStreamClose(stream: CFWriteStreamRef);
}
extern "C" {
    pub fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamRead(
        stream: CFReadStreamRef,
        buffer: *mut UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamGetBuffer(
        stream: CFReadStreamRef,
        maxBytesToRead: CFIndex,
        numBytesRead: *mut CFIndex,
    ) -> *const UInt8;
}
extern "C" {
    pub fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamWrite(
        stream: CFWriteStreamRef,
        buffer: *const UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamCopyProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFWriteStreamCopyProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFReadStreamSetProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamSetClient(
        stream: CFReadStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFReadStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetClient(
        stream: CFWriteStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFWriteStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamScheduleWithRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamScheduleWithRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamUnscheduleFromRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamUnscheduleFromRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: dispatch_queue_t);
}
extern "C" {
    pub fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: dispatch_queue_t);
}
extern "C" {
    pub fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) -> dispatch_queue_t;
}
extern "C" {
    pub fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) -> dispatch_queue_t;
}
pub type CFStreamErrorDomain = CFIndex;
pub const kCFStreamErrorDomainCustom: _bindgen_ty_42 = -1;
pub const kCFStreamErrorDomainPOSIX: _bindgen_ty_42 = 1;
pub const kCFStreamErrorDomainMacOSStatus: _bindgen_ty_42 = 2;
pub type _bindgen_ty_42 = ::std::os::raw::c_int;
extern "C" {
    pub fn CFReadStreamGetError(stream: CFReadStreamRef) -> CFStreamError;
}
extern "C" {
    pub fn CFWriteStreamGetError(stream: CFWriteStreamRef) -> CFStreamError;
}
pub type CFPropertyListMutabilityOptions = CFOptionFlags;
pub const kCFPropertyListImmutable: _bindgen_ty_43 = 0;
pub const kCFPropertyListMutableContainers: _bindgen_ty_43 = 1;
pub const kCFPropertyListMutableContainersAndLeaves: _bindgen_ty_43 = 2;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFPropertyListCreateFromXMLData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        mutabilityOption: CFOptionFlags,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateXMLData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFPropertyListCreateDeepCopy(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        mutabilityOption: CFOptionFlags,
    ) -> CFPropertyListRef;
}
pub type CFPropertyListFormat = CFIndex;
pub const kCFPropertyListOpenStepFormat: _bindgen_ty_44 = 1;
pub const kCFPropertyListXMLFormat_v1_0: _bindgen_ty_44 = 100;
pub const kCFPropertyListBinaryFormat_v1_0: _bindgen_ty_44 = 200;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat)
        -> Boolean;
}
extern "C" {
    pub fn CFPropertyListWriteToStream(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateFromStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        mutabilityOption: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
pub const kCFPropertyListReadCorruptError: _bindgen_ty_45 = 3840;
pub const kCFPropertyListReadUnknownVersionError: _bindgen_ty_45 = 3841;
pub const kCFPropertyListReadStreamError: _bindgen_ty_45 = 3842;
pub const kCFPropertyListWriteStreamError: _bindgen_ty_45 = 3851;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFPropertyListCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateWithStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListWrite(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub type CFSetRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFSetReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFSetCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFSetEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFSetHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFSetCallBacks {
    pub version: CFIndex,
    pub retain: CFSetRetainCallBack,
    pub release: CFSetReleaseCallBack,
    pub copyDescription: CFSetCopyDescriptionCallBack,
    pub equal: CFSetEqualCallBack,
    pub hash: CFSetHashCallBack,
}
#[test]
fn bindgen_test_layout_CFSetCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFSetCallBacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFSetCallBacks>(),
        48usize,
        concat!("Size of: ", stringify!(CFSetCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSetCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFSetCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFSetCallBacks), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFSetCallBacks), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFSetCallBacks), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFSetCallBacks), "::", stringify!(copyDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(CFSetCallBacks), "::", stringify!(equal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(CFSetCallBacks), "::", stringify!(hash))
    );
}
extern "C" {
    pub static kCFTypeSetCallBacks: CFSetCallBacks;
}
extern "C" {
    pub static kCFCopyStringSetCallBacks: CFSetCallBacks;
}
pub type CFSetApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSet {
    _unused: [u8; 0],
}
pub type CFSetRef = *const __CFSet;
pub type CFMutableSetRef = *mut __CFSet;
extern "C" {
    pub fn CFSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSetCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theSet: CFSetRef,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetGetCount(theSet: CFSetRef) -> CFIndex;
}
extern "C" {
    pub fn CFSetGetCountOfValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFSetContainsValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValue(
        theSet: CFSetRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFSetGetValueIfPresent(
        theSet: CFSetRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValues(theSet: CFSetRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetApplyFunction(
        theSet: CFSetRef,
        applier: CFSetApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFSetAddValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetReplaceValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetSetValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveAllValues(theSet: CFMutableSetRef);
}
pub type CFStringEncodings = CFIndex;
pub const kCFStringEncodingMacJapanese: _bindgen_ty_46 = 1;
pub const kCFStringEncodingMacChineseTrad: _bindgen_ty_46 = 2;
pub const kCFStringEncodingMacKorean: _bindgen_ty_46 = 3;
pub const kCFStringEncodingMacArabic: _bindgen_ty_46 = 4;
pub const kCFStringEncodingMacHebrew: _bindgen_ty_46 = 5;
pub const kCFStringEncodingMacGreek: _bindgen_ty_46 = 6;
pub const kCFStringEncodingMacCyrillic: _bindgen_ty_46 = 7;
pub const kCFStringEncodingMacDevanagari: _bindgen_ty_46 = 9;
pub const kCFStringEncodingMacGurmukhi: _bindgen_ty_46 = 10;
pub const kCFStringEncodingMacGujarati: _bindgen_ty_46 = 11;
pub const kCFStringEncodingMacOriya: _bindgen_ty_46 = 12;
pub const kCFStringEncodingMacBengali: _bindgen_ty_46 = 13;
pub const kCFStringEncodingMacTamil: _bindgen_ty_46 = 14;
pub const kCFStringEncodingMacTelugu: _bindgen_ty_46 = 15;
pub const kCFStringEncodingMacKannada: _bindgen_ty_46 = 16;
pub const kCFStringEncodingMacMalayalam: _bindgen_ty_46 = 17;
pub const kCFStringEncodingMacSinhalese: _bindgen_ty_46 = 18;
pub const kCFStringEncodingMacBurmese: _bindgen_ty_46 = 19;
pub const kCFStringEncodingMacKhmer: _bindgen_ty_46 = 20;
pub const kCFStringEncodingMacThai: _bindgen_ty_46 = 21;
pub const kCFStringEncodingMacLaotian: _bindgen_ty_46 = 22;
pub const kCFStringEncodingMacGeorgian: _bindgen_ty_46 = 23;
pub const kCFStringEncodingMacArmenian: _bindgen_ty_46 = 24;
pub const kCFStringEncodingMacChineseSimp: _bindgen_ty_46 = 25;
pub const kCFStringEncodingMacTibetan: _bindgen_ty_46 = 26;
pub const kCFStringEncodingMacMongolian: _bindgen_ty_46 = 27;
pub const kCFStringEncodingMacEthiopic: _bindgen_ty_46 = 28;
pub const kCFStringEncodingMacCentralEurRoman: _bindgen_ty_46 = 29;
pub const kCFStringEncodingMacVietnamese: _bindgen_ty_46 = 30;
pub const kCFStringEncodingMacExtArabic: _bindgen_ty_46 = 31;
pub const kCFStringEncodingMacSymbol: _bindgen_ty_46 = 33;
pub const kCFStringEncodingMacDingbats: _bindgen_ty_46 = 34;
pub const kCFStringEncodingMacTurkish: _bindgen_ty_46 = 35;
pub const kCFStringEncodingMacCroatian: _bindgen_ty_46 = 36;
pub const kCFStringEncodingMacIcelandic: _bindgen_ty_46 = 37;
pub const kCFStringEncodingMacRomanian: _bindgen_ty_46 = 38;
pub const kCFStringEncodingMacCeltic: _bindgen_ty_46 = 39;
pub const kCFStringEncodingMacGaelic: _bindgen_ty_46 = 40;
pub const kCFStringEncodingMacFarsi: _bindgen_ty_46 = 140;
pub const kCFStringEncodingMacUkrainian: _bindgen_ty_46 = 152;
pub const kCFStringEncodingMacInuit: _bindgen_ty_46 = 236;
pub const kCFStringEncodingMacVT100: _bindgen_ty_46 = 252;
pub const kCFStringEncodingMacHFS: _bindgen_ty_46 = 255;
pub const kCFStringEncodingISOLatin2: _bindgen_ty_46 = 514;
pub const kCFStringEncodingISOLatin3: _bindgen_ty_46 = 515;
pub const kCFStringEncodingISOLatin4: _bindgen_ty_46 = 516;
pub const kCFStringEncodingISOLatinCyrillic: _bindgen_ty_46 = 517;
pub const kCFStringEncodingISOLatinArabic: _bindgen_ty_46 = 518;
pub const kCFStringEncodingISOLatinGreek: _bindgen_ty_46 = 519;
pub const kCFStringEncodingISOLatinHebrew: _bindgen_ty_46 = 520;
pub const kCFStringEncodingISOLatin5: _bindgen_ty_46 = 521;
pub const kCFStringEncodingISOLatin6: _bindgen_ty_46 = 522;
pub const kCFStringEncodingISOLatinThai: _bindgen_ty_46 = 523;
pub const kCFStringEncodingISOLatin7: _bindgen_ty_46 = 525;
pub const kCFStringEncodingISOLatin8: _bindgen_ty_46 = 526;
pub const kCFStringEncodingISOLatin9: _bindgen_ty_46 = 527;
pub const kCFStringEncodingISOLatin10: _bindgen_ty_46 = 528;
pub const kCFStringEncodingDOSLatinUS: _bindgen_ty_46 = 1024;
pub const kCFStringEncodingDOSGreek: _bindgen_ty_46 = 1029;
pub const kCFStringEncodingDOSBalticRim: _bindgen_ty_46 = 1030;
pub const kCFStringEncodingDOSLatin1: _bindgen_ty_46 = 1040;
pub const kCFStringEncodingDOSGreek1: _bindgen_ty_46 = 1041;
pub const kCFStringEncodingDOSLatin2: _bindgen_ty_46 = 1042;
pub const kCFStringEncodingDOSCyrillic: _bindgen_ty_46 = 1043;
pub const kCFStringEncodingDOSTurkish: _bindgen_ty_46 = 1044;
pub const kCFStringEncodingDOSPortuguese: _bindgen_ty_46 = 1045;
pub const kCFStringEncodingDOSIcelandic: _bindgen_ty_46 = 1046;
pub const kCFStringEncodingDOSHebrew: _bindgen_ty_46 = 1047;
pub const kCFStringEncodingDOSCanadianFrench: _bindgen_ty_46 = 1048;
pub const kCFStringEncodingDOSArabic: _bindgen_ty_46 = 1049;
pub const kCFStringEncodingDOSNordic: _bindgen_ty_46 = 1050;
pub const kCFStringEncodingDOSRussian: _bindgen_ty_46 = 1051;
pub const kCFStringEncodingDOSGreek2: _bindgen_ty_46 = 1052;
pub const kCFStringEncodingDOSThai: _bindgen_ty_46 = 1053;
pub const kCFStringEncodingDOSJapanese: _bindgen_ty_46 = 1056;
pub const kCFStringEncodingDOSChineseSimplif: _bindgen_ty_46 = 1057;
pub const kCFStringEncodingDOSKorean: _bindgen_ty_46 = 1058;
pub const kCFStringEncodingDOSChineseTrad: _bindgen_ty_46 = 1059;
pub const kCFStringEncodingWindowsLatin2: _bindgen_ty_46 = 1281;
pub const kCFStringEncodingWindowsCyrillic: _bindgen_ty_46 = 1282;
pub const kCFStringEncodingWindowsGreek: _bindgen_ty_46 = 1283;
pub const kCFStringEncodingWindowsLatin5: _bindgen_ty_46 = 1284;
pub const kCFStringEncodingWindowsHebrew: _bindgen_ty_46 = 1285;
pub const kCFStringEncodingWindowsArabic: _bindgen_ty_46 = 1286;
pub const kCFStringEncodingWindowsBalticRim: _bindgen_ty_46 = 1287;
pub const kCFStringEncodingWindowsVietnamese: _bindgen_ty_46 = 1288;
pub const kCFStringEncodingWindowsKoreanJohab: _bindgen_ty_46 = 1296;
pub const kCFStringEncodingANSEL: _bindgen_ty_46 = 1537;
pub const kCFStringEncodingJIS_X0201_76: _bindgen_ty_46 = 1568;
pub const kCFStringEncodingJIS_X0208_83: _bindgen_ty_46 = 1569;
pub const kCFStringEncodingJIS_X0208_90: _bindgen_ty_46 = 1570;
pub const kCFStringEncodingJIS_X0212_90: _bindgen_ty_46 = 1571;
pub const kCFStringEncodingJIS_C6226_78: _bindgen_ty_46 = 1572;
pub const kCFStringEncodingShiftJIS_X0213: _bindgen_ty_46 = 1576;
pub const kCFStringEncodingShiftJIS_X0213_MenKuTen: _bindgen_ty_46 = 1577;
pub const kCFStringEncodingGB_2312_80: _bindgen_ty_46 = 1584;
pub const kCFStringEncodingGBK_95: _bindgen_ty_46 = 1585;
pub const kCFStringEncodingGB_18030_2000: _bindgen_ty_46 = 1586;
pub const kCFStringEncodingKSC_5601_87: _bindgen_ty_46 = 1600;
pub const kCFStringEncodingKSC_5601_92_Johab: _bindgen_ty_46 = 1601;
pub const kCFStringEncodingCNS_11643_92_P1: _bindgen_ty_46 = 1617;
pub const kCFStringEncodingCNS_11643_92_P2: _bindgen_ty_46 = 1618;
pub const kCFStringEncodingCNS_11643_92_P3: _bindgen_ty_46 = 1619;
pub const kCFStringEncodingISO_2022_JP: _bindgen_ty_46 = 2080;
pub const kCFStringEncodingISO_2022_JP_2: _bindgen_ty_46 = 2081;
pub const kCFStringEncodingISO_2022_JP_1: _bindgen_ty_46 = 2082;
pub const kCFStringEncodingISO_2022_JP_3: _bindgen_ty_46 = 2083;
pub const kCFStringEncodingISO_2022_CN: _bindgen_ty_46 = 2096;
pub const kCFStringEncodingISO_2022_CN_EXT: _bindgen_ty_46 = 2097;
pub const kCFStringEncodingISO_2022_KR: _bindgen_ty_46 = 2112;
pub const kCFStringEncodingEUC_JP: _bindgen_ty_46 = 2336;
pub const kCFStringEncodingEUC_CN: _bindgen_ty_46 = 2352;
pub const kCFStringEncodingEUC_TW: _bindgen_ty_46 = 2353;
pub const kCFStringEncodingEUC_KR: _bindgen_ty_46 = 2368;
pub const kCFStringEncodingShiftJIS: _bindgen_ty_46 = 2561;
pub const kCFStringEncodingKOI8_R: _bindgen_ty_46 = 2562;
pub const kCFStringEncodingBig5: _bindgen_ty_46 = 2563;
pub const kCFStringEncodingMacRomanLatin1: _bindgen_ty_46 = 2564;
pub const kCFStringEncodingHZ_GB_2312: _bindgen_ty_46 = 2565;
pub const kCFStringEncodingBig5_HKSCS_1999: _bindgen_ty_46 = 2566;
pub const kCFStringEncodingVISCII: _bindgen_ty_46 = 2567;
pub const kCFStringEncodingKOI8_U: _bindgen_ty_46 = 2568;
pub const kCFStringEncodingBig5_E: _bindgen_ty_46 = 2569;
pub const kCFStringEncodingNextStepJapanese: _bindgen_ty_46 = 2818;
pub const kCFStringEncodingEBCDIC_US: _bindgen_ty_46 = 3073;
pub const kCFStringEncodingEBCDIC_CP037: _bindgen_ty_46 = 3074;
pub const kCFStringEncodingUTF7: _bindgen_ty_46 = 67109120;
pub const kCFStringEncodingUTF7_IMAP: _bindgen_ty_46 = 2576;
pub const kCFStringEncodingShiftJIS_X0213_00: _bindgen_ty_46 = 1576;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
pub type CFTreeRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFTreeReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFTreeCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFTreeContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFTreeRetainCallBack,
    pub release: CFTreeReleaseCallBack,
    pub copyDescription: CFTreeCopyDescriptionCallBack,
}
#[test]
fn bindgen_test_layout_CFTreeContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFTreeContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFTreeContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFTreeContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFTreeContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFTreeContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFTreeContext), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFTreeContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFTreeContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFTreeContext), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(CFTreeContext), "::", stringify!(copyDescription))
    );
}
impl Default for CFTreeContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CFTreeApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTree {
    _unused: [u8; 0],
}
pub type CFTreeRef = *mut __CFTree;
extern "C" {
    pub fn CFTreeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTreeCreate(allocator: CFAllocatorRef, context: *const CFTreeContext) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetParent(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetNextSibling(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetFirstChild(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetContext(tree: CFTreeRef, context: *mut CFTreeContext);
}
extern "C" {
    pub fn CFTreeGetChildCount(tree: CFTreeRef) -> CFIndex;
}
extern "C" {
    pub fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetChildren(tree: CFTreeRef, children: *mut CFTreeRef);
}
extern "C" {
    pub fn CFTreeApplyFunctionToChildren(
        tree: CFTreeRef,
        applier: CFTreeApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFTreeFindRoot(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeSetContext(tree: CFTreeRef, context: *const CFTreeContext);
}
extern "C" {
    pub fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemove(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemoveAllChildren(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeSortChildren(
        tree: CFTreeRef,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFURLCreateDataAndPropertiesFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        resourceData: *mut CFDataRef,
        properties: *mut CFDictionaryRef,
        desiredProperties: CFArrayRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLWriteDataAndPropertiesToResource(
        url: CFURLRef,
        dataToWrite: CFDataRef,
        propertiesToWrite: CFDictionaryRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLDestroyResource(url: CFURLRef, errorCode: *mut SInt32) -> Boolean;
}
extern "C" {
    pub fn CFURLCreatePropertyFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        property: CFStringRef,
        errorCode: *mut SInt32,
    ) -> CFTypeRef;
}
pub type CFURLError = CFIndex;
pub const kCFURLUnknownError: _bindgen_ty_47 = -10;
pub const kCFURLUnknownSchemeError: _bindgen_ty_47 = -11;
pub const kCFURLResourceNotFoundError: _bindgen_ty_47 = -12;
pub const kCFURLResourceAccessViolationError: _bindgen_ty_47 = -13;
pub const kCFURLRemoteHostUnavailableError: _bindgen_ty_47 = -14;
pub const kCFURLImproperArgumentsError: _bindgen_ty_47 = -15;
pub const kCFURLUnknownPropertyKeyError: _bindgen_ty_47 = -16;
pub const kCFURLPropertyKeyUnavailableError: _bindgen_ty_47 = -17;
pub const kCFURLTimeoutError: _bindgen_ty_47 = -18;
pub type _bindgen_ty_47 = ::std::os::raw::c_int;
extern "C" {
    pub static kCFURLFileExists: CFStringRef;
}
extern "C" {
    pub static kCFURLFileDirectoryContents: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLength: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLastModificationTime: CFStringRef;
}
extern "C" {
    pub static kCFURLFilePOSIXMode: CFStringRef;
}
extern "C" {
    pub static kCFURLFileOwnerID: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusCode: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusLine: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUUID {
    _unused: [u8; 0],
}
pub type CFUUIDRef = *const __CFUUID;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFUUIDBytes {
    pub byte0: UInt8,
    pub byte1: UInt8,
    pub byte2: UInt8,
    pub byte3: UInt8,
    pub byte4: UInt8,
    pub byte5: UInt8,
    pub byte6: UInt8,
    pub byte7: UInt8,
    pub byte8: UInt8,
    pub byte9: UInt8,
    pub byte10: UInt8,
    pub byte11: UInt8,
    pub byte12: UInt8,
    pub byte13: UInt8,
    pub byte14: UInt8,
    pub byte15: UInt8,
}
#[test]
fn bindgen_test_layout_CFUUIDBytes() {
    const UNINIT: ::std::mem::MaybeUninit<CFUUIDBytes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFUUIDBytes>(),
        16usize,
        concat!("Size of: ", stringify!(CFUUIDBytes))
    );
    assert_eq!(
        ::std::mem::align_of::<CFUUIDBytes>(),
        1usize,
        concat!("Alignment of ", stringify!(CFUUIDBytes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte0) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte1) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte2) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte3) as usize - ptr as usize },
        3usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte4) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte5) as usize - ptr as usize },
        5usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte6) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte7) as usize - ptr as usize },
        7usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte7))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte8) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte9) as usize - ptr as usize },
        9usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte9))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte10) as usize - ptr as usize },
        10usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte10))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte11) as usize - ptr as usize },
        11usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte11))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte12) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte12))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte13) as usize - ptr as usize },
        13usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte13))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte14) as usize - ptr as usize },
        14usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte14))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte15) as usize - ptr as usize },
        15usize,
        concat!("Offset of field: ", stringify!(CFUUIDBytes), "::", stringify!(byte15))
    );
}
extern "C" {
    pub fn CFUUIDGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUUIDCreate(alloc: CFAllocatorRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) -> CFStringRef;
}
extern "C" {
    pub fn CFUUIDGetConstantUUIDWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) -> CFUUIDBytes;
}
extern "C" {
    pub fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) -> CFUUIDRef;
}
extern "C" {
    pub fn CFCopyHomeDirectoryURL() -> CFURLRef;
}
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBundle {
    _unused: [u8; 0],
}
pub type CFBundleRef = *mut __CFBundle;
pub type CFPlugInRef = *mut __CFBundle;
extern "C" {
    pub static kCFBundleInfoDictionaryVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleDevelopmentRegionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleNameKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleLocalizationsKey: CFStringRef;
}
extern "C" {
    pub fn CFBundleGetMainBundle() -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetAllBundles() -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleCreateBundlesFromDirectory(
        allocator: CFAllocatorRef,
        directoryURL: CFURLRef,
        bundleType: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef)
        -> CFTypeRef;
}
extern "C" {
    pub fn CFBundleGetInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfo(
        bundle: CFBundleRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    );
}
extern "C" {
    pub fn CFBundleGetIdentifier(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleGetVersionNumber(bundle: CFBundleRef) -> UInt32;
}
extern "C" {
    pub fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfoInDirectory(
        url: CFURLRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleCopyResourceURL(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfType(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizedString(
        bundle: CFBundleRef,
        key: CFStringRef,
        value: CFStringRef,
        tableName: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLInDirectory(
        bundleURL: CFURLRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeInDirectory(
        bundleURL: CFURLRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForPreferences(
        locArray: CFArrayRef,
        prefArray: CFArrayRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLForLocalization(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeForLocalization(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableURL(bundle: CFBundleRef) -> CFURLRef;
}
pub const kCFBundleExecutableArchitectureI386: _bindgen_ty_48 = 7;
pub const kCFBundleExecutableArchitecturePPC: _bindgen_ty_48 = 18;
pub const kCFBundleExecutableArchitectureX86_64: _bindgen_ty_48 = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: _bindgen_ty_48 = 16777234;
pub const kCFBundleExecutableArchitectureARM64: _bindgen_ty_48 = 16777228;
pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundlePreflightExecutable(bundle: CFBundleRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutableAndReturnError(
        bundle: CFBundleRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleUnloadExecutable(bundle: CFBundleRef);
}
extern "C" {
    pub fn CFBundleGetFunctionPointerForName(
        bundle: CFBundleRef,
        functionName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetFunctionPointersForNames(
        bundle: CFBundleRef,
        functionNames: CFArrayRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleGetDataPointerForName(
        bundle: CFBundleRef,
        symbolName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetDataPointersForNames(
        bundle: CFBundleRef,
        symbolNames: CFArrayRef,
        stbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleCopyAuxiliaryExecutableURL(
        bundle: CFBundleRef,
        executableName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) -> Boolean;
}
extern "C" {
    pub fn CFBundleGetPlugIn(bundle: CFBundleRef) -> CFPlugInRef;
}
pub type CFBundleRefNum = ::std::os::raw::c_int;
extern "C" {
    pub fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) -> CFBundleRefNum;
}
extern "C" {
    pub fn CFBundleOpenBundleResourceFiles(
        bundle: CFBundleRef,
        refNum: *mut CFBundleRefNum,
        localizedRefNum: *mut CFBundleRefNum,
    ) -> SInt32;
}
extern "C" {
    pub fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMessagePort {
    _unused: [u8; 0],
}
pub type CFMessagePortRef = *mut __CFMessagePort;
pub const kCFMessagePortSuccess: _bindgen_ty_49 = 0;
pub const kCFMessagePortSendTimeout: _bindgen_ty_49 = -1;
pub const kCFMessagePortReceiveTimeout: _bindgen_ty_49 = -2;
pub const kCFMessagePortIsInvalid: _bindgen_ty_49 = -3;
pub const kCFMessagePortTransportError: _bindgen_ty_49 = -4;
pub const kCFMessagePortBecameInvalidError: _bindgen_ty_49 = -5;
pub type _bindgen_ty_49 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMessagePortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFMessagePortContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFMessagePortContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFMessagePortContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFMessagePortContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFMessagePortContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFMessagePortContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFMessagePortContext), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFMessagePortContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFMessagePortContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFMessagePortContext), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMessagePortContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFMessagePortContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CFMessagePortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        local: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFMessagePortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(ms: CFMessagePortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMessagePortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMessagePortCreateLocal(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        callout: CFMessagePortCallBack,
        context: *mut CFMessagePortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortCreateRemote(
        allocator: CFAllocatorRef,
        name: CFStringRef,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortIsRemote(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetName(ms: CFMessagePortRef) -> CFStringRef;
}
extern "C" {
    pub fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetContext(ms: CFMessagePortRef, context: *mut CFMessagePortContext);
}
extern "C" {
    pub fn CFMessagePortInvalidate(ms: CFMessagePortRef);
}
extern "C" {
    pub fn CFMessagePortIsValid(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetInvalidationCallBack(
        ms: CFMessagePortRef,
    ) -> CFMessagePortInvalidationCallBack;
}
extern "C" {
    pub fn CFMessagePortSetInvalidationCallBack(
        ms: CFMessagePortRef,
        callout: CFMessagePortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMessagePortSendRequest(
        remote: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        sendTimeout: CFTimeInterval,
        rcvTimeout: CFTimeInterval,
        replyMode: CFStringRef,
        returnData: *mut CFDataRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFMessagePortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        local: CFMessagePortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: dispatch_queue_t);
}
extern "C" {
    pub static kCFPlugInDynamicRegistrationKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInUnloadFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInFactoriesKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInTypesKey: CFStringRef;
}
pub type CFPlugInDynamicRegisterFunction =
    ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInUnloadFunction = ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInFactoryFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn CFPlugInGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) -> CFPlugInRef;
}
extern "C" {
    pub fn CFPlugInGetBundle(plugIn: CFPlugInRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean);
}
extern "C" {
    pub fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
        typeUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInInstanceCreate(
        allocator: CFAllocatorRef,
        factoryUUID: CFUUIDRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunction(
        factoryUUID: CFUUIDRef,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunctionByName(
        factoryUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
        functionName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef);
}
extern "C" {
    pub fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFPlugInInstance {
    _unused: [u8; 0],
}
pub type CFPlugInInstanceRef = *mut __CFPlugInInstance;
pub type CFPlugInInstanceGetInterfaceFunction = ::std::option::Option<
    unsafe extern "C" fn(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    ::std::option::Option<unsafe extern "C" fn(instanceData: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) -> CFStringRef;
}
extern "C" {
    pub fn CFPlugInInstanceGetInstanceData(
        instance: CFPlugInInstanceRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInInstanceCreateWithInstanceDataSize(
        allocator: CFAllocatorRef,
        instanceDataSize: CFIndex,
        deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction,
        factoryName: CFStringRef,
        getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction,
    ) -> CFPlugInInstanceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMachPort {
    _unused: [u8; 0],
}
pub type CFMachPortRef = *mut __CFMachPort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMachPortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFMachPortContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFMachPortContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFMachPortContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFMachPortContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFMachPortContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFMachPortContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFMachPortContext), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFMachPortContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFMachPortContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFMachPortContext), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMachPortContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFMachPortContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CFMachPortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        port: CFMachPortRef,
        msg: *mut ::std::os::raw::c_void,
        size: CFIndex,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFMachPortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(port: CFMachPortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMachPortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMachPortCreate(
        allocator: CFAllocatorRef,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortCreateWithPort(
        allocator: CFAllocatorRef,
        portNum: mach_port_t,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortGetPort(port: CFMachPortRef) -> mach_port_t;
}
extern "C" {
    pub fn CFMachPortGetContext(port: CFMachPortRef, context: *mut CFMachPortContext);
}
extern "C" {
    pub fn CFMachPortInvalidate(port: CFMachPortRef);
}
extern "C" {
    pub fn CFMachPortIsValid(port: CFMachPortRef) -> Boolean;
}
extern "C" {
    pub fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef)
        -> CFMachPortInvalidationCallBack;
}
extern "C" {
    pub fn CFMachPortSetInvalidationCallBack(
        port: CFMachPortRef,
        callout: CFMachPortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMachPortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        port: CFMachPortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAttributedString {
    _unused: [u8; 0],
}
pub type CFAttributedStringRef = *const __CFAttributedString;
pub type CFMutableAttributedStringRef = *mut __CFAttributedString;
extern "C" {
    pub fn CFAttributedStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAttributedStringCreate(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        attributes: CFDictionaryRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
        range: CFRange,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateCopy(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetString(aStr: CFAttributedStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFAttributedStringGetAttributes(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        effectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttribute(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        effectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributesAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributeAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        aStr: CFAttributedStringRef,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutable(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringReplaceString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringGetMutableString(
        aStr: CFMutableAttributedStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFAttributedStringSetAttributes(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFDictionaryRef,
        clearOtherAttributes: Boolean,
    );
}
extern "C" {
    pub fn CFAttributedStringSetAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFAttributedStringRemoveAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringReplaceAttributedString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFAttributedStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef);
}
extern "C" {
    pub fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURLEnumerator {
    _unused: [u8; 0],
}
pub type CFURLEnumeratorRef = *const __CFURLEnumerator;
extern "C" {
    pub fn CFURLEnumeratorGetTypeID() -> CFTypeID;
}
pub type CFURLEnumeratorOptions = CFOptionFlags;
pub const kCFURLEnumeratorDefaultBehavior: _bindgen_ty_50 = 0;
pub const kCFURLEnumeratorDescendRecursively: _bindgen_ty_50 = 1;
pub const kCFURLEnumeratorSkipInvisibles: _bindgen_ty_50 = 2;
pub const kCFURLEnumeratorGenerateFileReferenceURLs: _bindgen_ty_50 = 4;
pub const kCFURLEnumeratorSkipPackageContents: _bindgen_ty_50 = 8;
pub const kCFURLEnumeratorIncludeDirectoriesPreOrder: _bindgen_ty_50 = 16;
pub const kCFURLEnumeratorIncludeDirectoriesPostOrder: _bindgen_ty_50 = 32;
pub const kCFURLEnumeratorGenerateRelativePathURLs: _bindgen_ty_50 = 64;
pub type _bindgen_ty_50 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFURLEnumeratorCreateForDirectoryURL(
        alloc: CFAllocatorRef,
        directoryURL: CFURLRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
extern "C" {
    pub fn CFURLEnumeratorCreateForMountedVolumes(
        alloc: CFAllocatorRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
pub type CFURLEnumeratorResult = CFIndex;
pub const kCFURLEnumeratorSuccess: _bindgen_ty_51 = 1;
pub const kCFURLEnumeratorEnd: _bindgen_ty_51 = 2;
pub const kCFURLEnumeratorError: _bindgen_ty_51 = 3;
pub const kCFURLEnumeratorDirectoryPostOrderSuccess: _bindgen_ty_51 = 4;
pub type _bindgen_ty_51 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFURLEnumeratorGetNextURL(
        enumerator: CFURLEnumeratorRef,
        url: *mut CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLEnumeratorResult;
}
extern "C" {
    pub fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef);
}
extern "C" {
    pub fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) -> CFIndex;
}
extern "C" {
    pub fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) -> Boolean;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union guid_t {
    pub g_guid: [::std::os::raw::c_uchar; 16usize],
    pub g_guid_asint: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_guid_t() {
    const UNINIT: ::std::mem::MaybeUninit<guid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<guid_t>(), 16usize, concat!("Size of: ", stringify!(guid_t)));
    assert_eq!(
        ::std::mem::align_of::<guid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(guid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_guid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(guid_t), "::", stringify!(g_guid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_guid_asint) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(guid_t), "::", stringify!(g_guid_asint))
    );
}
impl Default for guid_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for guid_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "guid_t {{ union }}")
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ntsid_t {
    pub sid_kind: u_int8_t,
    pub sid_authcount: u_int8_t,
    pub sid_authority: [u_int8_t; 6usize],
    pub sid_authorities: [u_int32_t; 16usize],
}
#[test]
fn bindgen_test_layout_ntsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<ntsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ntsid_t>(),
        72usize,
        concat!("Size of: ", stringify!(ntsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ntsid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ntsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sid_kind) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ntsid_t), "::", stringify!(sid_kind))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sid_authcount) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(ntsid_t), "::", stringify!(sid_authcount))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sid_authority) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(ntsid_t), "::", stringify!(sid_authority))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sid_authorities) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ntsid_t), "::", stringify!(sid_authorities))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_identity_extlookup {
    pub el_seqno: u_int32_t,
    pub el_result: u_int32_t,
    pub el_flags: u_int32_t,
    pub el_info_pid: __darwin_pid_t,
    pub el_extend: u_int64_t,
    pub el_info_reserved_1: u_int32_t,
    pub el_uid: uid_t,
    pub el_uguid: guid_t,
    pub el_uguid_valid: u_int32_t,
    pub el_usid: ntsid_t,
    pub el_usid_valid: u_int32_t,
    pub el_gid: gid_t,
    pub el_gguid: guid_t,
    pub el_gguid_valid: u_int32_t,
    pub el_gsid: ntsid_t,
    pub el_gsid_valid: u_int32_t,
    pub el_member_valid: u_int32_t,
    pub el_sup_grp_cnt: u_int32_t,
    pub el_sup_groups: [gid_t; 16usize],
}
#[test]
fn bindgen_test_layout_kauth_identity_extlookup() {
    const UNINIT: ::std::mem::MaybeUninit<kauth_identity_extlookup> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kauth_identity_extlookup>(),
        304usize,
        concat!("Size of: ", stringify!(kauth_identity_extlookup))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_identity_extlookup>(),
        8usize,
        concat!("Alignment of ", stringify!(kauth_identity_extlookup))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_seqno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_result) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_info_pid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_info_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_extend) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_extend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_info_reserved_1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_info_reserved_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_uguid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_uguid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_uguid_valid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_uguid_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_usid) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_usid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_usid_valid) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_usid_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_gid) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_gguid) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gguid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_gguid_valid) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gguid_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_gsid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_gsid_valid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gsid_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_member_valid) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_member_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_sup_grp_cnt) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_sup_grp_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_sup_groups) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_sup_groups)
        )
    );
}
impl Default for kauth_identity_extlookup {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for kauth_identity_extlookup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "kauth_identity_extlookup {{ el_seqno: {:?}, el_result: {:?}, el_flags: {:?}, el_info_pid: {:?}, el_extend: {:?}, el_info_reserved_1: {:?}, el_uid: {:?}, el_uguid: {:?}, el_uguid_valid: {:?}, el_usid: {:?}, el_usid_valid: {:?}, el_gid: {:?}, el_gguid: {:?}, el_gguid_valid: {:?}, el_gsid: {:?}, el_gsid_valid: {:?}, el_member_valid: {:?}, el_sup_grp_cnt: {:?}, el_sup_groups: {:?} }}" , self . el_seqno , self . el_result , self . el_flags , self . el_info_pid , self . el_extend , self . el_info_reserved_1 , self . el_uid , self . el_uguid , self . el_uguid_valid , self . el_usid , self . el_usid_valid , self . el_gid , self . el_gguid , self . el_gguid_valid , self . el_gsid , self . el_gsid_valid , self . el_member_valid , self . el_sup_grp_cnt , self . el_sup_groups)
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kauth_cache_sizes {
    pub kcs_group_size: u_int32_t,
    pub kcs_id_size: u_int32_t,
}
#[test]
fn bindgen_test_layout_kauth_cache_sizes() {
    const UNINIT: ::std::mem::MaybeUninit<kauth_cache_sizes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kauth_cache_sizes>(),
        8usize,
        concat!("Size of: ", stringify!(kauth_cache_sizes))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_cache_sizes>(),
        4usize,
        concat!("Alignment of ", stringify!(kauth_cache_sizes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kcs_group_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_cache_sizes),
            "::",
            stringify!(kcs_group_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kcs_id_size) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(kauth_cache_sizes), "::", stringify!(kcs_id_size))
    );
}
pub type kauth_ace_rights_t = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_ace {
    pub ace_applicable: guid_t,
    pub ace_flags: u_int32_t,
    pub ace_rights: kauth_ace_rights_t,
}
#[test]
fn bindgen_test_layout_kauth_ace() {
    const UNINIT: ::std::mem::MaybeUninit<kauth_ace> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kauth_ace>(),
        24usize,
        concat!("Size of: ", stringify!(kauth_ace))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_ace>(),
        4usize,
        concat!("Alignment of ", stringify!(kauth_ace))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ace_applicable) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(kauth_ace), "::", stringify!(ace_applicable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ace_flags) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(kauth_ace), "::", stringify!(ace_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ace_rights) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(kauth_ace), "::", stringify!(ace_rights))
    );
}
impl Default for kauth_ace {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for kauth_ace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "kauth_ace {{ ace_applicable: {:?}, ace_flags: {:?}, ace_rights: {:?} }}",
            self.ace_applicable, self.ace_flags, self.ace_rights
        )
    }
}
pub type kauth_ace_t = *mut kauth_ace;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_acl {
    pub acl_entrycount: u_int32_t,
    pub acl_flags: u_int32_t,
    pub acl_ace: [kauth_ace; 1usize],
}
#[test]
fn bindgen_test_layout_kauth_acl() {
    const UNINIT: ::std::mem::MaybeUninit<kauth_acl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kauth_acl>(),
        32usize,
        concat!("Size of: ", stringify!(kauth_acl))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_acl>(),
        4usize,
        concat!("Alignment of ", stringify!(kauth_acl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_entrycount) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(kauth_acl), "::", stringify!(acl_entrycount))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_flags) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(kauth_acl), "::", stringify!(acl_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_ace) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(kauth_acl), "::", stringify!(acl_ace))
    );
}
impl Default for kauth_acl {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for kauth_acl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "kauth_acl {{ acl_entrycount: {:?}, acl_flags: {:?}, acl_ace: {:?} }}",
            self.acl_entrycount, self.acl_flags, self.acl_ace
        )
    }
}
pub type kauth_acl_t = *mut kauth_acl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_filesec {
    pub fsec_magic: u_int32_t,
    pub fsec_owner: guid_t,
    pub fsec_group: guid_t,
    pub fsec_acl: kauth_acl,
}
#[test]
fn bindgen_test_layout_kauth_filesec() {
    const UNINIT: ::std::mem::MaybeUninit<kauth_filesec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kauth_filesec>(),
        68usize,
        concat!("Size of: ", stringify!(kauth_filesec))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_filesec>(),
        4usize,
        concat!("Alignment of ", stringify!(kauth_filesec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsec_magic) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(kauth_filesec), "::", stringify!(fsec_magic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsec_owner) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(kauth_filesec), "::", stringify!(fsec_owner))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsec_group) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(kauth_filesec), "::", stringify!(fsec_group))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsec_acl) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(kauth_filesec), "::", stringify!(fsec_acl))
    );
}
impl Default for kauth_filesec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for kauth_filesec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "kauth_filesec {{ fsec_magic: {:?}, fsec_owner: {:?}, fsec_group: {:?}, fsec_acl: {:?} }}" , self . fsec_magic , self . fsec_owner , self . fsec_group , self . fsec_acl)
    }
}
pub type kauth_filesec_t = *mut kauth_filesec;
pub const acl_perm_t_ACL_READ_DATA: acl_perm_t = 2;
pub const acl_perm_t_ACL_LIST_DIRECTORY: acl_perm_t = 2;
pub const acl_perm_t_ACL_WRITE_DATA: acl_perm_t = 4;
pub const acl_perm_t_ACL_ADD_FILE: acl_perm_t = 4;
pub const acl_perm_t_ACL_EXECUTE: acl_perm_t = 8;
pub const acl_perm_t_ACL_SEARCH: acl_perm_t = 8;
pub const acl_perm_t_ACL_DELETE: acl_perm_t = 16;
pub const acl_perm_t_ACL_APPEND_DATA: acl_perm_t = 32;
pub const acl_perm_t_ACL_ADD_SUBDIRECTORY: acl_perm_t = 32;
pub const acl_perm_t_ACL_DELETE_CHILD: acl_perm_t = 64;
pub const acl_perm_t_ACL_READ_ATTRIBUTES: acl_perm_t = 128;
pub const acl_perm_t_ACL_WRITE_ATTRIBUTES: acl_perm_t = 256;
pub const acl_perm_t_ACL_READ_EXTATTRIBUTES: acl_perm_t = 512;
pub const acl_perm_t_ACL_WRITE_EXTATTRIBUTES: acl_perm_t = 1024;
pub const acl_perm_t_ACL_READ_SECURITY: acl_perm_t = 2048;
pub const acl_perm_t_ACL_WRITE_SECURITY: acl_perm_t = 4096;
pub const acl_perm_t_ACL_CHANGE_OWNER: acl_perm_t = 8192;
pub const acl_perm_t_ACL_SYNCHRONIZE: acl_perm_t = 1048576;
pub type acl_perm_t = ::std::os::raw::c_uint;
pub const acl_tag_t_ACL_UNDEFINED_TAG: acl_tag_t = 0;
pub const acl_tag_t_ACL_EXTENDED_ALLOW: acl_tag_t = 1;
pub const acl_tag_t_ACL_EXTENDED_DENY: acl_tag_t = 2;
pub type acl_tag_t = ::std::os::raw::c_uint;
pub const acl_type_t_ACL_TYPE_EXTENDED: acl_type_t = 256;
pub const acl_type_t_ACL_TYPE_ACCESS: acl_type_t = 0;
pub const acl_type_t_ACL_TYPE_DEFAULT: acl_type_t = 1;
pub const acl_type_t_ACL_TYPE_AFS: acl_type_t = 2;
pub const acl_type_t_ACL_TYPE_CODA: acl_type_t = 3;
pub const acl_type_t_ACL_TYPE_NTFS: acl_type_t = 4;
pub const acl_type_t_ACL_TYPE_NWFS: acl_type_t = 5;
pub type acl_type_t = ::std::os::raw::c_uint;
pub const acl_entry_id_t_ACL_FIRST_ENTRY: acl_entry_id_t = 0;
pub const acl_entry_id_t_ACL_NEXT_ENTRY: acl_entry_id_t = -1;
pub const acl_entry_id_t_ACL_LAST_ENTRY: acl_entry_id_t = -2;
pub type acl_entry_id_t = ::std::os::raw::c_int;
pub const acl_flag_t_ACL_FLAG_DEFER_INHERIT: acl_flag_t = 1;
pub const acl_flag_t_ACL_FLAG_NO_INHERIT: acl_flag_t = 131072;
pub const acl_flag_t_ACL_ENTRY_INHERITED: acl_flag_t = 16;
pub const acl_flag_t_ACL_ENTRY_FILE_INHERIT: acl_flag_t = 32;
pub const acl_flag_t_ACL_ENTRY_DIRECTORY_INHERIT: acl_flag_t = 64;
pub const acl_flag_t_ACL_ENTRY_LIMIT_INHERIT: acl_flag_t = 128;
pub const acl_flag_t_ACL_ENTRY_ONLY_INHERIT: acl_flag_t = 256;
pub type acl_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_permset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_flagset {
    _unused: [u8; 0],
}
pub type acl_t = *mut _acl;
pub type acl_entry_t = *mut _acl_entry;
pub type acl_permset_t = *mut _acl_permset;
pub type acl_flagset_t = *mut _acl_flagset;
pub type acl_permset_mask_t = u_int64_t;
extern "C" {
    pub fn acl_dup(acl: acl_t) -> acl_t;
}
extern "C" {
    pub fn acl_free(obj_p: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_init(count: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry(acl_p: *mut acl_t, entry_p: *mut acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry_np(
        acl_p: *mut acl_t,
        entry_p: *mut acl_entry_t,
        entry_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_entry(
        acl: acl_t,
        entry_id: ::std::os::raw::c_int,
        entry_p: *mut acl_entry_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid(acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_fd_np(
        fd: ::std::os::raw::c_int,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_file_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_link_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_calc_mask(acl_p: *mut acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_perms(permset_d: acl_permset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset(
        entry_d: acl_entry_t,
        permset_p: *mut acl_permset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_maximal_permset_mask_np(mask_p: *mut acl_permset_mask_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset_mask_np(
        entry_d: acl_entry_t,
        mask_p: *mut acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset_mask_np(
        entry_d: acl_entry_t,
        mask: acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_flags_np(flagset_d: acl_flagset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_p: *mut acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_d: acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_qualifier(entry_d: acl_entry_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn acl_get_tag_type(
        entry_d: acl_entry_t,
        tag_type_p: *mut acl_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_qualifier(
        entry_d: acl_entry_t,
        tag_qualifier_p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_def_file(path_p: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_fd(fd: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_get_fd_np(fd: ::std::os::raw::c_int, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_file(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_link_np(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_set_fd(fd: ::std::os::raw::c_int, acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_fd_np(
        fd: ::std::os::raw::c_int,
        acl: acl_t,
        acl_type: acl_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_file(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_link_np(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_copy_ext(buf_p: *mut ::std::os::raw::c_void, acl: acl_t, size: isize) -> isize;
}
extern "C" {
    pub fn acl_copy_ext_native(
        buf_p: *mut ::std::os::raw::c_void,
        acl: acl_t,
        size: isize,
    ) -> isize;
}
extern "C" {
    pub fn acl_copy_int(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_copy_int_native(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_from_text(buf_p: *const ::std::os::raw::c_char) -> acl_t;
}
extern "C" {
    pub fn acl_size(acl: acl_t) -> isize;
}
extern "C" {
    pub fn acl_to_text(acl: acl_t, len_p: *mut isize) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileSecurity {
    _unused: [u8; 0],
}
pub type CFFileSecurityRef = *mut __CFFileSecurity;
extern "C" {
    pub fn CFFileSecurityGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileSecurityCreate(allocator: CFAllocatorRef) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCreateCopy(
        allocator: CFAllocatorRef,
        fileSec: CFFileSecurityRef,
    ) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCopyOwnerUUID(
        fileSec: CFFileSecurityRef,
        ownerUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyGroupUUID(
        fileSec: CFFileSecurityRef,
        groupUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: *mut acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: *mut uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: *mut gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: *mut mode_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) -> Boolean;
}
pub type CFFileSecurityClearOptions = CFOptionFlags;
pub const kCFFileSecurityClearOwner: _bindgen_ty_52 = 1;
pub const kCFFileSecurityClearGroup: _bindgen_ty_52 = 2;
pub const kCFFileSecurityClearMode: _bindgen_ty_52 = 4;
pub const kCFFileSecurityClearOwnerUUID: _bindgen_ty_52 = 8;
pub const kCFFileSecurityClearGroupUUID: _bindgen_ty_52 = 16;
pub const kCFFileSecurityClearAccessControlList: _bindgen_ty_52 = 32;
pub type _bindgen_ty_52 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFFileSecurityClearProperties(
        fileSec: CFFileSecurityRef,
        clearPropertyMask: CFFileSecurityClearOptions,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringTokenizerCopyBestStringLanguage(
        string: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFStringTokenizer {
    _unused: [u8; 0],
}
pub type CFStringTokenizerRef = *mut __CFStringTokenizer;
pub const kCFStringTokenizerUnitWord: _bindgen_ty_53 = 0;
pub const kCFStringTokenizerUnitSentence: _bindgen_ty_53 = 1;
pub const kCFStringTokenizerUnitParagraph: _bindgen_ty_53 = 2;
pub const kCFStringTokenizerUnitLineBreak: _bindgen_ty_53 = 3;
pub const kCFStringTokenizerUnitWordBoundary: _bindgen_ty_53 = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: _bindgen_ty_53 = 65536;
pub const kCFStringTokenizerAttributeLanguage: _bindgen_ty_53 = 131072;
pub type _bindgen_ty_53 = ::std::os::raw::c_uint;
pub type CFStringTokenizerTokenType = CFOptionFlags;
pub const kCFStringTokenizerTokenNone: _bindgen_ty_54 = 0;
pub const kCFStringTokenizerTokenNormal: _bindgen_ty_54 = 1;
pub const kCFStringTokenizerTokenHasSubTokensMask: _bindgen_ty_54 = 2;
pub const kCFStringTokenizerTokenHasDerivedSubTokensMask: _bindgen_ty_54 = 4;
pub const kCFStringTokenizerTokenHasHasNumbersMask: _bindgen_ty_54 = 8;
pub const kCFStringTokenizerTokenHasNonLettersMask: _bindgen_ty_54 = 16;
pub const kCFStringTokenizerTokenIsCJWordMask: _bindgen_ty_54 = 32;
pub type _bindgen_ty_54 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFStringTokenizerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringTokenizerCreate(
        alloc: CFAllocatorRef,
        string: CFStringRef,
        range: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringTokenizerRef;
}
extern "C" {
    pub fn CFStringTokenizerSetString(
        tokenizer: CFStringTokenizerRef,
        string: CFStringRef,
        range: CFRange,
    );
}
extern "C" {
    pub fn CFStringTokenizerGoToTokenAtIndex(
        tokenizer: CFStringTokenizerRef,
        index: CFIndex,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerAdvanceToNextToken(
        tokenizer: CFStringTokenizerRef,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) -> CFRange;
}
extern "C" {
    pub fn CFStringTokenizerCopyCurrentTokenAttribute(
        tokenizer: CFStringTokenizerRef,
        attribute: CFOptionFlags,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentSubTokens(
        tokenizer: CFStringTokenizerRef,
        ranges: *mut CFRange,
        maxRangeLength: CFIndex,
        derivedSubTokens: CFMutableArrayRef,
    ) -> CFIndex;
}
pub type CFFileDescriptorNativeDescriptor = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileDescriptor {
    _unused: [u8; 0],
}
pub type CFFileDescriptorRef = *mut __CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack: _bindgen_ty_55 = 1;
pub const kCFFileDescriptorWriteCallBack: _bindgen_ty_55 = 2;
pub type _bindgen_ty_55 = ::std::os::raw::c_uint;
pub type CFFileDescriptorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        f: CFFileDescriptorRef,
        callBackTypes: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFFileDescriptorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFFileDescriptorContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFFileDescriptorContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFFileDescriptorContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFFileDescriptorContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFFileDescriptorContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFFileDescriptorContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFFileDescriptorContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFFileDescriptorContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFFileDescriptorContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFFileDescriptorContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFFileDescriptorContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFFileDescriptorContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn CFFileDescriptorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileDescriptorCreate(
        allocator: CFAllocatorRef,
        fd: CFFileDescriptorNativeDescriptor,
        closeOnInvalidate: Boolean,
        callout: CFFileDescriptorCallBack,
        context: *const CFFileDescriptorContext,
    ) -> CFFileDescriptorRef;
}
extern "C" {
    pub fn CFFileDescriptorGetNativeDescriptor(
        f: CFFileDescriptorRef,
    ) -> CFFileDescriptorNativeDescriptor;
}
extern "C" {
    pub fn CFFileDescriptorGetContext(
        f: CFFileDescriptorRef,
        context: *mut CFFileDescriptorContext,
    );
}
extern "C" {
    pub fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef);
}
extern "C" {
    pub fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) -> Boolean;
}
extern "C" {
    pub fn CFFileDescriptorCreateRunLoopSource(
        allocator: CFAllocatorRef,
        f: CFFileDescriptorRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUserNotification {
    _unused: [u8; 0],
}
pub type CFUserNotificationRef = *mut __CFUserNotification;
pub type CFUserNotificationCallBack = ::std::option::Option<
    unsafe extern "C" fn(userNotification: CFUserNotificationRef, responseFlags: CFOptionFlags),
>;
extern "C" {
    pub fn CFUserNotificationGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUserNotificationCreate(
        allocator: CFAllocatorRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        error: *mut SInt32,
        dictionary: CFDictionaryRef,
    ) -> CFUserNotificationRef;
}
extern "C" {
    pub fn CFUserNotificationReceiveResponse(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationGetResponseValue(
        userNotification: CFUserNotificationRef,
        key: CFStringRef,
        idx: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFUserNotificationGetResponseDictionary(
        userNotification: CFUserNotificationRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFUserNotificationUpdate(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        dictionary: CFDictionaryRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCreateRunLoopSource(
        allocator: CFAllocatorRef,
        userNotification: CFUserNotificationRef,
        callout: CFUserNotificationCallBack,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFUserNotificationDisplayNotice(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationDisplayAlert(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
        alternateButtonTitle: CFStringRef,
        otherButtonTitle: CFStringRef,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
pub const kCFUserNotificationStopAlertLevel: _bindgen_ty_56 = 0;
pub const kCFUserNotificationNoteAlertLevel: _bindgen_ty_56 = 1;
pub const kCFUserNotificationCautionAlertLevel: _bindgen_ty_56 = 2;
pub const kCFUserNotificationPlainAlertLevel: _bindgen_ty_56 = 3;
pub type _bindgen_ty_56 = ::std::os::raw::c_uint;
pub const kCFUserNotificationDefaultResponse: _bindgen_ty_57 = 0;
pub const kCFUserNotificationAlternateResponse: _bindgen_ty_57 = 1;
pub const kCFUserNotificationOtherResponse: _bindgen_ty_57 = 2;
pub const kCFUserNotificationCancelResponse: _bindgen_ty_57 = 3;
pub type _bindgen_ty_57 = ::std::os::raw::c_uint;
pub const kCFUserNotificationNoDefaultButtonFlag: _bindgen_ty_58 = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: _bindgen_ty_58 = 64;
pub type _bindgen_ty_58 = ::std::os::raw::c_uint;
extern "C" {
    pub static kCFUserNotificationIconURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationSoundURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationLocalizationURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertHeaderKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertMessageKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationOtherButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldValuesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpSelectionKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertTopMostKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationKeyboardTypesKey: CFStringRef;
}
pub const kCFXMLNodeCurrentVersion: _bindgen_ty_59 = 1;
pub type _bindgen_ty_59 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLNode {
    _unused: [u8; 0],
}
pub type CFXMLNodeRef = *const __CFXMLNode;
pub type CFXMLTreeRef = CFTreeRef;
pub type CFXMLNodeTypeCode = CFIndex;
pub const kCFXMLNodeTypeDocument: _bindgen_ty_60 = 1;
pub const kCFXMLNodeTypeElement: _bindgen_ty_60 = 2;
pub const kCFXMLNodeTypeAttribute: _bindgen_ty_60 = 3;
pub const kCFXMLNodeTypeProcessingInstruction: _bindgen_ty_60 = 4;
pub const kCFXMLNodeTypeComment: _bindgen_ty_60 = 5;
pub const kCFXMLNodeTypeText: _bindgen_ty_60 = 6;
pub const kCFXMLNodeTypeCDATASection: _bindgen_ty_60 = 7;
pub const kCFXMLNodeTypeDocumentFragment: _bindgen_ty_60 = 8;
pub const kCFXMLNodeTypeEntity: _bindgen_ty_60 = 9;
pub const kCFXMLNodeTypeEntityReference: _bindgen_ty_60 = 10;
pub const kCFXMLNodeTypeDocumentType: _bindgen_ty_60 = 11;
pub const kCFXMLNodeTypeWhitespace: _bindgen_ty_60 = 12;
pub const kCFXMLNodeTypeNotation: _bindgen_ty_60 = 13;
pub const kCFXMLNodeTypeElementTypeDeclaration: _bindgen_ty_60 = 14;
pub const kCFXMLNodeTypeAttributeListDeclaration: _bindgen_ty_60 = 15;
pub type _bindgen_ty_60 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementInfo {
    pub attributes: CFDictionaryRef,
    pub attributeOrder: CFArrayRef,
    pub isEmpty: Boolean,
    pub _reserved: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_CFXMLElementInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLElementInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLElementInfo>(),
        24usize,
        concat!("Size of: ", stringify!(CFXMLElementInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLElementInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLElementInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFXMLElementInfo), "::", stringify!(attributes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeOrder) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLElementInfo),
            "::",
            stringify!(attributeOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isEmpty) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFXMLElementInfo), "::", stringify!(isEmpty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        17usize,
        concat!("Offset of field: ", stringify!(CFXMLElementInfo), "::", stringify!(_reserved))
    );
}
impl Default for CFXMLElementInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLProcessingInstructionInfo {
    pub dataString: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLProcessingInstructionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLProcessingInstructionInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLProcessingInstructionInfo>(),
        8usize,
        concat!("Size of: ", stringify!(CFXMLProcessingInstructionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLProcessingInstructionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLProcessingInstructionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataString) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLProcessingInstructionInfo),
            "::",
            stringify!(dataString)
        )
    );
}
impl Default for CFXMLProcessingInstructionInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentInfo {
    pub sourceURL: CFURLRef,
    pub encoding: CFStringEncoding,
}
#[test]
fn bindgen_test_layout_CFXMLDocumentInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLDocumentInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLDocumentInfo>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLDocumentInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLDocumentInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLDocumentInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceURL) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFXMLDocumentInfo), "::", stringify!(sourceURL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoding) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFXMLDocumentInfo), "::", stringify!(encoding))
    );
}
impl Default for CFXMLDocumentInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLExternalID {
    pub systemID: CFURLRef,
    pub publicID: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLExternalID() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLExternalID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLExternalID>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLExternalID))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLExternalID>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLExternalID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).systemID) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFXMLExternalID), "::", stringify!(systemID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publicID) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFXMLExternalID), "::", stringify!(publicID))
    );
}
impl Default for CFXMLExternalID {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentTypeInfo {
    pub externalID: CFXMLExternalID,
}
#[test]
fn bindgen_test_layout_CFXMLDocumentTypeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLDocumentTypeInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLDocumentTypeInfo>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLDocumentTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLDocumentTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLDocumentTypeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLDocumentTypeInfo),
            "::",
            stringify!(externalID)
        )
    );
}
impl Default for CFXMLDocumentTypeInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLNotationInfo {
    pub externalID: CFXMLExternalID,
}
#[test]
fn bindgen_test_layout_CFXMLNotationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLNotationInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLNotationInfo>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLNotationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLNotationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLNotationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalID) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFXMLNotationInfo), "::", stringify!(externalID))
    );
}
impl Default for CFXMLNotationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementTypeDeclarationInfo {
    pub contentDescription: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLElementTypeDeclarationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLElementTypeDeclarationInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLElementTypeDeclarationInfo>(),
        8usize,
        concat!("Size of: ", stringify!(CFXMLElementTypeDeclarationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLElementTypeDeclarationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLElementTypeDeclarationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contentDescription) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLElementTypeDeclarationInfo),
            "::",
            stringify!(contentDescription)
        )
    );
}
impl Default for CFXMLElementTypeDeclarationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeDeclarationInfo {
    pub attributeName: CFStringRef,
    pub typeString: CFStringRef,
    pub defaultString: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLAttributeDeclarationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLAttributeDeclarationInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLAttributeDeclarationInfo>(),
        24usize,
        concat!("Size of: ", stringify!(CFXMLAttributeDeclarationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLAttributeDeclarationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLAttributeDeclarationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeDeclarationInfo),
            "::",
            stringify!(attributeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeString) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeDeclarationInfo),
            "::",
            stringify!(typeString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultString) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeDeclarationInfo),
            "::",
            stringify!(defaultString)
        )
    );
}
impl Default for CFXMLAttributeDeclarationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeListDeclarationInfo {
    pub numberOfAttributes: CFIndex,
    pub attributes: *mut CFXMLAttributeDeclarationInfo,
}
#[test]
fn bindgen_test_layout_CFXMLAttributeListDeclarationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLAttributeListDeclarationInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLAttributeListDeclarationInfo>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLAttributeListDeclarationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLAttributeListDeclarationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLAttributeListDeclarationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberOfAttributes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeListDeclarationInfo),
            "::",
            stringify!(numberOfAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeListDeclarationInfo),
            "::",
            stringify!(attributes)
        )
    );
}
impl Default for CFXMLAttributeListDeclarationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CFXMLEntityTypeCode = CFIndex;
pub const kCFXMLEntityTypeParameter: _bindgen_ty_61 = 0;
pub const kCFXMLEntityTypeParsedInternal: _bindgen_ty_61 = 1;
pub const kCFXMLEntityTypeParsedExternal: _bindgen_ty_61 = 2;
pub const kCFXMLEntityTypeUnparsed: _bindgen_ty_61 = 3;
pub const kCFXMLEntityTypeCharacter: _bindgen_ty_61 = 4;
pub type _bindgen_ty_61 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLEntityInfo {
    pub entityType: CFXMLEntityTypeCode,
    pub replacementText: CFStringRef,
    pub entityID: CFXMLExternalID,
    pub notationName: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLEntityInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLEntityInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLEntityInfo>(),
        40usize,
        concat!("Size of: ", stringify!(CFXMLEntityInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLEntityInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLEntityInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entityType) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFXMLEntityInfo), "::", stringify!(entityType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replacementText) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLEntityInfo),
            "::",
            stringify!(replacementText)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entityID) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFXMLEntityInfo), "::", stringify!(entityID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notationName) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(CFXMLEntityInfo), "::", stringify!(notationName))
    );
}
impl Default for CFXMLEntityInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFXMLEntityReferenceInfo {
    pub entityType: CFXMLEntityTypeCode,
}
#[test]
fn bindgen_test_layout_CFXMLEntityReferenceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLEntityReferenceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLEntityReferenceInfo>(),
        8usize,
        concat!("Size of: ", stringify!(CFXMLEntityReferenceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLEntityReferenceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLEntityReferenceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entityType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLEntityReferenceInfo),
            "::",
            stringify!(entityType)
        )
    );
}
extern "C" {
    pub fn CFXMLNodeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFXMLNodeCreate(
        alloc: CFAllocatorRef,
        xmlType: CFXMLNodeTypeCode,
        dataString: CFStringRef,
        additionalInfoPtr: *const ::std::os::raw::c_void,
        version: CFIndex,
    ) -> CFXMLNodeRef;
}
extern "C" {
    pub fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef) -> CFXMLNodeRef;
}
extern "C" {
    pub fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) -> CFXMLNodeTypeCode;
}
extern "C" {
    pub fn CFXMLNodeGetString(node: CFXMLNodeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFXMLNodeGetVersion(node: CFXMLNodeRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) -> CFXMLNodeRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLParser {
    _unused: [u8; 0],
}
pub type CFXMLParserRef = *mut __CFXMLParser;
pub type CFXMLParserOptions = CFOptionFlags;
pub const kCFXMLParserValidateDocument: _bindgen_ty_62 = 1;
pub const kCFXMLParserSkipMetaData: _bindgen_ty_62 = 2;
pub const kCFXMLParserReplacePhysicalEntities: _bindgen_ty_62 = 4;
pub const kCFXMLParserSkipWhitespace: _bindgen_ty_62 = 8;
pub const kCFXMLParserResolveExternalEntities: _bindgen_ty_62 = 16;
pub const kCFXMLParserAddImpliedAttributes: _bindgen_ty_62 = 32;
pub const kCFXMLParserAllOptions: _bindgen_ty_62 = 16777215;
pub const kCFXMLParserNoOptions: _bindgen_ty_62 = 0;
pub type _bindgen_ty_62 = ::std::os::raw::c_uint;
pub type CFXMLParserStatusCode = CFIndex;
pub const kCFXMLStatusParseNotBegun: _bindgen_ty_63 = -2;
pub const kCFXMLStatusParseInProgress: _bindgen_ty_63 = -1;
pub const kCFXMLStatusParseSuccessful: _bindgen_ty_63 = 0;
pub const kCFXMLErrorUnexpectedEOF: _bindgen_ty_63 = 1;
pub const kCFXMLErrorUnknownEncoding: _bindgen_ty_63 = 2;
pub const kCFXMLErrorEncodingConversionFailure: _bindgen_ty_63 = 3;
pub const kCFXMLErrorMalformedProcessingInstruction: _bindgen_ty_63 = 4;
pub const kCFXMLErrorMalformedDTD: _bindgen_ty_63 = 5;
pub const kCFXMLErrorMalformedName: _bindgen_ty_63 = 6;
pub const kCFXMLErrorMalformedCDSect: _bindgen_ty_63 = 7;
pub const kCFXMLErrorMalformedCloseTag: _bindgen_ty_63 = 8;
pub const kCFXMLErrorMalformedStartTag: _bindgen_ty_63 = 9;
pub const kCFXMLErrorMalformedDocument: _bindgen_ty_63 = 10;
pub const kCFXMLErrorElementlessDocument: _bindgen_ty_63 = 11;
pub const kCFXMLErrorMalformedComment: _bindgen_ty_63 = 12;
pub const kCFXMLErrorMalformedCharacterReference: _bindgen_ty_63 = 13;
pub const kCFXMLErrorMalformedParsedCharacterData: _bindgen_ty_63 = 14;
pub const kCFXMLErrorNoData: _bindgen_ty_63 = 15;
pub type _bindgen_ty_63 = ::std::os::raw::c_int;
pub type CFXMLParserCreateXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        nodeDesc: CFXMLNodeRef,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFXMLParserAddChildCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        parent: *mut ::std::os::raw::c_void,
        child: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserEndXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        xmlType: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserResolveExternalEntityCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        extID: *mut CFXMLExternalID,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFXMLParserHandleErrorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        error: CFXMLParserStatusCode,
        info: *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFXMLParserCallBacks {
    pub version: CFIndex,
    pub createXMLStructure: CFXMLParserCreateXMLStructureCallBack,
    pub addChild: CFXMLParserAddChildCallBack,
    pub endXMLStructure: CFXMLParserEndXMLStructureCallBack,
    pub resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack,
    pub handleError: CFXMLParserHandleErrorCallBack,
}
#[test]
fn bindgen_test_layout_CFXMLParserCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLParserCallBacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLParserCallBacks>(),
        48usize,
        concat!("Size of: ", stringify!(CFXMLParserCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLParserCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLParserCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFXMLParserCallBacks), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createXMLStructure) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(createXMLStructure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addChild) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFXMLParserCallBacks), "::", stringify!(addChild))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endXMLStructure) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(endXMLStructure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolveExternalEntity) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(resolveExternalEntity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleError) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(handleError)
        )
    );
}
pub type CFXMLParserRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFXMLParserReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFXMLParserCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLParserContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFXMLParserRetainCallBack,
    pub release: CFXMLParserReleaseCallBack,
    pub copyDescription: CFXMLParserCopyDescriptionCallBack,
}
#[test]
fn bindgen_test_layout_CFXMLParserContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFXMLParserContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFXMLParserContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFXMLParserContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLParserContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLParserContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(CFXMLParserContext), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(CFXMLParserContext), "::", stringify!(info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(CFXMLParserContext), "::", stringify!(retain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(CFXMLParserContext), "::", stringify!(release))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFXMLParserContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn CFXMLParserGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFXMLParserCreate(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
extern "C" {
    pub fn CFXMLParserCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
extern "C" {
    pub fn CFXMLParserGetContext(parser: CFXMLParserRef, context: *mut CFXMLParserContext);
}
extern "C" {
    pub fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, callBacks: *mut CFXMLParserCallBacks);
}
extern "C" {
    pub fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) -> CFURLRef;
}
extern "C" {
    pub fn CFXMLParserGetLocation(parser: CFXMLParserRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLParserGetDocument(parser: CFXMLParserRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) -> CFXMLParserStatusCode;
}
extern "C" {
    pub fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLParserAbort(
        parser: CFXMLParserRef,
        errorCode: CFXMLParserStatusCode,
        errorDescription: CFStringRef,
    );
}
extern "C" {
    pub fn CFXMLParserParse(parser: CFXMLParserRef) -> Boolean;
}
extern "C" {
    pub fn CFXMLTreeCreateFromData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateFromDataWithError(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        errorDict: *mut CFDictionaryRef,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xmlTree: CFXMLTreeRef) -> CFDataRef;
}
extern "C" {
    pub fn CFXMLCreateStringByEscapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLCreateStringByUnescapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorDescription: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorLineNumber: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorLocation: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorStatusCode: CFStringRef;
}
pub type HRESULT = SInt32;
pub type ULONG = UInt32;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type REFIID = CFUUIDBytes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknownVTbl {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
}
#[test]
fn bindgen_test_layout_IUnknownVTbl() {
    const UNINIT: ::std::mem::MaybeUninit<IUnknownVTbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IUnknownVTbl>(),
        32usize,
        concat!("Size of: ", stringify!(IUnknownVTbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnknownVTbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnknownVTbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IUnknownVTbl), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IUnknownVTbl), "::", stringify!(QueryInterface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IUnknownVTbl), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IUnknownVTbl), "::", stringify!(Release))
    );
}
impl Default for IUnknownVTbl {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_statistics() {
    const UNINIT: ::std::mem::MaybeUninit<vm_statistics> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_statistics>(),
        60usize,
        concat!("Size of: ", stringify!(vm_statistics))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_statistics>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_statistics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(free_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_count) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(active_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inactive_count) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(inactive_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wire_count) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(wire_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_fill_count) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(zero_fill_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reactivations) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(reactivations))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageins) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageouts) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(pageouts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faults) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(faults))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cow_faults) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(cow_faults))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookups) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(lookups))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hits) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(hits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_count) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(purgeable_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purges) as usize - ptr as usize },
        52usize,
        concat!("Offset of field: ", stringify!(vm_statistics), "::", stringify!(purges))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speculative_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(speculative_count)
        )
    );
}
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
#[test]
fn bindgen_test_layout_vm_statistics64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_statistics64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_statistics64>(),
        152usize,
        concat!("Size of: ", stringify!(vm_statistics64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_statistics64>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_statistics64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(free_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_count) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(active_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inactive_count) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(inactive_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wire_count) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(wire_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_fill_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(zero_fill_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reactivations) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(reactivations))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageins) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageouts) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(pageouts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faults) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(faults))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cow_faults) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(cow_faults))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookups) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(lookups))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hits) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(hits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purges) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(purges))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_count) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(purgeable_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speculative_count) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(speculative_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decompressions) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(decompressions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressions) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(compressions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapins) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(swapins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapouts) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(vm_statistics64), "::", stringify!(swapouts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressor_page_count) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(compressor_page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throttled_count) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(throttled_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_page_count) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(external_page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_page_count) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(internal_page_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_uncompressed_pages_in_compressor) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(total_uncompressed_pages_in_compressor)
        )
    );
}
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
#[test]
fn bindgen_test_layout_vm_extmod_statistics() {
    const UNINIT: ::std::mem::MaybeUninit<vm_extmod_statistics> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_extmod_statistics>(),
        48usize,
        concat!("Size of: ", stringify!(vm_extmod_statistics))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_extmod_statistics>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_extmod_statistics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_for_pid_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(task_for_pid_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_for_pid_caller_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(task_for_pid_caller_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_creation_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_creation_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_creation_caller_count) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_creation_caller_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_set_state_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_set_state_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_set_state_caller_count) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_set_state_caller_count)
        )
    );
}
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_vm_purgeable_stat() {
    const UNINIT: ::std::mem::MaybeUninit<vm_purgeable_stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_purgeable_stat>(),
        16usize,
        concat!("Size of: ", stringify!(vm_purgeable_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_purgeable_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_purgeable_stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_purgeable_stat), "::", stringify!(count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vm_purgeable_stat), "::", stringify!(size))
    );
}
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
#[test]
fn bindgen_test_layout_vm_purgeable_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_purgeable_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_purgeable_info>(),
        272usize,
        concat!("Size of: ", stringify!(vm_purgeable_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_purgeable_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_purgeable_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo_data) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_purgeable_info), "::", stringify!(fifo_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obsolete_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(obsolete_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lifo_data) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(vm_purgeable_info), "::", stringify!(lifo_data))
    );
}
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_COPYIO_FAILURE:
    virtual_memory_guard_exception_codes = 2;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_INDEX_FAILURE:
    virtual_memory_guard_exception_codes = 4;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE:
    virtual_memory_guard_exception_codes = 8;
pub type virtual_memory_guard_exception_codes = ::std::os::raw::c_uint;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
#[test]
fn bindgen_test_layout_host_can_has_debugger_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_can_has_debugger_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_can_has_debugger_info>(),
        4usize,
        concat!("Size of: ", stringify!(host_can_has_debugger_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_can_has_debugger_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_can_has_debugger_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_has_debugger) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_can_has_debugger_info),
            "::",
            stringify!(can_has_debugger)
        )
    );
}
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
#[test]
fn bindgen_test_layout_host_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_basic_info>(),
        48usize,
        concat!("Size of: ", stringify!(host_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cpus) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(host_basic_info), "::", stringify!(max_cpus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avail_cpus) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(host_basic_info), "::", stringify!(avail_cpus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(host_basic_info), "::", stringify!(memory_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_type) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(host_basic_info), "::", stringify!(cpu_type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_subtype) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(host_basic_info), "::", stringify!(cpu_subtype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_threadtype) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(host_basic_info), "::", stringify!(cpu_threadtype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physical_cpu) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(host_basic_info), "::", stringify!(physical_cpu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physical_cpu_max) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(physical_cpu_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logical_cpu) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(host_basic_info), "::", stringify!(logical_cpu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logical_cpu_max) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(logical_cpu_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mem) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(host_basic_info), "::", stringify!(max_mem))
    );
}
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
#[test]
fn bindgen_test_layout_host_sched_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_sched_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_sched_info>(),
        8usize,
        concat!("Size of: ", stringify!(host_sched_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_sched_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_sched_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_timeout) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(host_sched_info), "::", stringify!(min_timeout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_quantum) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(host_sched_info), "::", stringify!(min_quantum))
    );
}
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
#[test]
fn bindgen_test_layout_kernel_resource_sizes() {
    const UNINIT: ::std::mem::MaybeUninit<kernel_resource_sizes> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kernel_resource_sizes>(),
        20usize,
        concat!("Size of: ", stringify!(kernel_resource_sizes))
    );
    assert_eq!(
        ::std::mem::align_of::<kernel_resource_sizes>(),
        4usize,
        concat!("Alignment of ", stringify!(kernel_resource_sizes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(kernel_resource_sizes), "::", stringify!(task))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(kernel_resource_sizes), "::", stringify!(thread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(kernel_resource_sizes), "::", stringify!(port))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_region) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(memory_region)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_object) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(memory_object)
        )
    );
}
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
#[test]
fn bindgen_test_layout_host_priority_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_priority_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_priority_info>(),
        32usize,
        concat!("Size of: ", stringify!(host_priority_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_priority_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_priority_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernel_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(kernel_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_priority) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(system_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_priority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(server_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(user_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depress_priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(depress_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idle_priority) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(idle_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum_priority) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(minimum_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum_priority) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(maximum_priority)
        )
    );
}
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
#[test]
fn bindgen_test_layout_host_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_load_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_load_info>(),
        24usize,
        concat!("Size of: ", stringify!(host_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_load_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avenrun) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(host_load_info), "::", stringify!(avenrun))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mach_factor) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(host_load_info), "::", stringify!(mach_factor))
    );
}
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
#[test]
fn bindgen_test_layout_host_cpu_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_cpu_load_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_cpu_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(host_cpu_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_cpu_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_cpu_load_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_ticks) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(host_cpu_load_info), "::", stringify!(cpu_ticks))
    );
}
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
#[test]
fn bindgen_test_layout_host_preferred_user_arch() {
    const UNINIT: ::std::mem::MaybeUninit<host_preferred_user_arch> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_preferred_user_arch>(),
        8usize,
        concat!("Size of: ", stringify!(host_preferred_user_arch))
    );
    assert_eq!(
        ::std::mem::align_of::<host_preferred_user_arch>(),
        4usize,
        concat!("Alignment of ", stringify!(host_preferred_user_arch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_preferred_user_arch),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_subtype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_preferred_user_arch),
            "::",
            stringify!(cpu_subtype)
        )
    );
}
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
#[test]
fn bindgen_test_layout_mach_vm_range() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_range> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_range>(),
        16usize,
        concat!("Size of: ", stringify!(mach_vm_range))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_range>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_vm_range))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_address) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_vm_range), "::", stringify!(min_address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_address) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mach_vm_range), "::", stringify!(max_address))
    );
}
pub type mach_vm_range_t = *mut mach_vm_range;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_perf_info() {
    const UNINIT: ::std::mem::MaybeUninit<memory_object_perf_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memory_object_perf_info>(),
        8usize,
        concat!("Size of: ", stringify!(memory_object_perf_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_perf_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_perf_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cluster_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_perf_info),
            "::",
            stringify!(cluster_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).may_cache) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_perf_info),
            "::",
            stringify!(may_cache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_attr_info() {
    const UNINIT: ::std::mem::MaybeUninit<memory_object_attr_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memory_object_attr_info>(),
        16usize,
        concat!("Size of: ", stringify!(memory_object_attr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_attr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_attr_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_strategy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(copy_strategy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cluster_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(cluster_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).may_cache_object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(may_cache_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temporary) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(temporary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_behave_info() {
    const UNINIT: ::std::mem::MaybeUninit<memory_object_behave_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memory_object_behave_info>(),
        20usize,
        concat!("Size of: ", stringify!(memory_object_behave_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_behave_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_behave_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_strategy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(copy_strategy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temporary) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(temporary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalidate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silent_overwrite) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(silent_overwrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advisory_pageout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(advisory_pageout)
        )
    );
}
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct x86_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_x86_state_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<x86_state_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_state_hdr>(),
        8usize,
        concat!("Size of: ", stringify!(x86_state_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_state_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_state_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavor) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(x86_state_hdr), "::", stringify!(flavor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(x86_state_hdr), "::", stringify!(count))
    );
}
pub type x86_state_hdr_t = x86_state_hdr;
pub type i386_thread_state_t = __darwin_i386_thread_state;
pub type x86_thread_state32_t = __darwin_i386_thread_state;
pub type i386_float_state_t = __darwin_i386_float_state;
pub type x86_float_state32_t = __darwin_i386_float_state;
pub type x86_avx_state32_t = __darwin_i386_avx_state;
pub type x86_avx512_state32_t = __darwin_i386_avx512_state;
pub type i386_exception_state_t = __darwin_i386_exception_state;
pub type x86_exception_state32_t = __darwin_i386_exception_state;
pub type x86_debug_state32_t = __darwin_x86_debug_state32;
pub type x86_thread_state64_t = __darwin_x86_thread_state64;
pub type x86_thread_full_state64_t = __darwin_x86_thread_full_state64;
pub type x86_float_state64_t = __darwin_x86_float_state64;
pub type x86_avx_state64_t = __darwin_x86_avx_state64;
pub type x86_avx512_state64_t = __darwin_x86_avx512_state64;
pub type x86_exception_state64_t = __darwin_x86_exception_state64;
pub type x86_debug_state64_t = __darwin_x86_debug_state64;
pub type x86_pagein_state_t = __x86_pagein_state;
pub type x86_instruction_state_t = __x86_instruction_state;
pub type last_branch_state_t = __last_branch_state;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_thread_state {
    pub tsh: x86_state_hdr_t,
    pub uts: x86_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_thread_state__bindgen_ty_1 {
    pub ts32: x86_thread_state32_t,
    pub ts64: x86_thread_state64_t,
}
#[test]
fn bindgen_test_layout_x86_thread_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_thread_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_thread_state__bindgen_ty_1>(),
        168usize,
        concat!("Size of: ", stringify!(x86_thread_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_thread_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_thread_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state__bindgen_ty_1),
            "::",
            stringify!(ts32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state__bindgen_ty_1),
            "::",
            stringify!(ts64)
        )
    );
}
impl Default for x86_thread_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_thread_state__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_thread_state__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_x86_thread_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_thread_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_thread_state>(),
        176usize,
        concat!("Size of: ", stringify!(x86_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_thread_state>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_thread_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsh) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(x86_thread_state), "::", stringify!(tsh))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uts) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(x86_thread_state), "::", stringify!(uts))
    );
}
impl Default for x86_thread_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_thread_state {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_thread_state {{ tsh: {:?}, uts: {:?} }}", self.tsh, self.uts)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_float_state {
    pub fsh: x86_state_hdr_t,
    pub ufs: x86_float_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_float_state__bindgen_ty_1 {
    pub fs32: x86_float_state32_t,
    pub fs64: x86_float_state64_t,
}
#[test]
fn bindgen_test_layout_x86_float_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_float_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_float_state__bindgen_ty_1>(),
        524usize,
        concat!("Size of: ", stringify!(x86_float_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_float_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_float_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state__bindgen_ty_1),
            "::",
            stringify!(fs32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state__bindgen_ty_1),
            "::",
            stringify!(fs64)
        )
    );
}
impl Default for x86_float_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_float_state__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_float_state__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_x86_float_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_float_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_float_state>(),
        532usize,
        concat!("Size of: ", stringify!(x86_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_float_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsh) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(x86_float_state), "::", stringify!(fsh))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ufs) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(x86_float_state), "::", stringify!(ufs))
    );
}
impl Default for x86_float_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_float_state {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_float_state {{ fsh: {:?}, ufs: {:?} }}", self.fsh, self.ufs)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_exception_state {
    pub esh: x86_state_hdr_t,
    pub ues: x86_exception_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_exception_state__bindgen_ty_1 {
    pub es32: x86_exception_state32_t,
    pub es64: x86_exception_state64_t,
}
#[test]
fn bindgen_test_layout_x86_exception_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_exception_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_exception_state__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(x86_exception_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_exception_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_exception_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).es32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state__bindgen_ty_1),
            "::",
            stringify!(es32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).es64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state__bindgen_ty_1),
            "::",
            stringify!(es64)
        )
    );
}
impl Default for x86_exception_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_exception_state__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_exception_state__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_x86_exception_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_exception_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_exception_state>(),
        24usize,
        concat!("Size of: ", stringify!(x86_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_exception_state>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_exception_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esh) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(x86_exception_state), "::", stringify!(esh))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ues) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(x86_exception_state), "::", stringify!(ues))
    );
}
impl Default for x86_exception_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_exception_state {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_exception_state {{ esh: {:?}, ues: {:?} }}", self.esh, self.ues)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_debug_state {
    pub dsh: x86_state_hdr_t,
    pub uds: x86_debug_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_debug_state__bindgen_ty_1 {
    pub ds32: x86_debug_state32_t,
    pub ds64: x86_debug_state64_t,
}
#[test]
fn bindgen_test_layout_x86_debug_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_debug_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_debug_state__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(x86_debug_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_debug_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_debug_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state__bindgen_ty_1),
            "::",
            stringify!(ds32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state__bindgen_ty_1),
            "::",
            stringify!(ds64)
        )
    );
}
impl Default for x86_debug_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_debug_state__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_debug_state__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_x86_debug_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_debug_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_debug_state>(),
        72usize,
        concat!("Size of: ", stringify!(x86_debug_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_debug_state>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_debug_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsh) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(x86_debug_state), "::", stringify!(dsh))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uds) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(x86_debug_state), "::", stringify!(uds))
    );
}
impl Default for x86_debug_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_debug_state {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_debug_state {{ dsh: {:?}, uds: {:?} }}", self.dsh, self.uds)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx_state {
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx_state__bindgen_ty_1 {
    pub as32: x86_avx_state32_t,
    pub as64: x86_avx_state64_t,
}
#[test]
fn bindgen_test_layout_x86_avx_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_avx_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_avx_state__bindgen_ty_1>(),
        844usize,
        concat!("Size of: ", stringify!(x86_avx_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state__bindgen_ty_1),
            "::",
            stringify!(as32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state__bindgen_ty_1),
            "::",
            stringify!(as64)
        )
    );
}
impl Default for x86_avx_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_avx_state__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_avx_state__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_x86_avx_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_avx_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_avx_state>(),
        852usize,
        concat!("Size of: ", stringify!(x86_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ash) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(x86_avx_state), "::", stringify!(ash))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ufs) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(x86_avx_state), "::", stringify!(ufs))
    );
}
impl Default for x86_avx_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_avx_state {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_avx_state {{ ash: {:?}, ufs: {:?} }}", self.ash, self.ufs)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx512_state {
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx512_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx512_state__bindgen_ty_1 {
    pub as32: x86_avx512_state32_t,
    pub as64: x86_avx512_state64_t,
}
#[test]
fn bindgen_test_layout_x86_avx512_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_avx512_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_avx512_state__bindgen_ty_1>(),
        2444usize,
        concat!("Size of: ", stringify!(x86_avx512_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx512_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx512_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state__bindgen_ty_1),
            "::",
            stringify!(as32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state__bindgen_ty_1),
            "::",
            stringify!(as64)
        )
    );
}
impl Default for x86_avx512_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_avx512_state__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_avx512_state__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_x86_avx512_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_avx512_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_avx512_state>(),
        2452usize,
        concat!("Size of: ", stringify!(x86_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx512_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ash) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(x86_avx512_state), "::", stringify!(ash))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ufs) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(x86_avx512_state), "::", stringify!(ufs))
    );
}
impl Default for x86_avx512_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for x86_avx512_state {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "x86_avx512_state {{ ash: {:?}, ufs: {:?} }}", self.ash, self.ufs)
    }
}
pub type x86_thread_state_t = x86_thread_state;
pub type x86_float_state_t = x86_float_state;
pub type x86_exception_state_t = x86_exception_state;
pub type x86_debug_state_t = x86_debug_state;
pub type x86_avx_state_t = x86_avx_state;
pub type x86_avx512_state_t = x86_avx512_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 1296usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_space() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_space> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_space>(),
        24usize,
        concat!("Size of: ", stringify!(ipc_info_space))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_space>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_space))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_genno_mask) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ipc_info_space), "::", stringify!(iis_genno_mask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_table_size) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ipc_info_space), "::", stringify!(iis_table_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_table_next) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ipc_info_space), "::", stringify!(iis_table_next))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_tree_size) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ipc_info_space), "::", stringify!(iis_tree_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_tree_small) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ipc_info_space), "::", stringify!(iis_tree_small))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_tree_hash) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(ipc_info_space), "::", stringify!(iis_tree_hash))
    );
}
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
#[test]
fn bindgen_test_layout_ipc_info_space_basic() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_space_basic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_space_basic>(),
        24usize,
        concat!("Size of: ", stringify!(ipc_info_space_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_space_basic>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_space_basic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_genno_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_genno_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_table_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_table_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_table_inuse) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_inuse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_reserved)
        )
    );
}
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_name() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_name>(),
        28usize,
        concat!("Size of: ", stringify!(ipc_info_name))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_name>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ipc_info_name), "::", stringify!(iin_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_collision) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ipc_info_name), "::", stringify!(iin_collision))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_type) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ipc_info_name), "::", stringify!(iin_type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_urefs) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ipc_info_name), "::", stringify!(iin_urefs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_object) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ipc_info_name), "::", stringify!(iin_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_next) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(ipc_info_name), "::", stringify!(iin_next))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_hash) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(ipc_info_name), "::", stringify!(iin_hash))
    );
}
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_ipc_info_tree_name() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_tree_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_tree_name>(),
        36usize,
        concat!("Size of: ", stringify!(ipc_info_tree_name))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_tree_name>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_tree_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iitn_name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ipc_info_tree_name), "::", stringify!(iitn_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iitn_lchild) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(ipc_info_tree_name), "::", stringify!(iitn_lchild))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iitn_rchild) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ipc_info_tree_name), "::", stringify!(iitn_rchild))
    );
}
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ipc_info_port {
    pub iip_port_object: natural_t,
    pub iip_receiver_object: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_port() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_port> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_port>(),
        8usize,
        concat!("Size of: ", stringify!(ipc_info_port))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_port>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_port))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iip_port_object) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ipc_info_port), "::", stringify!(iip_port_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iip_receiver_object) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_port),
            "::",
            stringify!(iip_receiver_object)
        )
    );
}
pub type ipc_info_port_t = ipc_info_port;
pub type exception_handler_info_array_t = *mut ipc_info_port_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type exception_port_info_array_t = *mut ipc_info_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t = *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mach_voucher_attr_recipe_data() {
    const UNINIT: ::std::mem::MaybeUninit<mach_voucher_attr_recipe_data> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_voucher_attr_recipe_data>(),
        16usize,
        concat!("Size of: ", stringify!(mach_voucher_attr_recipe_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_voucher_attr_recipe_data>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_voucher_attr_recipe_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).previous_voucher) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(previous_voucher)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(content_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(content)
        )
    );
}
impl Default for mach_voucher_attr_recipe_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t = *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct processor_basic_info {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
    pub __bindgen_anon_1: processor_basic_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union processor_basic_info__bindgen_ty_1 {
    pub is_master: boolean_t,
    pub is_main: boolean_t,
}
#[test]
fn bindgen_test_layout_processor_basic_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<processor_basic_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_basic_info__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(processor_basic_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_basic_info__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_basic_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_master) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info__bindgen_ty_1),
            "::",
            stringify!(is_master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_main) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info__bindgen_ty_1),
            "::",
            stringify!(is_main)
        )
    );
}
impl Default for processor_basic_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for processor_basic_info__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "processor_basic_info__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_processor_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_basic_info>(),
        20usize,
        concat!("Size of: ", stringify!(processor_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_type) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(processor_basic_info), "::", stringify!(cpu_type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_subtype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(cpu_subtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(processor_basic_info), "::", stringify!(running))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_num) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(processor_basic_info), "::", stringify!(slot_num))
    );
}
impl Default for processor_basic_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for processor_basic_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "processor_basic_info {{ cpu_type: {:?}, cpu_subtype: {:?}, running: {:?}, slot_num: {:?}, __bindgen_anon_1: {:?} }}" , self . cpu_type , self . cpu_subtype , self . running , self . slot_num , self . __bindgen_anon_1)
    }
}
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_processor_cpu_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_cpu_load_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_cpu_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(processor_cpu_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_cpu_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_cpu_load_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_ticks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_load_info),
            "::",
            stringify!(cpu_ticks)
        )
    );
}
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_processor_set_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_set_basic_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_set_basic_info>(),
        8usize,
        concat!("Size of: ", stringify!(processor_set_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_set_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_set_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).processor_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_basic_info),
            "::",
            stringify!(processor_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_policy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_basic_info),
            "::",
            stringify!(default_policy)
        )
    );
}
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
#[test]
fn bindgen_test_layout_processor_set_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_set_load_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_set_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(processor_set_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_set_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_set_load_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(task_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(thread_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_average) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(load_average)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mach_factor) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(mach_factor)
        )
    );
}
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_base() {
    const UNINIT: ::std::mem::MaybeUninit<policy_timeshare_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_base>(),
        4usize,
        concat!("Size of: ", stringify!(policy_timeshare_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_base),
            "::",
            stringify!(base_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_limit() {
    const UNINIT: ::std::mem::MaybeUninit<policy_timeshare_limit> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_timeshare_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_limit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_info() {
    const UNINIT: ::std::mem::MaybeUninit<policy_timeshare_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_info>(),
        20usize,
        concat!("Size of: ", stringify!(policy_timeshare_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_priority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(cur_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depressed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depress_priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_base() {
    const UNINIT: ::std::mem::MaybeUninit<policy_rr_base> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_rr_base>(),
        8usize,
        concat!("Size of: ", stringify!(policy_rr_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(policy_rr_base), "::", stringify!(base_priority))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantum) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(policy_rr_base), "::", stringify!(quantum))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_limit() {
    const UNINIT: ::std::mem::MaybeUninit<policy_rr_limit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_rr_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_rr_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_limit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(policy_rr_limit), "::", stringify!(max_priority))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_info() {
    const UNINIT: ::std::mem::MaybeUninit<policy_rr_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_rr_info>(),
        20usize,
        concat!("Size of: ", stringify!(policy_rr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(policy_rr_info), "::", stringify!(max_priority))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(policy_rr_info), "::", stringify!(base_priority))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantum) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(policy_rr_info), "::", stringify!(quantum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depressed) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(policy_rr_info), "::", stringify!(depressed))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depress_priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_base() {
    const UNINIT: ::std::mem::MaybeUninit<policy_fifo_base> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_base>(),
        4usize,
        concat!("Size of: ", stringify!(policy_fifo_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(policy_fifo_base), "::", stringify!(base_priority))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_limit() {
    const UNINIT: ::std::mem::MaybeUninit<policy_fifo_limit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_fifo_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_limit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(policy_fifo_limit), "::", stringify!(max_priority))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_info() {
    const UNINIT: ::std::mem::MaybeUninit<policy_fifo_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_info>(),
        16usize,
        concat!("Size of: ", stringify!(policy_fifo_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(policy_fifo_info), "::", stringify!(max_priority))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(policy_fifo_info), "::", stringify!(base_priority))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depressed) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(policy_fifo_info), "::", stringify!(depressed))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depress_priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[test]
fn bindgen_test_layout_policy_bases() {
    const UNINIT: ::std::mem::MaybeUninit<policy_bases> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_bases>(),
        16usize,
        concat!("Size of: ", stringify!(policy_bases))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_bases>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_bases))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(policy_bases), "::", stringify!(ts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(policy_bases), "::", stringify!(rr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(policy_bases), "::", stringify!(fifo))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[test]
fn bindgen_test_layout_policy_limits() {
    const UNINIT: ::std::mem::MaybeUninit<policy_limits> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_limits>(),
        12usize,
        concat!("Size of: ", stringify!(policy_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_limits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(policy_limits), "::", stringify!(ts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(policy_limits), "::", stringify!(rr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(policy_limits), "::", stringify!(fifo))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
#[test]
fn bindgen_test_layout_policy_infos() {
    const UNINIT: ::std::mem::MaybeUninit<policy_infos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_infos>(),
        56usize,
        concat!("Size of: ", stringify!(policy_infos))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_infos>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_infos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(policy_infos), "::", stringify!(ts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(policy_infos), "::", stringify!(rr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(policy_infos), "::", stringify!(fifo))
    );
}
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info_32() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info_32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info_32>(),
        32usize,
        concat!("Size of: ", stringify!(task_basic_info_32))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info_32>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info_32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(task_basic_info_32), "::", stringify!(user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(task_basic_info_32), "::", stringify!(system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(task_basic_info_32), "::", stringify!(policy))
    );
}
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info_64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info_64>(),
        40usize,
        concat!("Size of: ", stringify!(task_basic_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(task_basic_info_64), "::", stringify!(user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(task_basic_info_64), "::", stringify!(system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(task_basic_info_64), "::", stringify!(policy))
    );
}
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info>(),
        40usize,
        concat!("Size of: ", stringify!(task_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(task_basic_info), "::", stringify!(suspend_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(task_basic_info), "::", stringify!(virtual_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(task_basic_info), "::", stringify!(resident_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(task_basic_info), "::", stringify!(user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(task_basic_info), "::", stringify!(system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(task_basic_info), "::", stringify!(policy))
    );
}
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
#[test]
fn bindgen_test_layout_task_events_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_events_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_events_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_events_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_events_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_events_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faults) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(task_events_info), "::", stringify!(faults))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageins) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(task_events_info), "::", stringify!(pageins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cow_faults) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(task_events_info), "::", stringify!(cow_faults))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messages_sent) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(task_events_info), "::", stringify!(messages_sent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messages_received) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(messages_received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syscalls_mach) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(task_events_info), "::", stringify!(syscalls_mach))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syscalls_unix) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(task_events_info), "::", stringify!(syscalls_unix))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csw) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(task_events_info), "::", stringify!(csw))
    );
}
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
#[test]
fn bindgen_test_layout_task_thread_times_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_thread_times_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_thread_times_info>(),
        16usize,
        concat!("Size of: ", stringify!(task_thread_times_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_thread_times_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_thread_times_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_thread_times_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_thread_times_info),
            "::",
            stringify!(system_time)
        )
    );
}
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
#[test]
fn bindgen_test_layout_task_absolutetime_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_absolutetime_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_absolutetime_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_absolutetime_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_absolutetime_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_absolutetime_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(total_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_system) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(total_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threads_user) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(threads_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threads_system) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(threads_system)
        )
    );
}
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
#[test]
fn bindgen_test_layout_task_kernelmemory_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_kernelmemory_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_kernelmemory_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_kernelmemory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_kernelmemory_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_kernelmemory_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_palloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_palloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_pfree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_pfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_salloc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_salloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_sfree) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_sfree)
        )
    );
}
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
#[test]
fn bindgen_test_layout_task_affinity_tag_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_affinity_tag_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_affinity_tag_info>(),
        16usize,
        concat!("Size of: ", stringify!(task_affinity_tag_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_affinity_tag_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_affinity_tag_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(set_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(task_affinity_tag_info), "::", stringify!(min))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(task_affinity_tag_info), "::", stringify!(max))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(task_count)
        )
    );
}
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
#[test]
fn bindgen_test_layout_task_dyld_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_dyld_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_dyld_info>(),
        20usize,
        concat!("Size of: ", stringify!(task_dyld_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_dyld_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_dyld_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_image_info_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_image_info_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_image_info_format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_format)
        )
    );
}
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
#[test]
fn bindgen_test_layout_task_extmod_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_extmod_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_extmod_info>(),
        64usize,
        concat!("Size of: ", stringify!(task_extmod_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_extmod_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_extmod_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_uuid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(task_extmod_info), "::", stringify!(task_uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extmod_statistics) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_extmod_info),
            "::",
            stringify!(extmod_statistics)
        )
    );
}
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
#[test]
fn bindgen_test_layout_mach_task_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_task_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_task_basic_info>(),
        48usize,
        concat!("Size of: ", stringify!(mach_task_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_task_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_task_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size_max) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(resident_size_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mach_task_basic_info), "::", stringify!(user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(mach_task_basic_info), "::", stringify!(policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
}
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
#[test]
fn bindgen_test_layout_task_power_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_power_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_power_info>(),
        48usize,
        concat!("Size of: ", stringify!(task_power_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_power_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_power_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_user) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(task_power_info), "::", stringify!(total_user))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_system) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(task_power_info), "::", stringify!(total_system))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_interrupt_wakeups) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_interrupt_wakeups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_platform_idle_wakeups) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_platform_idle_wakeups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_timer_wakeups_bin_1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_timer_wakeups_bin_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_timer_wakeups_bin_2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_timer_wakeups_bin_2)
        )
    );
}
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
    pub ledger_swapins: i64,
}
#[test]
fn bindgen_test_layout_task_vm_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_vm_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_vm_info>(),
        356usize,
        concat!("Size of: ", stringify!(task_vm_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_vm_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_vm_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(virtual_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).region_count) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(region_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(page_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(resident_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size_peak) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(resident_size_peak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(device))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_peak) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(device_peak))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(internal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_peak) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(internal_peak))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(external))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_peak) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(external_peak))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reusable) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(reusable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reusable_peak) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(reusable_peak))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_volatile_pmap) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_pmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_volatile_resident) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_volatile_virtual) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_virtual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressed) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(compressed))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressed_peak) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(compressed_peak))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressed_lifetime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed_lifetime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phys_footprint) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(phys_footprint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_address) as usize - ptr as usize },
        152usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(min_address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_address) as usize - ptr as usize },
        160usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(max_address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_phys_footprint_peak) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_phys_footprint_peak)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_nonvolatile) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_nonvolatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_novolatile_compressed) as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_novolatile_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_purgeable_volatile) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_volatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_volatile_compressed) as usize
                - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_volatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_network_nonvolatile) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_nonvolatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_network_nonvolatile_compressed) as usize
                - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_nonvolatile_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_tag_network_volatile) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_volatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_network_volatile_compressed) as usize
                - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_volatile_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_tag_media_footprint) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_footprint_compressed) as usize
                - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_nofootprint) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_nofootprint_compressed) as usize
                - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_footprint) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_footprint_compressed) as usize
                - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_nofootprint) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_nofootprint_compressed) as usize
                - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_tag_neural_footprint) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_neural_footprint_compressed) as usize
                - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_neural_nofootprint) as usize - ptr as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_neural_nofootprint_compressed) as usize
                - ptr as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_bytes_remaining) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(limit_bytes_remaining)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decompressions) as usize - ptr as usize },
        344usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(decompressions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_swapins) as usize - ptr as usize },
        348usize,
        concat!("Offset of field: ", stringify!(task_vm_info), "::", stringify!(ledger_swapins))
    );
}
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
#[test]
fn bindgen_test_layout_task_trace_memory_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_trace_memory_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_trace_memory_info>(),
        24usize,
        concat!("Size of: ", stringify!(task_trace_memory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_trace_memory_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_trace_memory_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_memory_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(user_memory_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mailbox_array_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(mailbox_array_size)
        )
    );
}
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_task_wait_state_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_wait_state_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_wait_state_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_wait_state_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_wait_state_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_wait_state_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_wait_state_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(total_wait_state_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_wait_sfi_state_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(total_wait_sfi_state_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(task_wait_state_info), "::", stringify!(_reserved))
    );
}
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
#[test]
fn bindgen_test_layout_gpu_energy_data() {
    const UNINIT: ::std::mem::MaybeUninit<gpu_energy_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gpu_energy_data>(),
        32usize,
        concat!("Size of: ", stringify!(gpu_energy_data))
    );
    assert_eq!(
        ::std::mem::align_of::<gpu_energy_data>(),
        4usize,
        concat!("Alignment of ", stringify!(gpu_energy_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_gpu_utilisation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_utilisation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_gpu_stat_reserved0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_gpu_stat_reserved1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_gpu_stat_reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved2)
        )
    );
}
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
#[test]
fn bindgen_test_layout_task_power_info_v2() {
    const UNINIT: ::std::mem::MaybeUninit<task_power_info_v2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_power_info_v2>(),
        96usize,
        concat!("Size of: ", stringify!(task_power_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<task_power_info_v2>(),
        4usize,
        concat!("Alignment of ", stringify!(task_power_info_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_energy) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(task_power_info_v2), "::", stringify!(cpu_energy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpu_energy) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(task_power_info_v2), "::", stringify!(gpu_energy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_ptime) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(task_power_info_v2), "::", stringify!(task_ptime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_pset_switches) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(task_pset_switches)
        )
    );
}
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_task_flags_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_flags_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_flags_info>(),
        4usize,
        concat!("Size of: ", stringify!(task_flags_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_flags_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_flags_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(task_flags_info), "::", stringify!(flags))
    );
}
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_corpse_forking_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor = 1;
pub type task_inspect_flavor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
#[test]
fn bindgen_test_layout_task_inspect_basic_counts() {
    const UNINIT: ::std::mem::MaybeUninit<task_inspect_basic_counts> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_inspect_basic_counts>(),
        16usize,
        concat!("Size of: ", stringify!(task_inspect_basic_counts))
    );
    assert_eq!(
        ::std::mem::align_of::<task_inspect_basic_counts>(),
        8usize,
        concat!("Alignment of ", stringify!(task_inspect_basic_counts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instructions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_inspect_basic_counts),
            "::",
            stringify!(instructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cycles) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_inspect_basic_counts),
            "::",
            stringify!(cycles)
        )
    );
}
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = ::std::os::raw::c_int;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
#[test]
fn bindgen_test_layout_task_category_policy() {
    const UNINIT: ::std::mem::MaybeUninit<task_category_policy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_category_policy>(),
        4usize,
        concat!("Size of: ", stringify!(task_category_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<task_category_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(task_category_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).role) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(task_category_policy), "::", stringify!(role))
    );
}
impl Default for task_category_policy {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = ::std::os::raw::c_uint;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos = 16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos = 16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos = 16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos = 16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos = 16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos = 16646150;
pub type task_throughput_qos = ::std::os::raw::c_uint;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
#[test]
fn bindgen_test_layout_task_qos_policy() {
    const UNINIT: ::std::mem::MaybeUninit<task_qos_policy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_qos_policy>(),
        8usize,
        concat!("Size of: ", stringify!(task_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<task_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(task_qos_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_latency_qos_tier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_qos_policy),
            "::",
            stringify!(task_latency_qos_tier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_throughput_qos_tier) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_qos_policy),
            "::",
            stringify!(task_throughput_qos_tier)
        )
    );
}
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
#[test]
fn bindgen_test_layout_thread_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<thread_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_basic_info>(),
        40usize,
        concat!("Size of: ", stringify!(thread_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(thread_basic_info), "::", stringify!(user_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(thread_basic_info), "::", stringify!(system_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_usage) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(thread_basic_info), "::", stringify!(cpu_usage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(thread_basic_info), "::", stringify!(policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run_state) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(thread_basic_info), "::", stringify!(run_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(thread_basic_info), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sleep_time) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(thread_basic_info), "::", stringify!(sleep_time))
    );
}
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
#[test]
fn bindgen_test_layout_thread_identifier_info() {
    const UNINIT: ::std::mem::MaybeUninit<thread_identifier_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_identifier_info>(),
        24usize,
        concat!("Size of: ", stringify!(thread_identifier_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_identifier_info>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_identifier_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(thread_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dispatch_qaddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(dispatch_qaddr)
        )
    );
}
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_thread_extended_info() {
    const UNINIT: ::std::mem::MaybeUninit<thread_extended_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_extended_info>(),
        112usize,
        concat!("Size of: ", stringify!(thread_extended_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_extended_info>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_extended_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_user_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_system_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_cpu_usage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_cpu_usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_policy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_run_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_run_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_flags) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(thread_extended_info), "::", stringify!(pth_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_sleep_time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_sleep_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_curpri) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_curpri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_priority) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_maxpriority) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_maxpriority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_name) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(thread_extended_info), "::", stringify!(pth_name))
    );
}
impl Default for thread_extended_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_io_stat_entry() {
    const UNINIT: ::std::mem::MaybeUninit<io_stat_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stat_entry>(),
        16usize,
        concat!("Size of: ", stringify!(io_stat_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stat_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stat_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(io_stat_entry), "::", stringify!(count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(io_stat_entry), "::", stringify!(size))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
#[test]
fn bindgen_test_layout_io_stat_info() {
    const UNINIT: ::std::mem::MaybeUninit<io_stat_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stat_info>(),
        128usize,
        concat!("Size of: ", stringify!(io_stat_info))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stat_info>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stat_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disk_reads) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(io_stat_info), "::", stringify!(disk_reads))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_priority) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(io_stat_info), "::", stringify!(io_priority))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paging) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(io_stat_info), "::", stringify!(paging))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(io_stat_info), "::", stringify!(metadata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_io) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(io_stat_info), "::", stringify!(total_io))
    );
}
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
#[test]
fn bindgen_test_layout_thread_standard_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_standard_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_standard_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_standard_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_standard_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_standard_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_data) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(thread_standard_policy), "::", stringify!(no_data))
    );
}
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
#[test]
fn bindgen_test_layout_thread_extended_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_extended_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_extended_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_extended_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_extended_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_extended_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeshare) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_policy),
            "::",
            stringify!(timeshare)
        )
    );
}
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
#[test]
fn bindgen_test_layout_thread_time_constraint_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_time_constraint_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_time_constraint_policy>(),
        16usize,
        concat!("Size of: ", stringify!(thread_time_constraint_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_time_constraint_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_time_constraint_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computation) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(computation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constraint) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(constraint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preemptible) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(preemptible)
        )
    );
}
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
#[test]
fn bindgen_test_layout_thread_precedence_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_precedence_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_precedence_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_precedence_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_precedence_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_precedence_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).importance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_precedence_policy),
            "::",
            stringify!(importance)
        )
    );
}
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
#[test]
fn bindgen_test_layout_thread_affinity_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_affinity_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_affinity_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_affinity_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_affinity_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_affinity_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).affinity_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_affinity_policy),
            "::",
            stringify!(affinity_tag)
        )
    );
}
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
#[test]
fn bindgen_test_layout_thread_background_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_background_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_background_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_background_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_background_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_background_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_background_policy),
            "::",
            stringify!(priority)
        )
    );
}
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
#[test]
fn bindgen_test_layout_thread_latency_qos_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_latency_qos_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_latency_qos_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_latency_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_latency_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_latency_qos_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_latency_qos_tier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_latency_qos_policy),
            "::",
            stringify!(thread_latency_qos_tier)
        )
    );
}
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
#[test]
fn bindgen_test_layout_thread_throughput_qos_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_throughput_qos_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_throughput_qos_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_throughput_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_throughput_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_throughput_qos_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_throughput_qos_tier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_throughput_qos_policy),
            "::",
            stringify!(thread_throughput_qos_tier)
        )
    );
}
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_basic_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_basic_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_basic_info_64>(),
        36usize,
        concat!("Size of: ", stringify!(vm_region_basic_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_basic_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_basic_info_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(vm_region_basic_info_64), "::", stringify!(shared))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(vm_region_basic_info_64), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_basic_info>(),
        32usize,
        concat!("Size of: ", stringify!(vm_region_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(vm_region_basic_info), "::", stringify!(shared))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(vm_region_basic_info), "::", stringify!(reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(vm_region_basic_info), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(vm_region_basic_info), "::", stringify!(behavior))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_vm_region_extended_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_extended_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_extended_info>(),
        36usize,
        concat!("Size of: ", stringify!(vm_region_extended_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_extended_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_extended_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_resident) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_shared_now_private) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_swapped_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_dirtied) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_reusable) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_reusable)
        )
    );
}
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_vm_region_top_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_top_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_top_info>(),
        20usize,
        concat!("Size of: ", stringify!(vm_region_top_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_top_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_top_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_id) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_region_top_info), "::", stringify!(obj_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(vm_region_top_info), "::", stringify!(ref_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_pages_resident) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(private_pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared_pages_resident) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(shared_pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(vm_region_top_info), "::", stringify!(share_mode))
    );
}
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_submap_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_submap_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_info>(),
        60usize,
        concat!("Size of: ", stringify!(vm_region_submap_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(vm_region_submap_info), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(vm_region_submap_info), "::", stringify!(user_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_resident) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_shared_now_private) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_swapped_out) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_dirtied) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_submap) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(vm_region_submap_info), "::", stringify!(behavior))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
#[test]
fn bindgen_test_layout_vm_region_submap_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_submap_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_info_64>(),
        76usize,
        concat!("Size of: ", stringify!(vm_region_submap_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_info_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_resident) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_shared_now_private) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_swapped_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_dirtied) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_submap) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_reusable) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_reusable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id_full) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(object_id_full)
        )
    );
}
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_submap_short_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_submap_short_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_short_info_64>(),
        48usize,
        concat!("Size of: ", stringify!(vm_region_submap_short_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_short_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_short_info_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_submap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout_mach_vm_read_entry() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_read_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_read_entry>(),
        16usize,
        concat!("Size of: ", stringify!(mach_vm_read_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_read_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_vm_read_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_vm_read_entry), "::", stringify!(address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mach_vm_read_entry), "::", stringify!(size))
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[test]
fn bindgen_test_layout_vm_read_entry() {
    const UNINIT: ::std::mem::MaybeUninit<vm_read_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_read_entry>(),
        16usize,
        concat!("Size of: ", stringify!(vm_read_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_read_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_read_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_read_entry), "::", stringify!(address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vm_read_entry), "::", stringify!(size))
    );
}
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vm_page_info_basic() {
    const UNINIT: ::std::mem::MaybeUninit<vm_page_info_basic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_page_info_basic>(),
        32usize,
        concat!("Size of: ", stringify!(vm_page_info_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_page_info_basic>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_page_info_basic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disposition) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_page_info_basic), "::", stringify!(disposition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(vm_page_info_basic), "::", stringify!(ref_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vm_page_info_basic), "::", stringify!(object_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(vm_page_info_basic), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(vm_page_info_basic), "::", stringify!(depth))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(vm_page_info_basic), "::", stringify!(__pad))
    );
}
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
#[test]
fn bindgen_test_layout_kmod_reference() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_reference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_reference>(),
        16usize,
        concat!("Size of: ", stringify!(kmod_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_reference>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_reference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(kmod_reference), "::", stringify!(next))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(kmod_reference), "::", stringify!(info))
    );
}
impl Default for kmod_reference {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
#[test]
fn bindgen_test_layout_kmod_info() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_info>(),
        196usize,
        concat!("Size of: ", stringify!(kmod_info))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(next))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_version) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(info_version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_count) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(reference_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_list) as usize - ptr as usize },
        148usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(reference_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        156usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        164usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize },
        172usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(hdr_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        180usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        188usize,
        concat!("Offset of field: ", stringify!(kmod_info), "::", stringify!(stop))
    );
}
impl Default for kmod_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
#[test]
fn bindgen_test_layout_kmod_info_32_v1() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_info_32_v1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_info_32_v1>(),
        168usize,
        concat!("Size of: ", stringify!(kmod_info_32_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info_32_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info_32_v1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_addr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(next_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_version) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(info_version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_count) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_list_addr) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(reference_list_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        148usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        152usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize },
        156usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(hdr_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_addr) as usize - ptr as usize },
        160usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(start_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop_addr) as usize - ptr as usize },
        164usize,
        concat!("Offset of field: ", stringify!(kmod_info_32_v1), "::", stringify!(stop_addr))
    );
}
impl Default for kmod_info_32_v1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
#[test]
fn bindgen_test_layout_kmod_info_64_v1() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_info_64_v1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_info_64_v1>(),
        196usize,
        concat!("Size of: ", stringify!(kmod_info_64_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info_64_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info_64_v1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_addr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(next_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_version) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(info_version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_count) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_list_addr) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(reference_list_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        156usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        164usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize },
        172usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(hdr_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_addr) as usize - ptr as usize },
        180usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(start_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop_addr) as usize - ptr as usize },
        188usize,
        concat!("Offset of field: ", stringify!(kmod_info_64_v1), "::", stringify!(stop_addr))
    );
}
impl Default for kmod_info_64_v1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
#[test]
fn bindgen_test_layout_fsid() {
    const UNINIT: ::std::mem::MaybeUninit<fsid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<fsid>(), 8usize, concat!("Size of: ", stringify!(fsid)));
    assert_eq!(::std::mem::align_of::<fsid>(), 4usize, concat!("Alignment of ", stringify!(fsid)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fsid), "::", stringify!(val))
    );
}
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
#[test]
fn bindgen_test_layout_fsobj_id() {
    const UNINIT: ::std::mem::MaybeUninit<fsobj_id> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsobj_id>(),
        8usize,
        concat!("Size of: ", stringify!(fsobj_id))
    );
    assert_eq!(
        ::std::mem::align_of::<fsobj_id>(),
        4usize,
        concat!("Alignment of ", stringify!(fsobj_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fid_objno) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fsobj_id), "::", stringify!(fid_objno))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fid_generation) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(fsobj_id), "::", stringify!(fid_generation))
    );
}
pub type fsobj_id_t = fsobj_id;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[test]
fn bindgen_test_layout_dyld_kernel_image_info() {
    const UNINIT: ::std::mem::MaybeUninit<dyld_kernel_image_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dyld_kernel_image_info>(),
        40usize,
        concat!("Size of: ", stringify!(dyld_kernel_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dyld_kernel_image_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dyld_kernel_image_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dyld_kernel_image_info), "::", stringify!(uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsobjid) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(dyld_kernel_image_info), "::", stringify!(fsobjid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsid) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(dyld_kernel_image_info), "::", stringify!(fsid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(load_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[test]
fn bindgen_test_layout_dyld_kernel_process_info() {
    const UNINIT: ::std::mem::MaybeUninit<dyld_kernel_process_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dyld_kernel_process_info>(),
        72usize,
        concat!("Size of: ", stringify!(dyld_kernel_process_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dyld_kernel_process_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dyld_kernel_process_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_image_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(cache_image_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(imageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialImageCount) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(initialImageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dyldState) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(dyldState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_cache) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(no_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_cache) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(private_cache)
        )
    );
}
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type task_id_token_t = mach_port_t;
pub type kcdata_object_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_main_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type exception_handler_info_t = ipc_info_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 8192usize];
pub type nspace_name_t = [::std::os::raw::c_char; 8192usize];
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_task_is_self(task: task_name_t) -> boolean_t;
}
extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub static mut mach_task_self_: mach_port_t;
}
extern "C" {
    pub fn clock_sleep_trap(
        clock_name: mach_port_name_t,
        sleep_type: sleep_type_t,
        sleep_sec: ::std::os::raw::c_int,
        sleep_nsec: ::std::os::raw::c_int,
        wakeup_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(
        target: mach_port_name_t,
        addr: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_get(
        names_addr: mach_port_name_array_t,
        names_count_addr: *mut natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(
        target: mach_port_name_t,
        address: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        cur_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_purgable_control_trap(
        target: mach_port_name_t,
        address: mach_vm_offset_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(
        target: mach_port_name_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(
        target: mach_port_name_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        poly: mach_port_name_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_get_attributes_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(
        target: mach_port_name_t,
        options: *mut mach_port_options_t,
        context: u64,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_generate_activity_id(
        target: mach_port_name_t,
        count: ::std::os::raw::c_int,
        activity_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapon(
        filename: u64,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapoff(filename: u64, flags: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn macx_triggers(
        hi_water: ::std::os::raw::c_int,
        low_water: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        alert_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_recovery(pid: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
}
extern "C" {
    pub fn swtch() -> boolean_t;
}
extern "C" {
    pub fn thread_switch(
        thread_name: mach_port_name_t,
        option: ::std::os::raw::c_int,
        option_time: mach_msg_timeout_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
extern "C" {
    pub fn host_create_mach_voucher_trap(
        host: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipes_size: ::std::os::raw::c_int,
        voucher: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe_trap(
        voucher_name: mach_port_name_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipe_size: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_type_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_request_notification_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_name_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_name_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        tn: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn debug_control_port_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub static mut bootstrap_port: mach_port_t;
}
extern "C" {
    pub static mut vprintf_stderr_func: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
    >;
}
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t = ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
pub type IOReturn = kern_return_t;
pub type UInt = ::std::os::raw::c_uint;
pub type SInt = ::std::os::raw::c_int;
pub type IOOptionBits = UInt32;
pub type IOFixed = SInt32;
pub type IOVersion = UInt32;
pub type IOItemCount = UInt32;
pub type IOCacheMode = UInt32;
pub type IOByteCount32 = UInt32;
pub type IOByteCount64 = UInt64;
pub type IOPhysicalAddress32 = UInt32;
pub type IOPhysicalAddress64 = UInt64;
pub type IOPhysicalLength32 = UInt32;
pub type IOPhysicalLength64 = UInt64;
pub type IOVirtualAddress = mach_vm_address_t;
pub type IOByteCount = IOByteCount32;
pub type IOLogicalAddress = IOVirtualAddress;
pub type IOPhysicalAddress = IOPhysicalAddress32;
pub type IOPhysicalLength = IOPhysicalLength32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOPhysicalRange {
    pub address: IOPhysicalAddress,
    pub length: IOByteCount,
}
#[test]
fn bindgen_test_layout_IOPhysicalRange() {
    const UNINIT: ::std::mem::MaybeUninit<IOPhysicalRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOPhysicalRange>(),
        8usize,
        concat!("Size of: ", stringify!(IOPhysicalRange))
    );
    assert_eq!(
        ::std::mem::align_of::<IOPhysicalRange>(),
        4usize,
        concat!("Alignment of ", stringify!(IOPhysicalRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOPhysicalRange), "::", stringify!(address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOPhysicalRange), "::", stringify!(length))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOVirtualRange {
    pub address: IOVirtualAddress,
    pub length: IOByteCount,
}
#[test]
fn bindgen_test_layout_IOVirtualRange() {
    const UNINIT: ::std::mem::MaybeUninit<IOVirtualRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOVirtualRange>(),
        16usize,
        concat!("Size of: ", stringify!(IOVirtualRange))
    );
    assert_eq!(
        ::std::mem::align_of::<IOVirtualRange>(),
        8usize,
        concat!("Alignment of ", stringify!(IOVirtualRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOVirtualRange), "::", stringify!(address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOVirtualRange), "::", stringify!(length))
    );
}
pub type IOAddressRange = IOVirtualRange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IONamedValue {
    pub value: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_IONamedValue() {
    const UNINIT: ::std::mem::MaybeUninit<IONamedValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IONamedValue>(),
        16usize,
        concat!("Size of: ", stringify!(IONamedValue))
    );
    assert_eq!(
        ::std::mem::align_of::<IONamedValue>(),
        8usize,
        concat!("Alignment of ", stringify!(IONamedValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IONamedValue), "::", stringify!(value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IONamedValue), "::", stringify!(name))
    );
}
impl Default for IONamedValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOAlignment = ::std::os::raw::c_uint;
pub type io_object_t = mach_port_t;
pub type io_buf_ptr_t = *mut ::std::os::raw::c_char;
pub type io_name_t = [::std::os::raw::c_char; 128usize];
pub type io_string_t = [::std::os::raw::c_char; 512usize];
pub type io_string_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_struct_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_user_scalar_t = u64;
pub type io_user_reference_t = u64;
pub type io_scalar_inband_t = [io_user_scalar_t; 16usize];
pub type io_async_ref_t = [io_user_reference_t; 8usize];
pub type io_scalar_inband64_t = [io_user_scalar_t; 16usize];
pub type io_async_ref64_t = [io_user_reference_t; 8usize];
pub type io_connect_t = io_object_t;
pub type io_enumerator_t = io_object_t;
pub type io_ident_t = io_object_t;
pub type io_iterator_t = io_object_t;
pub type io_registry_entry_t = io_object_t;
pub type io_service_t = io_object_t;
pub type uext_object_t = io_object_t;
pub const kIODefaultMemoryType: _bindgen_ty_64 = 0;
pub type _bindgen_ty_64 = ::std::os::raw::c_uint;
pub const kIODefaultCache: _bindgen_ty_65 = 0;
pub const kIOInhibitCache: _bindgen_ty_65 = 1;
pub const kIOWriteThruCache: _bindgen_ty_65 = 2;
pub const kIOCopybackCache: _bindgen_ty_65 = 3;
pub const kIOWriteCombineCache: _bindgen_ty_65 = 4;
pub const kIOCopybackInnerCache: _bindgen_ty_65 = 5;
pub const kIOPostedWrite: _bindgen_ty_65 = 6;
pub const kIORealTimeCache: _bindgen_ty_65 = 7;
pub const kIOPostedReordered: _bindgen_ty_65 = 8;
pub const kIOPostedCombinedReordered: _bindgen_ty_65 = 9;
pub type _bindgen_ty_65 = ::std::os::raw::c_uint;
pub const kIOMapAnywhere: _bindgen_ty_66 = 1;
pub const kIOMapCacheMask: _bindgen_ty_66 = 3840;
pub const kIOMapCacheShift: _bindgen_ty_66 = 8;
pub const kIOMapDefaultCache: _bindgen_ty_66 = 0;
pub const kIOMapInhibitCache: _bindgen_ty_66 = 256;
pub const kIOMapWriteThruCache: _bindgen_ty_66 = 512;
pub const kIOMapCopybackCache: _bindgen_ty_66 = 768;
pub const kIOMapWriteCombineCache: _bindgen_ty_66 = 1024;
pub const kIOMapCopybackInnerCache: _bindgen_ty_66 = 1280;
pub const kIOMapPostedWrite: _bindgen_ty_66 = 1536;
pub const kIOMapRealTimeCache: _bindgen_ty_66 = 1792;
pub const kIOMapPostedReordered: _bindgen_ty_66 = 2048;
pub const kIOMapPostedCombinedReordered: _bindgen_ty_66 = 2304;
pub const kIOMapUserOptionsMask: _bindgen_ty_66 = 4095;
pub const kIOMapReadOnly: _bindgen_ty_66 = 4096;
pub const kIOMapStatic: _bindgen_ty_66 = 16777216;
pub const kIOMapReference: _bindgen_ty_66 = 33554432;
pub const kIOMapUnique: _bindgen_ty_66 = 67108864;
pub const kIOMapPrefault: _bindgen_ty_66 = 268435456;
pub const kIOMapOverwrite: _bindgen_ty_66 = 536870912;
pub const kIOMapGuardedMask: _bindgen_ty_66 = 3221225472;
pub const kIOMapGuardedSmall: _bindgen_ty_66 = 1073741824;
pub const kIOMapGuardedLarge: _bindgen_ty_66 = 2147483648;
pub type _bindgen_ty_66 = ::std::os::raw::c_uint;
pub const kNanosecondScale: _bindgen_ty_67 = 1;
pub const kMicrosecondScale: _bindgen_ty_67 = 1000;
pub const kMillisecondScale: _bindgen_ty_67 = 1000000;
pub const kSecondScale: _bindgen_ty_67 = 1000000000;
pub const kTickScale: _bindgen_ty_67 = 10000000;
pub type _bindgen_ty_67 = ::std::os::raw::c_uint;
pub const kIOConnectMethodVarOutputSize: _bindgen_ty_68 = -3;
pub type _bindgen_ty_68 = ::std::os::raw::c_int;
pub type IODeviceNumber = ::std::os::raw::c_uint;
pub const kIOMaxBusStall40usec: _bindgen_ty_69 = 40000;
pub const kIOMaxBusStall30usec: _bindgen_ty_69 = 30000;
pub const kIOMaxBusStall25usec: _bindgen_ty_69 = 25000;
pub const kIOMaxBusStall20usec: _bindgen_ty_69 = 20000;
pub const kIOMaxBusStall10usec: _bindgen_ty_69 = 10000;
pub const kIOMaxBusStall5usec: _bindgen_ty_69 = 5000;
pub const kIOMaxBusStallNone: _bindgen_ty_69 = 0;
pub type _bindgen_ty_69 = ::std::os::raw::c_uint;
pub const kFirstIOKitNotificationType: _bindgen_ty_70 = 100;
pub const kIOServicePublishNotificationType: _bindgen_ty_70 = 100;
pub const kIOServiceMatchedNotificationType: _bindgen_ty_70 = 101;
pub const kIOServiceTerminatedNotificationType: _bindgen_ty_70 = 102;
pub const kIOAsyncCompletionNotificationType: _bindgen_ty_70 = 150;
pub const kIOServiceMessageNotificationType: _bindgen_ty_70 = 160;
pub const kLastIOKitNotificationType: _bindgen_ty_70 = 199;
pub const kIOKitNoticationTypeMask: _bindgen_ty_70 = 4095;
pub const kIOKitNoticationTypeSizeAdjShift: _bindgen_ty_70 = 30;
pub const kIOKitNoticationMsgSizeMask: _bindgen_ty_70 = 3;
pub type _bindgen_ty_70 = ::std::os::raw::c_uint;
pub const kOSNotificationMessageID: _bindgen_ty_71 = 53;
pub const kOSAsyncCompleteMessageID: _bindgen_ty_71 = 57;
pub const kMaxAsyncArgs: _bindgen_ty_71 = 16;
pub type _bindgen_ty_71 = ::std::os::raw::c_uint;
pub const kIOAsyncReservedIndex: _bindgen_ty_72 = 0;
pub const kIOAsyncReservedCount: _bindgen_ty_72 = 1;
pub const kIOAsyncCalloutFuncIndex: _bindgen_ty_72 = 1;
pub const kIOAsyncCalloutRefconIndex: _bindgen_ty_72 = 2;
pub const kIOAsyncCalloutCount: _bindgen_ty_72 = 3;
pub const kIOMatchingCalloutFuncIndex: _bindgen_ty_72 = 1;
pub const kIOMatchingCalloutRefconIndex: _bindgen_ty_72 = 2;
pub const kIOMatchingCalloutCount: _bindgen_ty_72 = 3;
pub const kIOInterestCalloutFuncIndex: _bindgen_ty_72 = 1;
pub const kIOInterestCalloutRefconIndex: _bindgen_ty_72 = 2;
pub const kIOInterestCalloutServiceIndex: _bindgen_ty_72 = 3;
pub const kIOInterestCalloutCount: _bindgen_ty_72 = 4;
pub type _bindgen_ty_72 = ::std::os::raw::c_uint;
pub const kOSAsyncRef64Count: _bindgen_ty_73 = 8;
pub const kOSAsyncRef64Size: _bindgen_ty_73 = 64;
pub type _bindgen_ty_73 = ::std::os::raw::c_uint;
pub type OSAsyncReference64 = [io_user_reference_t; 8usize];
#[repr(C)]
#[derive(Debug, Default)]
pub struct OSNotificationHeader64 {
    pub size: mach_msg_size_t,
    pub type_: natural_t,
    pub reference: OSAsyncReference64,
    pub content: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_OSNotificationHeader64() {
    const UNINIT: ::std::mem::MaybeUninit<OSNotificationHeader64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OSNotificationHeader64>(),
        72usize,
        concat!("Size of: ", stringify!(OSNotificationHeader64))
    );
    assert_eq!(
        ::std::mem::align_of::<OSNotificationHeader64>(),
        8usize,
        concat!("Alignment of ", stringify!(OSNotificationHeader64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(OSNotificationHeader64), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(OSNotificationHeader64), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OSNotificationHeader64),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(OSNotificationHeader64), "::", stringify!(content))
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOServiceInterestContent64 {
    pub messageType: natural_t,
    pub messageArgument: [io_user_reference_t; 1usize],
}
#[test]
fn bindgen_test_layout_IOServiceInterestContent64() {
    const UNINIT: ::std::mem::MaybeUninit<IOServiceInterestContent64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOServiceInterestContent64>(),
        12usize,
        concat!("Size of: ", stringify!(IOServiceInterestContent64))
    );
    assert_eq!(
        ::std::mem::align_of::<IOServiceInterestContent64>(),
        4usize,
        concat!("Alignment of ", stringify!(IOServiceInterestContent64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOServiceInterestContent64),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageArgument) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOServiceInterestContent64),
            "::",
            stringify!(messageArgument)
        )
    );
}
pub const kOSAsyncRefCount: _bindgen_ty_74 = 8;
pub const kOSAsyncRefSize: _bindgen_ty_74 = 32;
pub type _bindgen_ty_74 = ::std::os::raw::c_uint;
pub type OSAsyncReference = [natural_t; 8usize];
#[repr(C)]
#[derive(Debug, Default)]
pub struct OSNotificationHeader {
    pub size: mach_msg_size_t,
    pub type_: natural_t,
    pub reference: OSAsyncReference,
    pub content: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_OSNotificationHeader() {
    const UNINIT: ::std::mem::MaybeUninit<OSNotificationHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OSNotificationHeader>(),
        40usize,
        concat!("Size of: ", stringify!(OSNotificationHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<OSNotificationHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(OSNotificationHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(OSNotificationHeader), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(OSNotificationHeader), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(OSNotificationHeader), "::", stringify!(reference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(OSNotificationHeader), "::", stringify!(content))
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct IOServiceInterestContent {
    pub messageType: natural_t,
    pub messageArgument: [*mut ::std::os::raw::c_void; 1usize],
}
#[test]
fn bindgen_test_layout_IOServiceInterestContent() {
    const UNINIT: ::std::mem::MaybeUninit<IOServiceInterestContent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOServiceInterestContent>(),
        12usize,
        concat!("Size of: ", stringify!(IOServiceInterestContent))
    );
    assert_eq!(
        ::std::mem::align_of::<IOServiceInterestContent>(),
        4usize,
        concat!("Alignment of ", stringify!(IOServiceInterestContent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOServiceInterestContent),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageArgument) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOServiceInterestContent),
            "::",
            stringify!(messageArgument)
        )
    );
}
impl Default for IOServiceInterestContent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed(4))]
pub struct IOAsyncCompletionContent {
    pub result: IOReturn,
    pub args: __IncompleteArrayField<*mut ::std::os::raw::c_void>,
}
#[test]
fn bindgen_test_layout_IOAsyncCompletionContent() {
    const UNINIT: ::std::mem::MaybeUninit<IOAsyncCompletionContent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOAsyncCompletionContent>(),
        4usize,
        concat!("Size of: ", stringify!(IOAsyncCompletionContent))
    );
    assert_eq!(
        ::std::mem::align_of::<IOAsyncCompletionContent>(),
        4usize,
        concat!("Alignment of ", stringify!(IOAsyncCompletionContent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOAsyncCompletionContent),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOAsyncCompletionContent), "::", stringify!(args))
    );
}
impl Default for IOAsyncCompletionContent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IONotificationPort {
    _unused: [u8; 0],
}
pub type IONotificationPortRef = *mut IONotificationPort;
pub type IOServiceMatchingCallback = ::std::option::Option<
    unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, iterator: io_iterator_t),
>;
pub type IOServiceInterestCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        service: io_service_t,
        messageType: u32,
        messageArgument: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static kIOMainPortDefault: mach_port_t;
}
extern "C" {
    pub fn IOMainPort(bootstrapPort: mach_port_t, mainPort: *mut mach_port_t) -> kern_return_t;
}
extern "C" {
    pub static kIOMasterPortDefault: mach_port_t;
}
extern "C" {
    pub fn IOMasterPort(bootstrapPort: mach_port_t, mainPort: *mut mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn IONotificationPortCreate(mainPort: mach_port_t) -> IONotificationPortRef;
}
extern "C" {
    pub fn IONotificationPortDestroy(notify: IONotificationPortRef);
}
extern "C" {
    pub fn IONotificationPortGetRunLoopSource(notify: IONotificationPortRef) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn IONotificationPortGetMachPort(notify: IONotificationPortRef) -> mach_port_t;
}
extern "C" {
    pub fn IONotificationPortSetImportanceReceiver(notify: IONotificationPortRef) -> kern_return_t;
}
extern "C" {
    pub fn IONotificationPortSetDispatchQueue(
        notify: IONotificationPortRef,
        queue: dispatch_queue_t,
    );
}
extern "C" {
    pub fn IODispatchCalloutFromMessage(
        unused: *mut ::std::os::raw::c_void,
        msg: *mut mach_msg_header_t,
        reference: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOCreateReceivePort(msgType: u32, recvPort: *mut mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectRelease(object: io_object_t) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectRetain(object: io_object_t) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectGetClass(
        object: io_object_t,
        className: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectCopyClass(object: io_object_t) -> CFStringRef;
}
extern "C" {
    pub fn IOObjectCopySuperclassForClass(classname: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn IOObjectCopyBundleIdentifierForClass(classname: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn IOObjectConformsTo(
        object: io_object_t,
        className: *mut ::std::os::raw::c_char,
    ) -> boolean_t;
}
extern "C" {
    pub fn IOObjectIsEqualTo(object: io_object_t, anObject: io_object_t) -> boolean_t;
}
extern "C" {
    pub fn IOObjectGetKernelRetainCount(object: io_object_t) -> u32;
}
extern "C" {
    pub fn IOObjectGetUserRetainCount(object: io_object_t) -> u32;
}
extern "C" {
    pub fn IOObjectGetRetainCount(object: io_object_t) -> u32;
}
extern "C" {
    pub fn IOIteratorNext(iterator: io_iterator_t) -> io_object_t;
}
extern "C" {
    pub fn IOIteratorReset(iterator: io_iterator_t);
}
extern "C" {
    pub fn IOIteratorIsValid(iterator: io_iterator_t) -> boolean_t;
}
extern "C" {
    pub fn IOServiceGetMatchingService(
        mainPort: mach_port_t,
        matching: CFDictionaryRef,
    ) -> io_service_t;
}
extern "C" {
    pub fn IOServiceGetMatchingServices(
        mainPort: mach_port_t,
        matching: CFDictionaryRef,
        existing: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceAddNotification(
        mainPort: mach_port_t,
        notificationType: *mut ::std::os::raw::c_char,
        matching: CFDictionaryRef,
        wakePort: mach_port_t,
        reference: usize,
        notification: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceAddMatchingNotification(
        notifyPort: IONotificationPortRef,
        notificationType: *mut ::std::os::raw::c_char,
        matching: CFDictionaryRef,
        callback: IOServiceMatchingCallback,
        refCon: *mut ::std::os::raw::c_void,
        notification: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceAddInterestNotification(
        notifyPort: IONotificationPortRef,
        service: io_service_t,
        interestType: *mut ::std::os::raw::c_char,
        callback: IOServiceInterestCallback,
        refCon: *mut ::std::os::raw::c_void,
        notification: *mut io_object_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceMatchPropertyTable(
        service: io_service_t,
        matching: CFDictionaryRef,
        matches: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceGetBusyState(service: io_service_t, busyState: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceWaitQuiet(
        service: io_service_t,
        waitTime: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOKitGetBusyState(mainPort: mach_port_t, busyState: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn IOKitWaitQuietWithOptions(
        mainPort: mach_port_t,
        waitTime: *mut mach_timespec_t,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOKitWaitQuiet(mainPort: mach_port_t, waitTime: *mut mach_timespec_t) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceOpen(
        service: io_service_t,
        owningTask: task_port_t,
        type_: u32,
        connect: *mut io_connect_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceRequestProbe(service: io_service_t, options: u32) -> kern_return_t;
}
pub const kIOServiceInteractionAllowed: _bindgen_ty_75 = 1;
pub type _bindgen_ty_75 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOServiceAuthorize(service: io_service_t, options: u32) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceOpenAsFileDescriptor(
        service: io_service_t,
        oflag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IOServiceClose(connect: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectAddRef(connect: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectRelease(connect: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectGetService(connect: io_connect_t, service: *mut io_service_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectSetNotificationPort(
        connect: io_connect_t,
        type_: u32,
        port: mach_port_t,
        reference: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectMapMemory(
        connect: io_connect_t,
        memoryType: u32,
        intoTask: task_port_t,
        atAddress: *mut mach_vm_address_t,
        ofSize: *mut mach_vm_size_t,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectMapMemory64(
        connect: io_connect_t,
        memoryType: u32,
        intoTask: task_port_t,
        atAddress: *mut mach_vm_address_t,
        ofSize: *mut mach_vm_size_t,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectUnmapMemory(
        connect: io_connect_t,
        memoryType: u32,
        fromTask: task_port_t,
        atAddress: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectUnmapMemory64(
        connect: io_connect_t,
        memoryType: u32,
        fromTask: task_port_t,
        atAddress: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectSetCFProperties(connect: io_connect_t, properties: CFTypeRef) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectSetCFProperty(
        connect: io_connect_t,
        propertyName: CFStringRef,
        property: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallMethod(
        connection: mach_port_t,
        selector: u32,
        input: *const u64,
        inputCnt: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        output: *mut u64,
        outputCnt: *mut u32,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallAsyncMethod(
        connection: mach_port_t,
        selector: u32,
        wake_port: mach_port_t,
        reference: *mut u64,
        referenceCnt: u32,
        input: *const u64,
        inputCnt: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        output: *mut u64,
        outputCnt: *mut u32,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallStructMethod(
        connection: mach_port_t,
        selector: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallAsyncStructMethod(
        connection: mach_port_t,
        selector: u32,
        wake_port: mach_port_t,
        reference: *mut u64,
        referenceCnt: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallScalarMethod(
        connection: mach_port_t,
        selector: u32,
        input: *const u64,
        inputCnt: u32,
        output: *mut u64,
        outputCnt: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallAsyncScalarMethod(
        connection: mach_port_t,
        selector: u32,
        wake_port: mach_port_t,
        reference: *mut u64,
        referenceCnt: u32,
        input: *const u64,
        inputCnt: u32,
        output: *mut u64,
        outputCnt: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap0(connect: io_connect_t, index: u32) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap1(connect: io_connect_t, index: u32, p1: usize) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap2(connect: io_connect_t, index: u32, p1: usize, p2: usize)
        -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap3(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap4(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
        p4: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap5(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
        p4: usize,
        p5: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap6(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
        p4: usize,
        p5: usize,
        p6: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectAddClient(connect: io_connect_t, client: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryGetRootEntry(mainPort: mach_port_t) -> io_registry_entry_t;
}
extern "C" {
    pub fn IORegistryEntryFromPath(
        mainPort: mach_port_t,
        path: *mut ::std::os::raw::c_char,
    ) -> io_registry_entry_t;
}
extern "C" {
    pub fn IORegistryEntryCopyFromPath(
        mainPort: mach_port_t,
        path: CFStringRef,
    ) -> io_registry_entry_t;
}
pub const kIORegistryIterateRecursively: _bindgen_ty_76 = 1;
pub const kIORegistryIterateParents: _bindgen_ty_76 = 2;
pub type _bindgen_ty_76 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IORegistryCreateIterator(
        mainPort: mach_port_t,
        plane: *mut ::std::os::raw::c_char,
        options: IOOptionBits,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCreateIterator(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        options: IOOptionBits,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryIteratorEnterEntry(iterator: io_iterator_t) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryIteratorExitEntry(iterator: io_iterator_t) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetName(
        entry: io_registry_entry_t,
        name: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetNameInPlane(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetLocationInPlane(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        location: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetPath(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        path: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCopyPath(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
    ) -> CFStringRef;
}
extern "C" {
    pub fn IORegistryEntryGetRegistryEntryID(
        entry: io_registry_entry_t,
        entryID: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCreateCFProperties(
        entry: io_registry_entry_t,
        properties: *mut CFMutableDictionaryRef,
        allocator: CFAllocatorRef,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCreateCFProperty(
        entry: io_registry_entry_t,
        key: CFStringRef,
        allocator: CFAllocatorRef,
        options: IOOptionBits,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IORegistryEntrySearchCFProperty(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        key: CFStringRef,
        allocator: CFAllocatorRef,
        options: IOOptionBits,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IORegistryEntryGetProperty(
        entry: io_registry_entry_t,
        propertyName: *mut ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntrySetCFProperties(
        entry: io_registry_entry_t,
        properties: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntrySetCFProperty(
        entry: io_registry_entry_t,
        propertyName: CFStringRef,
        property: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetChildIterator(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetChildEntry(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        child: *mut io_registry_entry_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetParentIterator(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetParentEntry(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        parent: *mut io_registry_entry_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryInPlane(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
    ) -> boolean_t;
}
extern "C" {
    pub fn IOServiceMatching(name: *const ::std::os::raw::c_char) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOServiceNameMatching(name: *const ::std::os::raw::c_char) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOBSDNameMatching(
        mainPort: mach_port_t,
        options: u32,
        bsdName: *const ::std::os::raw::c_char,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOOpenFirmwarePathMatching(
        mainPort: mach_port_t,
        options: u32,
        path: *const ::std::os::raw::c_char,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IORegistryEntryIDMatching(entryID: u64) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOServiceOFPathToBSDName(
        mainPort: mach_port_t,
        openFirmwarePath: *mut ::std::os::raw::c_char,
        bsdName: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
pub type IOAsyncCallback0 = ::std::option::Option<
    unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, result: IOReturn),
>;
pub type IOAsyncCallback1 = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        result: IOReturn,
        arg0: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOAsyncCallback2 = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        result: IOReturn,
        arg0: *mut ::std::os::raw::c_void,
        arg1: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOAsyncCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        result: IOReturn,
        args: *mut *mut ::std::os::raw::c_void,
        numArgs: u32,
    ),
>;
extern "C" {
    pub fn OSGetNotificationFromMessage(
        msg: *mut mach_msg_header_t,
        index: u32,
        type_: *mut u32,
        reference: *mut usize,
        content: *mut *mut ::std::os::raw::c_void,
        size: *mut vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueSendData(
        mainPort: mach_port_t,
        flag: u32,
        buffer: *const ::std::os::raw::c_char,
        size: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueTerminate(
        mainPort: mach_port_t,
        flag: u32,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueGetData(
        mainPort: mach_port_t,
        flag: u32,
        buffer: *mut *mut ::std::os::raw::c_char,
        size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueModuleLoaded(
        mainPort: mach_port_t,
        name: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueReset(mainPort: mach_port_t, flag: u32) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOCFPlugInInterfaceStruct {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub Probe: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            propertyTable: CFDictionaryRef,
            service: io_service_t,
            order: *mut SInt32,
        ) -> IOReturn,
    >,
    pub Start: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            propertyTable: CFDictionaryRef,
            service: io_service_t,
        ) -> IOReturn,
    >,
    pub Stop: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOCFPlugInInterfaceStruct() {
    const UNINIT: ::std::mem::MaybeUninit<IOCFPlugInInterfaceStruct> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOCFPlugInInterfaceStruct>(),
        64usize,
        concat!("Size of: ", stringify!(IOCFPlugInInterfaceStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<IOCFPlugInInterfaceStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(IOCFPlugInInterfaceStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOCFPlugInInterfaceStruct),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOCFPlugInInterfaceStruct),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IOCFPlugInInterfaceStruct),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOCFPlugInInterfaceStruct),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOCFPlugInInterfaceStruct),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(IOCFPlugInInterfaceStruct),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Probe) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOCFPlugInInterfaceStruct),
            "::",
            stringify!(Probe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Start) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOCFPlugInInterfaceStruct),
            "::",
            stringify!(Start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Stop) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(IOCFPlugInInterfaceStruct), "::", stringify!(Stop))
    );
}
impl Default for IOCFPlugInInterfaceStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOCFPlugInInterface = IOCFPlugInInterfaceStruct;
extern "C" {
    pub fn IOCreatePlugInInterfaceForService(
        service: io_service_t,
        pluginType: CFUUIDRef,
        interfaceType: CFUUIDRef,
        theInterface: *mut *mut *mut IOCFPlugInInterface,
        theScore: *mut SInt32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IODestroyPlugInInterface(interface: *mut *mut IOCFPlugInInterface) -> kern_return_t;
}
pub type IOMessage = UInt32;
pub const kIOUSBAppleVendorID: _bindgen_ty_77 = 1452;
pub type _bindgen_ty_77 = ::std::os::raw::c_uint;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeDevice: tIOUSBDescriptorType = 1;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeConfiguration: tIOUSBDescriptorType = 2;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeString: tIOUSBDescriptorType = 3;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeInterface: tIOUSBDescriptorType = 4;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeEndpoint: tIOUSBDescriptorType = 5;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeDeviceQualifier: tIOUSBDescriptorType = 6;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeOtherSpeedConfiguration: tIOUSBDescriptorType =
    7;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeInterfacePower: tIOUSBDescriptorType = 8;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeOTG: tIOUSBDescriptorType = 9;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeDebug: tIOUSBDescriptorType = 10;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeInterfaceAssociation: tIOUSBDescriptorType = 11;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeBOS: tIOUSBDescriptorType = 15;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeDeviceCapability: tIOUSBDescriptorType = 16;
pub const tIOUSBDescriptorType_kIOUSBDecriptorTypeHID: tIOUSBDescriptorType = 33;
pub const tIOUSBDescriptorType_kIOUSBDecriptorTypeReport: tIOUSBDescriptorType = 34;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypePhysical: tIOUSBDescriptorType = 35;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeHub: tIOUSBDescriptorType = 41;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeSuperSpeedHub: tIOUSBDescriptorType = 42;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeSuperSpeedUSBEndpointCompanion:
    tIOUSBDescriptorType = 48;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeSuperSpeedPlusIsochronousEndpointCompanion:
    tIOUSBDescriptorType = 49;
pub type tIOUSBDescriptorType = ::std::os::raw::c_uint;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorHeaderSize: tIOUSBDescriptorSize = 2;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeDevice: tIOUSBDescriptorSize = 18;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeConfiguration: tIOUSBDescriptorSize = 9;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeInterface: tIOUSBDescriptorSize = 9;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeEndpoint: tIOUSBDescriptorSize = 7;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeStringMinimum: tIOUSBDescriptorSize = 2;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeStringMaximum: tIOUSBDescriptorSize = 255;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeDeviceQualifier: tIOUSBDescriptorSize = 10;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeInterfaceAssociation: tIOUSBDescriptorSize = 8;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeBOS: tIOUSBDescriptorSize = 5;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeDeviceCapability: tIOUSBDescriptorSize = 3;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeUSB20ExtensionCapability: tIOUSBDescriptorSize =
    7;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeSuperSpeedUSBDeviceCapability:
    tIOUSBDescriptorSize = 10;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeContainerIDCapability: tIOUSBDescriptorSize = 20;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeHubMinimum: tIOUSBDescriptorSize = 9;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeHubMaximum: tIOUSBDescriptorSize = 21;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeSuperSpeedHub: tIOUSBDescriptorSize = 12;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeSuperSpeedUSBEndpointCompanion:
    tIOUSBDescriptorSize = 6;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeSuperSpeedPlusIsochronousEndpointCompanion:
    tIOUSBDescriptorSize = 8;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeBillboardDeviceMinimum: tIOUSBDescriptorSize =
    44;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeBillboardDeviceMaximum: tIOUSBDescriptorSize =
    256;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizePlatformECIDCapability: tIOUSBDescriptorSize =
    28;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizePlatformCapability: tIOUSBDescriptorSize = 20;
pub type tIOUSBDescriptorSize = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDescriptorHeader {
    pub bLength: u8,
    pub bDescriptorType: u8,
}
#[test]
fn bindgen_test_layout_IOUSBDescriptorHeader() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDescriptorHeader> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDescriptorHeader>(),
        2usize,
        concat!("Size of: ", stringify!(IOUSBDescriptorHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDescriptorHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDescriptorHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDescriptorHeader), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDescriptorHeader),
            "::",
            stringify!(bDescriptorType)
        )
    );
}
pub type IOUSBDescriptor = IOUSBDescriptorHeader;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bcdUSB: u16,
    pub bDeviceClass: u8,
    pub bDeviceSubClass: u8,
    pub bDeviceProtocol: u8,
    pub bMaxPacketSize0: u8,
    pub idVendor: u16,
    pub idProduct: u16,
    pub bcdDevice: u16,
    pub iManufacturer: u8,
    pub iProduct: u8,
    pub iSerialNumber: u8,
    pub bNumConfigurations: u8,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceDescriptor>(),
        18usize,
        concat!("Size of: ", stringify!(IOUSBDeviceDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceDescriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdUSB) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceDescriptor), "::", stringify!(bcdUSB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceClass) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(bDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceSubClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(bDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceProtocol) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(bDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxPacketSize0) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(bMaxPacketSize0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idVendor) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceDescriptor), "::", stringify!(idVendor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idProduct) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(idProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdDevice) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(bcdDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iManufacturer) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(iManufacturer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iProduct) as usize - ptr as usize },
        15usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceDescriptor), "::", stringify!(iProduct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iSerialNumber) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(iSerialNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumConfigurations) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceDescriptor),
            "::",
            stringify!(bNumConfigurations)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceQualifierDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bcdUSB: u16,
    pub bDeviceClass: u8,
    pub bDeviceSubClass: u8,
    pub bDeviceProtocol: u8,
    pub bMaxPacketSize0: u8,
    pub bNumConfigurations: u8,
    pub bReserved: u8,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceQualifierDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceQualifierDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceQualifierDescriptor>(),
        10usize,
        concat!("Size of: ", stringify!(IOUSBDeviceQualifierDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceQualifierDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceQualifierDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceQualifierDescriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceQualifierDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdUSB) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceQualifierDescriptor),
            "::",
            stringify!(bcdUSB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceClass) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceQualifierDescriptor),
            "::",
            stringify!(bDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceSubClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceQualifierDescriptor),
            "::",
            stringify!(bDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceProtocol) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceQualifierDescriptor),
            "::",
            stringify!(bDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxPacketSize0) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceQualifierDescriptor),
            "::",
            stringify!(bMaxPacketSize0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumConfigurations) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceQualifierDescriptor),
            "::",
            stringify!(bNumConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceQualifierDescriptor),
            "::",
            stringify!(bReserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBConfigurationDescHeader {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub wTotalLength: u16,
}
#[test]
fn bindgen_test_layout_IOUSBConfigurationDescHeader() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBConfigurationDescHeader> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBConfigurationDescHeader>(),
        4usize,
        concat!("Size of: ", stringify!(IOUSBConfigurationDescHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBConfigurationDescHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBConfigurationDescHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescHeader),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescHeader),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wTotalLength) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescHeader),
            "::",
            stringify!(wTotalLength)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBConfigurationDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub wTotalLength: u16,
    pub bNumInterfaces: u8,
    pub bConfigurationValue: u8,
    pub iConfiguration: u8,
    pub bmAttributes: u8,
    pub MaxPower: u8,
}
#[test]
fn bindgen_test_layout_IOUSBConfigurationDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBConfigurationDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBConfigurationDescriptor>(),
        9usize,
        concat!("Size of: ", stringify!(IOUSBConfigurationDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBConfigurationDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBConfigurationDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wTotalLength) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescriptor),
            "::",
            stringify!(wTotalLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumInterfaces) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescriptor),
            "::",
            stringify!(bNumInterfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bConfigurationValue) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescriptor),
            "::",
            stringify!(bConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iConfiguration) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescriptor),
            "::",
            stringify!(iConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaxPower) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBConfigurationDescriptor),
            "::",
            stringify!(MaxPower)
        )
    );
}
pub const kIOUSBConfigurationDescriptorAttributeRemoteWakeCapable: _bindgen_ty_78 = 32;
pub const kIOUSBConfigurationDescriptorAttributeSelfPowered: _bindgen_ty_78 = 64;
pub type _bindgen_ty_78 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBInterfaceDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bInterfaceNumber: u8,
    pub bAlternateSetting: u8,
    pub bNumEndpoints: u8,
    pub bInterfaceClass: u8,
    pub bInterfaceSubClass: u8,
    pub bInterfaceProtocol: u8,
    pub iInterface: u8,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceDescriptor>(),
        9usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceDescriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceNumber) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceDescriptor),
            "::",
            stringify!(bInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAlternateSetting) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceDescriptor),
            "::",
            stringify!(bAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumEndpoints) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceDescriptor),
            "::",
            stringify!(bNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceDescriptor),
            "::",
            stringify!(bInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceSubClass) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceDescriptor),
            "::",
            stringify!(bInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceProtocol) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceDescriptor),
            "::",
            stringify!(bInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceDescriptor),
            "::",
            stringify!(iInterface)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBEndpointDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bEndpointAddress: u8,
    pub bmAttributes: u8,
    pub wMaxPacketSize: u16,
    pub bInterval: u8,
}
#[test]
fn bindgen_test_layout_IOUSBEndpointDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBEndpointDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBEndpointDescriptor>(),
        7usize,
        concat!("Size of: ", stringify!(IOUSBEndpointDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBEndpointDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBEndpointDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointDescriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEndpointAddress) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointDescriptor),
            "::",
            stringify!(bEndpointAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointDescriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wMaxPacketSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointDescriptor),
            "::",
            stringify!(wMaxPacketSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterval) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointDescriptor),
            "::",
            stringify!(bInterval)
        )
    );
}
pub const kIOUSBEndpointDescriptorNumber: _bindgen_ty_79 = 15;
pub const kIOUSBEndpointDescriptorNumberPhase: _bindgen_ty_79 = 0;
pub const kIOUSBEndpointDescriptorEndpointAddressReserved: _bindgen_ty_79 = 112;
pub const kIOUSBEndpointDescriptorDirection: _bindgen_ty_79 = 128;
pub const kIOUSBEndpointDescriptorDirectionPhase: _bindgen_ty_79 = 7;
pub const kIOUSBEndpointDescriptorDirectionOut: _bindgen_ty_79 = 0;
pub const kIOUSBEndpointDescriptorDirectionIn: _bindgen_ty_79 = 128;
pub const kIOUSBEndpointDescriptorTransferType: _bindgen_ty_79 = 3;
pub const kIOUSBEndpointDescriptorTransferTypePhase: _bindgen_ty_79 = 0;
pub const kIOUSBEndpointDescriptorTransferTypeControl: _bindgen_ty_79 = 0;
pub const kIOUSBEndpointDescriptorTransferTypeIsochronous: _bindgen_ty_79 = 1;
pub const kIOUSBEndpointDescriptorTransferTypeBulk: _bindgen_ty_79 = 2;
pub const kIOUSBEndpointDescriptorTransferTypeInterrupt: _bindgen_ty_79 = 3;
pub const kIOUSBEndpointDescriptorSynchronizationType: _bindgen_ty_79 = 12;
pub const kIOUSBEndpointDescriptorSynchronizationTypePhase: _bindgen_ty_79 = 2;
pub const kIOUSBEndpointDescriptorSynchronizationTypeNone: _bindgen_ty_79 = 0;
pub const kIOUSBEndpointDescriptorSynchronizationTypeAsynchronous: _bindgen_ty_79 = 4;
pub const kIOUSBEndpointDescriptorSynchronizationTypeAdaptive: _bindgen_ty_79 = 8;
pub const kIOUSBEndpointDescriptorSynchronizationTypeSynchronous: _bindgen_ty_79 = 12;
pub const kIOUSBEndpointDescriptorUsageType: _bindgen_ty_79 = 48;
pub const kIOUSBEndpointDescriptorUsageTypePhase: _bindgen_ty_79 = 4;
pub const kIOUSBEndpointDescriptorUsageTypeInterruptPeriodic: _bindgen_ty_79 = 0;
pub const kIOUSBEndpointDescriptorUsageTypeInterruptNotification: _bindgen_ty_79 = 16;
pub const kIOUSBEndpointDescriptorUsageTypeInterruptReserved1: _bindgen_ty_79 = 32;
pub const kIOUSBEndpointDescriptorUsageTypeInterruptReserved2: _bindgen_ty_79 = 48;
pub const kIOUSBEndpointDescriptorUsageTypeIsocData: _bindgen_ty_79 = 0;
pub const kIOUSBEndpointDescriptorUsageTypeIsocFeedback: _bindgen_ty_79 = 16;
pub const kIOUSBEndpointDescriptorUsageTypeIsocImplicit: _bindgen_ty_79 = 32;
pub const kIOUSBEndpointDescriptorUsageTypeIsocReserved: _bindgen_ty_79 = 48;
pub const kIOUSBEndpointDescriptorPacketSize: _bindgen_ty_79 = 2047;
pub const kIOUSBEndpointDescriptorPacketSizePhase: _bindgen_ty_79 = 0;
pub const kIOUSBEndpointDescriptorPacketSizeMult: _bindgen_ty_79 = 6144;
pub const kIOUSBEndpointDescriptorPacketSizeMultPhase: _bindgen_ty_79 = 11;
pub const kIOUSBEndpointDescriptorReserved: _bindgen_ty_79 = 57344;
pub const kIOUSBEndpointDescriptorReservedPhase: _bindgen_ty_79 = 13;
pub type _bindgen_ty_79 = ::std::os::raw::c_uint;
pub const tIOUSBEndpointDirection_kIOUSBEndpointDirectionOut: tIOUSBEndpointDirection = 0;
pub const tIOUSBEndpointDirection_kIOUSBEndpointDirectionIn: tIOUSBEndpointDirection = 1;
pub const tIOUSBEndpointDirection_kIOUSBEndpointDirectionUnknown: tIOUSBEndpointDirection = 2;
pub type tIOUSBEndpointDirection = ::std::os::raw::c_uint;
pub const tIOUSBEndpointType_kIOUSBEndpointTypeControl: tIOUSBEndpointType = 0;
pub const tIOUSBEndpointType_kIOUSBEndpointTypeIsochronous: tIOUSBEndpointType = 1;
pub const tIOUSBEndpointType_kIOUSBEndpointTypeBulk: tIOUSBEndpointType = 2;
pub const tIOUSBEndpointType_kIOUSBEndpointTypeInterrupt: tIOUSBEndpointType = 3;
pub type tIOUSBEndpointType = ::std::os::raw::c_uint;
pub const tIOUSBEndpointSynchronizationType_kIOUSBEndpointSynchronizationTypeNone:
    tIOUSBEndpointSynchronizationType = 0;
pub const tIOUSBEndpointSynchronizationType_kIOUSBEndpointSynchronizationTypeAsynchronous:
    tIOUSBEndpointSynchronizationType = 1;
pub const tIOUSBEndpointSynchronizationType_kIOUSBEndpointSynchronizationTypeAdaptive:
    tIOUSBEndpointSynchronizationType = 2;
pub const tIOUSBEndpointSynchronizationType_kIOUSBEndpointSynchronizationTypeSynchronous:
    tIOUSBEndpointSynchronizationType = 3;
pub type tIOUSBEndpointSynchronizationType = ::std::os::raw::c_uint;
pub const tIOUSBEndpointUsageType_kIOUSBEndpointUsageTypeIsocData: tIOUSBEndpointUsageType = 0;
pub const tIOUSBEndpointUsageType_kIOUSBEndpointUsageTypeIsocFeedback: tIOUSBEndpointUsageType = 1;
pub const tIOUSBEndpointUsageType_kIOUSBEndpointUsageTypeIsocImplicit: tIOUSBEndpointUsageType = 2;
pub type tIOUSBEndpointUsageType = ::std::os::raw::c_uint;
pub const tIOUSBLanguageID_kIOUSBLanguageIDEnglishUS: tIOUSBLanguageID = 1033;
pub type tIOUSBLanguageID = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBStringDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bString: [u8; 1usize],
}
#[test]
fn bindgen_test_layout_IOUSBStringDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBStringDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBStringDescriptor>(),
        3usize,
        concat!("Size of: ", stringify!(IOUSBStringDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBStringDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBStringDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBStringDescriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBStringDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bString) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBStringDescriptor), "::", stringify!(bString))
    );
}
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeWireless:
    tIOUSBDeviceCapabilityType = 1;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeUSB20Extension:
    tIOUSBDeviceCapabilityType = 2;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeSuperSpeed:
    tIOUSBDeviceCapabilityType = 3;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeContainerID:
    tIOUSBDeviceCapabilityType = 4;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePlatform:
    tIOUSBDeviceCapabilityType = 5;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePowerDelivery:
    tIOUSBDeviceCapabilityType = 6;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeBatteryInfo:
    tIOUSBDeviceCapabilityType = 7;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePdConsumerPort:
    tIOUSBDeviceCapabilityType = 8;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePdProviderPort:
    tIOUSBDeviceCapabilityType = 9;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeSuperSpeedPlus:
    tIOUSBDeviceCapabilityType = 10;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePrecisionMeasurement:
    tIOUSBDeviceCapabilityType = 11;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeWirelessExt:
    tIOUSBDeviceCapabilityType = 12;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeBillboard:
    tIOUSBDeviceCapabilityType = 13;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeBillboardAltMode:
    tIOUSBDeviceCapabilityType = 15;
pub type tIOUSBDeviceCapabilityType = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBBOSDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub wTotalLength: u16,
    pub bNumDeviceCaps: u8,
}
#[test]
fn bindgen_test_layout_IOUSBBOSDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBBOSDescriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBBOSDescriptor>(),
        5usize,
        concat!("Size of: ", stringify!(IOUSBBOSDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBBOSDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBBOSDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBBOSDescriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBBOSDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wTotalLength) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBBOSDescriptor),
            "::",
            stringify!(wTotalLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumDeviceCaps) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBBOSDescriptor),
            "::",
            stringify!(bNumDeviceCaps)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceCapabilityDescriptorHeader {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceCapabilityDescriptorHeader() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceCapabilityDescriptorHeader> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceCapabilityDescriptorHeader>(),
        3usize,
        concat!("Size of: ", stringify!(IOUSBDeviceCapabilityDescriptorHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceCapabilityDescriptorHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceCapabilityDescriptorHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityDescriptorHeader),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityDescriptorHeader),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityDescriptorHeader),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceCapabilityUSB2Extension {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bmAttributes: u32,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceCapabilityUSB2Extension() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceCapabilityUSB2Extension> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceCapabilityUSB2Extension>(),
        7usize,
        concat!("Size of: ", stringify!(IOUSBDeviceCapabilityUSB2Extension))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceCapabilityUSB2Extension>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceCapabilityUSB2Extension))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityUSB2Extension),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityUSB2Extension),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityUSB2Extension),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityUSB2Extension),
            "::",
            stringify!(bmAttributes)
        )
    );
}
pub const kIOUSBUSB20ExtensionCapabilityLPM: _bindgen_ty_80 = 2;
pub const kIOUSBUSB20ExtensionCapabilityBESLSupport: _bindgen_ty_80 = 4;
pub const kIOUSBUSB20ExtensionCapabilityBESLValid: _bindgen_ty_80 = 8;
pub const kIOUSBUSB20ExtensionCapabilityBESLDValid: _bindgen_ty_80 = 16;
pub const kIOUSBUSB20ExtensionCapabilityBESL: _bindgen_ty_80 = 3840;
pub const kIOUSBUSB20ExtensionCapabilityBESLPhase: _bindgen_ty_80 = 8;
pub const kIOUSBUSB20ExtensionCapabilityBESLD: _bindgen_ty_80 = 61440;
pub const kIOUSBUSB20ExtensionCapabilityBESLDPhase: _bindgen_ty_80 = 12;
pub type _bindgen_ty_80 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceCapabilitySuperSpeedUSB {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bmAttributes: u8,
    pub wSpeedsSupported: u16,
    pub bFunctionalitySupport: u8,
    pub bU1DevExitLat: u8,
    pub wU2DevExitLat: u16,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceCapabilitySuperSpeedUSB() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceCapabilitySuperSpeedUSB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceCapabilitySuperSpeedUSB>(),
        10usize,
        concat!("Size of: ", stringify!(IOUSBDeviceCapabilitySuperSpeedUSB))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceCapabilitySuperSpeedUSB>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceCapabilitySuperSpeedUSB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedUSB),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedUSB),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedUSB),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedUSB),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wSpeedsSupported) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedUSB),
            "::",
            stringify!(wSpeedsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFunctionalitySupport) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedUSB),
            "::",
            stringify!(bFunctionalitySupport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bU1DevExitLat) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedUSB),
            "::",
            stringify!(bU1DevExitLat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wU2DevExitLat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedUSB),
            "::",
            stringify!(wU2DevExitLat)
        )
    );
}
pub const kIOUSBSuperSpeedDeviceCapabilityLTM: _bindgen_ty_81 = 2;
pub const kIOUSBSuperSpeedDeviceCapabilityLowSpeed: _bindgen_ty_81 = 1;
pub const kIOUSBSuperSpeedDeviceCapabilityFullSpeed: _bindgen_ty_81 = 2;
pub const kIOUSBSuperSpeedDeviceCapabilityHighSpeed: _bindgen_ty_81 = 4;
pub const kIOUSBSuperSpeedDeviceCapability5Gb: _bindgen_ty_81 = 8;
pub const kIOUSBSuperSpeedDeviceCapabilitySupportLowSpeed: _bindgen_ty_81 = 0;
pub const kIOUSBSuperSpeedDeviceCapabilitySupportFullSpeed: _bindgen_ty_81 = 1;
pub const kIOUSBSuperSpeedDeviceCapabilitySupportHighSpeed: _bindgen_ty_81 = 2;
pub const kIOUSBSuperSpeedDeviceCapabilitySupport5Gb: _bindgen_ty_81 = 3;
pub const kIOUSBSuperSpeedDeviceCapabilityU1DevExitLatMax: _bindgen_ty_81 = 10;
pub const kIOUSBSuperSpeedDeviceCapabilityU2DevExitLatMax: _bindgen_ty_81 = 2047;
pub type _bindgen_ty_81 = ::std::os::raw::c_uint;
#[repr(C, packed)]
pub struct IOUSBDeviceCapabilitySuperSpeedPlusUSB {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bReserved: u8,
    pub bmAttributes: u32,
    pub wFunctionalitySupport: u16,
    pub wReserved: u16,
    pub bmSublinkSpeedAttr: __IncompleteArrayField<u32>,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceCapabilitySuperSpeedPlusUSB() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceCapabilitySuperSpeedPlusUSB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceCapabilitySuperSpeedPlusUSB>(),
        12usize,
        concat!("Size of: ", stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceCapabilitySuperSpeedPlusUSB>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB),
            "::",
            stringify!(bReserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wFunctionalitySupport) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB),
            "::",
            stringify!(wFunctionalitySupport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wReserved) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB),
            "::",
            stringify!(wReserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmSublinkSpeedAttr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilitySuperSpeedPlusUSB),
            "::",
            stringify!(bmSublinkSpeedAttr)
        )
    );
}
impl Default for IOUSBDeviceCapabilitySuperSpeedPlusUSB {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedAttrCount: _bindgen_ty_82 = 31;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedAttrCountPhase: _bindgen_ty_82 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedIdCount: _bindgen_ty_82 = 480;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedIdCountPhase: _bindgen_ty_82 = 5;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkMinSpeedId: _bindgen_ty_82 = 15;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkMinSpeedIdPhase: _bindgen_ty_82 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityReserved: _bindgen_ty_82 = 240;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityReservedPhase: _bindgen_ty_82 = 4;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityMinRxLaneCount: _bindgen_ty_82 = 3840;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityMinRxLaneCountPhase: _bindgen_ty_82 = 8;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityMinTxLaneCount: _bindgen_ty_82 = 61440;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityMinTxLaneCountPhase: _bindgen_ty_82 = 12;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedId: _bindgen_ty_82 = 15;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedIdPhase: _bindgen_ty_82 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSE: _bindgen_ty_82 = 48;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEPhase: _bindgen_ty_82 = 4;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEBits: _bindgen_ty_82 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEKbits: _bindgen_ty_82 = 16;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEMbits: _bindgen_ty_82 = 32;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEGbits: _bindgen_ty_82 = 48;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkType: _bindgen_ty_82 = 192;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkTypePhase: _bindgen_ty_82 = 6;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSymmetry: _bindgen_ty_82 = 64;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSymmetryPhase: _bindgen_ty_82 = 6;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSymmetric: _bindgen_ty_82 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkAsymmetric: _bindgen_ty_82 = 64;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkDirection: _bindgen_ty_82 = 128;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkDirectionPhase: _bindgen_ty_82 = 7;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkDirectionRx: _bindgen_ty_82 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkDirectionTx: _bindgen_ty_82 = 128;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkReserved: _bindgen_ty_82 = 16128;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkReservedPhase: _bindgen_ty_82 = 8;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkProtocol: _bindgen_ty_82 = 49152;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkProtocolPhase: _bindgen_ty_82 = 14;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedMantissa: _bindgen_ty_82 = 4294901760;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedMantissaPhase: _bindgen_ty_82 = 16;
pub type _bindgen_ty_82 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceCapabilityContainerID {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bReservedID: u8,
    pub containerID: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_IOUSBDeviceCapabilityContainerID() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceCapabilityContainerID> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceCapabilityContainerID>(),
        20usize,
        concat!("Size of: ", stringify!(IOUSBDeviceCapabilityContainerID))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceCapabilityContainerID>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceCapabilityContainerID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityContainerID),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityContainerID),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityContainerID),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReservedID) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityContainerID),
            "::",
            stringify!(bReservedID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).containerID) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityContainerID),
            "::",
            stringify!(containerID)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBPlatformCapabilityDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bReserved: u8,
    pub PlatformCapabilityUUID: uuid_t,
}
#[test]
fn bindgen_test_layout_IOUSBPlatformCapabilityDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBPlatformCapabilityDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBPlatformCapabilityDescriptor>(),
        20usize,
        concat!("Size of: ", stringify!(IOUSBPlatformCapabilityDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBPlatformCapabilityDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBPlatformCapabilityDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBPlatformCapabilityDescriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBPlatformCapabilityDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBPlatformCapabilityDescriptor),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBPlatformCapabilityDescriptor),
            "::",
            stringify!(bReserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformCapabilityUUID) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBPlatformCapabilityDescriptor),
            "::",
            stringify!(PlatformCapabilityUUID)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceCapabilityBillboardAltConfigCompatibility {
    pub wSVID: u16,
    pub dwAlternateMode: u32,
    pub iAlternateModeString: u8,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceCapabilityBillboardAltConfigCompatibility() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceCapabilityBillboardAltConfigCompatibility> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceCapabilityBillboardAltConfigCompatibility>(),
        7usize,
        concat!("Size of: ", stringify!(IOUSBDeviceCapabilityBillboardAltConfigCompatibility))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceCapabilityBillboardAltConfigCompatibility>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceCapabilityBillboardAltConfigCompatibility))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wSVID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltConfigCompatibility),
            "::",
            stringify!(wSVID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwAlternateMode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltConfigCompatibility),
            "::",
            stringify!(dwAlternateMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iAlternateModeString) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltConfigCompatibility),
            "::",
            stringify!(iAlternateModeString)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceCapabilityBillboardAltConfig {
    pub wSVID: u16,
    pub bAltenateMode: u8,
    pub iAlternateModeString: u8,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceCapabilityBillboardAltConfig() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceCapabilityBillboardAltConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceCapabilityBillboardAltConfig>(),
        4usize,
        concat!("Size of: ", stringify!(IOUSBDeviceCapabilityBillboardAltConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceCapabilityBillboardAltConfig>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceCapabilityBillboardAltConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wSVID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltConfig),
            "::",
            stringify!(wSVID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAltenateMode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltConfig),
            "::",
            stringify!(bAltenateMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iAlternateModeString) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltConfig),
            "::",
            stringify!(iAlternateModeString)
        )
    );
}
#[repr(C, packed)]
pub struct IOUSBDeviceCapabilityBillboard {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub iAdditionalInfoURL: u8,
    pub bNumberOfAlternateModes: u8,
    pub bPreferredAlternateMode: u8,
    pub vCONNPower: u16,
    pub bmConfigured: [u8; 32usize],
    pub bcdVersion: u16,
    pub bAdditionalFailureInfo: u8,
    pub bReserved: u8,
    pub pAltConfigurations: __IncompleteArrayField<IOUSBDeviceCapabilityBillboardAltConfig>,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceCapabilityBillboard() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceCapabilityBillboard> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceCapabilityBillboard>(),
        44usize,
        concat!("Size of: ", stringify!(IOUSBDeviceCapabilityBillboard))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceCapabilityBillboard>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceCapabilityBillboard))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iAdditionalInfoURL) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(iAdditionalInfoURL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumberOfAlternateModes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(bNumberOfAlternateModes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bPreferredAlternateMode) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(bPreferredAlternateMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vCONNPower) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(vCONNPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmConfigured) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(bmConfigured)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdVersion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(bcdVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAdditionalFailureInfo) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(bAdditionalFailureInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(bReserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAltConfigurations) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboard),
            "::",
            stringify!(pAltConfigurations)
        )
    );
}
impl Default for IOUSBDeviceCapabilityBillboard {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceCapabilityBillboardAltMode {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bIndex: u8,
    pub dwAlternateModeVdo: u16,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceCapabilityBillboardAltMode() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceCapabilityBillboardAltMode> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceCapabilityBillboardAltMode>(),
        6usize,
        concat!("Size of: ", stringify!(IOUSBDeviceCapabilityBillboardAltMode))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceCapabilityBillboardAltMode>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceCapabilityBillboardAltMode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltMode),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltMode),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevCapabilityType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltMode),
            "::",
            stringify!(bDevCapabilityType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIndex) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltMode),
            "::",
            stringify!(bIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwAlternateModeVdo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceCapabilityBillboardAltMode),
            "::",
            stringify!(dwAlternateModeVdo)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBInterfaceAssociationDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bFirstInterface: u8,
    pub bInterfaceCount: u8,
    pub bFunctionClass: u8,
    pub bFunctionSubClass: u8,
    pub bFunctionProtocol: u8,
    pub iFunction: u8,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceAssociationDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceAssociationDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceAssociationDescriptor>(),
        8usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceAssociationDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceAssociationDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceAssociationDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceAssociationDescriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceAssociationDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFirstInterface) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceAssociationDescriptor),
            "::",
            stringify!(bFirstInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceCount) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceAssociationDescriptor),
            "::",
            stringify!(bInterfaceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFunctionClass) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceAssociationDescriptor),
            "::",
            stringify!(bFunctionClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFunctionSubClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceAssociationDescriptor),
            "::",
            stringify!(bFunctionSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFunctionProtocol) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceAssociationDescriptor),
            "::",
            stringify!(bFunctionProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iFunction) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceAssociationDescriptor),
            "::",
            stringify!(iFunction)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBSuperSpeedEndpointCompanionDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bMaxBurst: u8,
    pub bmAttributes: u8,
    pub wBytesPerInterval: u16,
}
#[test]
fn bindgen_test_layout_IOUSBSuperSpeedEndpointCompanionDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBSuperSpeedEndpointCompanionDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBSuperSpeedEndpointCompanionDescriptor>(),
        6usize,
        concat!("Size of: ", stringify!(IOUSBSuperSpeedEndpointCompanionDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBSuperSpeedEndpointCompanionDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBSuperSpeedEndpointCompanionDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedEndpointCompanionDescriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedEndpointCompanionDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxBurst) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedEndpointCompanionDescriptor),
            "::",
            stringify!(bMaxBurst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedEndpointCompanionDescriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wBytesPerInterval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedEndpointCompanionDescriptor),
            "::",
            stringify!(wBytesPerInterval)
        )
    );
}
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorMaxBurst: _bindgen_ty_83 = 31;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorMaxBurstPhase: _bindgen_ty_83 = 0;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorBulkMaxStreams: _bindgen_ty_83 = 31;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorBulkMaxStreamsPhase: _bindgen_ty_83 = 0;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorBulkReserved: _bindgen_ty_83 = 224;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorBulkReservedPhase: _bindgen_ty_83 = 5;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorIsocMult: _bindgen_ty_83 = 3;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorIsocMultPhase: _bindgen_ty_83 = 0;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorIsocReserved: _bindgen_ty_83 = 124;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorIsocReservedPhase: _bindgen_ty_83 = 2;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorSSPIsocCompanion: _bindgen_ty_83 = 128;
pub type _bindgen_ty_83 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub wReserved: u16,
    pub dwBytesPerInterval: u32,
}
#[test]
fn bindgen_test_layout_IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<
        IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor>(),
        8usize,
        concat!("Size of: ", stringify!(IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wReserved) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor),
            "::",
            stringify!(wReserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwBytesPerInterval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor),
            "::",
            stringify!(dwBytesPerInterval)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSB20HubDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bNumberPorts: u8,
    pub wHubCharacteristics: u16,
    pub bPowerOnToPowerGood: u8,
    pub bHubControllerCurrent: u8,
    pub deviceRemovable: [u8; 2usize],
    pub reserved: [u8; 2usize],
}
#[test]
fn bindgen_test_layout_IOUSB20HubDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSB20HubDescriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSB20HubDescriptor>(),
        11usize,
        concat!("Size of: ", stringify!(IOUSB20HubDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSB20HubDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSB20HubDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSB20HubDescriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSB20HubDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumberPorts) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSB20HubDescriptor),
            "::",
            stringify!(bNumberPorts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wHubCharacteristics) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSB20HubDescriptor),
            "::",
            stringify!(wHubCharacteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bPowerOnToPowerGood) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSB20HubDescriptor),
            "::",
            stringify!(bPowerOnToPowerGood)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bHubControllerCurrent) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSB20HubDescriptor),
            "::",
            stringify!(bHubControllerCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceRemovable) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSB20HubDescriptor),
            "::",
            stringify!(deviceRemovable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        9usize,
        concat!("Offset of field: ", stringify!(IOUSB20HubDescriptor), "::", stringify!(reserved))
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBSuperSpeedHubDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bNumberPorts: u8,
    pub wHubCharacteristics: u16,
    pub bPowerOnToPowerGood: u8,
    pub bHubControllerCurrent: u8,
    pub bHubDecodeLatency: u8,
    pub wHubDelay: u16,
    pub deviceRemovable: u16,
}
#[test]
fn bindgen_test_layout_IOUSBSuperSpeedHubDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBSuperSpeedHubDescriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBSuperSpeedHubDescriptor>(),
        12usize,
        concat!("Size of: ", stringify!(IOUSBSuperSpeedHubDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBSuperSpeedHubDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBSuperSpeedHubDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedHubDescriptor),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedHubDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumberPorts) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedHubDescriptor),
            "::",
            stringify!(bNumberPorts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wHubCharacteristics) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedHubDescriptor),
            "::",
            stringify!(wHubCharacteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bPowerOnToPowerGood) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedHubDescriptor),
            "::",
            stringify!(bPowerOnToPowerGood)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bHubControllerCurrent) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedHubDescriptor),
            "::",
            stringify!(bHubControllerCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bHubDecodeLatency) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedHubDescriptor),
            "::",
            stringify!(bHubDecodeLatency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wHubDelay) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedHubDescriptor),
            "::",
            stringify!(wHubDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceRemovable) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBSuperSpeedHubDescriptor),
            "::",
            stringify!(deviceRemovable)
        )
    );
}
pub const kIOUSBSuperSpeedHubCharacteristicsPowerSwitchingMask: _bindgen_ty_84 = 3;
pub const kIOUSBSuperSpeedHubCharacteristicsPowerSwitchingGanged: _bindgen_ty_84 = 0;
pub const kIOUSBSuperSpeedHubCharacteristicsPowerSwitchingIndividual: _bindgen_ty_84 = 1;
pub const kIOUSBSuperSpeedHubCharacteristicsCompoundDevice: _bindgen_ty_84 = 4;
pub const kIOUSBSuperSpeedHubCharacteristicsOverCurrentMask: _bindgen_ty_84 = 24;
pub const kIOUSBSuperSpeedHubCharacteristicsOverCurrentGlobal: _bindgen_ty_84 = 0;
pub const kIOUSBSuperSpeedHubCharacteristicsOverCurrentIndividual: _bindgen_ty_84 = 8;
pub const kIOUSBSuperSpeedHubCharacteristicsReserved: _bindgen_ty_84 = 65504;
pub const kIOUSBSuperSpeedHubDecodeLatencyMax: _bindgen_ty_84 = 10;
pub const kIOUSBSuperSpeedHubDelayMax: _bindgen_ty_84 = 400;
pub type _bindgen_ty_84 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct UASPipeDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bPipeID: u8,
    pub bReserved: u8,
}
#[test]
fn bindgen_test_layout_UASPipeDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<UASPipeDescriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UASPipeDescriptor>(),
        4usize,
        concat!("Size of: ", stringify!(UASPipeDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<UASPipeDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(UASPipeDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(UASPipeDescriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(UASPipeDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bPipeID) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(UASPipeDescriptor), "::", stringify!(bPipeID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
        3usize,
        concat!("Offset of field: ", stringify!(UASPipeDescriptor), "::", stringify!(bReserved))
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBHIDDescriptor {
    pub descLen: u8,
    pub descType: u8,
    pub descVersNum: u16,
    pub hidCountryCode: u8,
    pub hidNumDescriptors: u8,
    pub hidDescriptorType: u8,
    pub hidDescriptorLengthLo: u8,
    pub hidDescriptorLengthHi: u8,
}
#[test]
fn bindgen_test_layout_IOUSBHIDDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBHIDDescriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBHIDDescriptor>(),
        9usize,
        concat!("Size of: ", stringify!(IOUSBHIDDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBHIDDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBHIDDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descLen) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBHIDDescriptor), "::", stringify!(descLen))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descType) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(IOUSBHIDDescriptor), "::", stringify!(descType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descVersNum) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBHIDDescriptor), "::", stringify!(descVersNum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidCountryCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBHIDDescriptor),
            "::",
            stringify!(hidCountryCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidNumDescriptors) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBHIDDescriptor),
            "::",
            stringify!(hidNumDescriptors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidDescriptorType) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBHIDDescriptor),
            "::",
            stringify!(hidDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidDescriptorLengthLo) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBHIDDescriptor),
            "::",
            stringify!(hidDescriptorLengthLo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidDescriptorLengthHi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBHIDDescriptor),
            "::",
            stringify!(hidDescriptorLengthHi)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBHIDReportDesc {
    pub hidDescriptorType: u8,
    pub hidDescriptorLengthLo: u8,
    pub hidDescriptorLengthHi: u8,
}
#[test]
fn bindgen_test_layout_IOUSBHIDReportDesc() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBHIDReportDesc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBHIDReportDesc>(),
        3usize,
        concat!("Size of: ", stringify!(IOUSBHIDReportDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBHIDReportDesc>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBHIDReportDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidDescriptorType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBHIDReportDesc),
            "::",
            stringify!(hidDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidDescriptorLengthLo) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBHIDReportDesc),
            "::",
            stringify!(hidDescriptorLengthLo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidDescriptorLengthHi) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBHIDReportDesc),
            "::",
            stringify!(hidDescriptorLengthHi)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDFUDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bmAttributes: u8,
    pub wDetachTimeout: u16,
    pub wTransferSize: u16,
}
#[test]
fn bindgen_test_layout_IOUSBDFUDescriptor() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDFUDescriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDFUDescriptor>(),
        7usize,
        concat!("Size of: ", stringify!(IOUSBDFUDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDFUDescriptor>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDFUDescriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDFUDescriptor), "::", stringify!(bLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDFUDescriptor),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDFUDescriptor),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wDetachTimeout) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDFUDescriptor),
            "::",
            stringify!(wDetachTimeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wTransferSize) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDFUDescriptor),
            "::",
            stringify!(wTransferSize)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceRequest {
    pub bmRequestType: u8,
    pub bRequest: u8,
    pub wValue: u16,
    pub wIndex: u16,
    pub wLength: u16,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceRequest() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceRequest> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceRequest>(),
        8usize,
        concat!("Size of: ", stringify!(IOUSBDeviceRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceRequest>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmRequestType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceRequest),
            "::",
            stringify!(bmRequestType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequest) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceRequest), "::", stringify!(bRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wValue) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceRequest), "::", stringify!(wValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wIndex) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceRequest), "::", stringify!(wIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLength) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceRequest), "::", stringify!(wLength))
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBDeviceRequestSetSELData {
    pub u1Sel: u8,
    pub u1Pel: u8,
    pub u2Sel: u16,
    pub u2Pel: u16,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceRequestSetSELData() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceRequestSetSELData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceRequestSetSELData>(),
        6usize,
        concat!("Size of: ", stringify!(IOUSBDeviceRequestSetSELData))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceRequestSetSELData>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceRequestSetSELData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u1Sel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceRequestSetSELData),
            "::",
            stringify!(u1Sel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u1Pel) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceRequestSetSELData),
            "::",
            stringify!(u1Pel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2Sel) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceRequestSetSELData),
            "::",
            stringify!(u2Sel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2Pel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceRequestSetSELData),
            "::",
            stringify!(u2Pel)
        )
    );
}
pub const tIOUSBDeviceRequestDirectionValue_kIOUSBDeviceRequestDirectionValueOut:
    tIOUSBDeviceRequestDirectionValue = 0;
pub const tIOUSBDeviceRequestDirectionValue_kIOUSBDeviceRequestDirectionValueIn:
    tIOUSBDeviceRequestDirectionValue = 1;
pub type tIOUSBDeviceRequestDirectionValue = ::std::os::raw::c_uint;
pub const tIOUSBDeviceRequestTypeValue_kIOUSBDeviceRequestTypeValueStandard:
    tIOUSBDeviceRequestTypeValue = 0;
pub const tIOUSBDeviceRequestTypeValue_kIOUSBDeviceRequestTypeValueClass:
    tIOUSBDeviceRequestTypeValue = 1;
pub const tIOUSBDeviceRequestTypeValue_kIOUSBDeviceRequestTypeValueVendor:
    tIOUSBDeviceRequestTypeValue = 2;
pub type tIOUSBDeviceRequestTypeValue = ::std::os::raw::c_uint;
pub const tIOUSBDeviceRequestRecipientValue_kIOUSBDeviceRequestRecipientValueDevice:
    tIOUSBDeviceRequestRecipientValue = 0;
pub const tIOUSBDeviceRequestRecipientValue_kIOUSBDeviceRequestRecipientValueInterface:
    tIOUSBDeviceRequestRecipientValue = 1;
pub const tIOUSBDeviceRequestRecipientValue_kIOUSBDeviceRequestRecipientValueEndpoint:
    tIOUSBDeviceRequestRecipientValue = 2;
pub const tIOUSBDeviceRequestRecipientValue_kIOUSBDeviceRequestRecipientValueOther:
    tIOUSBDeviceRequestRecipientValue = 3;
pub type tIOUSBDeviceRequestRecipientValue = ::std::os::raw::c_uint;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestSize: tIOUSBDeviceRequest = 8;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestDirectionMask: tIOUSBDeviceRequest = 128;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestDirectionPhase: tIOUSBDeviceRequest = 7;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestDirectionOut: tIOUSBDeviceRequest = 0;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestDirectionIn: tIOUSBDeviceRequest = 128;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypeMask: tIOUSBDeviceRequest = 96;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypePhase: tIOUSBDeviceRequest = 5;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypeStandard: tIOUSBDeviceRequest = 0;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypeClass: tIOUSBDeviceRequest = 32;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypeVendor: tIOUSBDeviceRequest = 64;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientMask: tIOUSBDeviceRequest = 31;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientPhase: tIOUSBDeviceRequest = 0;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientDevice: tIOUSBDeviceRequest = 0;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientInterface: tIOUSBDeviceRequest = 1;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientEndpoint: tIOUSBDeviceRequest = 2;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientOther: tIOUSBDeviceRequest = 3;
pub type tIOUSBDeviceRequest = ::std::os::raw::c_uint;
pub const kIOUSBDeviceRequestGetStatus: _bindgen_ty_85 = 0;
pub const kIOUSBDeviceRequestClearFeature: _bindgen_ty_85 = 1;
pub const kIOUSBDeviceRequestGetState: _bindgen_ty_85 = 2;
pub const kIOUSBDeviceRequestSetFeature: _bindgen_ty_85 = 3;
pub const kIOUSBDeviceRequestSetAddress: _bindgen_ty_85 = 5;
pub const kIOUSBDeviceRequestGetDescriptor: _bindgen_ty_85 = 6;
pub const kIOUSBDeviceRequestSetDescriptor: _bindgen_ty_85 = 7;
pub const kIOUSBDeviceRequestGetConfiguration: _bindgen_ty_85 = 8;
pub const kIOUSBDeviceRequestSetConfiguration: _bindgen_ty_85 = 9;
pub const kIOUSBDeviceRequestGetInterface: _bindgen_ty_85 = 10;
pub const kIOUSBDeviceRequestSetInterface: _bindgen_ty_85 = 11;
pub const kIOUSBDeviceRequestSynchFrame: _bindgen_ty_85 = 12;
pub const kIOUSBDeviceRequestSetSel: _bindgen_ty_85 = 48;
pub const kIOUSBDeviceRequestSetIsochronousDelay: _bindgen_ty_85 = 49;
pub type _bindgen_ty_85 = ::std::os::raw::c_uint;
pub const kIOUSBDeviceStatusSelfPowered: _bindgen_ty_86 = 1;
pub const kIOUSBDeviceStatusRemoteWakeEnable: _bindgen_ty_86 = 2;
pub const kIOUSBDeviceStatusU1Enable: _bindgen_ty_86 = 4;
pub const kIOUSBDeviceStatusU2Enable: _bindgen_ty_86 = 8;
pub const kIOUSBDeviceStatusLTMEnable: _bindgen_ty_86 = 16;
pub const kIOUSBInterfaceStatusRemoteWakeCapable: _bindgen_ty_86 = 1;
pub const kIOUSBInterfaceStatusRemoteWakeEnable: _bindgen_ty_86 = 2;
pub const IOUSBEndpointStatusHalt: _bindgen_ty_86 = 1;
pub type _bindgen_ty_86 = ::std::os::raw::c_uint;
pub const kIOUSBDeviceFeatureSelectorRemoteWakeup: _bindgen_ty_87 = 1;
pub const kIOUSBDeviceFeatureSelectorTestMode: _bindgen_ty_87 = 2;
pub const kIOUSBDeviceFeatureSelectorU1Enable: _bindgen_ty_87 = 48;
pub const kIOUSBDeviceFeatureSelectorU2Enable: _bindgen_ty_87 = 49;
pub const kIOUSBDeviceFeatureSelectorLTMEnable: _bindgen_ty_87 = 50;
pub const kIOUSBInterfaceFeatureSelectorSuspend: _bindgen_ty_87 = 0;
pub const IOUSBEndpointFeatureSelectorStall: _bindgen_ty_87 = 0;
pub type _bindgen_ty_87 = ::std::os::raw::c_uint;
pub const kIOUSBInterfaceSuspendLowPower: _bindgen_ty_88 = 1;
pub const kIOUSBInterfaceSuspendRemoteWakeEnable: _bindgen_ty_88 = 2;
pub type _bindgen_ty_88 = ::std::os::raw::c_uint;
pub const kIOUSBHubPort2PortExitLatencyNs: _bindgen_ty_89 = 1000;
pub const kIOUSBHubDelayNs: _bindgen_ty_89 = 400;
pub type _bindgen_ty_89 = ::std::os::raw::c_uint;
pub const kIOUSBPingResponseTimeNs: _bindgen_ty_90 = 400;
pub type _bindgen_ty_90 = ::std::os::raw::c_uint;
pub const tIOUSBBusVoltage_kIOUSBBusVoltageDefault: tIOUSBBusVoltage = 5;
pub type tIOUSBBusVoltage = ::std::os::raw::c_uint;
pub const tIOUSB20BusCurrent_kIOUSB20BusCurrentMinimum: tIOUSB20BusCurrent = 100;
pub const tIOUSB20BusCurrent_kIOUSB20BusCurrentDefault: tIOUSB20BusCurrent = 500;
pub const tIOUSB20BusCurrent_kIOUSB20BusCurrentMaxPowerUnits: tIOUSB20BusCurrent = 2;
pub type tIOUSB20BusCurrent = ::std::os::raw::c_uint;
pub const tIOUSB30BusCurrent_kIOUSB30BusCurrentMinimum: tIOUSB30BusCurrent = 150;
pub const tIOUSB30BusCurrent_kIOUSB30BusCurrentDefault: tIOUSB30BusCurrent = 900;
pub const tIOUSB30BusCurrent_kIOUSB30BusCurrentMaxPowerUnits: tIOUSB30BusCurrent = 8;
pub type tIOUSB30BusCurrent = ::std::os::raw::c_uint;
pub const tIOUSBTopology_kIOUSBTopologyHost: tIOUSBTopology = 1;
pub const tIOUSBTopology_kIOUSBTopologyRootPort: tIOUSBTopology = 2;
pub const tIOUSBTopology_kIOUSBTopology1Hub: tIOUSBTopology = 3;
pub const tIOUSBTopology_kIOUSBTopology2Hub: tIOUSBTopology = 4;
pub const tIOUSBTopology_kIOUSBTopology3Hub: tIOUSBTopology = 5;
pub const tIOUSBTopology_kIOUSBTopology4Hub: tIOUSBTopology = 6;
pub const tIOUSBTopology_kIOUSBTopology5Hub: tIOUSBTopology = 7;
pub const tIOUSBTopology_kIOUSBTopologyTierLimit: tIOUSBTopology = 7;
pub type tIOUSBTopology = ::std::os::raw::c_uint;
pub const tIOUSB30ResetTimeout_kIOUSB30ResetMinimumTimeout: tIOUSB30ResetTimeout = 80;
pub const tIOUSB30ResetTimeout_kIOUSB30ResetTypicalTimeout: tIOUSB30ResetTimeout = 100;
pub const tIOUSB30ResetTimeout_kIOUSB30ResetMaximumTimeout: tIOUSB30ResetTimeout = 120;
pub const tIOUSB30ResetTimeout_kIOUSB30ResetMaximumWithMarginTimeout: tIOUSB30ResetTimeout = 150;
pub type tIOUSB30ResetTimeout = ::std::os::raw::c_uint;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateSSInactiveQuietTimeout:
    tIOUSB30LinkStateTimeout = 12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRxDetectQuietTimeout: tIOUSB30LinkStateTimeout =
    12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingLFPSTimeout: tIOUSB30LinkStateTimeout =
    360;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingActiveTimeout: tIOUSB30LinkStateTimeout =
    12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingConfigurationTimeout:
    tIOUSB30LinkStateTimeout = 12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingIdleTimeout: tIOUSB30LinkStateTimeout =
    2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU0RecoveryTimeout: tIOUSB30LinkStateTimeout = 1;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU0LTimeout: tIOUSB30LinkStateTimeout = 0;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU1NoLFPSResponseTimeout:
    tIOUSB30LinkStateTimeout = 2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU1PingTimeout: tIOUSB30LinkStateTimeout = 300;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU2NoLFPSResponseTimeout:
    tIOUSB30LinkStateTimeout = 2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinKStateU2RxDetectDelay: tIOUSB30LinkStateTimeout = 100;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU3NoLFPSResponseTimeout:
    tIOUSB30LinkStateTimeout = 10;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU3WakeupRetryDelay: tIOUSB30LinkStateTimeout =
    100;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU3RxDetectDelay: tIOUSB30LinkStateTimeout = 100;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRecoveryActiveTimeout:
    tIOUSB30LinkStateTimeout = 12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRecoveryConfigurationTimeout:
    tIOUSB30LinkStateTimeout = 6;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRecoveryIdleTimeout: tIOUSB30LinkStateTimeout =
    2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateLoopbackExitTimeout: tIOUSB30LinkStateTimeout =
    2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateHotResetActiveTimeout:
    tIOUSB30LinkStateTimeout = 12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateHotResetExitTimeout: tIOUSB30LinkStateTimeout =
    2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingDeadline: tIOUSB30LinkStateTimeout = 387;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateSSResumeDeadline: tIOUSB30LinkStateTimeout =
    130;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRecoveryDeadline: tIOUSB30LinkStateTimeout = 21;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateHotResetDeadline: tIOUSB30LinkStateTimeout = 15;
pub type tIOUSB30LinkStateTimeout = ::std::os::raw::c_uint;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeFunctionWake:
    tIOUSB30DeviceNotificationType = 1;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeLatencyTolerance:
    tIOUSB30DeviceNotificationType = 2;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeBusIntervalAdjustment:
    tIOUSB30DeviceNotificationType = 3;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeHostRoleRequest:
    tIOUSB30DeviceNotificationType = 4;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeSublinkSpeed:
    tIOUSB30DeviceNotificationType = 5;
pub type tIOUSB30DeviceNotificationType = ::std::os::raw::c_uint;
pub const tIOUSB30TimingParameters_kIOUSB30TimingParameterBELTDefaultNs: tIOUSB30TimingParameters =
    1000000;
pub const tIOUSB30TimingParameters_kIOUSB30TimingParameterBELTMinNs: tIOUSB30TimingParameters =
    125000;
pub type tIOUSB30TimingParameters = ::std::os::raw::c_uint;
pub const tIOUSB30HubPortStatusCode_kIOUSB30HubPortStatusCodeStandard: tIOUSB30HubPortStatusCode =
    0;
pub const tIOUSB30HubPortStatusCode_kIOUSB30HubPortStatusCodePD: tIOUSB30HubPortStatusCode = 1;
pub const tIOUSB30HubPortStatusCode_kIOUSB30HubPortStatusCodeExt: tIOUSB30HubPortStatusCode = 2;
pub const tIOUSB30HubPortStatusCode_kIOUSB30HubPortStatusCodeCount: tIOUSB30HubPortStatusCode = 3;
pub type tIOUSB30HubPortStatusCode = ::std::os::raw::c_uint;
pub const kIOUSB30RetimerDepthLimit: _bindgen_ty_91 = 4;
pub type _bindgen_ty_91 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSB30HubPortStatusExt {
    pub wPortStatus: u16,
    pub wPortChange: u16,
    pub dwExtPortStatus: u32,
}
#[test]
fn bindgen_test_layout_IOUSB30HubPortStatusExt() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSB30HubPortStatusExt> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSB30HubPortStatusExt>(),
        8usize,
        concat!("Size of: ", stringify!(IOUSB30HubPortStatusExt))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSB30HubPortStatusExt>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSB30HubPortStatusExt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wPortStatus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSB30HubPortStatusExt),
            "::",
            stringify!(wPortStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wPortChange) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSB30HubPortStatusExt),
            "::",
            stringify!(wPortChange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwExtPortStatus) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSB30HubPortStatusExt),
            "::",
            stringify!(dwExtPortStatus)
        )
    );
}
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusRxSublinkSpeedID: tIOUSB30HubExtStatus = 15;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusRxSublinkSpeedIDPhase: tIOUSB30HubExtStatus = 0;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusTxSublinkSpeedID: tIOUSB30HubExtStatus = 240;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusTxSublinkSpeedIDPhase: tIOUSB30HubExtStatus = 4;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusRxLaneCount: tIOUSB30HubExtStatus = 3840;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusRxLaneCountPhase: tIOUSB30HubExtStatus = 8;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusTxLaneCount: tIOUSB30HubExtStatus = 61440;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusTxLaneCountPhase: tIOUSB30HubExtStatus = 12;
pub type tIOUSB30HubExtStatus = ::std::os::raw::c_uint;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedNone: tIOUSBHostConnectionSpeed = 0;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedFull: tIOUSBHostConnectionSpeed = 1;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedLow: tIOUSBHostConnectionSpeed = 2;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedHigh: tIOUSBHostConnectionSpeed = 3;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedSuper: tIOUSBHostConnectionSpeed = 4;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedSuperPlus: tIOUSBHostConnectionSpeed =
    5;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedSuperPlusBy2:
    tIOUSBHostConnectionSpeed = 6;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedCount: tIOUSBHostConnectionSpeed = 7;
pub type tIOUSBHostConnectionSpeed = ::std::os::raw::c_uint;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeStandard: tIOUSBHostPortType = 0;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeCaptive: tIOUSBHostPortType = 1;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeInternal: tIOUSBHostPortType = 2;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeAccessory: tIOUSBHostPortType = 3;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeExpressCard: tIOUSBHostPortType = 4;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeCount: tIOUSBHostPortType = 5;
pub type tIOUSBHostPortType = ::std::os::raw::c_uint;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeMask: tIOUSBHostPortStatus = 15;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypePhase: tIOUSBHostPortStatus = 0;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeStandard: tIOUSBHostPortStatus = 0;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeCaptive: tIOUSBHostPortStatus = 1;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeInternal: tIOUSBHostPortStatus = 2;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeAccessory: tIOUSBHostPortStatus = 3;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeReserved: tIOUSBHostPortStatus = 240;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedMask: tIOUSBHostPortStatus = 1792;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedPhase: tIOUSBHostPortStatus = 8;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedNone: tIOUSBHostPortStatus = 0;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedFull: tIOUSBHostPortStatus = 256;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedLow: tIOUSBHostPortStatus = 512;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedHigh: tIOUSBHostPortStatus = 768;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedSuper: tIOUSBHostPortStatus = 1024;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedSuperPlus: tIOUSBHostPortStatus =
    1280;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedSuperPlusBy2:
    tIOUSBHostPortStatus = 1536;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusResetting: tIOUSBHostPortStatus = 2048;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusEnabled: tIOUSBHostPortStatus = 4096;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusSuspended: tIOUSBHostPortStatus = 8192;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusOvercurrent: tIOUSBHostPortStatus = 16384;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusTestMode: tIOUSBHostPortStatus = 32768;
pub type tIOUSBHostPortStatus = ::std::os::raw::c_uint;
pub const kUSBControl: _bindgen_ty_92 = 0;
pub const kUSBIsoc: _bindgen_ty_92 = 1;
pub const kUSBBulk: _bindgen_ty_92 = 2;
pub const kUSBInterrupt: _bindgen_ty_92 = 3;
pub const kUSBAnyType: _bindgen_ty_92 = 255;
pub type _bindgen_ty_92 = ::std::os::raw::c_uint;
pub const kUSBOut: _bindgen_ty_93 = 0;
pub const kUSBIn: _bindgen_ty_93 = 1;
pub const kUSBNone: _bindgen_ty_93 = 2;
pub const kUSBAnyDirn: _bindgen_ty_93 = 3;
pub type _bindgen_ty_93 = ::std::os::raw::c_uint;
pub const kUSBStandard: _bindgen_ty_94 = 0;
pub const kUSBClass: _bindgen_ty_94 = 1;
pub const kUSBVendor: _bindgen_ty_94 = 2;
pub type _bindgen_ty_94 = ::std::os::raw::c_uint;
pub const kUSBDevice: _bindgen_ty_95 = 0;
pub const kUSBInterface: _bindgen_ty_95 = 1;
pub const kUSBEndpoint: _bindgen_ty_95 = 2;
pub const kUSBOther: _bindgen_ty_95 = 3;
pub type _bindgen_ty_95 = ::std::os::raw::c_uint;
pub const kUSBRqGetStatus: _bindgen_ty_96 = 0;
pub const kUSBRqClearFeature: _bindgen_ty_96 = 1;
pub const kUSBRqGetState: _bindgen_ty_96 = 2;
pub const kUSBRqSetFeature: _bindgen_ty_96 = 3;
pub const kUSBRqReserved2: _bindgen_ty_96 = 4;
pub const kUSBRqSetAddress: _bindgen_ty_96 = 5;
pub const kUSBRqGetDescriptor: _bindgen_ty_96 = 6;
pub const kUSBRqSetDescriptor: _bindgen_ty_96 = 7;
pub const kUSBRqGetConfig: _bindgen_ty_96 = 8;
pub const kUSBRqSetConfig: _bindgen_ty_96 = 9;
pub const kUSBRqGetInterface: _bindgen_ty_96 = 10;
pub const kUSBRqSetInterface: _bindgen_ty_96 = 11;
pub const kUSBRqSyncFrame: _bindgen_ty_96 = 12;
pub const kUSBSetSel: _bindgen_ty_96 = 48;
pub const kUSBSetIsochDelay: _bindgen_ty_96 = 49;
pub type _bindgen_ty_96 = ::std::os::raw::c_uint;
pub const kUSBAnyDesc: _bindgen_ty_97 = 0;
pub const kUSBDeviceDesc: _bindgen_ty_97 = 1;
pub const kUSBConfDesc: _bindgen_ty_97 = 2;
pub const kUSBStringDesc: _bindgen_ty_97 = 3;
pub const kUSBInterfaceDesc: _bindgen_ty_97 = 4;
pub const kUSBEndpointDesc: _bindgen_ty_97 = 5;
pub const kUSBDeviceQualifierDesc: _bindgen_ty_97 = 6;
pub const kUSBOtherSpeedConfDesc: _bindgen_ty_97 = 7;
pub const kUSBInterfacePowerDesc: _bindgen_ty_97 = 8;
pub const kUSBOnTheGoDesc: _bindgen_ty_97 = 9;
pub const kUSDebugDesc: _bindgen_ty_97 = 10;
pub const kUSBInterfaceAssociationDesc: _bindgen_ty_97 = 11;
pub const kUSBBOSDescriptor: _bindgen_ty_97 = 15;
pub const kUSBDeviceCapability: _bindgen_ty_97 = 16;
pub const kUSBSuperSpeedEndpointCompanion: _bindgen_ty_97 = 48;
pub const kUSB3HUBDesc: _bindgen_ty_97 = 42;
pub const kUSBHIDDesc: _bindgen_ty_97 = 33;
pub const kUSBReportDesc: _bindgen_ty_97 = 34;
pub const kUSBPhysicalDesc: _bindgen_ty_97 = 35;
pub const kUSBHUBDesc: _bindgen_ty_97 = 41;
pub type _bindgen_ty_97 = ::std::os::raw::c_uint;
pub const kUSBDeviceCapabilityWirelessUSB: _bindgen_ty_98 = 1;
pub const kUSBDeviceCapabilityUSB20Extension: _bindgen_ty_98 = 2;
pub const kUSBDeviceCapabilitySuperSpeedUSB: _bindgen_ty_98 = 3;
pub const kUSBDeviceCapabilityContainerID: _bindgen_ty_98 = 4;
pub const kUSBDeviceCapabilityBillboard: _bindgen_ty_98 = 13;
pub const kUSBDeviceCapabilityBillboardAltMode: _bindgen_ty_98 = 15;
pub type _bindgen_ty_98 = ::std::os::raw::c_uint;
pub const kUSBFeatureEndpointStall: _bindgen_ty_99 = 0;
pub const kUSBFeatureDeviceRemoteWakeup: _bindgen_ty_99 = 1;
pub const kUSBFeatureTestMode: _bindgen_ty_99 = 2;
pub const kUSBFeatureFunctionSuspend: _bindgen_ty_99 = 0;
pub const kUSBFeatureU1Enable: _bindgen_ty_99 = 48;
pub const kUSBFeatureU2Enable: _bindgen_ty_99 = 49;
pub const kUSBFeatureLTMEnable: _bindgen_ty_99 = 50;
pub type _bindgen_ty_99 = ::std::os::raw::c_uint;
pub const kUSBFunctionRemoteWakeCapableBit: _bindgen_ty_100 = 1;
pub const kUSBFunctionRemoteWakeupBit: _bindgen_ty_100 = 2;
pub const kUSBLowPowerSuspendStateBit: _bindgen_ty_100 = 1;
pub const kUSBFunctionRemoteWakeEnableBit: _bindgen_ty_100 = 2;
pub type _bindgen_ty_100 = ::std::os::raw::c_uint;
pub const kUSB100mAAvailable: _bindgen_ty_101 = 50;
pub const kUSB500mAAvailable: _bindgen_ty_101 = 250;
pub const kUSB100mA: _bindgen_ty_101 = 50;
pub const kUSBAtrBusPowered: _bindgen_ty_101 = 128;
pub const kUSBAtrSelfPowered: _bindgen_ty_101 = 64;
pub const kUSBAtrRemoteWakeup: _bindgen_ty_101 = 32;
pub const kUSB2MaxPowerPerPort: _bindgen_ty_101 = 500;
pub const kUSB150mAAvailable: _bindgen_ty_101 = 75;
pub const kUSB900mAAvailable: _bindgen_ty_101 = 450;
pub const kUSB150mA: _bindgen_ty_101 = 75;
pub const kUSB3MaxPowerPerPort: _bindgen_ty_101 = 900;
pub type _bindgen_ty_101 = ::std::os::raw::c_uint;
pub const kUSBRel10: _bindgen_ty_102 = 256;
pub const kUSBRel11: _bindgen_ty_102 = 272;
pub const kUSBRel20: _bindgen_ty_102 = 512;
pub const kUSBRel30: _bindgen_ty_102 = 768;
pub type _bindgen_ty_102 = ::std::os::raw::c_uint;
pub const kHIDRqGetReport: _bindgen_ty_103 = 1;
pub const kHIDRqGetIdle: _bindgen_ty_103 = 2;
pub const kHIDRqGetProtocol: _bindgen_ty_103 = 3;
pub const kHIDRqSetReport: _bindgen_ty_103 = 9;
pub const kHIDRqSetIdle: _bindgen_ty_103 = 10;
pub const kHIDRqSetProtocol: _bindgen_ty_103 = 11;
pub type _bindgen_ty_103 = ::std::os::raw::c_uint;
pub const kHIDRtInputReport: _bindgen_ty_104 = 1;
pub const kHIDRtOutputReport: _bindgen_ty_104 = 2;
pub const kHIDRtFeatureReport: _bindgen_ty_104 = 3;
pub type _bindgen_ty_104 = ::std::os::raw::c_uint;
pub const kHIDBootProtocolValue: _bindgen_ty_105 = 0;
pub const kHIDReportProtocolValue: _bindgen_ty_105 = 1;
pub type _bindgen_ty_105 = ::std::os::raw::c_uint;
pub const kUSBCapsLockKey: _bindgen_ty_106 = 57;
pub const kUSBNumLockKey: _bindgen_ty_106 = 83;
pub const kUSBScrollLockKey: _bindgen_ty_106 = 71;
pub type _bindgen_ty_106 = ::std::os::raw::c_uint;
pub const kUSBCompositeClass: _bindgen_ty_107 = 0;
pub const kUSBCommClass: _bindgen_ty_107 = 2;
pub const kUSBCommunicationClass: _bindgen_ty_107 = 2;
pub const kUSBHubClass: _bindgen_ty_107 = 9;
pub const kUSBDataClass: _bindgen_ty_107 = 10;
pub const kUSBPersonalHealthcareClass: _bindgen_ty_107 = 15;
pub const kUSBBillBoardClass: _bindgen_ty_107 = 17;
pub const kUSBDiagnosticClass: _bindgen_ty_107 = 220;
pub const kUSBWirelessControllerClass: _bindgen_ty_107 = 224;
pub const kUSBMiscellaneousClass: _bindgen_ty_107 = 239;
pub const kUSBApplicationSpecificClass: _bindgen_ty_107 = 254;
pub const kUSBVendorSpecificClass: _bindgen_ty_107 = 255;
pub type _bindgen_ty_107 = ::std::os::raw::c_uint;
pub const kUSBAudioClass: _bindgen_ty_108 = 1;
pub const kUSBAudioInterfaceClass: _bindgen_ty_108 = 1;
pub const kUSBCommunicationControlInterfaceClass: _bindgen_ty_108 = 2;
pub const kUSBCommunicationDataInterfaceClass: _bindgen_ty_108 = 10;
pub const kUSBHIDClass: _bindgen_ty_108 = 3;
pub const kUSBHIDInterfaceClass: _bindgen_ty_108 = 3;
pub const kUSBPhysicalInterfaceClass: _bindgen_ty_108 = 5;
pub const kUSBImageInterfaceClass: _bindgen_ty_108 = 6;
pub const kUSBPrintingClass: _bindgen_ty_108 = 7;
pub const kUSBPrintingInterfaceClass: _bindgen_ty_108 = 7;
pub const kUSBMassStorageClass: _bindgen_ty_108 = 8;
pub const kUSBMassStorageInterfaceClass: _bindgen_ty_108 = 8;
pub const kUSBChipSmartCardInterfaceClass: _bindgen_ty_108 = 11;
pub const kUSBContentSecurityInterfaceClass: _bindgen_ty_108 = 13;
pub const kUSBVideoInterfaceClass: _bindgen_ty_108 = 14;
pub const kUSBPersonalHealthcareInterfaceClass: _bindgen_ty_108 = 15;
pub const kUSBDiagnosticDeviceInterfaceClass: _bindgen_ty_108 = 220;
pub const kUSBWirelessControllerInterfaceClass: _bindgen_ty_108 = 224;
pub const kUSBApplicationSpecificInterfaceClass: _bindgen_ty_108 = 254;
pub const kUSBVendorSpecificInterfaceClass: _bindgen_ty_108 = 255;
pub type _bindgen_ty_108 = ::std::os::raw::c_uint;
pub const kUSBDisplayClass: _bindgen_ty_109 = 4;
pub type _bindgen_ty_109 = ::std::os::raw::c_uint;
pub const kUSBCompositeSubClass: _bindgen_ty_110 = 0;
pub const kUSBHubSubClass: _bindgen_ty_110 = 0;
pub const kUSBAudioControlSubClass: _bindgen_ty_110 = 1;
pub const kUSBAudioStreamingSubClass: _bindgen_ty_110 = 2;
pub const kUSBMIDIStreamingSubClass: _bindgen_ty_110 = 3;
pub const kUSBDFUSubClass: _bindgen_ty_110 = 1;
pub const kUSBIrDABridgeSubClass: _bindgen_ty_110 = 2;
pub const kUSBTestMeasurementSubClass: _bindgen_ty_110 = 3;
pub const kUSBMassStorageRBCSubClass: _bindgen_ty_110 = 1;
pub const kUSBMassStorageATAPISubClass: _bindgen_ty_110 = 2;
pub const kUSBMassStorageQIC157SubClass: _bindgen_ty_110 = 3;
pub const kUSBMassStorageUFISubClass: _bindgen_ty_110 = 4;
pub const kUSBMassStorageSFF8070iSubClass: _bindgen_ty_110 = 5;
pub const kUSBMassStorageSCSISubClass: _bindgen_ty_110 = 6;
pub const kUSBHIDBootInterfaceSubClass: _bindgen_ty_110 = 1;
pub const kUSBCommDirectLineSubClass: _bindgen_ty_110 = 1;
pub const kUSBCommAbstractSubClass: _bindgen_ty_110 = 2;
pub const kUSBCommTelephoneSubClass: _bindgen_ty_110 = 3;
pub const kUSBCommMultiChannelSubClass: _bindgen_ty_110 = 4;
pub const kUSBCommCAPISubClass: _bindgen_ty_110 = 5;
pub const kUSBCommEthernetNetworkingSubClass: _bindgen_ty_110 = 6;
pub const kUSBATMNetworkingSubClass: _bindgen_ty_110 = 7;
pub const kUSBReprogrammableDiagnosticSubClass: _bindgen_ty_110 = 1;
pub const kUSBRFControllerSubClass: _bindgen_ty_110 = 1;
pub const kUSBCommonClassSubClass: _bindgen_ty_110 = 2;
pub const kUSBVideoControlSubClass: _bindgen_ty_110 = 1;
pub const kUSBVideoStreamingSubClass: _bindgen_ty_110 = 2;
pub const kUSBVideoInterfaceCollectionSubClass: _bindgen_ty_110 = 3;
pub type _bindgen_ty_110 = ::std::os::raw::c_uint;
pub const USBClassSpecificDesc_kUSBClassSpecificDescriptor: USBClassSpecificDesc = 36;
pub type USBClassSpecificDesc = ::std::os::raw::c_uint;
pub const kHubSuperSpeedProtocol: _bindgen_ty_111 = 3;
pub const kHIDNoInterfaceProtocol: _bindgen_ty_111 = 0;
pub const kHIDKeyboardInterfaceProtocol: _bindgen_ty_111 = 1;
pub const kHIDMouseInterfaceProtocol: _bindgen_ty_111 = 2;
pub const kUSBVendorSpecificProtocol: _bindgen_ty_111 = 255;
pub const kUSB2ComplianceDeviceProtocol: _bindgen_ty_111 = 1;
pub const kUSBBluetoothProgrammingInterfaceProtocol: _bindgen_ty_111 = 1;
pub const KUSBInterfaceAssociationDescriptorProtocol: _bindgen_ty_111 = 1;
pub const kMSCProtocolControlBulkInterrupt: _bindgen_ty_111 = 0;
pub const kMSCProtocolControlBulk: _bindgen_ty_111 = 1;
pub const kMSCProtocolBulkOnly: _bindgen_ty_111 = 80;
pub const kMSCProtocolUSBAttachedSCSI: _bindgen_ty_111 = 98;
pub type _bindgen_ty_111 = ::std::os::raw::c_uint;
pub const kUSBDFUAttributesMask: _bindgen_ty_112 = 7;
pub const kUSBDFUCanDownloadBit: _bindgen_ty_112 = 0;
pub const kUSBDFUCanUploadBit: _bindgen_ty_112 = 1;
pub const kUSBDFUManifestationTolerantBit: _bindgen_ty_112 = 2;
pub type _bindgen_ty_112 = ::std::os::raw::c_uint;
pub const kUSPrintingClassGetDeviceID: _bindgen_ty_113 = 0;
pub const kUSPrintingClassGePortStatus: _bindgen_ty_113 = 1;
pub const kUSPrintingClassSoftReset: _bindgen_ty_113 = 2;
pub type _bindgen_ty_113 = ::std::os::raw::c_uint;
pub const kUSBbEndpointAddressMask: _bindgen_ty_114 = 15;
pub const kUSBbEndpointDirectionBit: _bindgen_ty_114 = 7;
pub const kUSBbEndpointDirectionMask: _bindgen_ty_114 = 128;
pub const kUSBEndpointDirectionOut: _bindgen_ty_114 = 0;
pub const kUSBEndpointDirectionIn: _bindgen_ty_114 = 128;
pub const kUSBEndpointbmAttributesTransferTypeMask: _bindgen_ty_114 = 3;
pub const kUSBEndpointbmAttributesSynchronizationTypeMask: _bindgen_ty_114 = 12;
pub const kUSBEndpointbmAttributesSynchronizationTypeShift: _bindgen_ty_114 = 2;
pub const kUSBEndpointbmAttributesUsageTypeMask: _bindgen_ty_114 = 48;
pub const kUSBEndpointbmAttributesUsageTypeShift: _bindgen_ty_114 = 4;
pub const kUSBPeriodicInterruptUsageType: _bindgen_ty_114 = 0;
pub const kUSBNotificationInterruptUsageType: _bindgen_ty_114 = 1;
pub const kUSBNoSynchronizationIsocSyncType: _bindgen_ty_114 = 0;
pub const kUSBAsynchronousIsocSyncType: _bindgen_ty_114 = 1;
pub const kUSBAdaptiveIsocSyncType: _bindgen_ty_114 = 2;
pub const kUSBSynchronousIsocSyncType: _bindgen_ty_114 = 3;
pub const kUSBDataIsocUsageType: _bindgen_ty_114 = 0;
pub const kUSBFeedbackIsocUsageType: _bindgen_ty_114 = 1;
pub const kUSBImplicitFeedbackDataIsocUsageType: _bindgen_ty_114 = 2;
pub type _bindgen_ty_114 = ::std::os::raw::c_uint;
pub const kUSB20ExtensionLPMSupported: _bindgen_ty_115 = 1;
pub const kUSBSuperSpeedLTMCapable: _bindgen_ty_115 = 1;
pub const kUSBSuperSpeedSupportsLS: _bindgen_ty_115 = 0;
pub const kUSBSuperSpeedSupportsFS: _bindgen_ty_115 = 1;
pub const kUSBSuperSpeedSupportsHS: _bindgen_ty_115 = 2;
pub const kUSBSuperSpeedSupportsSS: _bindgen_ty_115 = 3;
pub type _bindgen_ty_115 = ::std::os::raw::c_uint;
pub const kUSBBillboardVConn1Watt: _bindgen_ty_116 = 0;
pub const kUSBBillboardVConn1P5Watt: _bindgen_ty_116 = 1;
pub const kUSBBillboardVConn2Watt: _bindgen_ty_116 = 2;
pub const kUSBBillboardVConn3Watt: _bindgen_ty_116 = 3;
pub const kUSBBillboardVConn4Watt: _bindgen_ty_116 = 4;
pub const kUSBBillboardVConn5Watt: _bindgen_ty_116 = 5;
pub const kUSBBillboardVConn6Watt: _bindgen_ty_116 = 6;
pub const kUSBBillboardVConnReserved: _bindgen_ty_116 = 7;
pub type _bindgen_ty_116 = ::std::os::raw::c_uint;
pub const kUSBBillboardUnspecifiedError: _bindgen_ty_117 = 0;
pub const kUSBBillboardConfigNotAttempted: _bindgen_ty_117 = 1;
pub const kUSBBillboardConfigUnsuccessful: _bindgen_ty_117 = 2;
pub const kUSBBillboardAltModeConfigSuccess: _bindgen_ty_117 = 3;
pub type _bindgen_ty_117 = ::std::os::raw::c_uint;
pub const kUSBBillboardAdditinalInfoNoPower: _bindgen_ty_118 = 1;
pub const kUSBBillboardAdditinalInfoNoUSBPD: _bindgen_ty_118 = 2;
pub type _bindgen_ty_118 = ::std::os::raw::c_uint;
pub const kAppleVendorID: _bindgen_ty_119 = 1452;
pub type _bindgen_ty_119 = ::std::os::raw::c_uint;
pub const kUSBDeviceIDShift: _bindgen_ty_120 = 7;
pub const kUSBMaxDevices: _bindgen_ty_120 = 128;
pub const kUSBMaxDevice: _bindgen_ty_120 = 127;
pub const kUSBDeviceIDMask: _bindgen_ty_120 = 127;
pub const kUSBTooManyDevicesAddress: _bindgen_ty_120 = 65534;
pub const kUSBPipeIDMask: _bindgen_ty_120 = 15;
pub const kUSBMaxPipes: _bindgen_ty_120 = 32;
pub const kUSBInterfaceIDShift: _bindgen_ty_120 = 8;
pub const kUSBMaxInterfaces: _bindgen_ty_120 = 256;
pub const kUSBInterfaceIDMask: _bindgen_ty_120 = 255;
pub const kUSBEndPtShift: _bindgen_ty_120 = 7;
pub const kUSBDeviceMask: _bindgen_ty_120 = 127;
pub const kUSBNoPipeIdx: _bindgen_ty_120 = -1;
pub const kUSBUCRequestWithoutUSBNotificationMask: _bindgen_ty_120 = 1073741824;
pub const kUSBEndpointTransferTypeUCMask: _bindgen_ty_120 = 128;
pub const kUSBStream0: _bindgen_ty_120 = 0;
pub const kUSBMaxStream: _bindgen_ty_120 = 65533;
pub const kUSBPRimeStream: _bindgen_ty_120 = 65534;
pub const kUSBNoStream: _bindgen_ty_120 = 65535;
pub const kUSBAllStreams: _bindgen_ty_120 = 4294967295;
pub const kUSBStreamIDMask: _bindgen_ty_120 = 65535;
pub const kUSBStreamIDAllStreamsMask: _bindgen_ty_120 = -2147483648;
pub type _bindgen_ty_120 = ::std::os::raw::c_long;
pub const kUSBRqDirnShift: _bindgen_ty_121 = 7;
pub const kUSBRqDirnMask: _bindgen_ty_121 = 1;
pub const kUSBRqTypeShift: _bindgen_ty_121 = 5;
pub const kUSBRqTypeMask: _bindgen_ty_121 = 3;
pub const kUSBRqRecipientMask: _bindgen_ty_121 = 31;
pub type _bindgen_ty_121 = ::std::os::raw::c_uint;
pub const kUSBMaxFSIsocEndpointReqCount: _bindgen_ty_122 = 1023;
pub const kUSBMaxHSIsocEndpointReqCount: _bindgen_ty_122 = 3072;
pub const kUSBMaxHSIsocFrameCount: _bindgen_ty_122 = 7168;
pub type _bindgen_ty_122 = ::std::os::raw::c_uint;
pub const kClearDeviceFeature: _bindgen_ty_123 = 256;
pub const kClearInterfaceFeature: _bindgen_ty_123 = 257;
pub const kClearEndpointFeature: _bindgen_ty_123 = 258;
pub const kGetConfiguration: _bindgen_ty_123 = 2176;
pub const kGetDescriptor: _bindgen_ty_123 = 1664;
pub const kGetInterface: _bindgen_ty_123 = 2689;
pub const kGetDeviceStatus: _bindgen_ty_123 = 128;
pub const kGetInterfaceStatus: _bindgen_ty_123 = 129;
pub const kGetEndpointStatus: _bindgen_ty_123 = 130;
pub const kSetAddress: _bindgen_ty_123 = 1280;
pub const kSetConfiguration: _bindgen_ty_123 = 2304;
pub const kSetDescriptor: _bindgen_ty_123 = 1792;
pub const kSetDeviceFeature: _bindgen_ty_123 = 768;
pub const kSetInterfaceFeature: _bindgen_ty_123 = 769;
pub const kSetEndpointFeature: _bindgen_ty_123 = 770;
pub const kSetInterface: _bindgen_ty_123 = 2817;
pub const kSyncFrame: _bindgen_ty_123 = 3202;
pub type _bindgen_ty_123 = ::std::os::raw::c_uint;
pub type USBDeviceAddress = UInt16;
pub type USBPhysicalAddress32 = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBIsocFrame {
    pub frStatus: IOReturn,
    pub frReqCount: UInt16,
    pub frActCount: UInt16,
}
#[test]
fn bindgen_test_layout_IOUSBIsocFrame() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBIsocFrame> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBIsocFrame>(),
        8usize,
        concat!("Size of: ", stringify!(IOUSBIsocFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBIsocFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(IOUSBIsocFrame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frStatus) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocFrame), "::", stringify!(frStatus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frReqCount) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocFrame), "::", stringify!(frReqCount))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frActCount) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocFrame), "::", stringify!(frActCount))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBLowLatencyIsocFrame {
    pub frStatus: IOReturn,
    pub frReqCount: UInt16,
    pub frActCount: UInt16,
    pub frTimeStamp: AbsoluteTime,
}
#[test]
fn bindgen_test_layout_IOUSBLowLatencyIsocFrame() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBLowLatencyIsocFrame> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBLowLatencyIsocFrame>(),
        16usize,
        concat!("Size of: ", stringify!(IOUSBLowLatencyIsocFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBLowLatencyIsocFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(IOUSBLowLatencyIsocFrame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frStatus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocFrame),
            "::",
            stringify!(frStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frReqCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocFrame),
            "::",
            stringify!(frReqCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frActCount) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocFrame),
            "::",
            stringify!(frActCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frTimeStamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocFrame),
            "::",
            stringify!(frTimeStamp)
        )
    );
}
pub type IOUSBCompletionAction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        parameter: *mut ::std::os::raw::c_void,
        status: IOReturn,
        bufferSizeRemaining: UInt32,
    ),
>;
pub type IOUSBCompletionActionWithTimeStamp = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        parameter: *mut ::std::os::raw::c_void,
        status: IOReturn,
        bufferSizeRemaining: UInt32,
        timeStamp: AbsoluteTime,
    ),
>;
pub type IOUSBIsocCompletionAction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        parameter: *mut ::std::os::raw::c_void,
        status: IOReturn,
        pFrames: *mut IOUSBIsocFrame,
    ),
>;
pub type IOUSBLowLatencyIsocCompletionAction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        parameter: *mut ::std::os::raw::c_void,
        status: IOReturn,
        pFrames: *mut IOUSBLowLatencyIsocFrame,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBCompletion {
    pub target: *mut ::std::os::raw::c_void,
    pub action: IOUSBCompletionAction,
    pub parameter: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_IOUSBCompletion() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBCompletion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBCompletion>(),
        24usize,
        concat!("Size of: ", stringify!(IOUSBCompletion))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBCompletion>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBCompletion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBCompletion), "::", stringify!(target))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBCompletion), "::", stringify!(action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBCompletion), "::", stringify!(parameter))
    );
}
impl Default for IOUSBCompletion {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBCompletionWithTimeStamp {
    pub target: *mut ::std::os::raw::c_void,
    pub action: IOUSBCompletionActionWithTimeStamp,
    pub parameter: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_IOUSBCompletionWithTimeStamp() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBCompletionWithTimeStamp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBCompletionWithTimeStamp>(),
        24usize,
        concat!("Size of: ", stringify!(IOUSBCompletionWithTimeStamp))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBCompletionWithTimeStamp>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBCompletionWithTimeStamp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBCompletionWithTimeStamp),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBCompletionWithTimeStamp),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBCompletionWithTimeStamp),
            "::",
            stringify!(parameter)
        )
    );
}
impl Default for IOUSBCompletionWithTimeStamp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBIsocCompletion {
    pub target: *mut ::std::os::raw::c_void,
    pub action: IOUSBIsocCompletionAction,
    pub parameter: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_IOUSBIsocCompletion() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBIsocCompletion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBIsocCompletion>(),
        24usize,
        concat!("Size of: ", stringify!(IOUSBIsocCompletion))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBIsocCompletion>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBIsocCompletion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocCompletion), "::", stringify!(target))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocCompletion), "::", stringify!(action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocCompletion), "::", stringify!(parameter))
    );
}
impl Default for IOUSBIsocCompletion {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBLowLatencyIsocCompletion {
    pub target: *mut ::std::os::raw::c_void,
    pub action: IOUSBLowLatencyIsocCompletionAction,
    pub parameter: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_IOUSBLowLatencyIsocCompletion() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBLowLatencyIsocCompletion> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBLowLatencyIsocCompletion>(),
        24usize,
        concat!("Size of: ", stringify!(IOUSBLowLatencyIsocCompletion))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBLowLatencyIsocCompletion>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBLowLatencyIsocCompletion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocCompletion),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocCompletion),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocCompletion),
            "::",
            stringify!(parameter)
        )
    );
}
impl Default for IOUSBLowLatencyIsocCompletion {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBMouseData {
    pub buttons: UInt16,
    pub XDelta: SInt16,
    pub YDelta: SInt16,
}
#[test]
fn bindgen_test_layout_IOUSBMouseData() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBMouseData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBMouseData>(),
        6usize,
        concat!("Size of: ", stringify!(IOUSBMouseData))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBMouseData>(),
        2usize,
        concat!("Alignment of ", stringify!(IOUSBMouseData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buttons) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBMouseData), "::", stringify!(buttons))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XDelta) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBMouseData), "::", stringify!(XDelta))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).YDelta) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOUSBMouseData), "::", stringify!(YDelta))
    );
}
pub type IOUSBMouseDataPtr = *mut IOUSBMouseData;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBKeyboardData {
    pub keycount: UInt16,
    pub usbkeycode: [UInt16; 32usize],
}
#[test]
fn bindgen_test_layout_IOUSBKeyboardData() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBKeyboardData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBKeyboardData>(),
        66usize,
        concat!("Size of: ", stringify!(IOUSBKeyboardData))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBKeyboardData>(),
        2usize,
        concat!("Alignment of ", stringify!(IOUSBKeyboardData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keycount) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBKeyboardData), "::", stringify!(keycount))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usbkeycode) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBKeyboardData), "::", stringify!(usbkeycode))
    );
}
pub type IOUSBKeyboardDataPtr = *mut IOUSBKeyboardData;
#[repr(C)]
#[derive(Copy, Clone)]
pub union IOUSBHIDData {
    pub kbd: IOUSBKeyboardData,
    pub mouse: IOUSBMouseData,
}
#[test]
fn bindgen_test_layout_IOUSBHIDData() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBHIDData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBHIDData>(),
        66usize,
        concat!("Size of: ", stringify!(IOUSBHIDData))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBHIDData>(),
        2usize,
        concat!("Alignment of ", stringify!(IOUSBHIDData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kbd) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBHIDData), "::", stringify!(kbd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBHIDData), "::", stringify!(mouse))
    );
}
impl Default for IOUSBHIDData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for IOUSBHIDData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "IOUSBHIDData {{ union }}")
    }
}
pub type IOUSBHIDDataPtr = *mut IOUSBHIDData;
pub type IOUSBDeviceDescriptorPtr = *mut IOUSBDeviceDescriptor;
pub type IOUSBDescriptorHeaderPtr = *mut IOUSBDescriptorHeader;
pub type IOUSBBOSDescriptorPtr = *mut IOUSBBOSDescriptor;
pub type IOUSBDeviceCapabilityDescriptorHeaderPtr = *mut IOUSBDeviceCapabilityDescriptorHeader;
pub type IOUSBDeviceCapabilityUSB2ExtensionPtr = *mut IOUSBDeviceCapabilityUSB2Extension;
pub type IOUSBDeviceCapabilitySuperSpeedUSBPtr = *mut IOUSBDeviceCapabilitySuperSpeedUSB;
pub type IOUSBDeviceCapabilitySuperSpeedPlusUSBPtr = *mut IOUSBDeviceCapabilitySuperSpeedPlusUSB;
pub type IOUSBDeviceCapabilityContainerIDPtr = *mut IOUSBDeviceCapabilityContainerID;
pub type IOUSBPlatformCapabilityDescriptorPtr = *mut IOUSBPlatformCapabilityDescriptor;
pub type IOUSBDeviceCapabilityBillboardAltConfigPtr = *mut IOUSBDeviceCapabilityBillboardAltConfig;
pub type IOUSBDeviceCapabilityBillboardPtr = *mut IOUSBDeviceCapabilityBillboard;
pub type IOUSBDeviceCapabilityBillboardAltModePtr = *mut IOUSBDeviceCapabilityBillboardAltMode;
pub type IOUSBConfigurationDescriptorPtr = *mut IOUSBConfigurationDescriptor;
pub type IOUSBConfigurationDescHeaderPtr = *mut IOUSBConfigurationDescHeader;
pub type IOUSBInterfaceDescriptorPtr = *mut IOUSBInterfaceDescriptor;
pub type IOUSBEndpointDescriptorPtr = *mut IOUSBEndpointDescriptor;
pub type IOUSBStringDescriptorPtr = *mut IOUSBStringDescriptor;
pub type IOUSBSuperSpeedEndpointCompanionDescriptorPtr =
    *mut IOUSBSuperSpeedEndpointCompanionDescriptor;
pub type IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptorPtr =
    *mut IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor;
pub type UASPipeDescriptorPtr = *mut UASPipeDescriptor;
pub type IOUSBHIDDescriptorPtr = *mut IOUSBHIDDescriptor;
pub type IOUSBHIDReportDescPtr = *mut IOUSBHIDReportDesc;
pub type IOUSBDeviceQualifierDescriptorPtr = *mut IOUSBDeviceQualifierDescriptor;
pub type IOUSBDFUDescriptorPtr = *mut IOUSBDFUDescriptor;
pub type IOUSBInterfaceAssociationDescriptorPtr = *mut IOUSBInterfaceAssociationDescriptor;
pub const kIOUSBDeviceCapabilityDescriptorType: _bindgen_ty_124 = 16;
pub const kIOUSBDeviceCapabilityDescriptorLengthMin: _bindgen_ty_124 = 3;
pub type _bindgen_ty_124 = ::std::os::raw::c_uint;
pub const kUSB_EPDesc_bmAttributes_TranType_Mask: _bindgen_ty_125 = 3;
pub const kUSB_EPDesc_bmAttributes_TranType_Shift: _bindgen_ty_125 = 0;
pub const kUSB_EPDesc_bmAttributes_SyncType_Mask: _bindgen_ty_125 = 12;
pub const kUSB_EPDesc_bmAttributes_SyncType_Shift: _bindgen_ty_125 = 2;
pub const kUSB_EPDesc_bmAttributes_UsageType_Mask: _bindgen_ty_125 = 48;
pub const kUSB_EPDesc_bmAttributes_UsageType_Shift: _bindgen_ty_125 = 4;
pub const kUSB_EPDesc_wMaxPacketSize_MPS_Mask: _bindgen_ty_125 = 2047;
pub const kUSB_EPDesc_wMaxPacketSize_MPS_Shift: _bindgen_ty_125 = 0;
pub const kUSB_EPDesc_MaxMPS: _bindgen_ty_125 = 1024;
pub const kUSB_HSFSEPDesc_wMaxPacketSize_Mult_Mask: _bindgen_ty_125 = 6144;
pub const kUSB_HSFSEPDesc_wMaxPacketSize_Mult_Shift: _bindgen_ty_125 = 11;
pub type _bindgen_ty_125 = ::std::os::raw::c_uint;
pub const kUSB_SSCompDesc_Bulk_MaxStreams_Mask: _bindgen_ty_126 = 31;
pub const kUSB_SSCompDesc_Bulk_MaxStreams_Shift: _bindgen_ty_126 = 0;
pub const kUSB_SSCompDesc_Isoc_Mult_Mask: _bindgen_ty_126 = 3;
pub const kUSB_SSCompDesc_Isoc_Mult_Shift: _bindgen_ty_126 = 0;
pub type _bindgen_ty_126 = ::std::os::raw::c_uint;
pub const addPacketShift: _bindgen_ty_127 = 11;
pub type _bindgen_ty_127 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBEndpointProperties {
    pub bVersion: UInt8,
    pub bAlternateSetting: UInt8,
    pub bDirection: UInt8,
    pub bEndpointNumber: UInt8,
    pub bTransferType: UInt8,
    pub bUsageType: UInt8,
    pub bSyncType: UInt8,
    pub bInterval: UInt8,
    pub wMaxPacketSize: UInt16,
    pub bMaxBurst: UInt8,
    pub bMaxStreams: UInt8,
    pub bMult: UInt8,
    pub wBytesPerInterval: UInt16,
}
#[test]
fn bindgen_test_layout_IOUSBEndpointProperties() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBEndpointProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBEndpointProperties>(),
        15usize,
        concat!("Size of: ", stringify!(IOUSBEndpointProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBEndpointProperties>(),
        1usize,
        concat!("Alignment of ", stringify!(IOUSBEndpointProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAlternateSetting) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDirection) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bDirection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEndpointNumber) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bEndpointNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bTransferType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bTransferType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bUsageType) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bUsageType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSyncType) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bSyncType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterval) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wMaxPacketSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(wMaxPacketSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxBurst) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bMaxBurst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxStreams) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(bMaxStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMult) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(IOUSBEndpointProperties), "::", stringify!(bMult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wBytesPerInterval) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBEndpointProperties),
            "::",
            stringify!(wBytesPerInterval)
        )
    );
}
pub type IOUSBEndpointPropertiesPtr = *mut IOUSBEndpointProperties;
pub const kUSBEndpointPropertiesVersion3: _bindgen_ty_128 = 3;
pub type _bindgen_ty_128 = ::std::os::raw::c_uint;
pub type USBStatus = UInt16;
pub type USBStatusPtr = *mut USBStatus;
pub const kIOUSBAnyClass: _bindgen_ty_129 = 65535;
pub const kIOUSBAnySubClass: _bindgen_ty_129 = 65535;
pub const kIOUSBAnyProtocol: _bindgen_ty_129 = 65535;
pub const kIOUSBAnyVendor: _bindgen_ty_129 = 65535;
pub const kIOUSBAnyProduct: _bindgen_ty_129 = 65535;
pub type _bindgen_ty_129 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBMatch {
    pub usbClass: UInt16,
    pub usbSubClass: UInt16,
    pub usbProtocol: UInt16,
    pub usbVendor: UInt16,
    pub usbProduct: UInt16,
}
#[test]
fn bindgen_test_layout_IOUSBMatch() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBMatch> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBMatch>(),
        10usize,
        concat!("Size of: ", stringify!(IOUSBMatch))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBMatch>(),
        2usize,
        concat!("Alignment of ", stringify!(IOUSBMatch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usbClass) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBMatch), "::", stringify!(usbClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usbSubClass) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBMatch), "::", stringify!(usbSubClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usbProtocol) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOUSBMatch), "::", stringify!(usbProtocol))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usbVendor) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(IOUSBMatch), "::", stringify!(usbVendor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usbProduct) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBMatch), "::", stringify!(usbProduct))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBFindEndpointRequest {
    pub type_: UInt8,
    pub direction: UInt8,
    pub maxPacketSize: UInt16,
    pub interval: UInt8,
}
#[test]
fn bindgen_test_layout_IOUSBFindEndpointRequest() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBFindEndpointRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBFindEndpointRequest>(),
        6usize,
        concat!("Size of: ", stringify!(IOUSBFindEndpointRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBFindEndpointRequest>(),
        2usize,
        concat!("Alignment of ", stringify!(IOUSBFindEndpointRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBFindEndpointRequest), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBFindEndpointRequest),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPacketSize) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBFindEndpointRequest),
            "::",
            stringify!(maxPacketSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBFindEndpointRequest),
            "::",
            stringify!(interval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDevRequest {
    pub bmRequestType: UInt8,
    pub bRequest: UInt8,
    pub wValue: UInt16,
    pub wIndex: UInt16,
    pub wLength: UInt16,
    pub pData: *mut ::std::os::raw::c_void,
    pub wLenDone: UInt32,
}
#[test]
fn bindgen_test_layout_IOUSBDevRequest() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDevRequest> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDevRequest>(),
        24usize,
        concat!("Size of: ", stringify!(IOUSBDevRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDevRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDevRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmRequestType) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequest), "::", stringify!(bmRequestType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequest) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequest), "::", stringify!(bRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wValue) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequest), "::", stringify!(wValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wIndex) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequest), "::", stringify!(wIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLength) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequest), "::", stringify!(wLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequest), "::", stringify!(pData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLenDone) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequest), "::", stringify!(wLenDone))
    );
}
impl Default for IOUSBDevRequest {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceRequestPtr = *mut IOUSBDevRequest;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDevRequestTO {
    pub bmRequestType: UInt8,
    pub bRequest: UInt8,
    pub wValue: UInt16,
    pub wIndex: UInt16,
    pub wLength: UInt16,
    pub pData: *mut ::std::os::raw::c_void,
    pub wLenDone: UInt32,
    pub noDataTimeout: UInt32,
    pub completionTimeout: UInt32,
}
#[test]
fn bindgen_test_layout_IOUSBDevRequestTO() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDevRequestTO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDevRequestTO>(),
        32usize,
        concat!("Size of: ", stringify!(IOUSBDevRequestTO))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDevRequestTO>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDevRequestTO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmRequestType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDevRequestTO),
            "::",
            stringify!(bmRequestType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequest) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequestTO), "::", stringify!(bRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wValue) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequestTO), "::", stringify!(wValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wIndex) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequestTO), "::", stringify!(wIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLength) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequestTO), "::", stringify!(wLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequestTO), "::", stringify!(pData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLenDone) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDevRequestTO), "::", stringify!(wLenDone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noDataTimeout) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDevRequestTO),
            "::",
            stringify!(noDataTimeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completionTimeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDevRequestTO),
            "::",
            stringify!(completionTimeout)
        )
    );
}
impl Default for IOUSBDevRequestTO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const kUSBDefaultControlNoDataTimeoutMS: _bindgen_ty_130 = 5000;
pub const kUSBDefaultControlCompletionTimeoutMS: _bindgen_ty_130 = 0;
pub type _bindgen_ty_130 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBBulkPipeReq {
    pub pipeRef: UInt32,
    pub buf: *mut ::std::os::raw::c_void,
    pub size: UInt32,
    pub noDataTimeout: UInt32,
    pub completionTimeout: UInt32,
}
#[test]
fn bindgen_test_layout_IOUSBBulkPipeReq() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBBulkPipeReq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBBulkPipeReq>(),
        32usize,
        concat!("Size of: ", stringify!(IOUSBBulkPipeReq))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBBulkPipeReq>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBBulkPipeReq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeRef) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBBulkPipeReq), "::", stringify!(pipeRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBBulkPipeReq), "::", stringify!(buf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBBulkPipeReq), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noDataTimeout) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(IOUSBBulkPipeReq), "::", stringify!(noDataTimeout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completionTimeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBBulkPipeReq),
            "::",
            stringify!(completionTimeout)
        )
    );
}
impl Default for IOUSBBulkPipeReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDevReqOOL {
    pub bmRequestType: UInt8,
    pub bRequest: UInt8,
    pub wValue: UInt16,
    pub wIndex: UInt16,
    pub wLength: UInt16,
    pub pData: *mut ::std::os::raw::c_void,
    pub wLenDone: UInt32,
    pub pipeRef: UInt8,
}
#[test]
fn bindgen_test_layout_IOUSBDevReqOOL() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDevReqOOL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDevReqOOL>(),
        24usize,
        concat!("Size of: ", stringify!(IOUSBDevReqOOL))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDevReqOOL>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDevReqOOL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmRequestType) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOL), "::", stringify!(bmRequestType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequest) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOL), "::", stringify!(bRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wValue) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOL), "::", stringify!(wValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wIndex) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOL), "::", stringify!(wIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLength) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOL), "::", stringify!(wLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOL), "::", stringify!(pData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLenDone) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOL), "::", stringify!(wLenDone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeRef) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOL), "::", stringify!(pipeRef))
    );
}
impl Default for IOUSBDevReqOOL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDevReqOOLTO {
    pub bmRequestType: UInt8,
    pub bRequest: UInt8,
    pub wValue: UInt16,
    pub wIndex: UInt16,
    pub wLength: UInt16,
    pub pData: *mut ::std::os::raw::c_void,
    pub wLenDone: UInt32,
    pub pipeRef: UInt8,
    pub noDataTimeout: UInt32,
    pub completionTimeout: UInt32,
}
#[test]
fn bindgen_test_layout_IOUSBDevReqOOLTO() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDevReqOOLTO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDevReqOOLTO>(),
        32usize,
        concat!("Size of: ", stringify!(IOUSBDevReqOOLTO))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDevReqOOLTO>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDevReqOOLTO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmRequestType) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOLTO), "::", stringify!(bmRequestType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequest) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOLTO), "::", stringify!(bRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wValue) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOLTO), "::", stringify!(wValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wIndex) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOLTO), "::", stringify!(wIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLength) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOLTO), "::", stringify!(wLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOLTO), "::", stringify!(pData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLenDone) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOLTO), "::", stringify!(wLenDone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeRef) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOLTO), "::", stringify!(pipeRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noDataTimeout) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDevReqOOLTO), "::", stringify!(noDataTimeout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completionTimeout) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDevReqOOLTO),
            "::",
            stringify!(completionTimeout)
        )
    );
}
impl Default for IOUSBDevReqOOLTO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBIsocStruct {
    pub fPipe: UInt32,
    pub fBuffer: *mut ::std::os::raw::c_void,
    pub fBufSize: UInt32,
    pub fStartFrame: UInt64,
    pub fNumFrames: UInt32,
    pub fFrameCounts: *mut IOUSBIsocFrame,
}
#[test]
fn bindgen_test_layout_IOUSBIsocStruct() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBIsocStruct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBIsocStruct>(),
        48usize,
        concat!("Size of: ", stringify!(IOUSBIsocStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBIsocStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBIsocStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fPipe) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocStruct), "::", stringify!(fPipe))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fBuffer) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocStruct), "::", stringify!(fBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fBufSize) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocStruct), "::", stringify!(fBufSize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fStartFrame) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocStruct), "::", stringify!(fStartFrame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fNumFrames) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocStruct), "::", stringify!(fNumFrames))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fFrameCounts) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(IOUSBIsocStruct), "::", stringify!(fFrameCounts))
    );
}
impl Default for IOUSBIsocStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBLowLatencyIsocStruct {
    pub fPipe: UInt32,
    pub fBufSize: UInt32,
    pub fStartFrame: UInt64,
    pub fNumFrames: UInt32,
    pub fUpdateFrequency: UInt32,
    pub fDataBufferCookie: UInt32,
    pub fDataBufferOffset: UInt32,
    pub fFrameListBufferCookie: UInt32,
    pub fFrameListBufferOffset: UInt32,
}
#[test]
fn bindgen_test_layout_IOUSBLowLatencyIsocStruct() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBLowLatencyIsocStruct> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBLowLatencyIsocStruct>(),
        40usize,
        concat!("Size of: ", stringify!(IOUSBLowLatencyIsocStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBLowLatencyIsocStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBLowLatencyIsocStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fPipe) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocStruct),
            "::",
            stringify!(fPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fBufSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocStruct),
            "::",
            stringify!(fBufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fStartFrame) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocStruct),
            "::",
            stringify!(fStartFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fNumFrames) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocStruct),
            "::",
            stringify!(fNumFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fUpdateFrequency) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocStruct),
            "::",
            stringify!(fUpdateFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fDataBufferCookie) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocStruct),
            "::",
            stringify!(fDataBufferCookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fDataBufferOffset) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocStruct),
            "::",
            stringify!(fDataBufferOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fFrameListBufferCookie) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocStruct),
            "::",
            stringify!(fFrameListBufferCookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fFrameListBufferOffset) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBLowLatencyIsocStruct),
            "::",
            stringify!(fFrameListBufferOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBGetFrameStruct {
    pub frame: UInt64,
    pub timeStamp: AbsoluteTime,
}
#[test]
fn bindgen_test_layout_IOUSBGetFrameStruct() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBGetFrameStruct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBGetFrameStruct>(),
        16usize,
        concat!("Size of: ", stringify!(IOUSBGetFrameStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBGetFrameStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBGetFrameStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBGetFrameStruct), "::", stringify!(frame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeStamp) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IOUSBGetFrameStruct), "::", stringify!(timeStamp))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IOUSBFindInterfaceRequest {
    pub bInterfaceClass: UInt16,
    pub bInterfaceSubClass: UInt16,
    pub bInterfaceProtocol: UInt16,
    pub bAlternateSetting: UInt16,
}
#[test]
fn bindgen_test_layout_IOUSBFindInterfaceRequest() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBFindInterfaceRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBFindInterfaceRequest>(),
        8usize,
        concat!("Size of: ", stringify!(IOUSBFindInterfaceRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBFindInterfaceRequest>(),
        2usize,
        concat!("Alignment of ", stringify!(IOUSBFindInterfaceRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceClass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBFindInterfaceRequest),
            "::",
            stringify!(bInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceSubClass) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBFindInterfaceRequest),
            "::",
            stringify!(bInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceProtocol) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBFindInterfaceRequest),
            "::",
            stringify!(bInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAlternateSetting) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBFindInterfaceRequest),
            "::",
            stringify!(bAlternateSetting)
        )
    );
}
pub const kIOUSBFindInterfaceDontCare: _bindgen_ty_131 = 65535;
pub type _bindgen_ty_131 = ::std::os::raw::c_uint;
pub const kIOUSBVendorIDAppleComputer: _bindgen_ty_132 = 1452;
pub const kIOUSBVendorIDApple: _bindgen_ty_132 = 1452;
pub type _bindgen_ty_132 = ::std::os::raw::c_uint;
pub const kUSBDeviceSpeedLow: _bindgen_ty_133 = 0;
pub const kUSBDeviceSpeedFull: _bindgen_ty_133 = 1;
pub const kUSBDeviceSpeedHigh: _bindgen_ty_133 = 2;
pub const kUSBDeviceSpeedSuper: _bindgen_ty_133 = 3;
pub const kUSBDeviceSpeedSuperPlus: _bindgen_ty_133 = 4;
pub const kUSBDeviceSpeedSuperPlusBy2: _bindgen_ty_133 = 5;
pub type _bindgen_ty_133 = ::std::os::raw::c_uint;
pub const kUSBFullSpeedMicrosecondsInFrame: _bindgen_ty_134 = 1000;
pub const kUSBHighSpeedMicrosecondsInFrame: _bindgen_ty_134 = 125;
pub type _bindgen_ty_134 = ::std::os::raw::c_uint;
pub const kUSBLowLatencyIsochTransferKey: _bindgen_ty_135 = 1819044212;
pub type _bindgen_ty_135 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LowLatencyUserBufferInfo {
    pub cookie: UInt32,
    pub bufferAddress: *mut ::std::os::raw::c_void,
    pub bufferSize: IOByteCount,
    pub bufferType: UInt32,
    pub isPrepared: Boolean,
    pub nextBuffer: *mut LowLatencyUserBufferInfo,
}
#[test]
fn bindgen_test_layout_LowLatencyUserBufferInfo() {
    const UNINIT: ::std::mem::MaybeUninit<LowLatencyUserBufferInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LowLatencyUserBufferInfo>(),
        40usize,
        concat!("Size of: ", stringify!(LowLatencyUserBufferInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<LowLatencyUserBufferInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(LowLatencyUserBufferInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfo),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferAddress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfo),
            "::",
            stringify!(bufferAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfo),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferType) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfo),
            "::",
            stringify!(bufferType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPrepared) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfo),
            "::",
            stringify!(isPrepared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfo),
            "::",
            stringify!(nextBuffer)
        )
    );
}
impl Default for LowLatencyUserBufferInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LowLatencyUserBufferInfoV2 {
    pub cookie: UInt32,
    pub bufferAddress: *mut ::std::os::raw::c_void,
    pub bufferSize: IOByteCount,
    pub bufferType: UInt32,
    pub isPrepared: Boolean,
    pub mappedUHCIAddress: *mut ::std::os::raw::c_void,
    pub nextBuffer: *mut LowLatencyUserBufferInfoV2,
}
#[test]
fn bindgen_test_layout_LowLatencyUserBufferInfoV2() {
    const UNINIT: ::std::mem::MaybeUninit<LowLatencyUserBufferInfoV2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LowLatencyUserBufferInfoV2>(),
        48usize,
        concat!("Size of: ", stringify!(LowLatencyUserBufferInfoV2))
    );
    assert_eq!(
        ::std::mem::align_of::<LowLatencyUserBufferInfoV2>(),
        8usize,
        concat!("Alignment of ", stringify!(LowLatencyUserBufferInfoV2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV2),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferAddress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV2),
            "::",
            stringify!(bufferAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV2),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferType) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV2),
            "::",
            stringify!(bufferType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPrepared) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV2),
            "::",
            stringify!(isPrepared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mappedUHCIAddress) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV2),
            "::",
            stringify!(mappedUHCIAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextBuffer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV2),
            "::",
            stringify!(nextBuffer)
        )
    );
}
impl Default for LowLatencyUserBufferInfoV2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LowLatencyUserBufferInfoV3 {
    pub cookie: u64,
    pub bufferAddress: mach_vm_address_t,
    pub bufferSize: mach_vm_size_t,
    pub bufferType: u64,
    pub isPrepared: u64,
    pub mappedUHCIAddress: mach_vm_address_t,
    pub nextBuffer: *mut LowLatencyUserBufferInfoV3,
}
#[test]
fn bindgen_test_layout_LowLatencyUserBufferInfoV3() {
    const UNINIT: ::std::mem::MaybeUninit<LowLatencyUserBufferInfoV3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LowLatencyUserBufferInfoV3>(),
        56usize,
        concat!("Size of: ", stringify!(LowLatencyUserBufferInfoV3))
    );
    assert_eq!(
        ::std::mem::align_of::<LowLatencyUserBufferInfoV3>(),
        8usize,
        concat!("Alignment of ", stringify!(LowLatencyUserBufferInfoV3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV3),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferAddress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV3),
            "::",
            stringify!(bufferAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV3),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV3),
            "::",
            stringify!(bufferType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPrepared) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV3),
            "::",
            stringify!(isPrepared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mappedUHCIAddress) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV3),
            "::",
            stringify!(mappedUHCIAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextBuffer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(LowLatencyUserBufferInfoV3),
            "::",
            stringify!(nextBuffer)
        )
    );
}
impl Default for LowLatencyUserBufferInfoV3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const USBLowLatencyBufferType_kUSBLowLatencyWriteBuffer: USBLowLatencyBufferType = 0;
pub const USBLowLatencyBufferType_kUSBLowLatencyReadBuffer: USBLowLatencyBufferType = 1;
pub const USBLowLatencyBufferType_kUSBLowLatencyFrameListBuffer: USBLowLatencyBufferType = 2;
pub type USBLowLatencyBufferType = ::std::os::raw::c_uint;
pub const kUSBNoUserNotificationType: _bindgen_ty_136 = 0;
pub const kUSBNotEnoughPowerNotificationType: _bindgen_ty_136 = 1;
pub const kUSBIndividualOverCurrentNotificationType: _bindgen_ty_136 = 2;
pub const kUSBGangOverCurrentNotificationType: _bindgen_ty_136 = 3;
pub const kUSBiOSDeviceNotEnoughPowerNotificationType: _bindgen_ty_136 = 4;
pub const kUSBNotEnoughPowerNoACNotificationType: _bindgen_ty_136 = 5;
pub const kUSBDeviceCountExceededNotificationType: _bindgen_ty_136 = 6;
pub const kUSBEndpointCountExceededNotificationType: _bindgen_ty_136 = 7;
pub const kUSBUnsupportedNotificationType: _bindgen_ty_136 = 8;
pub const kUSBHubCountExceededNotificationType: _bindgen_ty_136 = 9;
pub const kUSBTDMLowBatteryType: _bindgen_ty_136 = 10;
pub const kUSBCTBNotEnoughPowerNotificationType: _bindgen_ty_136 = 11;
pub const kUSBCTBUnsupportedNotificationType: _bindgen_ty_136 = 12;
pub const kUSBCUnsupportedTBPortNotificationType: _bindgen_ty_136 = 13;
pub const kUSBCUnsupportedTBCableNotificationType: _bindgen_ty_136 = 14;
pub type _bindgen_ty_136 = ::std::os::raw::c_uint;
pub const USBReEnumerateOptions_kUSBAddExtraResetTimeBit: USBReEnumerateOptions = 31;
pub const USBReEnumerateOptions_kUSBReEnumerateCaptureDeviceBit: USBReEnumerateOptions = 30;
pub const USBReEnumerateOptions_kUSBReEnumerateReleaseDeviceBit: USBReEnumerateOptions = 29;
pub const USBReEnumerateOptions_kUSBAddExtraResetTimeMask: USBReEnumerateOptions = -2147483648;
pub const USBReEnumerateOptions_kUSBReEnumerateCaptureDeviceMask: USBReEnumerateOptions =
    1073741824;
pub const USBReEnumerateOptions_kUSBReEnumerateReleaseDeviceMask: USBReEnumerateOptions = 536870912;
pub type USBReEnumerateOptions = ::std::os::raw::c_int;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsCaptiveBit: USBDeviceInformationBits = 0;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsAttachedToRootHubBit:
    USBDeviceInformationBits = 1;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsInternalBit: USBDeviceInformationBits = 2;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsConnectedBit: USBDeviceInformationBits =
    3;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsEnabledBit: USBDeviceInformationBits = 4;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsSuspendedBit: USBDeviceInformationBits =
    5;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsInResetBit: USBDeviceInformationBits = 6;
pub const USBDeviceInformationBits_kUSBInformationDeviceOvercurrentBit: USBDeviceInformationBits =
    7;
pub const USBDeviceInformationBits_kUSBInformationDevicePortIsInTestModeBit:
    USBDeviceInformationBits = 8;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsRootHub: USBDeviceInformationBits = 9;
pub const USBDeviceInformationBits_kUSBInformationRootHubisBuiltIn: USBDeviceInformationBits = 10;
pub const USBDeviceInformationBits_kUSBInformationRootHubIsBuiltInBit: USBDeviceInformationBits =
    10;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsRemote: USBDeviceInformationBits = 11;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsAttachedToEnclosure:
    USBDeviceInformationBits = 12;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsOnThunderboltBit:
    USBDeviceInformationBits = 13;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsCaptiveMask: USBDeviceInformationBits = 1;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsAttachedToRootHubMask:
    USBDeviceInformationBits = 2;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsInternalMask: USBDeviceInformationBits =
    4;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsConnectedMask: USBDeviceInformationBits =
    8;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsEnabledMask: USBDeviceInformationBits =
    16;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsSuspendedMask: USBDeviceInformationBits =
    32;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsInResetMask: USBDeviceInformationBits =
    64;
pub const USBDeviceInformationBits_kUSBInformationDeviceOvercurrentMask: USBDeviceInformationBits =
    128;
pub const USBDeviceInformationBits_kUSBInformationDevicePortIsInTestModeMask:
    USBDeviceInformationBits = 256;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsRootHubMask: USBDeviceInformationBits =
    512;
pub const USBDeviceInformationBits_kUSBInformationRootHubisBuiltInMask: USBDeviceInformationBits =
    1024;
pub const USBDeviceInformationBits_kUSBInformationRootHubIsBuiltInMask: USBDeviceInformationBits =
    1024;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsRemoteMask: USBDeviceInformationBits =
    2048;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsAttachedToEnclosureMask:
    USBDeviceInformationBits = 4096;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsOnThunderboltMask:
    USBDeviceInformationBits = 8192;
pub type USBDeviceInformationBits = ::std::os::raw::c_uint;
pub const USBPowerRequestTypes_kUSBPowerDuringSleep: USBPowerRequestTypes = 0;
pub const USBPowerRequestTypes_kUSBPowerDuringWake: USBPowerRequestTypes = 1;
pub const USBPowerRequestTypes_kUSBPowerRequestWakeRelease: USBPowerRequestTypes = 2;
pub const USBPowerRequestTypes_kUSBPowerRequestSleepRelease: USBPowerRequestTypes = 3;
pub const USBPowerRequestTypes_kUSBPowerRequestWakeReallocate: USBPowerRequestTypes = 4;
pub const USBPowerRequestTypes_kUSBPowerRequestSleepReallocate: USBPowerRequestTypes = 5;
pub const USBPowerRequestTypes_kUSBPowerDuringWakeRevocable: USBPowerRequestTypes = 6;
pub const USBPowerRequestTypes_kUSBPowerDuringWakeUSB3: USBPowerRequestTypes = 7;
pub type USBPowerRequestTypes = ::std::os::raw::c_uint;
pub const kUSBNotificationPreForcedSuspendBit: _bindgen_ty_137 = 0;
pub const kUSBNotificationPostForcedSuspendBit: _bindgen_ty_137 = 1;
pub const kUSBNotificationPreForcedResumeBit: _bindgen_ty_137 = 2;
pub const kUSBNotificationPostForcedResumeBit: _bindgen_ty_137 = 3;
pub type _bindgen_ty_137 = ::std::os::raw::c_uint;
pub const USBNotificationTypes_kUSBNotificationPreForcedSuspend: USBNotificationTypes = 1;
pub const USBNotificationTypes_kUSBNotificationPostForcedSuspend: USBNotificationTypes = 2;
pub const USBNotificationTypes_kUSBNotificationPreForcedResume: USBNotificationTypes = 4;
pub const USBNotificationTypes_kUSBNotificationPostForcedResume: USBNotificationTypes = 8;
pub type USBNotificationTypes = ::std::os::raw::c_uint;
pub const kUSBConnectable_kUSBPortNotConnectable: kUSBConnectable = 0;
pub const kUSBConnectable_kUSBPortConnectable: kUSBConnectable = 1;
pub type kUSBConnectable = ::std::os::raw::c_uint;
pub const kUSBHostConnectorType_kUSBTypeAConnector: kUSBHostConnectorType = 0;
pub const kUSBHostConnectorType_kUSBTypeMiniABConnector: kUSBHostConnectorType = 1;
pub const kUSBHostConnectorType_kUSBTypeExpressCard: kUSBHostConnectorType = 2;
pub const kUSBHostConnectorType_kUSB3TypeStdAConnector: kUSBHostConnectorType = 3;
pub const kUSBHostConnectorType_kUSB3TypeStdBConnector: kUSBHostConnectorType = 4;
pub const kUSBHostConnectorType_kUSB3TypeMicroBConnector: kUSBHostConnectorType = 5;
pub const kUSBHostConnectorType_kUSB3TypeMicroABConnector: kUSBHostConnectorType = 6;
pub const kUSBHostConnectorType_kUSB3TypePowerBConnector: kUSBHostConnectorType = 7;
pub const kUSBHostConnectorType_kUSBProprietaryConnector: kUSBHostConnectorType = 255;
pub type kUSBHostConnectorType = ::std::os::raw::c_uint;
pub const kUSBSpeed_Mask: _bindgen_ty_138 = 3;
pub const kUSBSpeed_Shift: _bindgen_ty_138 = 0;
pub const kUSBAddress_Mask: _bindgen_ty_138 = 65280;
pub const kUSBAddress_Shift: _bindgen_ty_138 = 8;
pub type _bindgen_ty_138 = ::std::os::raw::c_uint;
pub const kXHCISSRootHubAddress: _bindgen_ty_139 = 128;
pub const kXHCIUSB2RootHubAddress: _bindgen_ty_139 = 129;
pub const kSuperSpeedBusBitMask: _bindgen_ty_139 = 16777216;
pub type _bindgen_ty_139 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct100 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct100() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct100> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct100>(),
        232usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct100))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct100>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct100))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct100), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct100), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct100), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct100),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
}
impl Default for IOUSBDeviceStruct100 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface100 = IOUSBDeviceStruct100;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct182 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct182() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct182> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct182>(),
        296usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct182))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct182>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct182))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct182), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct182), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct182), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct182),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
}
impl Default for IOUSBDeviceStruct182 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface182 = IOUSBDeviceStruct182;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct187 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct187() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct187> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct187>(),
        304usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct187))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct187>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct187))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct187), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct187), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct187), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceReEnumerate) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct187),
            "::",
            stringify!(USBDeviceReEnumerate)
        )
    );
}
impl Default for IOUSBDeviceStruct187 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface187 = IOUSBDeviceStruct187;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct197 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct197() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct197> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct197>(),
        320usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct197))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct197>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct197))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct197), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct197), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct197), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceReEnumerate) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(USBDeviceReEnumerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct197),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
}
impl Default for IOUSBDeviceStruct197 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface197 = IOUSBDeviceStruct197;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct245 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct245() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct245> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct245>(),
        320usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct245))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct245>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct245))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct245), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct245), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct245), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceReEnumerate) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(USBDeviceReEnumerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct245),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
}
impl Default for IOUSBDeviceStruct245 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface245 = IOUSBDeviceStruct245;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct300 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct300() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct300> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct300>(),
        328usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct300))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct300>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct300))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct300), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct300), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct300), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceReEnumerate) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(USBDeviceReEnumerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct300),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
}
impl Default for IOUSBDeviceStruct300 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface300 = IOUSBDeviceStruct300;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct320 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct320() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct320> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct320>(),
        360usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct320))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct320>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct320))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct320), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct320), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct320), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceReEnumerate) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(USBDeviceReEnumerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetUSBDeviceInformation) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetUSBDeviceInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequestExtraPower) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(RequestExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnExtraPower) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(ReturnExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetExtraPowerAllocated) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct320),
            "::",
            stringify!(GetExtraPowerAllocated)
        )
    );
}
impl Default for IOUSBDeviceStruct320 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface320 = IOUSBDeviceStruct320;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct400 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct400() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct400> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct400>(),
        360usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct400))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct400>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct400))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct400), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct400), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct400), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceReEnumerate) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(USBDeviceReEnumerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetUSBDeviceInformation) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetUSBDeviceInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequestExtraPower) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(RequestExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnExtraPower) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(ReturnExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetExtraPowerAllocated) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct400),
            "::",
            stringify!(GetExtraPowerAllocated)
        )
    );
}
impl Default for IOUSBDeviceStruct400 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface400 = IOUSBDeviceStruct400;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct500 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailableForDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct500() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct500> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct500>(),
        368usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct500))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct500>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct500))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct500), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct500), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct500), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceReEnumerate) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(USBDeviceReEnumerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetUSBDeviceInformation) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetUSBDeviceInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequestExtraPower) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(RequestExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnExtraPower) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(ReturnExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetExtraPowerAllocated) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetExtraPowerAllocated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetBandwidthAvailableForDevice) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct500),
            "::",
            stringify!(GetBandwidthAvailableForDevice)
        )
    );
}
impl Default for IOUSBDeviceStruct500 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface500 = IOUSBDeviceStruct500;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct650 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailableForDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub SetConfigurationV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configNum: UInt8,
            startInterfaceMatching: bool,
            issueRemoteWakeup: bool,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct650() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct650> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct650>(),
        400usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct650))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct650>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct650))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct650), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct650), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct650), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceReEnumerate) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(USBDeviceReEnumerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetUSBDeviceInformation) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetUSBDeviceInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequestExtraPower) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(RequestExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnExtraPower) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(ReturnExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetExtraPowerAllocated) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetExtraPowerAllocated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetBandwidthAvailableForDevice) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(GetBandwidthAvailableForDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfigurationV2) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(SetConfigurationV2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterForNotification) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(RegisterForNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnregisterNotification) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(UnregisterNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcknowledgeNotification) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct650),
            "::",
            stringify!(AcknowledgeNotification)
        )
    );
}
impl Default for IOUSBDeviceStruct650 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface650 = IOUSBDeviceStruct650;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct942 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailableForDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub SetConfigurationV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configNum: UInt8,
            startInterfaceMatching: bool,
            issueRemoteWakeup: bool,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncNotificationPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IONotificationPortRef,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBDeviceStruct942() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBDeviceStruct942> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBDeviceStruct942>(),
        408usize,
        concat!("Size of: ", stringify!(IOUSBDeviceStruct942))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBDeviceStruct942>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBDeviceStruct942))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct942), "::", stringify!(_reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct942), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(IOUSBDeviceStruct942), "::", stringify!(Release))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(CreateDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncEventSource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDeviceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(CreateDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(USBDeviceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(USBDeviceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceAddress) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceBusPowerAvailable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceBusPowerAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceSpeed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumberOfConfigurations) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetNumberOfConfigurations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetConfigurationDescriptorPtr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetConfigurationDescriptorPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguration) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfiguration) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(SetConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetDevice) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(ResetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequest) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(DeviceRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsync) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(DeviceRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceIterator) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(CreateInterfaceIterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceOpenSeize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(USBDeviceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestTO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(DeviceRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRequestAsyncTO) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(DeviceRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceSuspend) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(USBDeviceSuspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceAbortPipeZero) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(USBDeviceAbortPipeZero)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetManufacturerStringIndex) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(USBGetManufacturerStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBGetProductStringIndex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(USBGetProductStringIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).USBGetSerialNumberStringIndex) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(USBGetSerialNumberStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBDeviceReEnumerate) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(USBDeviceReEnumerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetUSBDeviceInformation) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetUSBDeviceInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequestExtraPower) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(RequestExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnExtraPower) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(ReturnExtraPower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetExtraPowerAllocated) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetExtraPowerAllocated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetBandwidthAvailableForDevice) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetBandwidthAvailableForDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetConfigurationV2) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(SetConfigurationV2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterForNotification) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(RegisterForNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnregisterNotification) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(UnregisterNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcknowledgeNotification) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(AcknowledgeNotification)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetDeviceAsyncNotificationPort) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBDeviceStruct942),
            "::",
            stringify!(GetDeviceAsyncNotificationPort)
        )
    );
}
impl Default for IOUSBDeviceStruct942 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBDeviceInterface942 = IOUSBDeviceStruct942;
pub type IOUSBDeviceInterface = IOUSBDeviceInterface942;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct100 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct100() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct100> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct100>(),
        296usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct100))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct100>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct100))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct100), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct100),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
}
impl Default for IOUSBInterfaceStruct100 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface100 = IOUSBInterfaceStruct100;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct182 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct182() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct182> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct182>(),
        352usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct182))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct182>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct182))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct182), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct182),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
}
impl Default for IOUSBInterfaceStruct182 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface182 = IOUSBInterfaceStruct182;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct183 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct183() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct183> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct183>(),
        360usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct183))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct183>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct183))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct183), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct183),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
}
impl Default for IOUSBInterfaceStruct183 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface183 = IOUSBInterfaceStruct183;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct190 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct190() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct190> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct190>(),
        392usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct190))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct190>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct190))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct190), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct190),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
}
impl Default for IOUSBInterfaceStruct190 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface190 = IOUSBInterfaceStruct190;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct192 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct192() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct192> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct192>(),
        424usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct192))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct192>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct192))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct192), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct192),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
}
impl Default for IOUSBInterfaceStruct192 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface192 = IOUSBInterfaceStruct192;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct197 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct197() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct197> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct197>(),
        448usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct197))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct197>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct197))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct197), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct197),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
}
impl Default for IOUSBInterfaceStruct197 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface197 = IOUSBInterfaceStruct197;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct220 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct220() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct220> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct220>(),
        464usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct220))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct220>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct220))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct220), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct220),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
}
impl Default for IOUSBInterfaceStruct220 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface220 = IOUSBInterfaceStruct220;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct245 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct245() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct245> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct245>(),
        464usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct245))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct245>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct245))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct245), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct245),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
}
impl Default for IOUSBInterfaceStruct245 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface245 = IOUSBInterfaceStruct245;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct300 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct300() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct300> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct300>(),
        472usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct300))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct300>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct300))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct300), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct300),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
}
impl Default for IOUSBInterfaceStruct300 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface300 = IOUSBInterfaceStruct300;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct398 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct398() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct398> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct398>(),
        472usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct398))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct398>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct398))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct398), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct398),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
}
impl Default for IOUSBInterfaceStruct398 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface398 = IOUSBInterfaceStruct398;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct400 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct400() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct400> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct400>(),
        472usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct400))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct400>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct400))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct400), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct400),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
}
impl Default for IOUSBInterfaceStruct400 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface400 = IOUSBInterfaceStruct400;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct500 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct500() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct500> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct500>(),
        480usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct500))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct500>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct500))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct500), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV2) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct500),
            "::",
            stringify!(GetPipePropertiesV2)
        )
    );
}
impl Default for IOUSBInterfaceStruct500 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface500 = IOUSBInterfaceStruct500;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct550 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct550() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct550> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct550>(),
        560usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct550))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct550>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct550))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct550), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV2) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetPipePropertiesV2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV3) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetPipePropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointPropertiesV3) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetEndpointPropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SupportsStreams) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(SupportsStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateStreams) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(CreateStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguredStreams) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(GetConfiguredStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeTO) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ReadStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeTO) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(WriteStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeAsyncTO) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(ReadStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeAsyncTO) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(WriteStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortStreamsPipe) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct550),
            "::",
            stringify!(AbortStreamsPipe)
        )
    );
}
impl Default for IOUSBInterfaceStruct550 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface550 = IOUSBInterfaceStruct550;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct650 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct650() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct650> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct650>(),
        584usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct650))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct650>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct650))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct650), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV2) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetPipePropertiesV2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV3) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetPipePropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointPropertiesV3) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetEndpointPropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SupportsStreams) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(SupportsStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateStreams) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(CreateStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguredStreams) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(GetConfiguredStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeTO) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ReadStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeTO) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(WriteStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeAsyncTO) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(ReadStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeAsyncTO) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(WriteStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortStreamsPipe) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(AbortStreamsPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterForNotification) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(RegisterForNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnregisterNotification) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(UnregisterNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcknowledgeNotification) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct650),
            "::",
            stringify!(AcknowledgeNotification)
        )
    );
}
impl Default for IOUSBInterfaceStruct650 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface650 = IOUSBInterfaceStruct650;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct700 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
    pub RegisterDriver:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct700() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct700> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct700>(),
        592usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct700))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct700>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct700))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct700), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV2) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetPipePropertiesV2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV3) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetPipePropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointPropertiesV3) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetEndpointPropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SupportsStreams) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(SupportsStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateStreams) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(CreateStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguredStreams) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(GetConfiguredStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeTO) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ReadStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeTO) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(WriteStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeAsyncTO) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(ReadStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeAsyncTO) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(WriteStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortStreamsPipe) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(AbortStreamsPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterForNotification) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(RegisterForNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnregisterNotification) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(UnregisterNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcknowledgeNotification) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(AcknowledgeNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterDriver) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct700),
            "::",
            stringify!(RegisterDriver)
        )
    );
}
impl Default for IOUSBInterfaceStruct700 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface700 = IOUSBInterfaceStruct700;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct800 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
    pub RegisterDriver:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub SetDeviceIdlePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            deviceIdleTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub SetPipeIdlePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            ioIdleTimeout: UInt32,
        ) -> IOReturn,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct800() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct800> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct800>(),
        608usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct800))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct800>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct800))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct800), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV2) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetPipePropertiesV2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV3) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetPipePropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointPropertiesV3) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetEndpointPropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SupportsStreams) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(SupportsStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateStreams) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(CreateStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguredStreams) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(GetConfiguredStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeTO) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ReadStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeTO) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(WriteStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeAsyncTO) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(ReadStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeAsyncTO) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(WriteStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortStreamsPipe) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(AbortStreamsPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterForNotification) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(RegisterForNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnregisterNotification) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(UnregisterNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcknowledgeNotification) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(AcknowledgeNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterDriver) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(RegisterDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetDeviceIdlePolicy) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(SetDeviceIdlePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipeIdlePolicy) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct800),
            "::",
            stringify!(SetPipeIdlePolicy)
        )
    );
}
impl Default for IOUSBInterfaceStruct800 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface800 = IOUSBInterfaceStruct800;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct942 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
    pub RegisterDriver:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub SetDeviceIdlePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            deviceIdleTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub SetPipeIdlePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            ioIdleTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncNotificationPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IONotificationPortRef,
    >,
}
#[test]
fn bindgen_test_layout_IOUSBInterfaceStruct942() {
    const UNINIT: ::std::mem::MaybeUninit<IOUSBInterfaceStruct942> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOUSBInterfaceStruct942>(),
        616usize,
        concat!("Size of: ", stringify!(IOUSBInterfaceStruct942))
    );
    assert_eq!(
        ::std::mem::align_of::<IOUSBInterfaceStruct942>(),
        8usize,
        concat!("Alignment of ", stringify!(IOUSBInterfaceStruct942))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IOUSBInterfaceStruct942), "::", stringify!(AddRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncEventSource) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(CreateInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncEventSource) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetInterfaceAsyncEventSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateInterfaceAsyncPort) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(CreateInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetInterfaceAsyncPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(USBInterfaceOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceClose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(USBInterfaceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceClass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceSubClass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceProtocol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceVendor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetDeviceVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceProduct) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetDeviceProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDeviceReleaseNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetDeviceReleaseNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfigurationValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetInterfaceNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAlternateSetting) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNumEndpoints) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocationID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetLocationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetAlternateInterface) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(SetAlternateInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumber) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetBusFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequest) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ControlRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsync) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ControlRequestAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeProperties) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetPipeProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipeStatus) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetPipeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortPipe) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(AbortPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResetPipe) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ResetPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStall) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ClearPipeStall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipe) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ReadPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipe) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(WritePipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsync) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ReadPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsync) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(WritePipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadIsochPipeAsync) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteIsochPipeAsync) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(WriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestTO) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ControlRequestTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlRequestAsyncTO) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ControlRequestAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeTO) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ReadPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeTO) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(WritePipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPipeAsyncTO) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ReadPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePipeAsyncTO) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(WritePipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceGetStringIndex) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(USBInterfaceGetStringIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBInterfaceOpenSeize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(USBInterfaceOpenSeize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearPipeStallBothEnds) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ClearPipeStallBothEnds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipePolicy) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(SetPipePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBandwidthAvailable) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetBandwidthAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointProperties) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetEndpointProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyReadIsochPipeAsync) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(LowLatencyReadIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LowLatencyWriteIsochPipeAsync) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(LowLatencyWriteIsochPipeAsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyCreateBuffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(LowLatencyCreateBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowLatencyDestroyBuffer) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(LowLatencyDestroyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusMicroFrameNumber) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetBusMicroFrameNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameListTime) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetFrameListTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIOUSBLibVersion) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetIOUSBLibVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).FindNextAssociatedDescriptor) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(FindNextAssociatedDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindNextAltInterface) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(FindNextAltInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBusFrameNumberWithTime) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetBusFrameNumberWithTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV2) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetPipePropertiesV2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPipePropertiesV3) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetPipePropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEndpointPropertiesV3) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetEndpointPropertiesV3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SupportsStreams) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(SupportsStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateStreams) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(CreateStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConfiguredStreams) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetConfiguredStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeTO) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ReadStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeTO) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(WriteStreamsPipeTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadStreamsPipeAsyncTO) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(ReadStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteStreamsPipeAsyncTO) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(WriteStreamsPipeAsyncTO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbortStreamsPipe) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(AbortStreamsPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterForNotification) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(RegisterForNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnregisterNotification) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(UnregisterNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcknowledgeNotification) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(AcknowledgeNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterDriver) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(RegisterDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetDeviceIdlePolicy) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(SetDeviceIdlePolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPipeIdlePolicy) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(SetPipeIdlePolicy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetInterfaceAsyncNotificationPort) as usize - ptr as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(IOUSBInterfaceStruct942),
            "::",
            stringify!(GetInterfaceAsyncNotificationPort)
        )
    );
}
impl Default for IOUSBInterfaceStruct942 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IOUSBInterfaceInterface942 = IOUSBInterfaceStruct942;
pub type IOUSBInterfaceInterface = IOUSBInterfaceInterface942;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NDR_record_t {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_NDR_record_t() {
    const UNINIT: ::std::mem::MaybeUninit<NDR_record_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NDR_record_t>(),
        8usize,
        concat!("Size of: ", stringify!(NDR_record_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDR_record_t>(),
        1usize,
        concat!("Alignment of ", stringify!(NDR_record_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mig_vers) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(NDR_record_t), "::", stringify!(mig_vers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).if_vers) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(NDR_record_t), "::", stringify!(if_vers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(NDR_record_t), "::", stringify!(reserved1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mig_encoding) as usize - ptr as usize },
        3usize,
        concat!("Offset of field: ", stringify!(NDR_record_t), "::", stringify!(mig_encoding))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_rep) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(NDR_record_t), "::", stringify!(int_rep))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_rep) as usize - ptr as usize },
        5usize,
        concat!("Offset of field: ", stringify!(NDR_record_t), "::", stringify!(char_rep))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float_rep) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(NDR_record_t), "::", stringify!(float_rep))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        7usize,
        concat!("Offset of field: ", stringify!(NDR_record_t), "::", stringify!(reserved2))
    );
}
extern "C" {
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_port_deleted_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_deleted_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_deleted_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_port_deleted_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_deleted_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_deleted_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_send_possible_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_send_possible_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_send_possible_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_send_possible_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_send_possible_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_send_possible_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_port_destroyed_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_destroyed_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_destroyed_notification_t>(),
        60usize,
        concat!("Size of: ", stringify!(mach_port_destroyed_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_destroyed_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_destroyed_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(not_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_port) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_no_senders_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_no_senders_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_no_senders_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_no_senders_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_no_senders_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_no_senders_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(not_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_send_once_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_send_once_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_send_once_notification_t>(),
        44usize,
        concat!("Size of: ", stringify!(mach_send_once_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_send_once_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_send_once_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_once_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_once_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_dead_name_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_dead_name_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_dead_name_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_dead_name_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_dead_name_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_dead_name_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
pub type mig_stub_routine_t = ::std::option::Option<
    unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_routine_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<routine_descriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<routine_descriptor>(),
        40usize,
        concat!("Size of: ", stringify!(routine_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<routine_descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(routine_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(impl_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stub_routine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(stub_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(routine_descriptor), "::", stringify!(argc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descr_count) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(routine_descriptor), "::", stringify!(descr_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_descr) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(routine_descriptor), "::", stringify!(arg_descr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_reply_msg) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(max_reply_msg)
        )
    );
}
impl Default for routine_descriptor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
#[test]
fn bindgen_test_layout_mig_subsystem() {
    const UNINIT: ::std::mem::MaybeUninit<mig_subsystem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mig_subsystem>(),
        72usize,
        concat!("Size of: ", stringify!(mig_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<mig_subsystem>(),
        8usize,
        concat!("Alignment of ", stringify!(mig_subsystem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mig_subsystem), "::", stringify!(server))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mig_subsystem), "::", stringify!(start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(mig_subsystem), "::", stringify!(end))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxsize) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(mig_subsystem), "::", stringify!(maxsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mig_subsystem), "::", stringify!(reserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).routine) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(mig_subsystem), "::", stringify!(routine))
    );
}
impl Default for mig_subsystem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_mig_symtab() {
    const UNINIT: ::std::mem::MaybeUninit<mig_symtab> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mig_symtab>(),
        24usize,
        concat!("Size of: ", stringify!(mig_symtab))
    );
    assert_eq!(
        ::std::mem::align_of::<mig_symtab>(),
        8usize,
        concat!("Alignment of ", stringify!(mig_symtab))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms_routine_name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mig_symtab), "::", stringify!(ms_routine_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms_routine_number) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mig_symtab), "::", stringify!(ms_routine_number))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms_routine) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(mig_symtab), "::", stringify!(ms_routine))
    );
}
impl Default for mig_symtab {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mig_symtab_t = mig_symtab;
extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_strncpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_strncpy_zerofill(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout_mig_reply_error_t() {
    const UNINIT: ::std::mem::MaybeUninit<mig_reply_error_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mig_reply_error_t>(),
        36usize,
        concat!("Size of: ", stringify!(mig_reply_error_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mig_reply_error_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mig_reply_error_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mig_reply_error_t), "::", stringify!(Head))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mig_reply_error_t), "::", stringify!(NDR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(mig_reply_error_t), "::", stringify!(RetCode))
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[test]
fn bindgen_test_layout_mach_vm_info_region() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_info_region> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_info_region>(),
        56usize,
        concat!("Size of: ", stringify!(mach_vm_info_region))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_info_region>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_vm_info_region))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_start) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_vm_info_region), "::", stringify!(vir_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_end) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mach_vm_info_region), "::", stringify!(vir_end))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_object) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(mach_vm_info_region), "::", stringify!(vir_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_offset) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mach_vm_info_region), "::", stringify!(vir_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_needs_copy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_needs_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_protection) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_max_protection) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_inheritance) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_wired_count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_wired_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_user_wired_count) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_user_wired_count)
        )
    );
}
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_info_region_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_info_region_64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_info_region_64>(),
        44usize,
        concat!("Size of: ", stringify!(vm_info_region_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_info_region_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_info_region_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_start) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_info_region_64), "::", stringify!(vir_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_end) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(vm_info_region_64), "::", stringify!(vir_end))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_object) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vm_info_region_64), "::", stringify!(vir_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_offset) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(vm_info_region_64), "::", stringify!(vir_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_needs_copy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_needs_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_protection) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_max_protection) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_inheritance) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_wired_count) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_wired_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_user_wired_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_user_wired_count)
        )
    );
}
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_info_region() {
    const UNINIT: ::std::mem::MaybeUninit<vm_info_region> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_info_region>(),
        40usize,
        concat!("Size of: ", stringify!(vm_info_region))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_info_region>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_info_region))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_start) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_info_region), "::", stringify!(vir_start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_end) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(vm_info_region), "::", stringify!(vir_end))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_object) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vm_info_region), "::", stringify!(vir_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_offset) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(vm_info_region), "::", stringify!(vir_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_needs_copy) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(vm_info_region), "::", stringify!(vir_needs_copy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_protection) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(vm_info_region), "::", stringify!(vir_protection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_max_protection) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_inheritance) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(vm_info_region), "::", stringify!(vir_inheritance))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_wired_count) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(vm_info_region), "::", stringify!(vir_wired_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_user_wired_count) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_user_wired_count)
        )
    );
}
pub type vm_info_region_t = vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
#[test]
fn bindgen_test_layout_vm_info_object() {
    const UNINIT: ::std::mem::MaybeUninit<vm_info_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_info_object>(),
        88usize,
        concat!("Size of: ", stringify!(vm_info_object))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_info_object>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_info_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_object) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_size) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_ref_count) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_ref_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_resident_page_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_resident_page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_absent_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_absent_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_copy) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_copy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_shadow) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_shadow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_shadow_offset) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_shadow_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_paging_offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_paging_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_copy_strategy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_copy_strategy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_last_alloc) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_last_alloc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_paging_in_progress) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_paging_in_progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_pager_created) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_pager_created)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_pager_initialized) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_pager_initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_pager_ready) as usize - ptr as usize },
        60usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_pager_ready))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_can_persist) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_can_persist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_internal) as usize - ptr as usize },
        68usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_internal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_temporary) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_temporary))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_alive) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_alive))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_purgable) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(vm_info_object), "::", stringify!(vio_purgable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_purgable_volatile) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_purgable_volatile)
        )
    );
}
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_zone_name() {
    const UNINIT: ::std::mem::MaybeUninit<zone_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zone_name>(),
        80usize,
        concat!("Size of: ", stringify!(zone_name))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_name>(),
        1usize,
        concat!("Alignment of ", stringify!(zone_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zn_name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(zone_name), "::", stringify!(zn_name))
    );
}
impl Default for zone_name {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
#[test]
fn bindgen_test_layout_zone_info() {
    const UNINIT: ::std::mem::MaybeUninit<zone_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zone_info>(),
        56usize,
        concat!("Size of: ", stringify!(zone_info))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_info>(),
        8usize,
        concat!("Alignment of ", stringify!(zone_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(zone_info), "::", stringify!(zi_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_cur_size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(zone_info), "::", stringify!(zi_cur_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_max_size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(zone_info), "::", stringify!(zi_max_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_elem_size) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(zone_info), "::", stringify!(zi_elem_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_alloc_size) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(zone_info), "::", stringify!(zi_alloc_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_pageable) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(zone_info), "::", stringify!(zi_pageable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_sleepable) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(zone_info), "::", stringify!(zi_sleepable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_exhaustible) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(zone_info), "::", stringify!(zi_exhaustible))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_collectable) as usize - ptr as usize },
        52usize,
        concat!("Offset of field: ", stringify!(zone_info), "::", stringify!(zi_collectable))
    );
}
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_mach_zone_name() {
    const UNINIT: ::std::mem::MaybeUninit<mach_zone_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_zone_name>(),
        80usize,
        concat!("Size of: ", stringify!(mach_zone_name))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_zone_name>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_zone_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzn_name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_zone_name), "::", stringify!(mzn_name))
    );
}
impl Default for mach_zone_name {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
#[test]
fn bindgen_test_layout_mach_zone_info_data() {
    const UNINIT: ::std::mem::MaybeUninit<mach_zone_info_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_zone_info_data>(),
        64usize,
        concat!("Size of: ", stringify!(mach_zone_info_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_zone_info_data>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_zone_info_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_zone_info_data), "::", stringify!(mzi_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_cur_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_cur_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_max_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_elem_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_elem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_alloc_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_alloc_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_sum_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_sum_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_exhaustible) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_exhaustible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_collectable) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_collectable)
        )
    );
}
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
#[test]
fn bindgen_test_layout_task_zone_info_data() {
    const UNINIT: ::std::mem::MaybeUninit<task_zone_info_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_zone_info_data>(),
        88usize,
        concat!("Size of: ", stringify!(task_zone_info_data))
    );
    assert_eq!(
        ::std::mem::align_of::<task_zone_info_data>(),
        8usize,
        concat!("Alignment of ", stringify!(task_zone_info_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(task_zone_info_data), "::", stringify!(tzi_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_cur_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_cur_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_max_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_elem_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_elem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_alloc_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_alloc_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_sum_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_sum_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_exhaustible) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_exhaustible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_collectable) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_collectable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_caller_acct) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_caller_acct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_task_alloc) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_task_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_task_free) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_task_free)
        )
    );
}
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub collectable_bytes: u64,
    pub mapped: u64,
    pub peak: u64,
    pub tag: u16,
    pub zone: u16,
    pub _resvA: [u16; 2usize],
    pub _resv: [u64; 3usize],
    pub name: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_mach_memory_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_memory_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_memory_info>(),
        176usize,
        concat!("Size of: ", stringify!(mach_memory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_memory_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_memory_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).site) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(site))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(free))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).largest) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(largest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).collectable_bytes) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(collectable_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapped) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(mapped))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peak) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(peak))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zone) as usize - ptr as usize },
        66usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(zone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._resvA) as usize - ptr as usize },
        68usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(_resvA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._resv) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(_resv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(mach_memory_info), "::", stringify!(name))
    );
}
impl Default for mach_memory_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct zone_btrecord {
    pub ref_count: u32,
    pub operation_type: u32,
    pub bt: [u64; 15usize],
}
#[test]
fn bindgen_test_layout_zone_btrecord() {
    const UNINIT: ::std::mem::MaybeUninit<zone_btrecord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zone_btrecord>(),
        128usize,
        concat!("Size of: ", stringify!(zone_btrecord))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_btrecord>(),
        8usize,
        concat!("Alignment of ", stringify!(zone_btrecord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(zone_btrecord), "::", stringify!(ref_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operation_type) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(zone_btrecord), "::", stringify!(operation_type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bt) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(zone_btrecord), "::", stringify!(bt))
    );
}
pub type zone_btrecord_t = zone_btrecord;
pub type zone_btrecord_array_t = *mut zone_btrecord_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
#[test]
fn bindgen_test_layout_hash_info_bucket() {
    const UNINIT: ::std::mem::MaybeUninit<hash_info_bucket> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hash_info_bucket>(),
        4usize,
        concat!("Size of: ", stringify!(hash_info_bucket))
    );
    assert_eq!(
        ::std::mem::align_of::<hash_info_bucket>(),
        4usize,
        concat!("Alignment of ", stringify!(hash_info_bucket))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hib_count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(hash_info_bucket), "::", stringify!(hib_count))
    );
}
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
#[test]
fn bindgen_test_layout_lockgroup_info() {
    const UNINIT: ::std::mem::MaybeUninit<lockgroup_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lockgroup_info>(),
        264usize,
        concat!("Size of: ", stringify!(lockgroup_info))
    );
    assert_eq!(
        ::std::mem::align_of::<lockgroup_info>(),
        8usize,
        concat!("Alignment of ", stringify!(lockgroup_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockgroup_name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lockgroup_info), "::", stringify!(lockgroup_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockgroup_attr) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(lockgroup_info), "::", stringify!(lockgroup_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_cnt) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(lockgroup_info), "::", stringify!(lock_spin_cnt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_util_cnt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_util_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_held_cnt) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_held_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_miss_cnt) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_miss_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_held_max) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_held_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_held_cum) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_held_cum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_cnt) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(lockgroup_info), "::", stringify!(lock_mtx_cnt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_util_cnt) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_util_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_held_cnt) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_held_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_miss_cnt) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_miss_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_wait_cnt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_wait_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_held_max) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_held_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_held_cum) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_held_cum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_wait_max) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_wait_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_wait_cum) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_wait_cum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_cnt) as usize - ptr as usize },
        192usize,
        concat!("Offset of field: ", stringify!(lockgroup_info), "::", stringify!(lock_rw_cnt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_util_cnt) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_util_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_held_cnt) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_held_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_miss_cnt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_miss_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_wait_cnt) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_wait_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_held_max) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_held_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_held_cum) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_held_cum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_wait_max) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_wait_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_wait_cum) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_wait_cum)
        )
    );
}
impl Default for lockgroup_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_core_details {
    pub gzip_offset: u64,
    pub gzip_length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_mach_core_details() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_details> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_details>(),
        32usize,
        concat!("Size of: ", stringify!(mach_core_details))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_details>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_details))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gzip_offset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_core_details), "::", stringify!(gzip_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gzip_length) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mach_core_details), "::", stringify!(gzip_length))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core_name) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(mach_core_details), "::", stringify!(core_name))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: [mach_core_details; 16usize],
}
#[test]
fn bindgen_test_layout_mach_core_fileheader() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_fileheader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_fileheader>(),
        544usize,
        concat!("Size of: ", stringify!(mach_core_fileheader))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_fileheader>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_fileheader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_core_fileheader), "::", stringify!(signature))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(log_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(log_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_files) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mach_core_fileheader), "::", stringify!(num_files))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(mach_core_fileheader), "::", stringify!(files))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_core_details_v2 {
    pub flags: u64,
    pub offset: u64,
    pub length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_mach_core_details_v2() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_details_v2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_details_v2>(),
        40usize,
        concat!("Size of: ", stringify!(mach_core_details_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_details_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_details_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mach_core_details_v2), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mach_core_details_v2), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(mach_core_details_v2), "::", stringify!(length))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core_name) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(mach_core_details_v2), "::", stringify!(core_name))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_core_fileheader_base {
    pub signature: u64,
    pub version: u32,
}
#[test]
fn bindgen_test_layout_mach_core_fileheader_base() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_fileheader_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_fileheader_base>(),
        16usize,
        concat!("Size of: ", stringify!(mach_core_fileheader_base))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_fileheader_base>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_fileheader_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_base),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_base),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct mach_core_fileheader_v2 {
    pub signature: u64,
    pub version: u32,
    pub flags: u64,
    pub pub_key_offset: u64,
    pub pub_key_length: u16,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: __IncompleteArrayField<mach_core_details_v2>,
}
#[test]
fn bindgen_test_layout_mach_core_fileheader_v2() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_fileheader_v2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_fileheader_v2>(),
        64usize,
        concat!("Size of: ", stringify!(mach_core_fileheader_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_fileheader_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_fileheader_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(mach_core_fileheader_v2), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pub_key_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(pub_key_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pub_key_length) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(pub_key_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(log_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_length) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(log_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_files) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(num_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(mach_core_fileheader_v2), "::", stringify!(files))
    );
}
pub type kobject_description_t = [::std::os::raw::c_char; 512usize];
extern "C" {
    pub fn mach_port_names(
        task: ipc_space_t,
        names: *mut mach_port_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        types: *mut mach_port_type_array_t,
        typesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_type(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_rename(
        task: ipc_space_t,
        old_name: mach_port_name_t,
        new_name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_name(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        refs: *mut mach_port_urefs_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_mod_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_peek(
        task: ipc_space_t,
        name: mach_port_name_t,
        trailer_type: mach_msg_trailer_type_t,
        request_seqnop: *mut mach_port_seqno_t,
        msg_sizep: *mut mach_msg_size_t,
        msg_idp: *mut mach_msg_id_t,
        trailer_infop: mach_msg_trailer_info_t,
        trailer_infopCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_mscount(
        task: ipc_space_t,
        name: mach_port_name_t,
        mscount: mach_port_mscount_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_set_status(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        members: *mut mach_port_name_array_t,
        membersCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_move_member(
        task: ipc_space_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_request_notification(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        poly: mach_port_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgt_name: mach_msg_type_name_t,
        poly: *mut mach_port_t,
        polyPoly: *mut mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_seqno(
        task: ipc_space_t,
        name: mach_port_name_t,
        seqno: mach_port_seqno_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_attributes(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info: mach_port_info_t,
        port_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_qos(
        task: ipc_space_t,
        right: mach_port_right_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_full(
        task: ipc_space_t,
        right: mach_port_right_t,
        proto: mach_port_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_port_space(
        task: ipc_space_t,
        table_entries: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_srights(
        task: ipc_space_t,
        name: mach_port_name_t,
        srights: *mut mach_port_rights_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_info(
        space: ipc_space_read_t,
        space_info: *mut ipc_info_space_t,
        table_info: *mut ipc_info_name_array_t,
        table_infoCnt: *mut mach_msg_type_number_t,
        tree_info: *mut ipc_info_tree_name_array_t,
        tree_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_dnrequest_info(
        task: ipc_space_t,
        name: mach_port_name_t,
        dnr_total: *mut ::std::os::raw::c_uint,
        dnr_used: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kernel_object(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut ::std::os::raw::c_uint,
        object_addr: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_context(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        context: *mut mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_context(
        task: ipc_space_t,
        name: mach_port_name_t,
        context: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_construct(
        task: ipc_space_t,
        options: mach_port_options_ptr_t,
        context: mach_port_context_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destruct(
        task: ipc_space_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_unguard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_basic_info(
        task: ipc_space_inspect_t,
        basic_info: *mut ipc_info_space_basic_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard_with_flags(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        flags: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_swap_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        old_guard: mach_port_context_t,
        new_guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject_description(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_is_connection_for_service(
        task: ipc_space_t,
        connection_port: mach_port_name_t,
        service_port: mach_port_name_t,
        filter_policy_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_service_port_info(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        sp_info_out: *mut mach_service_port_info_data_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_assert_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        info: mach_port_info_t,
        infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_names_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_names_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_names_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_port_names_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_names_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_names_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_names_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_type_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_type_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_type_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_type_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_type_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_type_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_type_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_type_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_rename_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_rename_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_rename_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_rename_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_rename_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(old_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(new_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_name_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_allocate_name_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_name_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_allocate_name_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_name_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_allocate_name_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_allocate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_allocate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_t),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_destroy_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_destroy_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_destroy_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destroy_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_deallocate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_deallocate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_deallocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_deallocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_deallocate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_deallocate_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_refs_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_refs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_refs_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_get_refs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_mod_refs_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_mod_refs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_mod_refs_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_mod_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_mod_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_mod_refs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(delta)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_peek_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_peek_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_peek_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_port_peek_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_peek_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_peek_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_seqnop) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(request_seqnop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer_infopCnt) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(trailer_infopCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_mscount_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_set_mscount_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_mscount_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_mscount_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_mscount_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_set_mscount_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mscount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(mscount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_set_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_set_status_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_set_status_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_set_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_set_status_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_get_set_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_set_status_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_set_status_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_set_status_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_move_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_move_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_move_member_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_move_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_move_member_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_move_member_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).member) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(member)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).after) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(after)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_request_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_request_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_request_notification_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Request__mach_port_request_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_request_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_request_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notify) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgid) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(msgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(sync)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_insert_right_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_insert_right_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_insert_right_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_port_insert_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_insert_right_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_insert_right_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poly) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(poly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_extract_right_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_extract_right_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_extract_right_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_extract_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_extract_right_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_extract_right_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgt_name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(msgt_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_seqno_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_set_seqno_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_seqno_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_seqno_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_seqno_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_set_seqno_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqno) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(seqno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_attributes_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_attributes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_get_attributes_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavor) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_info_outCnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(port_info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_set_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_attributes_t>(),
        112usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_attributes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_set_attributes_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavor) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_infoCnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(port_infoCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_info) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(port_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_qos_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_allocate_qos_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_qos_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_allocate_qos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_qos_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_allocate_qos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(qos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_full_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_allocate_full_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_full_t>(),
        64usize,
        concat!("Size of: ", stringify!(__Request__mach_port_allocate_full_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_full_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_allocate_full_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__task_set_port_space_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__task_set_port_space_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_port_space_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__task_set_port_space_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_port_space_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_set_port_space_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_port_space_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_port_space_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_entries) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_port_space_t),
            "::",
            stringify!(table_entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_srights_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_srights_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_srights_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_srights_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_srights_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_get_srights_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_srights_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_srights_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_srights_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_space_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_space_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_space_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_port_space_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_space_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_space_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_space_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_dnrequest_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_dnrequest_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_dnrequest_info_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_dnrequest_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_dnrequest_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_dnrequest_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_dnrequest_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_dnrequest_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_dnrequest_info_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_kernel_object_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_kernel_object_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_kernel_object_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_kernel_object_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_kernel_object_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_kernel_object_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kernel_object_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kernel_object_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kernel_object_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_insert_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_insert_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_insert_member_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_insert_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_insert_member_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_insert_member_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pset) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(pset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_extract_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_extract_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_extract_member_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_extract_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_extract_member_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_extract_member_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pset) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(pset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_context_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_context_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_get_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_context_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_set_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_context_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_context_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_set_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_kobject_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_kobject_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_kobject_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_kobject_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_kobject_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_kobject_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_construct_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_construct_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_construct_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Request__mach_port_construct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_construct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_construct_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(context)
        )
    );
}
impl Default for __Request__mach_port_construct_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_destruct_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_destruct_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_destruct_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_port_destruct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_destruct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_destruct_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srdelta) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(srdelta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(guard)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_guard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_guard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_guard_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_port_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_guard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strict) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(strict)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_unguard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_unguard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_unguard_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_unguard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_unguard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_unguard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(guard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_space_basic_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_space_basic_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_space_basic_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_port_space_basic_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_space_basic_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_space_basic_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_space_basic_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub flags: u64,
}
#[test]
fn bindgen_test_layout___Request__mach_port_guard_with_flags_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_guard_with_flags_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_guard_with_flags_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_port_guard_with_flags_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_guard_with_flags_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_guard_with_flags_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub old_guard: mach_port_context_t,
    pub new_guard: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_swap_guard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_swap_guard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_swap_guard_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_port_swap_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_swap_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_swap_guard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_guard) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(old_guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_guard) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(new_guard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_kobject_description_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_kobject_description_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_kobject_description_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_kobject_description_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_kobject_description_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_kobject_description_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_description_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_description_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_description_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub connection_port: mach_port_name_t,
    pub service_port: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_is_connection_for_service_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_is_connection_for_service_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_is_connection_for_service_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_is_connection_for_service_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_is_connection_for_service_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_is_connection_for_service_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_is_connection_for_service_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_is_connection_for_service_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_is_connection_for_service_t),
            "::",
            stringify!(connection_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_port) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_is_connection_for_service_t),
            "::",
            stringify!(service_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_service_port_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_service_port_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_service_port_info_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_service_port_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_service_port_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_get_service_port_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_service_port_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_service_port_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_service_port_info_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Request__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [integer_t; 17usize],
}
#[test]
fn bindgen_test_layout___Request__mach_port_assert_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_assert_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_assert_attributes_t>(),
        112usize,
        concat!("Size of: ", stringify!(__Request__mach_port_assert_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_assert_attributes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_assert_attributes_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavor) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infoCnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    pub Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    pub Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    pub Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    pub Request_mach_port_is_connection_for_service:
        __Request__mach_port_is_connection_for_service_t,
    pub Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t,
    pub Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t,
}
#[test]
fn bindgen_test_layout___RequestUnion__mach_port_subsystem() {
    const UNINIT: ::std::mem::MaybeUninit<__RequestUnion__mach_port_subsystem> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__mach_port_subsystem>(),
        112usize,
        concat!("Size of: ", stringify!(__RequestUnion__mach_port_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__mach_port_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__RequestUnion__mach_port_subsystem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_rename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_rename)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_allocate_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_allocate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_destroy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_destroy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_deallocate) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_deallocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_get_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_mod_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_mod_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_peek) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_peek)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_set_mscount) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_mscount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_set_status) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_set_status)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_move_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_move_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_request_notification) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_request_notification)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_insert_right) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_insert_right)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_extract_right) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_extract_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_set_seqno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_seqno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_attributes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_set_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_attributes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_allocate_qos) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate_qos)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_allocate_full) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate_full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_task_set_port_space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_task_set_port_space)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_srights) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_srights)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_space_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_space_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_dnrequest_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_dnrequest_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_kernel_object) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_kernel_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_insert_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_insert_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_extract_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_extract_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_context) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_context)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_set_context) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_kobject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_kobject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_construct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_construct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_destruct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_destruct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_unguard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_unguard)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_space_basic_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_space_basic_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_guard_with_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_guard_with_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_swap_guard) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_swap_guard)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_kobject_description) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_kobject_description)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_is_connection_for_service) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_is_connection_for_service)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_service_port_info) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_service_port_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_assert_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_assert_attributes)
        )
    );
}
impl Default for __RequestUnion__mach_port_subsystem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for __RequestUnion__mach_port_subsystem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__RequestUnion__mach_port_subsystem {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_names_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_names_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_names_t>(),
        76usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_names_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_names_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_names_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        60usize,
        concat!("Offset of field: ", stringify!(__Reply__mach_port_names_t), "::", stringify!(NDR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namesCnt) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(namesCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typesCnt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(typesCnt)
        )
    );
}
impl Default for __Reply__mach_port_names_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_type_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_type_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_type_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_type_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_type_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__Reply__mach_port_type_t), "::", stringify!(Head))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(__Reply__mach_port_type_t), "::", stringify!(NDR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptype) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(ptype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_rename_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_rename_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_rename_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_rename_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_rename_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_rename_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_rename_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_rename_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_name_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_allocate_name_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_name_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_name_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_name_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_allocate_name_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_name_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_name_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_name_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_allocate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_allocate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_destroy_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_destroy_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_destroy_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destroy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_deallocate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_deallocate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_deallocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_deallocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_deallocate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_deallocate_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_refs_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_refs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_refs_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_get_refs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(refs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_mod_refs_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_mod_refs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_mod_refs_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_mod_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_mod_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_mod_refs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_mod_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_mod_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_mod_refs_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_port_peek_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_peek_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_peek_t>(),
        120usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_peek_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_peek_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_peek_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__Reply__mach_port_peek_t), "::", stringify!(Head))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(__Reply__mach_port_peek_t), "::", stringify!(NDR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_seqnop) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(request_seqnop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_sizep) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(msg_sizep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_idp) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(msg_idp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer_infopCnt) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(trailer_infopCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer_infop) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(trailer_infop)
        )
    );
}
impl Default for __Reply__mach_port_peek_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_mscount_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_set_mscount_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_mscount_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_mscount_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_mscount_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_set_mscount_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_mscount_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_mscount_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_mscount_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_set_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_set_status_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_set_status_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_set_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_set_status_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_get_set_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).members) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(members)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).membersCnt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(membersCnt)
        )
    );
}
impl Default for __Reply__mach_port_get_set_status_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_move_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_move_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_move_member_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_move_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_move_member_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_move_member_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_move_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_move_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_move_member_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_request_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_request_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_request_notification_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_request_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_request_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_request_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_request_notification_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_request_notification_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).previous) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_request_notification_t),
            "::",
            stringify!(previous)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_insert_right_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_insert_right_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_insert_right_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_insert_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_insert_right_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_insert_right_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_right_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_right_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_extract_right_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_extract_right_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_extract_right_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_extract_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_extract_right_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_extract_right_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_right_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poly) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_right_t),
            "::",
            stringify!(poly)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_seqno_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_set_seqno_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_seqno_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_seqno_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_seqno_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_set_seqno_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_seqno_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_seqno_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_seqno_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_attributes_t>(),
        108usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_attributes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_get_attributes_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_info_outCnt) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(port_info_outCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_info_out) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(port_info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_set_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_attributes_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_attributes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_set_attributes_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_qos_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_allocate_qos_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_qos_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_qos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_qos_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_allocate_qos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_full_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_allocate_full_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_full_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_full_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_full_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_allocate_full_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_port_space_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__task_set_port_space_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_port_space_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_port_space_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_port_space_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_set_port_space_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_port_space_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_port_space_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_port_space_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_srights_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_srights_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_srights_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_srights_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_srights_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_get_srights_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srights) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(srights)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_space_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_space_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_space_info_t>(),
        100usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_space_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_space_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_space_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_info) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(table_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_info) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(tree_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space_info) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(space_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_infoCnt) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(table_infoCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_infoCnt) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(tree_infoCnt)
        )
    );
}
impl Default for __Reply__mach_port_space_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_dnrequest_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_dnrequest_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_dnrequest_info_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_dnrequest_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_dnrequest_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_dnrequest_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dnr_total) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(dnr_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dnr_used) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(dnr_used)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_kernel_object_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_kernel_object_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_kernel_object_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_kernel_object_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_kernel_object_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_kernel_object_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(object_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_addr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(object_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_insert_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_insert_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_insert_member_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_insert_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_insert_member_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_insert_member_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_member_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_extract_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_extract_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_extract_member_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_extract_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_extract_member_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_extract_member_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_member_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_context_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_context_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_get_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_set_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_context_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_context_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_set_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_context_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_kobject_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_kobject_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_kobject_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_kobject_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_kobject_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_kobject_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(object_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_addr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(object_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_construct_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_construct_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_construct_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_construct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_construct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_construct_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_destruct_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_destruct_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_destruct_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_destruct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_destruct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_destruct_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destruct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destruct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destruct_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_guard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_guard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_guard_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_guard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(__Reply__mach_port_guard_t), "::", stringify!(NDR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_unguard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_unguard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_unguard_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_unguard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_unguard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_unguard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_unguard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_unguard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_unguard_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_space_basic_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_space_basic_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_space_basic_info_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_space_basic_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_space_basic_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_space_basic_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basic_info) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(basic_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_guard_with_flags_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_guard_with_flags_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_guard_with_flags_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_guard_with_flags_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_guard_with_flags_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_guard_with_flags_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_with_flags_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_with_flags_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_with_flags_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_swap_guard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_swap_guard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_swap_guard_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_swap_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_swap_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_swap_guard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_swap_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_swap_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_swap_guard_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
    pub descriptionOffset: mach_msg_type_number_t,
    pub descriptionCnt: mach_msg_type_number_t,
    pub description: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_port_kobject_description_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_kobject_description_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_kobject_description_t>(),
        568usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_kobject_description_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_kobject_description_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_kobject_description_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(object_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_addr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(object_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptionOffset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(descriptionOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptionCnt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(descriptionCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(description)
        )
    );
}
impl Default for __Reply__mach_port_kobject_description_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub filter_policy_id: u64,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_is_connection_for_service_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_is_connection_for_service_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_is_connection_for_service_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_is_connection_for_service_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_is_connection_for_service_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_is_connection_for_service_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_is_connection_for_service_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_is_connection_for_service_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_is_connection_for_service_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_policy_id) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_is_connection_for_service_t),
            "::",
            stringify!(filter_policy_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub sp_info_out: mach_service_port_info_data_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_service_port_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_service_port_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_service_port_info_t>(),
        292usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_service_port_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_service_port_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_get_service_port_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_service_port_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_service_port_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_service_port_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_info_out) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_service_port_info_t),
            "::",
            stringify!(sp_info_out)
        )
    );
}
impl Default for __Reply__mach_port_get_service_port_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __Reply__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_assert_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_assert_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_assert_attributes_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_assert_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_assert_attributes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_assert_attributes_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_assert_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_assert_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_assert_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    pub Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    pub Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    pub Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    pub Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t,
    pub Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t,
    pub Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t,
}
#[test]
fn bindgen_test_layout___ReplyUnion__mach_port_subsystem() {
    const UNINIT: ::std::mem::MaybeUninit<__ReplyUnion__mach_port_subsystem> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__mach_port_subsystem>(),
        568usize,
        concat!("Size of: ", stringify!(__ReplyUnion__mach_port_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__mach_port_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__ReplyUnion__mach_port_subsystem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_rename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_rename)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_allocate_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_allocate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_destroy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_deallocate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_deallocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_mod_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_mod_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_peek) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_peek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_set_mscount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_mscount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_set_status) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_set_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_move_member) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_move_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_request_notification) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_request_notification)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_insert_right) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_insert_right)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_extract_right) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_extract_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_set_seqno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_seqno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_attributes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_set_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_attributes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_allocate_qos) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate_qos)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_allocate_full) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate_full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_task_set_port_space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_task_set_port_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_srights) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_srights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_space_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_space_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_dnrequest_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_dnrequest_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_kernel_object) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_kernel_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_insert_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_insert_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_extract_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_extract_member)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_set_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_kobject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_kobject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_construct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_construct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_destruct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_destruct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_unguard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_unguard)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_space_basic_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_space_basic_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_guard_with_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_guard_with_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_swap_guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_swap_guard)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_kobject_description) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_kobject_description)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_is_connection_for_service) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_is_connection_for_service)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_service_port_info) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_service_port_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_assert_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_assert_attributes)
        )
    );
}
impl Default for __ReplyUnion__mach_port_subsystem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for __ReplyUnion__mach_port_subsystem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__ReplyUnion__mach_port_subsystem {{ union }}")
    }
}
extern "C" {
    pub fn GetIOUSBDeviceUserClientTypeID() -> CFUUIDRef;
}
extern "C" {
    pub fn GetIOUSBInterfaceUserClientTypeID() -> CFUUIDRef;
}
extern "C" {
    pub fn GetIOCFPlugInInterfaceID() -> CFUUIDRef;
}
extern "C" {
    pub fn GetIOUSBDeviceInterfaceID500() -> CFUUIDRef;
}
extern "C" {
    pub fn GetIOUSBInterfaceInterfaceID500() -> CFUUIDRef;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(gp_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(fp_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(reg_save_area))
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _os_object_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_object_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_group_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_source_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_channel_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_mach_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_mach_msg_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_semaphore_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_io_s {
    pub _address: u8,
}
