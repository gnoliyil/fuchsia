// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.wlan.softmac;

using fuchsia.hardware.wlan.associnfo;
using fuchsia.wlan.common;
using fuchsia.wlan.internal;
using fuchsia.wlan.ieee80211 as ieee80211;
using zx;

type WlanSoftmacBandCapability = struct {
    /// The values of this struct apply to the band indicated in this field.
    band fuchsia.wlan.common.WlanBand;

    /// Basic rates supported in units of 500 kbit/s (as defined in
    /// IEEE Std 802.11-2016, 9.4.2.3), e.g., 0x02 represents 1 Mbps.
    /// The value returned by this type indicates all the non-HT rates
    /// the device supports transmitting and receiving.
    basic_rate_count uint8;
    basic_rate_list array<uint8, fuchsia.wlan.internal.MAX_SUPPORTED_BASIC_RATES>;

    /// If the device supports the HT PHY mode in this band, then ht_supported is
    /// set to true, and the value in ht_caps indicates the capabilities. Otherwise,
    /// ht_supported is set to false.
    ht_supported bool;
    ht_caps ieee80211.HtCapabilities;

    /// If the device supports the VHT PHY mode in this band, then vht_supported is
    /// set to true, and the value in vht_caps indicates the capabilities. Otherwise,
    /// vht_supported is set to false.
    vht_supported bool;
    vht_caps ieee80211.VhtCapabilities;

    /// A list of operating channels considered valid by hardware, in the context of
    /// regulatory information known to the device driver, at the time of its
    /// construction during iface creation. In this context, an operating channel
    /// means a channel which APs may transmit Beacon frames on in the current
    /// regulatory domain.
    ///
    /// This list should be used to determine efficacy of subsequent requests to
    /// scan a subset of channels using the iface, or to determine which operating
    /// channel to use when starting an AP.
    operating_channel_count uint16;
    operating_channel_list array<uint8, ieee80211.MAX_UNIQUE_CHANNEL_NUMBERS>;
};

/// High-level information describing the state of a running softmac.
/// All fields in this response are required.
type WlanSoftmacQueryResponse = table {
    /// Station address.
    1: sta_addr ieee80211.MacAddr;

    /// MAC role
    2: mac_role fuchsia.wlan.common.WlanMacRole;

    /// Bitmask indicating WlanInfoPhyType values supported by the hardware.
    @mutable
    3: supported_phys
            vector<fuchsia.wlan.common.WlanPhyType>:fuchsia.wlan.common.MAX_SUPPORTED_PHY_TYPES;

    /// Bitmask indicating enabled WlanInfoHardwareCapability values. Values defined as fuchsia.wlan.common.WlanSoftmacHardwareCapability
    4: hardware_capability fuchsia.wlan.common.WlanSoftmacHardwareCapability;

    /// Supported bands.
    @mutable
    5: band_caps vector<WlanSoftmacBandCapability>:fuchsia.wlan.common.MAX_BANDS;
};

type WlanRxInfoFlags = flexible bits : uint32 {
    /// The FCS for the received frame was invalid.
    FCS_INVALID = 0x1;
    /// Padding was added after the MAC header to align the frame body to 4 bytes.
    FRAME_BODY_PADDING_4 = 0x2;
    // Bits 2-31 reserved
};

type WlanRxInfo = struct {
    /// Receive flags. These represent boolean flags as opposed to enums or value-based info which
    /// are represented below. Values should be taken from the WLAN_RX_INFO_FLAGS_* enum.
    rx_flags WlanRxInfoFlags;

    /// Bitmask indicating which of the following fields are valid in this struct. Reserved flags
    /// must be zero.
    valid_fields uint32;
    /// The PHY format of the device at the time of the operation.
    phy fuchsia.wlan.common.WlanPhyType;
    /// The data rate of the device, measured in units of 0.5 Mb/s.
    data_rate uint32;
    /// The channel of the device at the time of the operation. This field must be included.
    channel fuchsia.wlan.common.WlanChannel;
    /// The modulation and coding scheme index of the device at the time of the operation. Depends
    /// on the PHY format and channel width.
    mcs uint8;

    /// Received Signal Strength Indicator.
    rssi_dbm int8;
    /// Signal-to-Noise Ratio, in 0.5 dB.
    snr_dbh int16;
};

type WlanTxInfoFlags = flexible bits : uint32 {
    /// Indicate this packet should be protected.
    PROTECTED = 0x1;
    /// For rate control: indicate an important data frame, such as EAPOL, which should be sent
    /// _reliably_ rather than fast, and is exempt from rate probing
    FAVOR_RELIABILITY = 0x2;
    /// Indicate that this packet should be sent out with QoS header when possible (11n+).
    // TODO(fxbug.dev/29622): remove this when MLME supports QoS tag.
    QOS = 0x4;
};

type WlanTxInfoValid = flexible bits : uint32 {
    DATA_RATE = 0x1;
    TX_VECTOR_IDX = 0x2;
    PHY = 0x4;
    CHANNEL_BANDWIDTH = 0x8;
    MCS = 0x10;
};

type WlanTxInfo = struct {
    /// Transmit flags. These represent boolean options as opposed to enums or other value-based
    /// info which are represented below. Values should be taken from the WLAN_TX_INFO_FLAGS_* enum.
    tx_flags uint32;

    /// Bitmask indicating which of the following fields are valid in this struct. Reserved flags
    /// must be zero. Values for fields not indicated by a flag may be chosen at the discretion of
    /// the softmac driver.
    valid_fields uint32;
    // Will be sent back in wlan_tx_status_t if Minstrel is enabled for the device, indicated by
    // WLAN_TX_INFO_VALID_TX_VECTOR_IDX.
    tx_vector_idx uint16;
    // The PHY format to be used to transmit this packet.
    phy fuchsia.wlan.common.WlanPhyType;
    // The channel width to be used to transmit this packet.
    channel_bandwidth fuchsia.wlan.common.ChannelBandwidth;
    /// The modulation and coding scheme index for this packet. Depends on the PHY format and
    /// channel width.
    mcs uint8;
};

type WlanProtection = strict enum : uint8 {
    NONE = 0;
    RX = 1;
    TX = 2;
    RX_TX = 3;
};

type WlanKeyConfiguration = table {
    /// Which path to protect: None, TX, RX, or TX and RX.
    1: protection WlanProtection;
    /// IEEE Cipher suite selector.
    /// See IEEE Std 802.11-2016, 9.4.2.25.2, Table 9-131
    2: cipher_oui array<uint8, 3>;
    3: cipher_type uint8;
    /// Whether this key is a pairwise, group or peer key.
    4: key_type fuchsia.hardware.wlan.associnfo.WlanKeyType;
    /// The peer MAC address for pairwise and peer keys.
    /// For group keys this value is always the broadcast address.
    5: peer_addr ieee80211.MacAddr;
    /// Index for rotating keys, e.g. group keys.
    /// This value is always 0 for key types which aren't rotating, e.g. pairwise keys.
    6: key_idx uint8;
    // They key's actual bytes.
    7: key vector<uint8>:ieee80211.MAX_KEY_LEN;
    /// Receive Sequence Counter for group keys only.
    /// In all other cases the RSC will be 0.
    8: rsc uint64;
};

type WlanRxPacket = struct {
    @buffer
    mac_frame vector<uint8>:MAX;
    info WlanRxInfo;
};

type WlanTxPacket = struct {
    @buffer
    mac_frame vector<uint8>:MAX;
    /// Additional data needed to transmit the packet.
    /// TODO(fxbug.dev/105579): This field is ignored by iwlwifi.
    info WlanTxInfo;
};

/// Includes the information about beacon template.
type WlanBeaconConfiguration = table {
    /// Points to the beacon template. Since this is just the template, some packet content can
    /// contain only minimum valid info. They will be changed later by hardware/firmware or software.
    /// Note that the driver must copy the packet content into its own memory and cannot rely on
    /// the pointers in the struct.
    1: packet_template WlanTxPacket;

    /// TIM offset (in bytes) to the start of |bcn_tmpl|. This points to the first byte of TIM IE,
    /// which is the tag ID.
    2: tim_ele_offset uint64;

    /// in TU
    3: beacon_interval uint16;
};

@discoverable
@transport("Driver")
@banjo_layout("ddk-interface")
protocol WlanSoftmacIfc {
    /// Report the status of the softmac device.
    Status(struct {
        status uint32;
    }) -> ();

    /// Submit received data to the next driver.
    Recv(struct {
        packet WlanRxPacket;
    }) -> ();

    /// Reports the status of an attempted transmission.
    /// |tx_status|: contains status info of one transmitted packet to one peer at one specific rate.
    ReportTxStatus(struct {
        tx_status fuchsia.wlan.common.WlanTxStatus;
    }) -> ();

    /// Reports completion of a scan associated with the unique `scan_id`. The status
    /// `ZX_ERR_OUT_OF_RANGE` implies the scan request included a prohibited channel.
    /// The channel may be prohibited because of the current country setting.
    ScanComplete(struct {
        status zx.status;
        scan_id uint64;
    }) -> ();
};

/// Argument struct to be passed as the single argument to WlanSoftmac.StartActiveScan
type WlanSoftmacStartActiveScanRequest = table {
    /// List of channels to scan on. An empty list of channels will cause a
    /// scan request to immediately return ZX_ERR_INVALID_ARGS.
    ///
    /// Invalid channel numbers will be silently ignored. The validity of a channel
    /// number depends on the current regulatory region, and a SoftMAC driver cannot
    /// always determine the region setting. This is especially the case when
    /// firmware changes the region setting dynamically.
    1: channels vector<uint8>:ieee80211.MAX_UNIQUE_CHANNEL_NUMBERS;

    /// List of SSIDs to scan for. For a list with a single SSID, the SSID will be placed in
    /// the SSID element in the Probe Request frame. For a list with more than one SSID,
    /// all SSIDs will be placed in an SSID List element in the Probe Request frame with the
    /// first SSID in the list in the required SSID element. An empty list is the same as
    /// specifying a list containing only the wildcard SSID.
    2: ssids vector<ieee80211.CSsid>:ieee80211.SSID_LIST_MAX;

    /// Buffer containing a MAC header (as defined in IEEE Std 802.11-2016, 9.3.3.2) to
    /// include in each Probe Request frame.
    @buffer
    3: mac_header vector<uint8>:ieee80211.MAX_MGMT_FRAME_MAC_HEADER_BYTE_LEN;

    /// Buffer containing IE bytes to include in each Probe Request frame.
    @buffer
    4: ies vector<uint8>:ieee80211.MAX_VHT_MPDU_BYTE_LEN_2;

    /// Minimum duration to spend on each channel during the scan.
    5: min_channel_time zx.duration;

    /// Maximum duration to spend on each channel during the scan.
    6: max_channel_time zx.duration;

    /// Minimum duration to spend on the home channel(s) between the dwell time on each channel
    /// where a home channel corresponds to channels the device should otherwise be present
    /// on while not scanning.
    7: min_home_time zx.duration;

    /// Minimum number of Probe Request frames to transmit per channel visit during a scan.
    /// The definition of a channel visit may differ between device drivers, but it is roughly
    /// the interval of time spent on a specific channel during a scan.
    ///
    /// Sending more than one Probe Request frame on a channel may increase the probability that
    /// it is received in a noisy environment.
    8: min_probes_per_channel uint8;

    /// Maximum number of Probe Request frames to transmit per channel visit during a scan.
    /// The definition of a channel visit may differ between device drivers, but it is roughly
    /// the interval of time spent on a specific channel during a scan. Specifying 0 is invalid
    /// since at least one Probe Request frame must be transmitted for an active scan.
    ///
    /// Limiting the number of Probe Request frames sent on a channel reduces the time spent
    /// transmitting frames, and thus increase the time spent receiving frames, while scanning.
    9: max_probes_per_channel uint8;
};

type WlanVhtOp = struct {
    vht_cbw uint8;
    center_freq_seg0 uint8;
    center_freq_seg1 uint8;
    basic_mcs uint16;
};

// IEEE Std 802.11-2016, 9.4.2.57
type WlanHtOp = struct {
    primary_channel uint8;

    /// First 8 bits of HT Operation:
    /// - Secondary Channel Offset: 2 bits
    /// - STA Channel Width: 1 bit
    /// - RIFS Mode: 1 bit
    /// - Reserved: 4 bits
    /// - HT Protection: 2 bits
    /// - Nongreenfield HT STAs Present: 1 bit
    /// - Reserved: 1 bit
    /// - OBSS Non-HT STAs Present: 1 bit
    /// - Channel Center Frequency Segment 2: 8 bits (spec says "11 bits": that can't be correct)
    /// - Reserved: 3 bits (spec says "2 bits": can't be correct either)
    /// - Reserved: 6 bits
    /// - Dual Beacon: 1 bit
    /// - Dual CTS Protection: 1 bit
    head uint32;

    /// Next 8 bits of HT Operation:
    /// - STBC Beacon: 1 bit
    /// - L-SIG TXOP Protection Full Support: 1 bit
    /// - PCO Active: 1 bit
    /// - PCO Phase: 1 bit
    /// - Reserved: 4 bits
    tail uint8;

    mcs_set array<uint8, 16>;
};

const WLAN_MAC_MAX_RATES uint32 = 263; // (8 + 255)

/// Argument table to be passed as the single argument to
/// WlanSoftmac.ConfigureAssoc.
/// All information here is relevant only in the context of the association with
/// the given peer_addr.
/// All fields in this table are required unless stated otherwise.
type WlanAssociationConfig = table {
    /// The MAC address of the peer with which we are now associated.
    1: bssid ieee80211.MacAddr;
    /// A unique identifier for this specific association. This is unique among
    /// active associations, not necessarily historical ones.
    2: aid uint16;
    3: listen_interval uint16;
    /// The channel on which we have associated with this peer.
    4: channel fuchsia.wlan.common.WlanChannel;

    /// QoS capable and parameters
    5: qos bool;
    /// WFA WMM v1.2, 2.2.2
    6: wmm_params fuchsia.hardware.wlan.associnfo.WlanWmmParameters;

    /// Coincatenation of SupportedRates and ExtendedSupportedRates
    /// IEEE Std 802.11-2016, 9.4.2.3 & 9.4.2.13
    7: rates_cnt uint16;
    8: rates array<uint8, WLAN_MAC_MAX_RATES>;

    /// IEEE Std 802.11-2016, 9.4.1.4
    9: capability_info uint16;

    /// IEEE Std 802.11-2016, 9.4.2.56, 57
    /// Rx MCS Bitmask in Supported MCS Set field represents the set of MCS
    /// the peer can receive at from this device, considering this device's Tx capability.
   10: ht_cap_is_valid bool;
    /// This field is optional.
   11: ht_cap ieee80211.HtCapabilities;
   12: ht_op_is_valid bool;
    /// This field is optional.
   13: ht_op WlanHtOp;

    /// IEEE Std 802.11-2016, 9.4.2.158, 159
   14: vht_cap_is_valid bool;
    /// This field is optional.
   15: vht_cap ieee80211.VhtCapabilities;
   16: vht_op_is_valid bool;
    /// This field is optional.
   17: vht_op WlanVhtOp;
};

@discoverable
@transport("Driver")
protocol WlanSoftmac {

    // TODO(fxbug.dev/87050): the need to nest query response within a struct {} is no longer
    // necessary. However if the response is a struct, then ReplySuccess() expects each field to be
    // passed individually, which makes the code harder to read. Once all Query responses switch to
    // tables, this can beconsidered.

    /// Obtain information about the device and supported features
    /// Safe to call when the softmac is not started.
    Query() -> (WlanSoftmacQueryResponse) error zx.status;

    /// Query the underlying device for feature support related to station
    /// discovery (e.g. scans and probes). Safe to call when the softmac is not
    /// started.
    QueryDiscoverySupport() -> (struct {
        resp fuchsia.wlan.common.DiscoverySupport;
    }) error zx.status;

    /// Query the underlying device for information related to how it implements
    /// MAC-level functionality. Safe to call when the softmac is not started.
    QueryMacSublayerSupport() -> (struct {
        resp fuchsia.wlan.common.MacSublayerSupport;
    }) error zx.status;

    /// Query the underlying device for features related to specific
    /// security modes. Safe to call when the softmac is not started.
    QuerySecuritySupport() -> (struct {
        resp fuchsia.wlan.common.SecuritySupport;
    }) error zx.status;

    /// Query the underlying device for features related to spectrum usage, e.g.
    /// DFS. Safe to call when the softmac is not started.
    QuerySpectrumManagementSupport() -> (struct {
        resp fuchsia.wlan.common.SpectrumManagementSupport;
    }) error zx.status;

    /// Start a softmac on the underlying device, using the given ifc to pass
    /// events upwards. Callbacks on ifc may be invoked from now until Stop()
    /// is called.
    ///
    /// The returned sme_channel is the server endpoint of a wlan_mlme.fidl:MLME
    /// protocol, the client end of which is held by SME. This channel is used for
    /// SME <-> MLME communication.
    ///
    /// Except where noted, WlanSoftmac APIs may only be called while the softmac
    /// is running after a successful call to Start().
    ///
    /// Common errors include: \
    ///   ZX_ERR_ALREADY_BOUND: `Start` was already called on this softmac.
    Start(resource struct {
        ifc client_end:WlanSoftmacIfc;
    }) -> (resource struct {
        sme_channel zx.handle:CHANNEL;
    }) error zx.status;

    /// Shut down the softmac if it is running.
    /// Safe to call when the softmac is not running.
    Stop() -> ();

    /// Queue a packet for transmission. May return before a packet has actually
    /// been transmitted. This call does not take ownership of the buffer passed in
    /// the WlanTxPacket.
    ///
    /// Errors result from a failure to queue the packet for transmission.
    /// An OK result thus only indicates that the packet was queued, *not* that
    /// it was successfully transmitted.
    QueueTx(struct {
        packet WlanTxPacket;
    }) -> () error zx.status;

    /// Set the primary radio channel, e.g. in response to a channel switch event.
    /// If successful, this will trigger the channel switch immediately. This may
    /// impact the transmission of any frames that are in-flight, and might also
    /// interfere with an ongoing scan request.
    ///
    /// Common errors include: \
    ///   ZX_ERR_NOT_SUPPORTED: The device cannot switch to the requested channel.
    SetChannel(table {
        1: channel fuchsia.wlan.common.WlanChannel;
    }) -> () error zx.status;

    /// Join a specific BSS in which we will participate.
    /// This applies regardless of if we are hosting the BSS or joining it
    /// (indicated by the `remote` flag in `JoinBssRequest`).
    /// If successful, the device will switch to the correct channel and perform
    /// any internal filtering/timing operations required to join the BSS.
    /// For client STAs, this is the first step before authenticating.
    ///
    /// Common errors include: \
    ///   ZX_ERR_NOT_SUPPORTED: The device does not support the given bss config.
    JoinBss(struct {
        join_request fuchsia.wlan.internal.JoinBssRequest;
    }) -> () error zx.status;

    // Enables or disables hardware Beaconing.
    // * |beacon_config|: Pass `nullptr` to disable hardware Beacons. Used by hardware beacon offload.
    EnableBeaconing(struct {
        beacon_config WlanBeaconConfiguration;
    }) -> () error zx.status;

    /// Enables, disables or updates hardware beaconing.
    /// The device should start transmitting a beacon derived from the given
    /// configuration, or update the transmitted beacon if hardware beaconing
    /// is already enabled.
    /// If the config is not provided, hardware beaconing should be disabled.
    ///
    /// Common errors include: \
    ///   ZX_ERR_NOT_SUPPORTED: The device does not support hardware beacons. \
    ///   ZX_ERR_INVALID_ARGS: The device cannot transmit the requested beacon.
    ConfigureBeaconing(struct {
        packet WlanTxPacket;
    }) -> () error zx.status;

    /// Install a key for encryption when transmitting or receiving protected
    /// frames.
    ///
    /// Common errors include:
    ///   ZX_ERR_INVALID_ARGS: The given config does not specify a valid key.
    ///   ZX_ERR_NOT_SUPPORTED: The device does not support the given cipher.
    InstallKey(WlanKeyConfiguration) -> () error zx.status;

    /// Notifies MAC and PHY parameters negotiated through a successful association
    ConfigureAssoc(struct {
        assoc_cfg WlanAssociationConfig;
    }) -> () error zx.status;

    /// Notifies MAC and PHY that the peer has been de-associated.
    ClearAssoc(struct {
        peer_addr ieee80211.MacAddr;
    }) -> () error zx.status;

    /// Start a passive scan in the device driver. Scan results will be delivered
    /// as Beacon frames via WlanSoftmacIfc.Recv(). When complete,
    /// WlanSoftmacIfc.ScanComplete() will be called with the corresponding
    /// unique `scan_id`.
    ///
    /// A device driver indicates support for `StartPassiveScan()` using
    /// `fuchsia.wlan.common/ScanOffloadExtension.supported`.
    ///
    /// Common errors include: \
    ///   ZX_ERR_INVALID_ARGS: The device is not capable of performing the
    ///       requested scan, e.g. because an incompatible channel was requested. \
    ///   ZX_ERR_UNAVAILABLE: The device cannot currently perform scans. \
    ///   ZX_ERR_SHOULD_WAIT: Another scan is already in-progress.
    StartPassiveScan(table {
        /// List of channels to scan on. An empty list of channels will cause a
        /// scan request to immediately return ZX_ERR_INVALID_ARGS.
        ///
        /// Invalid channel numbers will be silently ignored. The validity of a channel
        /// number depends on the current regulatory region, and a SoftMAC driver cannot
        /// always determine the region setting. This is especially the case when
        /// firmware changes the region setting dynamically.
        ///
        /// This is a required parameter.
        1: channels vector<uint8>:ieee80211.MAX_UNIQUE_CHANNEL_NUMBERS;

        /// Minimum duration to spend on each channel during the scan.
        2: min_channel_time zx.duration;

        /// Maximum duration to spend on each channel during the scan.
        3: max_channel_time zx.duration;

        /// Minimum duration to spend on the home channel(s) between the dwell time on
        /// each channel where a home channel corresponds to channels the device should
        /// otherwise be present on while not scanning.
        4: min_home_time zx.duration;
    }) -> (table {
        1: scan_id uint64;
    }) error zx.status;

    /// Start an active scan in the device driver. Scan results will be delivered
    /// as Beacon or Probe Response frames via WlanSoftmacIfc.Recv(). When
    /// complete, WlanSoftmacIfc.ScanComplete() will be called with the
    /// corresponding unique `scan_id`.
    ///
    /// The IEs specified must not result in a Probe Request MMPDU that exceed the
    /// limits defined by IEEE Std 802.11-2016, 9.2.4.7. MMPDU limit constants can
    /// be found in fuchsia.wlan.ieee80211. These limits are very large and will
    /// likely not be exceeded by specifying the most common IEs found in
    /// Probe Request frames.
    ///
    /// A device driver indicates support for `StartActiveScan()` using
    /// `fuchsia.wlan.common/ProbeRequestOffloadExtension.supported`.
    ///
    /// Common errors include: \
    ///   ZX_ERR_INVALID_ARGS: The device is not capable of performing the
    ///       requested scan, e.g. because an incompatible channel was requested. \
    ///   ZX_ERR_UNAVAILABLE: The device cannot currently perform scans. \
    ///   ZX_ERR_SHOULD_WAIT: Another scan is already in-progress.
    StartActiveScan(WlanSoftmacStartActiveScanRequest) -> (table {
        1: scan_id uint64;
    }) error zx.status;

    /// If supported, cancel the ongoing scan corresponding to `scan_id` in the
    /// device driver, where `scan_id` is an identifier returned by
    /// `StartPassiveScan()` or `StartActiveScan()`. The return value of this
    /// function indicates whether a valid scan_id was passed and will be
    /// canceled. The actual result of cancellation should be indicated by the
    /// driver using `fuchsia.hardware.wlan.softmac/WlanSoftmacIfc.ScanComplete()`.
    ///
    /// A device driver indicates support for `CancelScan()` using
    /// `fuchsia.wlan.common/ScanOffloadExtension.scan_cancel_supported`.
    ///
    /// Common errors include: \
    ///   ZX_ERR_NOT_FOUND: The given scan_id does not match an ongoing scan. \
    ///   ZX_ERR_NOT_SUPPORTED: The device does not support scan cancellation.
    CancelScan(table {
        1: scan_id uint64;
    }) -> () error zx.status;

    /// Indicate the device of modified WiFi Multimedia (WMM) parameters for a
    /// particular access category (AC).
    UpdateWmmParameters(struct {
        ac fuchsia.hardware.wlan.associnfo.WlanAccessCategory;
        params fuchsia.hardware.wlan.associnfo.WlanWmmParameters;
    }) -> () error zx.status;
};

service Service {
    wlan_softmac client_end:WlanSoftmac;
};
