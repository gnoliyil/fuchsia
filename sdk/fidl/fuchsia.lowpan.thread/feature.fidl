// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.lowpan.thread;

using fuchsia.lowpan;

/// OpenThread feature configuration.
///
/// This table describes what OpenThread features are enabled or disabled
/// for a given interface. See the [`Feature`] protocol for more information.
@available(added=12)
type FeatureConfig = table {
    /// Determines if TREL is enabled or disabled.
    1: trel_enabled bool;

    /// Determines if NAT64 is enabled or disabled.
    2: nat64_enabled bool;

    /// Determines if SRP replication is enabled or disabled.
    3: srp_replication_enabled bool;
};

/// Protocol for connecting to [`Feature`] on a LoWPAN device.
@discoverable
@available(added=12)
protocol FeatureConnector {
    /// Connects to the [`Feature`] protocol on the
    /// named LoWPAN device.
    ///
    /// The name of the interface can be learned by calling
    /// [`fuchsia.lowpan/Lookup.GetDevices`].
    ///
    /// If there is an error in processing this request
    /// the given channel is closed and an epitaph code used
    /// to describe the reason for the failure:
    ///
    /// * `ZX_ERR_INVALID_ARGUMENT`: The given interface name
    ///   was not formatted correctly or otherwise invalid.
    /// * `ZX_ERR_NOT_FOUND`: No interface was found with the
    ///   given name.
    /// * `ZX_ERR_NOT_SUPPORTED`: The interface exists but
    ///   does not support this protocol.
    Connect(resource struct {
        name fuchsia.lowpan.InterfaceName;
        server_end server_end:Feature;
    });
};

/// Protocol for fetching and updating the OpenThread feature configuration
/// for a specific LoWPAN interface.
@available(added=12)
protocol Feature {
    /// Updates the current OpenThread feature configuration for this
    /// interface.
    ///
    /// Any unset field in `config` will leave that field unchanged.
    UpdateFeatureConfig(struct {
        config FeatureConfig;
    }) -> ();

    /// Returns the current OpenThread feature configuration for this
    /// interface.
    ///
    /// A unset field in the returned value means that feature is not
    /// supported.
    GetFeatureConfig() -> (struct {
        config FeatureConfig;
    });
};
