// Copyright 2022 The Fuchsia Authors.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/// This library contains protocols used by the `ffx audio` tool only.
@available(added=HEAD)
library fuchsia.audio.ffxdaemon;

using fuchsia.media;
using fuchsia.hardware.audio;
using fuchsia.io;
using zx;

/// Where to route incoming audio data.
type PlayLocation = flexible union {
    /// Play audio through an AudioRenderer.
    1: renderer RendererType;

    /// Play audio directly to device ring buffer.
    2: ring_buffer DeviceSelector;
};

/// Configuration for AudioRenderer.
type RendererConfig = table {
    /// The usage of the audio stream.
    /// Required.
    1: usage fuchsia.media.AudioRenderUsage;

    /// How to set the reference clock.
    2: clock ClockType;
};

/// Options for AudioRenderers.
type RendererType = flexible union {
    /// Renderer for standard frequencies.
    1: standard_renderer RendererConfig;

    /// Renderer for ultrasonic frequencies.
    2: ultrasound_renderer struct {};
};

/// Reference clock options for AudioRenderer and AudioCapturer.
type ClockType = flexible union {
    /// Use a flexible clock.
    1: flexible struct {};

    /// Use the system monotonic clock.
    2: monotonic struct {};

    /// Use a monotonic clock with possible rate adjustment and offset relative to the system
    /// monotonic clock.
    3: custom CustomClockInfo;
};

/// Configuration for the custom reference clock passed to AudioRenderer or AudioCapturer.
type CustomClockInfo = table {
    /// Frequency rate adjustment to a clone of the system monotonic clock.
    /// Given in parts per million relative to the system monotonic rate.
    /// Must fall within [ZX_CLOCK_UPDATE_MIN_RATE_ADJUST, ZX_CLOCK_UPDATE_MAX_RATE_ADJUST].
    /// For more info, see `zx_clock_update`.
    1: rate_adjust int32;

    /// Starting delta between the reference clock passed to AudioRenderer or Capturer
    /// and the system monotonic clock.
    2: offset int32;
};

/// Where to capture audio data.
type RecordLocation = flexible union {
    /// Capture audio through an AudioCapturer.
    1: capturer CapturerType;

    /// Capture audio loopback.
    2: loopback struct {};

    /// Capture audio directly from the device ring buffer.
    3: ring_buffer DeviceSelector;
};

/// Options for AudioCapturers.
type CapturerType = flexible union {
    /// AudioCapturer for standard frequencies.
    1: standard_capturer CapturerInfo;

    /// AudioCapturer for ultrasonic frequencies.
    2: ultrasound_capturer struct {};
};

/// Configuration for AudioCapturer.
type CapturerInfo = table {
    /// The usage of the audio stream.
    /// Required.
    1: usage fuchsia.media.AudioCaptureUsage;

    /// How to set the reference clock.
    2: clock ClockType;
};

/// Gain settings.
type GainSettings = table {
    /// Whether to mute the audio stream.
    1: mute bool;

    /// Gain level in dB.
    2: gain float32;
};

/// Device target info.
type DeviceInfo = table {
    /// Top level static properties of the stream.
    /// Required.
    1: stream_properties fuchsia.hardware.audio.StreamProperties;

    /// Supported formats.
    /// Required.
    2: supported_formats
            vector<fuchsia.hardware.audio.SupportedFormats>:fuchsia.hardware.audio.MAX_COUNT_FORMATS;

    /// Gain state.
    /// Required.
    3: gain_state fuchsia.hardware.audio.GainState;

    /// Plug state.
    /// Required.
    4: plug_state fuchsia.hardware.audio.PlugState;
};

/// Identifies which device to retrieve information about.
type DeviceSelector = table {
    /// Whether device is input or output.
    /// Required.
    1: is_input bool;

    /// ID of device.
    /// Required.
    2: id fuchsia.io.Path;
};

/// Cancels an AudioDaemonRecordRequest if no duration was specified.
protocol AudioDaemonCanceler {
    /// Finish sending audio data back to the client.
    Cancel() -> () error zx.status;
};

/// The main entry point for ffx audio.
@discoverable
protocol AudioDaemon {
    /// Plays audio data from socket on either AudioRenderer or on device ring buffer.
    /// Returns sockets for transmitting info back to stdout and stderr on host.
    Play(resource table {
        /// Socket for audio data. Should transmit entire file in WAV format.
        /// Required.
        1: socket zx.handle:SOCKET;

        /// Play on device ring buffer or AudioRenderer.
        /// Required.
        2: location PlayLocation;

        /// Play settings.
        3: gain_settings GainSettings;
    }) -> (resource table {
        /// Information from daemon component for ffx plugin to display.
        /// Always present.
        1: stdout zx.handle:SOCKET;

        /// Errors from daemon component for ffx plugin to display.
        /// Always present.
        2: stderr zx.handle:SOCKET;
    }) error zx.status;

    /// Records audio data from either AudioCapturer or device ring buffer.
    /// Returns sockets containing audio data and errors back to host.
    Record(resource table {
        /// Record from AudioCapturer or ring buffer.
        /// Required.
        1: location RecordLocation;

        /// Streamtype.
        /// Required.
        2: stream_type fuchsia.media.AudioStreamType;

        /// Duration in nanoseconds to record audio data.
        /// Optional.
        3: duration zx.duration;

        /// Handle to specify when to stop.
        /// Can be set only if the `duration` is not specified.
        4: canceler server_end:AudioDaemonCanceler;

        /// Record gain settings.
        /// Optional.
        5: gain_settings GainSettings;

        /// Buffer size.
        /// Optional.
        6: buffer_size uint64;
    }) -> (resource table {
        /// Contains audio data in the form of a complete WAV file.
        /// Always present.
        1: stdout zx.handle:SOCKET;

        /// Errors from daemon component for ffx plugin to display.
        /// Always present.
        2: stderr zx.handle:SOCKET;
    }) error zx.status;

    /// Lists all available audio devices on target.
    ListDevices() -> (resource table {
        /// List of available devices, sorted by name.
        /// Required.
        1: devices vector<fuchsia.io.Path>:MAX;
    }) error zx.status;

    /// Returns details about a specific audio device.
    DeviceInfo(resource table {
        /// Id of device to retrieve information about, and
        /// whether it is an input or output device.
        /// Required.
        1: device DeviceSelector;
    }) -> (resource table {
        /// Information about device.
        1: device_info DeviceInfo;
    }) error zx.status;

    /// Sets the gain of the stream in decibels.
    DeviceSetGainState(resource table {
        /// Id of the device to set the gain state.
        /// Required.
        1: device DeviceSelector;

        /// Desired gain state.
        /// Required.
        2: gain_state fuchsia.hardware.audio.GainState;
    }) -> () error zx.status;
};
