// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.hardware.platform.device;

using zx;

type DeviceInfo = table {
    1: vid uint32;
    2: pid uint32;
    3: did uint32;
    4: mmio_count uint32;
    5: irq_count uint32;
    6: bti_count uint32;
    7: smc_count uint32;
    8: metadata_count uint32;
    9: name string:32;
};

type BoardInfo = table {
    /// Vendor ID for the board.
    1: vid uint32;
    /// Product ID for the board.
    2: pid uint32;
    /// Board name from the boot image platform ID record,
    /// (or from the BIOS on x86 platforms).
    3: board_name string:32;
    /// Board specific revision number.
    4: board_revision uint32;
};

type Mmio = resource table {
    /// Offset from beginning of VMO where the mmio region begins.
    1: offset zx.Off;
    /// Size of mmio region.
    2: size uint64;
    3: vmo zx.Handle:VMO;
};

@discoverable
closed protocol Device {
    // TODO(fxb/112765): Combine these methods into a single GetResources
    // method.

    strict GetMmio(struct {
        index uint32;
    }) -> (Mmio) error zx.Status;

    strict GetInterrupt(struct {
        index uint32;
        flags uint32;
    }) -> (resource struct {
        irq zx.Handle:INTERRUPT;
    }) error zx.Status;

    strict GetBti(struct {
        index uint32;
    }) -> (resource struct {
        bti zx.Handle:BTI;
    }) error zx.Status;

    strict GetSmc(struct {
        index uint32;
    }) -> (resource struct {
        smc zx.Handle:RESOURCE;
    }) error zx.Status;

    strict GetDeviceInfo() -> (DeviceInfo) error zx.Status;

    strict GetBoardInfo() -> (BoardInfo) error zx.Status;
};

service Service {
    device client_end:Device;
};
