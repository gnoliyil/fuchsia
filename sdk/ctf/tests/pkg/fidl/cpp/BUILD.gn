# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/test.gni")
import("//sdk/ctf/build/ctf.gni")
import("//src/tests/fidl/conformance_suite/gidl-conformance-suite.gni")
import("//tools/fidl/gidl/gidl.gni")

gidl_output_prefix = "conformance_suite__"
gidl_deps = []
foreach(gidl_file, conformance_suite_gidl_files) {
  gidl_name = get_path_info(gidl_file, "name")
  target = "${gidl_output_prefix}${gidl_name}"
  gidl_deps += [ ":" + target ]
  gidl_hlcpp_conformance(target) {
    testonly = true
    inputs = [ gidl_file ]
    fidl = conformance_suite_fidl_target
    deps = [
      ":test_util",
      "//zircon/system/ulib/zxtest",
    ]
    if (is_fuchsia) {
      deps += [ ":handle_util" ]
    }
  }
}

ctf_source_set("host_test_sources") {
  testonly = true

  sources = [
    "bits_unittest.cc",
    "bitset_unittest.cc",
    "clone_unittest.cc",
    "comparison_unittest.cc",
    "defaults_unittest.cc",
    "enum_unittest.cc",
    "fidl_test.cc",
    "roundtrip_test.cc",
    "string_unittest.cc",
    "table_unittest.cc",
    "vector_unittest.cc",
    "xunion_unittest.cc",
  ]

  deps = [
    ":test_util",
    "//sdk/lib/fidl/cpp:cpp_base",
    "//sdk/lib/stdcompat",
    "//sdk/testing/fidl:fidl_test_hlcpp",
    "//zircon/system/ulib/zxtest",
  ]
}

ctf_source_set("test_sources") {
  testonly = true

  # TODO(jamesr): Make this an sdk source set
  # sdk_name = "fidl_cpp_tests"
  # include_base = "//sdk"

  sources = [
    "binding_set_unittest.cc",
    "binding_unittest.cc",
    "collision_unittest.cc",
    "decode_handle_rights_test.cc",
    "encode_decode_unittest.cc",
    "event_sender_unittest.cc",
    "handle_close_many_unittest.cc",
    "interface_handle_unittest.cc",
    "interface_ptr_set_unittest.cc",
    "interface_ptr_unittest.cc",
    "interface_request_unittest.cc",
    "message_reader_unittest.cc",
    "message_unittest.cc",
    "proxy_controller_unittest.cc",
    "stub_controller_unittest.cc",
    "synchronous_interface_ptr_unittest.cc",
    "unknown_interactions_test.cc",
    "wire_format_v2_decode_test.cc",
  ]

  deps = [
    ":test_util",
    ":union_migration_test_fidl_hlcpp",
    "//sdk/lib/fidl/cpp",
    "//sdk/lib/fit-promise",
    "//sdk/testing/fidl:collision_test_hlcpp",
    "//sdk/testing/fidl:fidl_test_handles_hlcpp",
    "//sdk/testing/fidl:fidl_test_hlcpp",
    "//sdk/testing/fidl:test",
    "//sdk/testing/fidl:test_support",
    "//sdk/testing/fidl/protocols_tests:test.unknown.interactions_hlcpp",
    "//zircon/system/ulib/async:async-cpp",
    "//zircon/system/ulib/async-loop",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/zxtest",
  ]

  public_configs = [ "//sdk/config" ]
}

ctf_executable("fidl_hlcpp_conformance_tests_bin") {
  visibility = [ ":*" ]
  testonly = true

  output_name = "fidl_hlcpp_conformance_tests"

  deps = [
    "//sdk/testing/fidl:test",
    "//sdk/testing/fidl:test_support",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/zxtest",
  ]

  # TODO(75000): Add GIDL to the CTS archive.
  non_cts_deps = gidl_deps
}

ctf_fuchsia_component("fidl_hlcpp_conformance_tests") {
  manifest = "meta/fidl_hlcpp_conformance_tests.cml"
  testonly = true
  visibility = [ ":*" ]
  deps = [ ":fidl_hlcpp_conformance_tests_bin" ]
}

ctf_executable("fidl_hlcpp_unit_tests_bin") {
  visibility = [ ":*" ]
  testonly = true

  output_name = "fidl_hlcpp_unit_tests"

  deps = [
    ":host_test_sources",
    ":test_sources",
    "//sdk/testing/fidl:test",
    "//sdk/testing/fidl:test_support",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/zxtest",
  ]
}

ctf_fuchsia_component("fidl_hlcpp_unit_tests") {
  manifest = "meta/fidl_hlcpp_unit_tests.cml"
  testonly = true
  visibility = [ ":*" ]
  deps = [ ":fidl_hlcpp_unit_tests_bin" ]
}

ctf_fuchsia_test_package("fidl_hlcpp_unit_test_package") {
  package_name = "fidl_hlcpp_unit_test_package"
  test_components = [ ":fidl_hlcpp_unit_tests" ]
}

ctf_fuchsia_test_package("fidl_hlcpp_conformance_test_package") {
  package_name = "fidl_hlcpp_conformance_test_package"
  test_components = [ ":fidl_hlcpp_conformance_tests" ]
}

if (is_host) {
  # TODO(johnshamoon): Add cts_test() and do this in the template.
  test("fidl_hlcpp_unit_tests_host") {
    output_name = "fidl_hlcpp_unit_tests"
    deps = [
      ":host_test_sources",
      "//zircon/system/ulib/zxtest",
    ]
  }

  test("fidl_hlcpp_conformance_tests_host") {
    output_name = "fidl_hlcpp_conformance_tests"
    deps = [ "//zircon/system/ulib/zxtest" ] + gidl_deps
  }
}

ctf_fidl("union_migration_test_fidl") {
  name = "fidl.test.unionmigration"

  sources = [ "union_migration.test.fidl" ]

  excluded_checks = [ "invalid-copyright-for-platform-source-library" ]

  enable_hlcpp = true
}

ctf_source_set("test_util") {
  testonly = true

  sources = [ "test/test_util.h" ]

  public_configs = [ "//sdk/config" ]

  public_deps = [ "//sdk/lib/fidl/cpp:cpp_base" ]
}

ctf_source_set("handle_util") {
  testonly = true

  sources = [
    "test/handle_util.cc",
    "test/handle_util.h",
  ]

  public_configs = [ "//sdk/config" ]

  public_deps = [ "//zircon/system/ulib/zx" ]
}

group("tests") {
  testonly = true
  deps = [
    ":fidl_hlcpp_conformance_test_package",
    ":fidl_hlcpp_conformance_tests_host($host_toolchain)",
    ":fidl_hlcpp_unit_test_package",
    ":fidl_hlcpp_unit_tests_host($host_toolchain)",
  ]
}
