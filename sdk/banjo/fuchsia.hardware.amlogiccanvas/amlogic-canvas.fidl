// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.hardware.amlogiccanvas;

using zx;

type CanvasFlags = strict enum : uint32 {
    READ = 0x1;
    WRITE = 0x2;
};

type CanvasBlockMode = flexible enum : uint32 {
    LINEAR = 0x0;
    BLOCK_32X32 = 0x1;
    BLOCK_64X32 = 0x2;
};

type CanvasEndianness = flexible enum : uint32 {
    SWAP_NONE = 0x0;
    SWAP_8BITS = 0x1;
    SWAP_16BITS = 0x2;
    SWAP_32BITS = 0x4;
    SWAP_64BITS = 0x8;
};

/// CanvasInfo corresponds to the DMC_CAV_LUT_DATAL/DATAH registers used to
/// program memory layout and format for a single canvas.
type CanvasInfo = struct {
    /// Height in rows.
    height uint32;
    /// Offset between rows of pixels, in bytes.
    stride_bytes uint32;
    /// If (1<<23) is set, accesses outside of [0, height) wrap.
    /// If (1<<22) is set, accesses outside of [0, width) wrap.
    wrap uint32;
    /// Use a tiled layout if non-zero. See CanvasBlockMode.
    blkmode uint32;
    /// Swap words of varying size within the data. See CanvasEndianness.
    endianness uint32;
    /// Flags to control access to canvas memory. See CanvasFlags.
    flags uint32;
};

@transport("Banjo")
@banjo_layout("ddk-protocol")
protocol AmlogicCanvas {

    /// Configures a canvas. Canvases are a special construct in the AMLogic
    /// memory controller, used to turn image data accesses into memory accesses
    /// while respecting block/tiling, stride, and endianness.
    ///
    /// `vmo` is the backing memory to use for this canvas.
    /// `offset` is the relative address for image data within `vmo`.
    /// `info` describes the canvas layout (see CanvasInfo for details).
    Config(resource struct {
        vmo zx.handle:VMO;
        offset uint64;
        info CanvasInfo;
    }) -> (struct {
        s zx.status;
        canvas_idx uint8;
    });
    /// Frees up a canvas.
    Free(struct {
        canvas_idx uint8;
    }) -> (struct {
        s zx.status;
    });
};
