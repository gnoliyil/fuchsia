// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library test.transport;

using zx;
using fdf;

@transport("Driver")
protocol EmptyProtocol {};

@transport("Driver")
protocol TwoWayTest {
    TwoWay(struct {
        payload uint32;
    }) -> (struct {
        payload uint32;
    });
};

@transport("Driver")
protocol TwoWayEmptyArgsTest {
    TwoWayEmptyArgs() -> ();
};

@transport("Driver")
protocol OneWayTest {
    OneWay(struct {
        // The choice of byte vectors is intentional:
        // It gives coverage to a case which potentially uses multiple iovec entries.
        payload vector<uint8>;
    });
};

@transport("Driver")
protocol SendDriverTransportEndTest {
    SendDriverTransportEnd(resource struct {
        c client_end:OneWayTest;
        s server_end:OneWayTest;
    }) -> (resource struct {
        c client_end:OneWayTest;
        s server_end:OneWayTest;
    });
};

@transport("Driver")
protocol SendZirconHandleTest {
    SendZirconHandle(resource struct {
        h zx.Handle:EVENT;
    }) -> (resource struct {
        h zx.Handle:EVENT;
    });
};

@transport("Driver")
protocol SendFdfChannelTest {
    SendFdfChannel(resource struct {
        h fdf.handle:CHANNEL;
    }) -> (resource struct {
        h fdf.handle:CHANNEL;
    });
};

@transport("Driver")
protocol OnErrorCloseHandlesTest {
    // The first string member is used to trigger an encoding error.
    SendZirconHandle(resource struct {
        s string:1;
        h zx.Handle:CHANNEL;
    });

    // The first string member is used to trigger an encoding error.
    SendDriverClientEnd(resource struct {
        s string:1;
        h client_end:OneWayTest;
    });
};

@transport("Driver")
protocol SendEventTest {
    // Send an event.
    -> OnSendEvent(resource struct {
        s string:10;
    });
};
