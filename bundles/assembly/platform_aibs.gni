# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/icu/config.gni")  # icu_git_info

platform_aibs_dir = get_label_info("//bundles/assembly", "target_out_dir")

# LINT.IfChange

# These are the user-buildtype-safe platform AIBs that are used by bootstrap
# feature-set-level assemblies.  This is a subset of the overall platform AIBs
# so that these systems (e.g. bringup) don't need to build the entire platform.
bootstrap_user_platform_aib_names = [
  # The bootstrap feature-set-level
  "bootstrap",

  # Driver Framework
  "driver_framework_v1",
  "driver_framework_v2",

  # Graphics
  "virtcon",

  # Kernel args
  "kernel_args_user",
  "kernel_args_userdebug",

  # RCS live usb support
  "empty_live_usb",
  "live_usb",

  # Emulator Support
  "emulator_support",
]

# These are the eng-buildtype-safe platform AIBs that are used by bootstrap
# feature-set-level assemblies.  This is a subset of the overall platform AIBs
# so that these systems (e.g. bringup) don't need to build the entire platform.
bootstrap_eng_platform_aib_names = [
  # Kernel args
  "kernel_args_eng",
]

# The names of all of the platform's 'testonly=false' Assembly Input Bundles
#
# These are used by the `utility` and the default feature-set-level assembled
# systems.
user_platform_aib_names =
    bootstrap_user_platform_aib_names + [
      ###
      # The common platform bundles

      ## The core realm bundles

      # `/core` itself
      "core_realm",
      "core_realm_user_and_userdebug",

      # The additional children of core we add when we have networking enabled
      "core_realm_networking",

      # The minimal feature-set-level
      "common_minimal",
      "common_minimal_userdebug",

      ###
      # Feature-level / Subsystem-level bundles
      # Keep sorted alphabetically.

      # Fonts
      "fonts",

      # SWD (Software Delivery)
      "omaha_client",

      # Netstack
      "netstack2",
      "netstack3",

      # WLAN
      "wlan_base",
      "wlan_legacy_privacy_support",
      "wlan_contemporary_privacy_only_support",
      "wlan_fullmac_support",
      "wlan_softmac_support",

      # Storage
      "fshost_common",
      "fshost_storage",
      "fshost_fxfs",
      "fshost_fxfs_fxblob",
      "fshost_fxfs_minfs_migration",
      "fshost_minfs",
      "fshost_f2fs",

      # Session
      "session_manager",

      "starnix_support",
      "virtualization_support",

      # ICU-specific version of intl_services
      "intl_services.icu_default_${icu_git_info.default}",
      "intl_services.icu_latest_${icu_git_info.latest}",
      "intl_services.icu_stable_${icu_git_info.stable}",

      # UI
      "ui",
      "ui_legacy",
      "ui_user_and_userdebug",
      "ui_package_user_and_userdebug",
      "ui_legacy_package_user_and_userdebug",

      # Drivers
      "radar_proxy_without_injector",

      # Thermal
      "fan",
    ]

# LINT.ThenChange(platform_aib_names.bzl)

# The names of all userdebug-allowed platform Assembly Input Bundles
#LINT.IfChange
_userdebug_aib_names = [
  # Needed by both eng and userdebug products, but contains things disallowed in
  # user.
  "core_realm_development_access",
  "core_realm_development_access_rcs_no_usb",
  "core_realm_development_access_rcs_usb",
  "radar_proxy_with_injector",
]

# LINT.ThenChange(platform_aib_names.bzl)
userdebug_platform_aib_names = user_platform_aib_names + _userdebug_aib_names

# The names of all of the platform's Assembly Input Bundles.
# LINT.IfChange
eng_only_platform_aib_names =
    bootstrap_eng_platform_aib_names + [
      # the core realm additions for eng build-type assemblies
      "core_realm_eng",

      "common_minimal_eng",

      # SWD (Software Delivery)
      "system_update_checker",

      # Testing Support
      "testing_support",

      # UI
      "ui_eng",
      "ui_package_eng",
      "ui_legacy_package_eng",

      # Example AIB
      "example_assembly_bundle",

      # Audio development/debugging
      "audio_dev_support",
    ]
eng_platform_aib_names =
    userdebug_platform_aib_names + eng_only_platform_aib_names

# LINT.ThenChange(platform_aib_names.bzl)

bringup_platform_aib_labels = []
bringup_platform_aib_files = []
foreach(name,
        bootstrap_user_platform_aib_names + bootstrap_eng_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  bringup_platform_aib_labels += [ label ]
  bringup_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}

user_platform_aib_labels = []
user_platform_aib_files = []
foreach(name, user_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  user_platform_aib_labels += [ label ]
  user_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}

userdebug_platform_aib_labels = []
userdebug_platform_aib_files = []
foreach(name, userdebug_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  userdebug_platform_aib_labels += [ label ]
  userdebug_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}

eng_platform_aib_labels = []
eng_platform_aib_files = []
foreach(name, eng_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  eng_platform_aib_labels += [ label ]
  eng_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}

eng_only_platform_aib_labels = []
eng_only_platform_aib_files = []
foreach(name, eng_only_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  eng_only_platform_aib_labels += [ label ]
  eng_only_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}
