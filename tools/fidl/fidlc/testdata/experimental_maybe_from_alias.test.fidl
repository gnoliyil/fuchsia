library test.experimentalmaybefromalias;

closed protocol MyProtocol {};

alias AliasOfBytes = vector<uint8>;
alias AliasOfString = string;
alias U64 = uint64;
alias Vector = vector<uint64>:optional;
alias AliasOfArray = array<uint64, 1>;
alias AliasOfRequest = server_end:<MyProtocol, optional>;
alias AliasOfVectorContainingAliasOfVector = vector<U64>:2;
alias AliasOfArrayContainingAliasOfArray = array<U64, 2>;

type Testing = resource struct {
    u1 U64;
    u2 vector<U64>:1;
    u3 array<U64, 1>;
    u4 vector<vector<U64>:1>;
    u5 vector<array<U64, 1>>;
    u6 array<vector<U64>:1, 4>;
    u7 array<array<U64, 1>, 4>;

    v1 Vector;
    v2 vector<Vector>;
    v3 array<Vector, 4>;

    a1 AliasOfArray;
    a2 vector<AliasOfArray>;
    a3 array<AliasOfArray, 4>;

    r1 AliasOfRequest;
    r2 vector<AliasOfRequest>;
    r3 array<AliasOfRequest, 4>;

    b1 AliasOfBytes;
    b2 vector<AliasOfBytes>;
    b3 array<AliasOfBytes, 4>;

    s1 AliasOfString;
    s2 vector<AliasOfString>;
    s3 array<AliasOfString, 4>;

    vv1 AliasOfVectorContainingAliasOfVector;
    vv2 vector<AliasOfVectorContainingAliasOfVector>:3;
    vv3 array<AliasOfVectorContainingAliasOfVector, 3>;

    aa1 AliasOfArrayContainingAliasOfArray;
    aa2 vector<AliasOfArrayContainingAliasOfArray>:3;
    aa3 array<AliasOfArrayContainingAliasOfArray, 3>;
};
