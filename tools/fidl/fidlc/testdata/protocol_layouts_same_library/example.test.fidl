library test.protocollayoutssamelibrary;

type TablePayload = table {
    1: a uint16;
};

type UnionPayload = strict union {
    1: b bool;
};

closed protocol ComposedProtocol {
    strict OneWayAnonComposed(table {
        1: a uint16;
    });
    strict TwoWayAnonComposed(strict union {
        1: b bool;
    }) -> (table {
        1: a uint16;
    });
    strict TwoWayAnonComposedWithError(table {
        1: a uint16;
    }) -> (strict union {
        1: b bool;
    }) error uint32;
    strict -> OnAnonComposed(strict union {
        1: b bool;
    });
    strict -> OnAnonComposedWithError(table {
        1: a uint16;
    }) error uint32;

    strict OneWayNamedComposed(TablePayload);
    strict TwoWayNamedComposed(UnionPayload) -> (TablePayload);
    strict TwoWayNamedComposedWithError(TablePayload) -> (UnionPayload) error uint32;
    strict -> OnNamedComposed(UnionPayload);
    strict -> OnNamedComposedWithError(TablePayload) error uint32;
};


closed protocol MainProtocol {
    // Tests composition of protocols with union/table payloads defined in the imported library.
    compose ComposedProtocol;

    // Tests union/table payloads referenced without composition.
    strict OneWayLocal(TablePayload);
    strict TwoWayLocal(UnionPayload) -> (TablePayload);
    strict TwoWayLocalWithError(TablePayload) -> (UnionPayload) error uint32;
    strict -> OnLocal(UnionPayload);
    strict -> OnLocalWithError(TablePayload) error uint32;

    // Tests anonymous union/table payloads.
    strict OneWayAnon(table {
        1: a uint16;
    });
    strict TwoWayAnon(flexible union {
        1: b bool;
    }) -> (table {
        1: a uint16;
    });
    strict TwoWayAnonWithError(table {
        1: a uint16;
    }) -> (flexible union {
        1: b bool;
    }) error uint32;
    strict -> OnAnon(flexible union {
        1: b bool;
    });
    strict -> OnAnonWithError(table {
        1: a uint16;
    }) error uint32;
};
