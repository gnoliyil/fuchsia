library test.protocollayouts;

using test.protocollayouts.imported as imp;

type LocalTablePayload = table {
    1: a uint16;
};

type LocalUnionPayload = flexible union {
    1: b bool;
};

closed protocol MainProtocol {
    // Tests composition of protocols with union/table payloads defined in the imported library.
    compose imp.ComposedProtocol;

    // Tests union/table payloads defined locally.
    strict OneWayImport(imp.ImportTablePayload);
    strict TwoWayImport(imp.ImportUnionPayload) -> (imp.ImportTablePayload);
    strict TwoWayImportWithError(imp.ImportTablePayload) -> (imp.ImportUnionPayload) error uint32;
    strict -> OnImport(imp.ImportUnionPayload);
    strict -> OnImportWithError(imp.ImportTablePayload) error uint32;

    // Tests union/table payloads imported from another library.
    strict OneWayLocal(LocalTablePayload);
    strict TwoWayLocal(LocalUnionPayload) -> (LocalTablePayload);
    strict TwoWayLocalWithError(LocalTablePayload) -> (LocalUnionPayload) error uint32;
    strict -> OnLocal(LocalUnionPayload);
    strict -> OnLocalWithError(LocalTablePayload) error uint32;

    // Tests anonymous union/table payloads.
    strict OneWayAnon(table {
        1: a uint16;
    });
    strict TwoWayAnon(flexible union {
        1: b bool;
    }) -> (table {
        1: a uint16;
    });
    strict TwoWayAnonWithError(table {
        1: a uint16;
    }) -> (flexible union {
        1: b bool;
    }) error uint32;
    strict -> OnAnon(flexible union {
        1: b bool;
    });
    strict -> OnAnonWithError(table {
        1: a uint16;
    }) error uint32;
};
