library test.protocolpayloads;

using test.protocolpayloads.imported as imp;

type LocalStructPayload = struct {
    a uint32;
    b uint32;
};

closed protocol MainProtocol {
    // Tests composition of protocols with named payloads defined in the imported library.
    compose imp.ComposedProtocol;

    // Tests named payloads defined locally.
    strict OneWayLocal(LocalStructPayload);
    strict TwoWayLocal(LocalStructPayload) -> (LocalStructPayload);
    strict TwoWayLocalWithError(LocalStructPayload) -> (LocalStructPayload) error uint32;
    strict -> OnLocal(LocalStructPayload);
    strict -> OnLocalWithError(LocalStructPayload) error uint32;

    // Tests named payloads imported from another library.
    strict OneWayImport(imp.ImportStructPayload);
    strict TwoWayImport(imp.ImportStructPayload) -> (imp.ImportStructPayload);
    strict TwoWayImportWithError(imp.ImportStructPayload) -> (imp.ImportStructPayload) error uint32;
    strict -> OnImport(imp.ImportStructPayload);
    strict -> OnImportWithError(imp.ImportStructPayload) error uint32;

    // These methods are included so that we can have an anonymous reference point in generated
    // bindings.
    strict OneWayAnon(struct {
        a uint32;
        b uint32;
    });
    strict TwoWayAnon(struct {
        a uint32;
        b uint32;
    }) -> (struct {
        a uint32;
        b uint32;
    });
    strict TwoWayAnonWithError(struct {
        a uint32;
        b uint32;
    }) -> (struct {
        a uint32;
        b uint32;
    }) error uint32;
    strict -> OnAnon(struct {
        a uint32;
        b uint32;
    });
    strict -> OnAnonWithError(struct {
        a uint32;
        b uint32;
    }) error uint32;
};
