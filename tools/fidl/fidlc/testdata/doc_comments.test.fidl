/// library comment #1
///
/// library comment #2
library test.doccomments;

/// strict bits comment #1
///
/// strict bits comment #2
type MyStrictBits = strict bits : uint32 {
    /// MY_FIRST_BIT member comment #1
    ///
    /// MY_FIRST_BIT member comment #3
    MY_FIRST_BIT = 1;
    /// MY_OTHER_BIT member comment #1
    ///
    /// MY_OTHER_BIT member comment #3
    MY_OTHER_BIT = 2;
};

/// flexible bits comment #1
///
/// flexible bits comment #2
type MyFlexibleBits = flexible bits : uint32 {
    /// MY_FIRST_BIT member comment #1
    ///
    /// MY_FIRST_BIT member comment #3
    MY_FIRST_BIT = 1;
    /// MY_OTHER_BIT member comment #1
    ///
    /// MY_OTHER_BIT member comment #3
    MY_OTHER_BIT = 2;
};

/// const comment #1
///
/// const comment #3
const C int32 = 4;

/// strict enum comment #1.
///
/// strict enum comment #2.
type MyStrictEnum = strict enum : uint32 {
    /// FOO member comment #1
    ///
    /// FOO member comment #3
    FOO = 1;
    /// BAR member comment #1
    ///
    /// BAR member comment #3
    // Non doc-comment, should be ignored by FIDL toolchain.
    BAR = 2;
};

/// flexible enum comment #1.
///
/// flexible enum comment #2.
type MyFlexibleEnum = flexible enum : uint32 {
    /// FOO member comment #1
    ///
    /// FOO member comment #3
    FOO = 1;
    /// BAR member comment #1
    ///
    /// BAR member comment #3
    // Non doc-comment, should be ignored by FIDL toolchain.
    BAR = 2;
};

/// struct comment #1
///
/// struct comment #3
type Struct = struct {
    /// struct member comment #1
    ///
    /// struct member comment #3
    Field int32;
};

/// strict union comment #1
///
/// strict union comment #3
type StrictUnion = strict union {
    /// union member comment #1
    ///
    /// union member comment #3
    1: Field int32;
};

/// flexible union comment #1
///
/// flexible union comment #3
type FlexibleUnion = flexible union {
    /// union member comment #1
    ///
    /// union member comment #3
    1: Field int32;
};

/// table comment #1
///
/// table comment #3
type Table = table {
    /// table field comment #1
    ///
    /// table field comment #3
    1: Field int32;
};

/// interface comment #1
///
/// interface comment #3
closed protocol Interface {
    /// method comment #1
    ///
    /// method comment #3
    strict Method();

    /// event comment #1
    ///
    /// event comment #3
    strict -> OnEvent();
};

/// service comment #1
///
/// service comment #3
service Service {
    /// member comment #1
    ///
    /// member comment #3
    interface client_end:Interface;
};
