{{/*
// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "GenerateSourceFile" -}}
// WARNING: This file is machine generated by fidlgen.
{{ "" }}
{{- range .Experiments }}
// fidl_experiment = {{ . }}
{{- end }}

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
    fidl::{
        endpoints::{ControlHandle as _, Responder as _},
        client::QueryResponseFut,
    },
};

{{- range .Consts }}
{{ template "ConstDeclaration" . }}
{{- end }}
{{- range .Bits }}
{{ template "BitsDeclaration" . }}
{{- end }}
{{- range .Enums }}
{{ template "EnumDeclaration" . }}
{{- end }}
{{- range .Structs }}
{{ template "StructDeclaration" . }}
{{- end }}
{{- range .Tables }}
{{ template "TableDeclaration" . }}
{{- end }}
{{- range .Unions }}
{{ template "UnionDeclaration" . }}
{{- end }}
{{- range .Protocols }}
{{ template "ProtocolDeclaration" . }}
{{- end }}
{{- range (call .ServicesForTransport "Channel") }}
{{ template "ServiceDeclaration" . }}
{{- end }}

mod internal {
    #[allow(unused_imports)]
    use super::*;

    {{- range .Bits }}
    {{ template "BitsInternal" . }}
    {{- end }}
    {{- range .Enums }}
    {{ template "EnumInternal" . }}
    {{- end }}
    {{- range .Structs }}
    {{ template "StructInternal" . }}
    {{- end }}
    {{- range .Tables }}
    {{ template "TableInternal" . }}
    {{- end }}
    {{- range .Unions }}
    {{ template "UnionInternal" . }}
    {{- end }}
}
{{- end }}
