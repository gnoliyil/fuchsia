// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::{decode_transaction_body_fut, QueryResponseFut},
        encoding::{zerocopy, Decodable as _, Encodable as _},
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_empty_struct, fidl_enum, fidl_struct, fidl_struct_copy, fidl_table,
        fidl_union, wrap_handle_metadata,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(u32)]
pub enum ObjType {
    None = 0,
    Vmo = 3,
}

impl ObjType {
    #[inline]
    pub fn from_primitive(prim: u32) -> Option<Self> {
        match prim {
            0 => Some(Self::None),
            3 => Some(Self::Vmo),
            _ => None,
        }
    }

    #[inline]
    pub const fn into_primitive(self) -> u32 {
        self as u32
    }

    #[deprecated = "Strict enums should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}

fidl_enum! {
    name: ObjType,
    prim_ty: u32,
    strict: true,
    min_member: None,
}

#[derive(Debug)]
pub enum EmptyResourceUnion {
    #[deprecated = "Use `EmptyResourceUnion::unknown()` to construct and `EmptyResourceUnionUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown { ordinal: u64 },
}
/// Pattern that matches an unknown `EmptyResourceUnion` member.
#[macro_export]
macro_rules! EmptyResourceUnionUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for EmptyResourceUnion {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            _ => false,
        }
    }
}

impl EmptyResourceUnion {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
        }
    }
}

impl fidl::encoding::TopLevel for EmptyResourceUnion {}

fidl_union! {
    name: EmptyResourceUnion,
    members: [
    ],
    unknown_member: __Unknown,
}

#[derive(Debug)]
pub enum UnionWithHandle {
    H(fidl::Vmo),
    #[deprecated = "Use `UnionWithHandle::unknown()` to construct and `UnionWithHandleUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnionWithHandle` member.
#[macro_export]
macro_rules! UnionWithHandleUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnionWithHandle {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::H(x), Self::H(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnionWithHandle {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::H(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnionWithHandle {}

fidl_union! {
    name: UnionWithHandle,
    members: [
        H {
            ty: fidl::Vmo,
            ordinal: 1,
            handle_metadata: {
                handle_subtype: fidl::ObjectType::VMO,
                handle_rights: fidl::Rights::from_bits_const(2147483648).unwrap(),
            },
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct EmptyResourceStruct;

impl fidl::encoding::TopLevel for EmptyResourceStruct {}

fidl_empty_struct!(EmptyResourceStruct);

#[derive(Debug, PartialEq)]
pub struct HandlesInTypes {
    pub normal_handle: fidl::Vmo,
    pub handle_in_vec: Vec<fidl::Vmo>,
    pub handle_in_array: [fidl::Vmo; 5],
    pub handle_in_mixed_vec_array: Vec<[fidl::Vmo; 5]>,
    pub table_with_handle: TableWithHandle,
    pub union_with_handle: UnionWithHandle,
}

impl fidl::encoding::TopLevel for HandlesInTypes {}

fidl_struct! {
    name: HandlesInTypes,
    members: [
        normal_handle {
            ty: fidl::Vmo,
            offset_v1: 0,
            offset_v2: 0,
            handle_metadata: {
                handle_subtype: fidl::ObjectType::VMO,
                handle_rights: fidl::Rights::from_bits_const(2147483648).unwrap(),
            },
        },
        handle_in_vec {
            ty: Vec<fidl::Vmo>,
            offset_v1: 8,
            offset_v2: 8,
            handle_metadata: {
                handle_subtype: fidl::ObjectType::VMO,
                handle_rights: fidl::Rights::from_bits_const(2147483648).unwrap(),
            },
        },
        handle_in_array {
            ty: [fidl::Vmo; 5],
            offset_v1: 24,
            offset_v2: 24,
            handle_metadata: {
                handle_subtype: fidl::ObjectType::VMO,
                handle_rights: fidl::Rights::from_bits_const(2147483648).unwrap(),
            },
        },
        handle_in_mixed_vec_array {
            ty: Vec<[fidl::Vmo; 5]>,
            offset_v1: 48,
            offset_v2: 48,
            handle_metadata: {
                handle_subtype: fidl::ObjectType::VMO,
                handle_rights: fidl::Rights::from_bits_const(2147483648).unwrap(),
            },
        },
        table_with_handle {
            ty: TableWithHandle,
            offset_v1: 64,
            offset_v2: 64,
        },
        union_with_handle {
            ty: UnionWithHandle,
            offset_v1: 80,
            offset_v2: 80,
        },
    ],
    padding_v1: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 40,
            mask: 0xffffffff00000000u64,
        },],
    padding_v2: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 40,
            mask: 0xffffffff00000000u64,
        },],
    size_v1: 104,
    size_v2: 96,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, PartialEq)]
pub struct EmptyResourceTable {
    #[deprecated = "Use `..EmptyResourceTable::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl EmptyResourceTable {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for EmptyResourceTable {}

fidl_table! {
    name: EmptyResourceTable,
    members: [
    ],
}

#[derive(Debug, PartialEq)]
pub struct TableWithHandle {
    pub h: Option<fidl::Vmo>,
    #[deprecated = "Use `..TableWithHandle::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl TableWithHandle {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { h: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for TableWithHandle {}

fidl_table! {
    name: TableWithHandle,
    members: [
        h {
            ty: fidl::Vmo,
            ordinal: 1,
            handle_metadata: {
                handle_subtype: fidl::ObjectType::VMO,
                handle_rights: fidl::Rights::from_bits_const(2147483648).unwrap(),
            },
        },
    ],
}
