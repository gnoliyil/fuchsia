// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        encoding::zerocopy,
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_enum, fidl_struct, fidl_table, fidl_union,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

const _FIDL_TRACE_BINDINGS_RUST: u32 = 6;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct Handles {
    pub plain_handle: fidl::Handle,
    pub bti_handle: fidl::Bti,
    pub channel_handle: fidl::Channel,
    pub clock_handle: fidl::Clock,
    pub debuglog_handle: fidl::DebugLog,
    pub event_handle: fidl::Event,
    pub eventpair_handle: fidl::EventPair,
    pub exception_handle: fidl::Exception,
    pub fifo_handle: fidl::Fifo,
    pub guest_handle: fidl::Guest,
    pub interrupt_handle: fidl::Interrupt,
    pub iommu_handle: fidl::Iommu,
    pub job_handle: fidl::Job,
    pub msi_handle: fidl::Msi,
    pub pager_handle: fidl::Pager,
    pub pmt_handle: fidl::Pmt,
    pub port_handle: fidl::Port,
    pub process_handle: fidl::Process,
    pub profile_handle: fidl::Profile,
    pub resource_handle: fidl::Resource,
    pub socket_handle: fidl::Socket,
    pub stream_handle: fidl::Stream,
    pub suspendtoken_handle: fidl::SuspendToken,
    pub thread_handle: fidl::Thread,
    pub timer_handle: fidl::Timer,
    pub vcpu_handle: fidl::Vcpu,
    pub vmar_handle: fidl::Vmar,
    pub vmo_handle: fidl::Vmo,
    pub rights_handle: fidl::Vmo,
    pub aliased_plain_handle_field: fidl::Handle,
    pub aliased_subtype_handle_field: fidl::Vmo,
    pub aliased_rights_handle_field: fidl::Vmo,
    pub some_protocol: fidl::endpoints::ClientEnd<SomeProtocolMarker>,
    pub request_some_protocol: fidl::endpoints::ServerEnd<SomeProtocolMarker>,
}
impl fidl::Standalone for Handles {}

fidl_struct! {
    name: Handles,
    resource: true,
    members: [
        plain_handle {
            ty: fidl::encoding::HandleType<fidl::Handle, { fidl::ObjectType::NONE.into_raw() }, 2147483648>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        bti_handle {
            ty: fidl::encoding::HandleType<fidl::Bti, { fidl::ObjectType::BTI.into_raw() }, 2147483648>,
            resource: true,
            index: 1,
            typevar: T1,
            offset_v1: 4,
            offset_v2: 4,
        },
        channel_handle {
            ty: fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>,
            resource: true,
            index: 2,
            typevar: T2,
            offset_v1: 8,
            offset_v2: 8,
        },
        clock_handle {
            ty: fidl::encoding::HandleType<fidl::Clock, { fidl::ObjectType::CLOCK.into_raw() }, 2147483648>,
            resource: true,
            index: 3,
            typevar: T3,
            offset_v1: 12,
            offset_v2: 12,
        },
        debuglog_handle {
            ty: fidl::encoding::HandleType<fidl::DebugLog, { fidl::ObjectType::DEBUGLOG.into_raw() }, 2147483648>,
            resource: true,
            index: 4,
            typevar: T4,
            offset_v1: 16,
            offset_v2: 16,
        },
        event_handle {
            ty: fidl::encoding::HandleType<fidl::Event, { fidl::ObjectType::EVENT.into_raw() }, 2147483648>,
            resource: true,
            index: 5,
            typevar: T5,
            offset_v1: 20,
            offset_v2: 20,
        },
        eventpair_handle {
            ty: fidl::encoding::HandleType<fidl::EventPair, { fidl::ObjectType::EVENTPAIR.into_raw() }, 2147483648>,
            resource: true,
            index: 6,
            typevar: T6,
            offset_v1: 24,
            offset_v2: 24,
        },
        exception_handle {
            ty: fidl::encoding::HandleType<fidl::Exception, { fidl::ObjectType::EXCEPTION.into_raw() }, 2147483648>,
            resource: true,
            index: 7,
            typevar: T7,
            offset_v1: 28,
            offset_v2: 28,
        },
        fifo_handle {
            ty: fidl::encoding::HandleType<fidl::Fifo, { fidl::ObjectType::FIFO.into_raw() }, 2147483648>,
            resource: true,
            index: 8,
            typevar: T8,
            offset_v1: 32,
            offset_v2: 32,
        },
        guest_handle {
            ty: fidl::encoding::HandleType<fidl::Guest, { fidl::ObjectType::GUEST.into_raw() }, 2147483648>,
            resource: true,
            index: 9,
            typevar: T9,
            offset_v1: 36,
            offset_v2: 36,
        },
        interrupt_handle {
            ty: fidl::encoding::HandleType<fidl::Interrupt, { fidl::ObjectType::INTERRUPT.into_raw() }, 2147483648>,
            resource: true,
            index: 10,
            typevar: T10,
            offset_v1: 40,
            offset_v2: 40,
        },
        iommu_handle {
            ty: fidl::encoding::HandleType<fidl::Iommu, { fidl::ObjectType::IOMMU.into_raw() }, 2147483648>,
            resource: true,
            index: 11,
            typevar: T11,
            offset_v1: 44,
            offset_v2: 44,
        },
        job_handle {
            ty: fidl::encoding::HandleType<fidl::Job, { fidl::ObjectType::JOB.into_raw() }, 2147483648>,
            resource: true,
            index: 12,
            typevar: T12,
            offset_v1: 48,
            offset_v2: 48,
        },
        msi_handle {
            ty: fidl::encoding::HandleType<fidl::Msi, { fidl::ObjectType::MSI.into_raw() }, 2147483648>,
            resource: true,
            index: 13,
            typevar: T13,
            offset_v1: 52,
            offset_v2: 52,
        },
        pager_handle {
            ty: fidl::encoding::HandleType<fidl::Pager, { fidl::ObjectType::PAGER.into_raw() }, 2147483648>,
            resource: true,
            index: 14,
            typevar: T14,
            offset_v1: 56,
            offset_v2: 56,
        },
        pmt_handle {
            ty: fidl::encoding::HandleType<fidl::Pmt, { fidl::ObjectType::PMT.into_raw() }, 2147483648>,
            resource: true,
            index: 15,
            typevar: T15,
            offset_v1: 60,
            offset_v2: 60,
        },
        port_handle {
            ty: fidl::encoding::HandleType<fidl::Port, { fidl::ObjectType::PORT.into_raw() }, 2147483648>,
            resource: true,
            index: 16,
            typevar: T16,
            offset_v1: 64,
            offset_v2: 64,
        },
        process_handle {
            ty: fidl::encoding::HandleType<fidl::Process, { fidl::ObjectType::PROCESS.into_raw() }, 2147483648>,
            resource: true,
            index: 17,
            typevar: T17,
            offset_v1: 68,
            offset_v2: 68,
        },
        profile_handle {
            ty: fidl::encoding::HandleType<fidl::Profile, { fidl::ObjectType::PROFILE.into_raw() }, 2147483648>,
            resource: true,
            index: 18,
            typevar: T18,
            offset_v1: 72,
            offset_v2: 72,
        },
        resource_handle {
            ty: fidl::encoding::HandleType<fidl::Resource, { fidl::ObjectType::RESOURCE.into_raw() }, 2147483648>,
            resource: true,
            index: 19,
            typevar: T19,
            offset_v1: 76,
            offset_v2: 76,
        },
        socket_handle {
            ty: fidl::encoding::HandleType<fidl::Socket, { fidl::ObjectType::SOCKET.into_raw() }, 2147483648>,
            resource: true,
            index: 20,
            typevar: T20,
            offset_v1: 80,
            offset_v2: 80,
        },
        stream_handle {
            ty: fidl::encoding::HandleType<fidl::Stream, { fidl::ObjectType::STREAM.into_raw() }, 2147483648>,
            resource: true,
            index: 21,
            typevar: T21,
            offset_v1: 84,
            offset_v2: 84,
        },
        suspendtoken_handle {
            ty: fidl::encoding::HandleType<fidl::SuspendToken, { fidl::ObjectType::SUSPEND_TOKEN.into_raw() }, 2147483648>,
            resource: true,
            index: 22,
            typevar: T22,
            offset_v1: 88,
            offset_v2: 88,
        },
        thread_handle {
            ty: fidl::encoding::HandleType<fidl::Thread, { fidl::ObjectType::THREAD.into_raw() }, 2147483648>,
            resource: true,
            index: 23,
            typevar: T23,
            offset_v1: 92,
            offset_v2: 92,
        },
        timer_handle {
            ty: fidl::encoding::HandleType<fidl::Timer, { fidl::ObjectType::TIMER.into_raw() }, 2147483648>,
            resource: true,
            index: 24,
            typevar: T24,
            offset_v1: 96,
            offset_v2: 96,
        },
        vcpu_handle {
            ty: fidl::encoding::HandleType<fidl::Vcpu, { fidl::ObjectType::VCPU.into_raw() }, 2147483648>,
            resource: true,
            index: 25,
            typevar: T25,
            offset_v1: 100,
            offset_v2: 100,
        },
        vmar_handle {
            ty: fidl::encoding::HandleType<fidl::Vmar, { fidl::ObjectType::VMAR.into_raw() }, 2147483648>,
            resource: true,
            index: 26,
            typevar: T26,
            offset_v1: 104,
            offset_v2: 104,
        },
        vmo_handle {
            ty: fidl::encoding::HandleType<fidl::Vmo, { fidl::ObjectType::VMO.into_raw() }, 2147483648>,
            resource: true,
            index: 27,
            typevar: T27,
            offset_v1: 108,
            offset_v2: 108,
        },
        rights_handle {
            ty: fidl::encoding::HandleType<fidl::Vmo, { fidl::ObjectType::VMO.into_raw() }, 5>,
            resource: true,
            index: 28,
            typevar: T28,
            offset_v1: 112,
            offset_v2: 112,
        },
        aliased_plain_handle_field {
            ty: fidl::encoding::HandleType<fidl::Handle, { fidl::ObjectType::NONE.into_raw() }, 2147483648>,
            resource: true,
            index: 29,
            typevar: T29,
            offset_v1: 116,
            offset_v2: 116,
        },
        aliased_subtype_handle_field {
            ty: fidl::encoding::HandleType<fidl::Vmo, { fidl::ObjectType::VMO.into_raw() }, 2147483648>,
            resource: true,
            index: 30,
            typevar: T30,
            offset_v1: 120,
            offset_v2: 120,
        },
        aliased_rights_handle_field {
            ty: fidl::encoding::HandleType<fidl::Vmo, { fidl::ObjectType::VMO.into_raw() }, 1>,
            resource: true,
            index: 31,
            typevar: T31,
            offset_v1: 124,
            offset_v2: 124,
        },
        some_protocol {
            ty: fidl::encoding::Endpoint<fidl::endpoints::ClientEnd<SomeProtocolMarker>>,
            resource: true,
            index: 32,
            typevar: T32,
            offset_v1: 128,
            offset_v2: 128,
        },
        request_some_protocol {
            ty: fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<SomeProtocolMarker>>,
            resource: true,
            index: 33,
            typevar: T33,
            offset_v1: 132,
            offset_v2: 132,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 136,
    size_v2: 136,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SomeProtocolMarker;

impl fidl::endpoints::ProtocolMarker for SomeProtocolMarker {
    type Proxy = SomeProtocolProxy;
    type RequestStream = SomeProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) SomeProtocol";
}

pub trait SomeProtocolProxyInterface: Send + Sync {}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct SomeProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl SomeProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <SomeProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<SomeProtocolEvent, fidl::Error> {
        SomeProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
}

#[derive(Debug, Clone)]
pub struct SomeProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for SomeProtocolProxy {
    type Protocol = SomeProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl SomeProtocolProxy {
    /// Create a new Proxy for SomeProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <SomeProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the SomeProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> SomeProtocolEventStream {
        SomeProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
}

impl SomeProtocolProxyInterface for SomeProtocolProxy {}

pub struct SomeProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for SomeProtocolEventStream {}

impl futures::stream::FusedStream for SomeProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for SomeProtocolEventStream {
    type Item = Result<SomeProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(SomeProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum SomeProtocolEvent {}

impl SomeProtocolEvent {
    /// Decodes a message buffer as a [`SomeProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<SomeProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <SomeProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for SomeProtocol
pub struct SomeProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for SomeProtocolRequestStream {}

impl futures::stream::FusedStream for SomeProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for SomeProtocolRequestStream {
    type Protocol = SomeProtocolMarker;
    type ControlHandle = SomeProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        SomeProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for SomeProtocolRequestStream {
    type Item = Result<SomeProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled SomeProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <SomeProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum SomeProtocolRequest {}

impl SomeProtocolRequest {
    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {}
    }
}

#[derive(Debug, Clone)]
pub struct SomeProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for SomeProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl SomeProtocolControlHandle {}
