// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::{decode_transaction_body_fut, QueryResponseFut},
        encoding::{zerocopy, Decodable as _, Encodable as _},
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_empty_struct, fidl_enum, fidl_struct, fidl_struct_copy, fidl_table,
        fidl_union, wrap_handle_metadata,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

const _FIDL_TRACE_BINDINGS_RUST: u32 = 6;
bitflags! {
    pub struct ExampleBits: u32 {
        const MEMBER = 1;
    }
}

impl ExampleBits {
    #[deprecated = "Strict bits should not use `has_unknown_bits`"]
    #[inline(always)]
    pub fn has_unknown_bits(&self) -> bool {
        false
    }

    #[deprecated = "Strict bits should not use `get_unknown_bits`"]
    #[inline(always)]
    pub fn get_unknown_bits(&self) -> u32 {
        0
    }
}

fidl_bits! {
    name: ExampleBits,
    prim_ty: u32,
    strict: true,
}

pub const EXAMPLE_CONST: u32 = 0;

#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(u32)]
pub enum ExampleEnum {
    Member = 1,
}

impl ExampleEnum {
    #[inline]
    pub fn from_primitive(prim: u32) -> Option<Self> {
        match prim {
            1 => Some(Self::Member),
            _ => None,
        }
    }

    #[inline]
    pub const fn into_primitive(self) -> u32 {
        self as u32
    }

    #[deprecated = "Strict enums should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}

fidl_enum! {
    name: ExampleEnum,
    prim_ty: u32,
    strict: true,
    min_member: Member,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub enum ExampleUnion {
    Variant(u32),
}

impl ExampleUnion {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::Variant(_) => 1,
        }
    }
    #[deprecated = "Strict unions should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}

impl fidl::encoding::TopLevel for ExampleUnion {}

impl fidl::encoding::Persistable for ExampleUnion {}

fidl_union! {
    name: ExampleUnion,
    members: [
        Variant {
            ty: u32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone)]
pub enum ExampleXUnion {
    Variant(u32),
    #[deprecated = "Use `ExampleXUnion::unknown()` to construct and `ExampleXUnionUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `ExampleXUnion` member.
#[macro_export]
macro_rules! ExampleXUnionUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for ExampleXUnion {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::Variant(x), Self::Variant(y)) => *x == *y,
            _ => false,
        }
    }
}

impl ExampleXUnion {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::Variant(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for ExampleXUnion {}

impl fidl::encoding::Persistable for ExampleXUnion {}

fidl_union! {
    name: ExampleXUnion,
    members: [
        Variant {
            ty: u32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct ExampleStruct {
    pub member: u32,
}

impl fidl::encoding::TopLevel for ExampleStruct {}

impl fidl::encoding::Persistable for ExampleStruct {}

fidl_struct_copy! {
    name: ExampleStruct,
    members: [
        member {
            ty: u32,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [],
    padding_v2: [],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Clone, PartialEq)]
pub struct ExampleTable {
    pub member: Option<u32>,
    #[deprecated = "Use `..ExampleTable::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl ExampleTable {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { member: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for ExampleTable {}

impl fidl::encoding::Persistable for ExampleTable {}

fidl_table! {
    name: ExampleTable,
    members: [
        member {
            ty: u32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ExampleProtocolMarker;

impl fidl::endpoints::ProtocolMarker for ExampleProtocolMarker {
    type Proxy = ExampleProtocolProxy;
    type RequestStream = ExampleProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) ExampleProtocol";
}

pub trait ExampleProtocolProxyInterface: Send + Sync {
    fn r#method(&self, arg: &mut fidl_test_exampleusing::Empty) -> Result<(), fidl::Error>;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct ExampleProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl ExampleProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <ExampleProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<ExampleProtocolEvent, fidl::Error> {
        ExampleProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#method(&self, mut arg: &mut fidl_test_exampleusing::Empty) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (arg,),
            0x53978e6fc7476749,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

#[derive(Debug, Clone)]
pub struct ExampleProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for ExampleProtocolProxy {
    type Protocol = ExampleProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl ExampleProtocolProxy {
    /// Create a new Proxy for ExampleProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <ExampleProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the ExampleProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> ExampleProtocolEventStream {
        ExampleProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#method(&self, mut arg: &mut fidl_test_exampleusing::Empty) -> Result<(), fidl::Error> {
        ExampleProtocolProxyInterface::r#method(self, arg)
    }
}

impl ExampleProtocolProxyInterface for ExampleProtocolProxy {
    fn r#method(&self, mut arg: &mut fidl_test_exampleusing::Empty) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (arg),
            0x53978e6fc7476749,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

pub struct ExampleProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for ExampleProtocolEventStream {}

impl futures::stream::FusedStream for ExampleProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for ExampleProtocolEventStream {
    type Item = Result<ExampleProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(ExampleProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum ExampleProtocolEvent {}

impl ExampleProtocolEvent {
    /// Decodes a message buffer as a [`ExampleProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<ExampleProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <ExampleProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for ExampleProtocol
pub struct ExampleProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for ExampleProtocolRequestStream {}

impl futures::stream::FusedStream for ExampleProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for ExampleProtocolRequestStream {
    type Protocol = ExampleProtocolMarker;
    type ControlHandle = ExampleProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        ExampleProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for ExampleProtocolRequestStream {
    type Item = Result<ExampleProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled ExampleProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x53978e6fc7476749 => {
                    let mut req: (fidl_test_exampleusing::Empty,) =
                        fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.placementofattributes/ExampleProtocolMethodRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = ExampleProtocolControlHandle { inner: this.inner.clone() };

                    Ok(ExampleProtocolRequest::Method { arg: req.0, control_handle })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <ExampleProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum ExampleProtocolRequest {
    Method { arg: fidl_test_exampleusing::Empty, control_handle: ExampleProtocolControlHandle },
}

impl ExampleProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_method(
        self,
    ) -> Option<(fidl_test_exampleusing::Empty, ExampleProtocolControlHandle)> {
        if let ExampleProtocolRequest::Method { arg, control_handle } = self {
            Some((arg, control_handle))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            ExampleProtocolRequest::Method { .. } => "method",
        }
    }
}

#[derive(Debug, Clone)]
pub struct ExampleProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for ExampleProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl ExampleProtocolControlHandle {}
