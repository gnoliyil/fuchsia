// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        encoding::zerocopy,
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_enum, fidl_struct, fidl_table, fidl_union,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

const _FIDL_TRACE_BINDINGS_RUST: u32 = 6;

pub const FIRST_63_ELEMENTS_BYTE_VECTOR_SIZE: u32 = 1000;

pub const HANDLE_CARRYING_ELEMENTS_COUNT: u32 = 64;

pub const LARGE_LAST_ELEMENT_BYTE_VECTOR_SIZE: u32 = 985;

pub const LARGE_STRUCT_BYTE_VECTOR_SIZE: u32 = 65505;

pub const LARGE_UNION_BYTE_VECTOR_SIZE: u32 = 65489;

pub const SMALL_LAST_ELEMENT_BYTE_VECTOR_SIZE: u32 = 976;

pub const SMALL_STRUCT_BYTE_VECTOR_SIZE: u32 = 65504;

pub const SMALL_UNION_BYTE_VECTOR_SIZE: u32 = 65488;

#[derive(Debug, Clone)]
pub enum SemiBoundedBelievedToBeSmall {
    Bytes(Vec<u8>),
    #[deprecated = "Use `SemiBoundedBelievedToBeSmall::unknown()` to construct and `SemiBoundedBelievedToBeSmallUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `SemiBoundedBelievedToBeSmall` member.
#[macro_export]
macro_rules! SemiBoundedBelievedToBeSmallUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for SemiBoundedBelievedToBeSmall {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::Bytes(x), Self::Bytes(y)) => *x == *y,
            _ => false,
        }
    }
}

impl SemiBoundedBelievedToBeSmall {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::Bytes(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::encoding::Persistable for SemiBoundedBelievedToBeSmall {}

fidl_union! {
    name: SemiBoundedBelievedToBeSmall,
    members: [
        Bytes {
            ty: fidl::encoding::UnboundedVector<u8>,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum SemiBoundedMaybeLarge {
    Bytes(Vec<u8>),
    #[deprecated = "Use `SemiBoundedMaybeLarge::unknown()` to construct and `SemiBoundedMaybeLargeUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `SemiBoundedMaybeLarge` member.
#[macro_export]
macro_rules! SemiBoundedMaybeLargeUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for SemiBoundedMaybeLarge {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::Bytes(x), Self::Bytes(y)) => *x == *y,
            _ => false,
        }
    }
}

impl SemiBoundedMaybeLarge {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::Bytes(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::encoding::Persistable for SemiBoundedMaybeLarge {}

fidl_union! {
    name: SemiBoundedMaybeLarge,
    members: [
        Bytes {
            ty: fidl::encoding::UnboundedVector<u8>,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct BoundedKnownToBeSmall {
    pub bytes: Vec<u8>,
}
impl fidl::encoding::Persistable for BoundedKnownToBeSmall {}

fidl_struct! {
    name: BoundedKnownToBeSmall,
    members: [
        bytes {
            ty: fidl::encoding::UnboundedVector<u8>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct BoundedMaybeLarge {
    pub bytes: Vec<u8>,
}
impl fidl::encoding::Persistable for BoundedMaybeLarge {}

fidl_struct! {
    name: BoundedMaybeLarge,
    members: [
        bytes {
            ty: fidl::encoding::UnboundedVector<u8>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct Elements {
    pub handle: Option<fidl::Handle>,
    pub bytes: Vec<u8>,
}
impl fidl::encoding::Standalone for Elements {}

fidl_struct! {
    name: Elements,
    resource: true,
    members: [
        handle {
            ty: fidl::encoding::Optional<fidl::encoding::HandleType<fidl::Handle, { fidl::ObjectType::NONE.into_raw() }, 2147483648>>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        bytes {
            ty: fidl::encoding::UnboundedVector<u8>,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
    ],
    padding_v1: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
    ],
    padding_v2: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
    ],
    size_v1: 24,
    size_v2: 24,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnboundedMaybeLargeResource {
    pub elements: [Elements; 64],
}
impl fidl::encoding::Standalone for UnboundedMaybeLargeResource {}

fidl_struct! {
    name: UnboundedMaybeLargeResource,
    resource: true,
    members: [
        elements {
            ty: fidl::encoding::Array<Elements, 64>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 1536,
    size_v2: 1536,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnboundedMaybeLargeValue {
    pub bytes: Vec<u8>,
}
impl fidl::encoding::Persistable for UnboundedMaybeLargeValue {}

fidl_struct! {
    name: UnboundedMaybeLargeValue,
    members: [
        bytes {
            ty: fidl::encoding::UnboundedVector<u8>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct OverflowingMarker;

impl fidl::endpoints::ProtocolMarker for OverflowingMarker {
    type Proxy = OverflowingProxy;
    type RequestStream = OverflowingRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) Overflowing";
}

pub trait OverflowingProxyInterface: Send + Sync {
    fn r#decode_bounded_known_to_be_small(&self, bytes: &[u8]) -> Result<(), fidl::Error>;
    fn r#decode_bounded_maybe_large(&self, bytes: &[u8]) -> Result<(), fidl::Error>;
    fn r#decode_semi_bounded_believed_to_be_small(
        &self,
        payload: &mut SemiBoundedBelievedToBeSmall,
    ) -> Result<(), fidl::Error>;
    fn r#decode_semi_bounded_maybe_large(
        &self,
        payload: &mut SemiBoundedMaybeLarge,
    ) -> Result<(), fidl::Error>;
    fn r#decode_unbounded_maybe_large_value(&self, bytes: &[u8]) -> Result<(), fidl::Error>;
    fn r#decode_unbounded_maybe_large_resource(
        &self,
        elements: &mut [&mut Elements; 64],
    ) -> Result<(), fidl::Error>;
    type EncodeBoundedKnownToBeSmallResponseFut: std::future::Future<Output = Result<Vec<u8>, fidl::Error>>
        + Send;
    fn r#encode_bounded_known_to_be_small(
        &self,
        bytes: &[u8],
    ) -> Self::EncodeBoundedKnownToBeSmallResponseFut;
    type EncodeBoundedMaybeLargeResponseFut: std::future::Future<Output = Result<Vec<u8>, fidl::Error>>
        + Send;
    fn r#encode_bounded_maybe_large(
        &self,
        bytes: &[u8],
    ) -> Self::EncodeBoundedMaybeLargeResponseFut;
    type EncodeSemiBoundedBelievedToBeSmallResponseFut: std::future::Future<Output = Result<SemiBoundedBelievedToBeSmall, fidl::Error>>
        + Send;
    fn r#encode_semi_bounded_believed_to_be_small(
        &self,
        payload: &mut SemiBoundedBelievedToBeSmall,
    ) -> Self::EncodeSemiBoundedBelievedToBeSmallResponseFut;
    type EncodeSemiBoundedMaybeLargeResponseFut: std::future::Future<Output = Result<SemiBoundedMaybeLarge, fidl::Error>>
        + Send;
    fn r#encode_semi_bounded_maybe_large(
        &self,
        payload: &mut SemiBoundedMaybeLarge,
    ) -> Self::EncodeSemiBoundedMaybeLargeResponseFut;
    type EncodeUnboundedMaybeLargeValueResponseFut: std::future::Future<Output = Result<Vec<u8>, fidl::Error>>
        + Send;
    fn r#encode_unbounded_maybe_large_value(
        &self,
        bytes: &[u8],
    ) -> Self::EncodeUnboundedMaybeLargeValueResponseFut;
    type EncodeUnboundedMaybeLargeResourceResponseFut: std::future::Future<Output = Result<[Elements; 64], fidl::Error>>
        + Send;
    fn r#encode_unbounded_maybe_large_resource(
        &self,
        elements: &mut [&mut Elements; 64],
    ) -> Self::EncodeUnboundedMaybeLargeResourceResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct OverflowingSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl OverflowingSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <OverflowingMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<OverflowingEvent, fidl::Error> {
        OverflowingEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#decode_bounded_known_to_be_small(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        self.client.send::<BoundedKnownToBeSmall, false>(
            (bytes,),
            0x529aace1a3b3bce4,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#decode_bounded_maybe_large(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        self.client.send::<BoundedMaybeLarge, true>(
            (bytes,),
            0x433acc9b9610b5fa,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#decode_semi_bounded_believed_to_be_small(
        &self,
        mut payload: &mut SemiBoundedBelievedToBeSmall,
    ) -> Result<(), fidl::Error> {
        self.client.send::<SemiBoundedBelievedToBeSmall, false>(
            &*payload,
            0x7d5d85c6a0ddd4d0,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#decode_semi_bounded_maybe_large(
        &self,
        mut payload: &mut SemiBoundedMaybeLarge,
    ) -> Result<(), fidl::Error> {
        self.client.send::<SemiBoundedMaybeLarge, true>(
            &*payload,
            0x28bb2002323ecc60,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#decode_unbounded_maybe_large_value(
        &self,
        mut bytes: &[u8],
    ) -> Result<(), fidl::Error> {
        self.client.send::<UnboundedMaybeLargeValue, true>(
            (bytes,),
            0x5bde5404c4e18e2f,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#decode_unbounded_maybe_large_resource(
        &self,
        mut elements: &mut [&mut Elements; 64],
    ) -> Result<(), fidl::Error> {
        self.client.send::<UnboundedMaybeLargeResource, true>(
            (&mut {
                let mut temp: [Elements; 64] =
                    fidl::new_empty!(fidl::encoding::Array<Elements, 64>);
                for (i, x) in elements.iter_mut().enumerate() {
                    temp[i] = std::mem::replace(x, fidl::new_empty!(Elements));
                }
                temp
            },),
            0x3f50d644d96b6394,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#encode_bounded_known_to_be_small(
        &self,
        mut bytes: &[u8],
        ___deadline: zx::Time,
    ) -> Result<Vec<u8>, fidl::Error> {
        let _response =
            self.client.send_query::<BoundedKnownToBeSmall, BoundedKnownToBeSmall, false, false>(
                (bytes,),
                0x5adf4f83d06a28d3,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.bytes)
    }
    pub fn r#encode_bounded_maybe_large(
        &self,
        mut bytes: &[u8],
        ___deadline: zx::Time,
    ) -> Result<Vec<u8>, fidl::Error> {
        let _response =
            self.client.send_query::<BoundedMaybeLarge, BoundedMaybeLarge, true, true>(
                (bytes,),
                0x36c5f106da9a80e0,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.bytes)
    }
    pub fn r#encode_semi_bounded_believed_to_be_small(
        &self,
        mut payload: &mut SemiBoundedBelievedToBeSmall,
        ___deadline: zx::Time,
    ) -> Result<SemiBoundedBelievedToBeSmall, fidl::Error> {
        let _response = self
            .client
            .send_query::<SemiBoundedBelievedToBeSmall, SemiBoundedBelievedToBeSmall, false, true>(
                &*payload,
                0x3b1167d912bf6bf1,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }
    pub fn r#encode_semi_bounded_maybe_large(
        &self,
        mut payload: &mut SemiBoundedMaybeLarge,
        ___deadline: zx::Time,
    ) -> Result<SemiBoundedMaybeLarge, fidl::Error> {
        let _response =
            self.client.send_query::<SemiBoundedMaybeLarge, SemiBoundedMaybeLarge, true, true>(
                &*payload,
                0x1f7994e5062e246f,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }
    pub fn r#encode_unbounded_maybe_large_value(
        &self,
        mut bytes: &[u8],
        ___deadline: zx::Time,
    ) -> Result<Vec<u8>, fidl::Error> {
        let _response = self
            .client
            .send_query::<UnboundedMaybeLargeValue, UnboundedMaybeLargeValue, true, true>(
                (bytes,),
                0x2f6e3f3a9bf3e39a,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.bytes)
    }
    pub fn r#encode_unbounded_maybe_large_resource(
        &self,
        mut elements: &mut [&mut Elements; 64],
        ___deadline: zx::Time,
    ) -> Result<[Elements; 64], fidl::Error> {
        let _response = self
            .client
            .send_query::<UnboundedMaybeLargeResource, UnboundedMaybeLargeResource, true, true>(
                (&mut {
                    let mut temp: [Elements; 64] =
                        fidl::new_empty!(fidl::encoding::Array<Elements, 64>);
                    for (i, x) in elements.iter_mut().enumerate() {
                        temp[i] = std::mem::replace(x, fidl::new_empty!(Elements));
                    }
                    temp
                },),
                0x4c5431cc3af0a62,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.elements)
    }
}

#[derive(Debug, Clone)]
pub struct OverflowingProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for OverflowingProxy {
    type Protocol = OverflowingMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl OverflowingProxy {
    /// Create a new Proxy for Overflowing
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <OverflowingMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the Overflowing protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> OverflowingEventStream {
        OverflowingEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#decode_bounded_known_to_be_small(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        OverflowingProxyInterface::r#decode_bounded_known_to_be_small(self, bytes)
    }
    pub fn r#decode_bounded_maybe_large(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        OverflowingProxyInterface::r#decode_bounded_maybe_large(self, bytes)
    }
    pub fn r#decode_semi_bounded_believed_to_be_small(
        &self,
        mut payload: &mut SemiBoundedBelievedToBeSmall,
    ) -> Result<(), fidl::Error> {
        OverflowingProxyInterface::r#decode_semi_bounded_believed_to_be_small(self, payload)
    }
    pub fn r#decode_semi_bounded_maybe_large(
        &self,
        mut payload: &mut SemiBoundedMaybeLarge,
    ) -> Result<(), fidl::Error> {
        OverflowingProxyInterface::r#decode_semi_bounded_maybe_large(self, payload)
    }
    pub fn r#decode_unbounded_maybe_large_value(
        &self,
        mut bytes: &[u8],
    ) -> Result<(), fidl::Error> {
        OverflowingProxyInterface::r#decode_unbounded_maybe_large_value(self, bytes)
    }
    pub fn r#decode_unbounded_maybe_large_resource(
        &self,
        mut elements: &mut [&mut Elements; 64],
    ) -> Result<(), fidl::Error> {
        OverflowingProxyInterface::r#decode_unbounded_maybe_large_resource(self, elements)
    }
    pub fn r#encode_bounded_known_to_be_small(
        &self,
        mut bytes: &[u8],
    ) -> fidl::client::QueryResponseFut<Vec<u8>> {
        OverflowingProxyInterface::r#encode_bounded_known_to_be_small(self, bytes)
    }
    pub fn r#encode_bounded_maybe_large(
        &self,
        mut bytes: &[u8],
    ) -> fidl::client::QueryResponseFut<Vec<u8>> {
        OverflowingProxyInterface::r#encode_bounded_maybe_large(self, bytes)
    }
    pub fn r#encode_semi_bounded_believed_to_be_small(
        &self,
        mut payload: &mut SemiBoundedBelievedToBeSmall,
    ) -> fidl::client::QueryResponseFut<SemiBoundedBelievedToBeSmall> {
        OverflowingProxyInterface::r#encode_semi_bounded_believed_to_be_small(self, payload)
    }
    pub fn r#encode_semi_bounded_maybe_large(
        &self,
        mut payload: &mut SemiBoundedMaybeLarge,
    ) -> fidl::client::QueryResponseFut<SemiBoundedMaybeLarge> {
        OverflowingProxyInterface::r#encode_semi_bounded_maybe_large(self, payload)
    }
    pub fn r#encode_unbounded_maybe_large_value(
        &self,
        mut bytes: &[u8],
    ) -> fidl::client::QueryResponseFut<Vec<u8>> {
        OverflowingProxyInterface::r#encode_unbounded_maybe_large_value(self, bytes)
    }
    pub fn r#encode_unbounded_maybe_large_resource(
        &self,
        mut elements: &mut [&mut Elements; 64],
    ) -> fidl::client::QueryResponseFut<[Elements; 64]> {
        OverflowingProxyInterface::r#encode_unbounded_maybe_large_resource(self, elements)
    }
}

impl OverflowingProxyInterface for OverflowingProxy {
    fn r#decode_bounded_known_to_be_small(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        self.client.send::<BoundedKnownToBeSmall, false>(
            (bytes,),
            0x529aace1a3b3bce4,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    fn r#decode_bounded_maybe_large(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        self.client.send::<BoundedMaybeLarge, true>(
            (bytes,),
            0x433acc9b9610b5fa,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    fn r#decode_semi_bounded_believed_to_be_small(
        &self,
        mut payload: &mut SemiBoundedBelievedToBeSmall,
    ) -> Result<(), fidl::Error> {
        self.client.send::<SemiBoundedBelievedToBeSmall, false>(
            &*payload,
            0x7d5d85c6a0ddd4d0,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    fn r#decode_semi_bounded_maybe_large(
        &self,
        mut payload: &mut SemiBoundedMaybeLarge,
    ) -> Result<(), fidl::Error> {
        self.client.send::<SemiBoundedMaybeLarge, true>(
            &*payload,
            0x28bb2002323ecc60,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    fn r#decode_unbounded_maybe_large_value(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        self.client.send::<UnboundedMaybeLargeValue, true>(
            (bytes,),
            0x5bde5404c4e18e2f,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    fn r#decode_unbounded_maybe_large_resource(
        &self,
        mut elements: &mut [&mut Elements; 64],
    ) -> Result<(), fidl::Error> {
        self.client.send::<UnboundedMaybeLargeResource, true>(
            (&mut {
                let mut temp: [Elements; 64] =
                    fidl::new_empty!(fidl::encoding::Array<Elements, 64>);
                for (i, x) in elements.iter_mut().enumerate() {
                    temp[i] = std::mem::replace(x, fidl::new_empty!(Elements));
                }
                temp
            },),
            0x3f50d644d96b6394,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    type EncodeBoundedKnownToBeSmallResponseFut = fidl::client::QueryResponseFut<Vec<u8>>;
    fn r#encode_bounded_known_to_be_small(
        &self,
        mut bytes: &[u8],
    ) -> Self::EncodeBoundedKnownToBeSmallResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<Vec<u8>, fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<BoundedKnownToBeSmall, false>(_buf?)?;
            Ok(_response.bytes)
        }
        self.client.send_query_and_decode::<BoundedKnownToBeSmall, Vec<u8>, false>(
            (bytes,),
            0x5adf4f83d06a28d3,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type EncodeBoundedMaybeLargeResponseFut = fidl::client::QueryResponseFut<Vec<u8>>;
    fn r#encode_bounded_maybe_large(
        &self,
        mut bytes: &[u8],
    ) -> Self::EncodeBoundedMaybeLargeResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<Vec<u8>, fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<BoundedMaybeLarge, true>(_buf?)?;
            Ok(_response.bytes)
        }
        self.client.send_query_and_decode::<BoundedMaybeLarge, Vec<u8>, true>(
            (bytes,),
            0x36c5f106da9a80e0,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type EncodeSemiBoundedBelievedToBeSmallResponseFut =
        fidl::client::QueryResponseFut<SemiBoundedBelievedToBeSmall>;
    fn r#encode_semi_bounded_believed_to_be_small(
        &self,
        mut payload: &mut SemiBoundedBelievedToBeSmall,
    ) -> Self::EncodeSemiBoundedBelievedToBeSmallResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<SemiBoundedBelievedToBeSmall, fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<SemiBoundedBelievedToBeSmall, true>(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            SemiBoundedBelievedToBeSmall,
            SemiBoundedBelievedToBeSmall,
            false,
        >(
            &*payload,
            0x3b1167d912bf6bf1,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type EncodeSemiBoundedMaybeLargeResponseFut =
        fidl::client::QueryResponseFut<SemiBoundedMaybeLarge>;
    fn r#encode_semi_bounded_maybe_large(
        &self,
        mut payload: &mut SemiBoundedMaybeLarge,
    ) -> Self::EncodeSemiBoundedMaybeLargeResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<SemiBoundedMaybeLarge, fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<SemiBoundedMaybeLarge, true>(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<SemiBoundedMaybeLarge, SemiBoundedMaybeLarge, true>(
            &*payload,
            0x1f7994e5062e246f,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type EncodeUnboundedMaybeLargeValueResponseFut = fidl::client::QueryResponseFut<Vec<u8>>;
    fn r#encode_unbounded_maybe_large_value(
        &self,
        mut bytes: &[u8],
    ) -> Self::EncodeUnboundedMaybeLargeValueResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<Vec<u8>, fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<UnboundedMaybeLargeValue, true>(_buf?)?;
            Ok(_response.bytes)
        }
        self.client.send_query_and_decode::<UnboundedMaybeLargeValue, Vec<u8>, true>(
            (bytes,),
            0x2f6e3f3a9bf3e39a,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type EncodeUnboundedMaybeLargeResourceResponseFut =
        fidl::client::QueryResponseFut<[Elements; 64]>;
    fn r#encode_unbounded_maybe_large_resource(
        &self,
        mut elements: &mut [&mut Elements; 64],
    ) -> Self::EncodeUnboundedMaybeLargeResourceResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<[Elements; 64], fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<UnboundedMaybeLargeResource, true>(_buf?)?;
            Ok(_response.elements)
        }
        self.client.send_query_and_decode::<UnboundedMaybeLargeResource, [Elements; 64], true>(
            (&mut {
                let mut temp: [Elements; 64] =
                    fidl::new_empty!(fidl::encoding::Array<Elements, 64>);
                for (i, x) in elements.iter_mut().enumerate() {
                    temp[i] = std::mem::replace(x, fidl::new_empty!(Elements));
                }
                temp
            },),
            0x4c5431cc3af0a62,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct OverflowingEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for OverflowingEventStream {}

impl futures::stream::FusedStream for OverflowingEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for OverflowingEventStream {
    type Item = Result<OverflowingEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(OverflowingEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum OverflowingEvent {
    #[non_exhaustive]
    _UnknownEvent {
        /// Ordinal of the event that was sent.
        ordinal: u64,
    },
}

impl OverflowingEvent {
    /// Decodes a message buffer as a [`OverflowingEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<OverflowingEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                Ok(OverflowingEvent::_UnknownEvent { ordinal: tx_header.ordinal() })
                // MessageBufEtc will close handles on drop, before the
                // application can handle the _UnknownEvent variant, so this
                // satisfies the RFC-0138 requirement to close handles first.
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <OverflowingMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for Overflowing
pub struct OverflowingRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for OverflowingRequestStream {}

impl futures::stream::FusedStream for OverflowingRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for OverflowingRequestStream {
    type Protocol = OverflowingMarker;
    type ControlHandle = OverflowingControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        OverflowingControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for OverflowingRequestStream {
    type Item = Result<OverflowingRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled OverflowingRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x529aace1a3b3bce4 => {
                    let mut req = fidl::new_empty!(BoundedKnownToBeSmall);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingDecodeBoundedKnownToBeSmallRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<BoundedKnownToBeSmall>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::DecodeBoundedKnownToBeSmall {
                        bytes: req.bytes,

                        control_handle,
                    })
                }
                0x433acc9b9610b5fa => {
                    let mut req = fidl::new_empty!(BoundedMaybeLarge);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingDecodeBoundedMaybeLargeRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<BoundedMaybeLarge>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::DecodeBoundedMaybeLarge {
                        bytes: req.bytes,

                        control_handle,
                    })
                }
                0x7d5d85c6a0ddd4d0 => {
                    let mut req = fidl::new_empty!(SemiBoundedBelievedToBeSmall);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingDecodeSemiBoundedBelievedToBeSmallRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<SemiBoundedBelievedToBeSmall>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::DecodeSemiBoundedBelievedToBeSmall {
                        payload: req,
                        control_handle,
                    })
                }
                0x28bb2002323ecc60 => {
                    let mut req = fidl::new_empty!(SemiBoundedMaybeLarge);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingDecodeSemiBoundedMaybeLargeRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<SemiBoundedMaybeLarge>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::DecodeSemiBoundedMaybeLarge {
                        payload: req,
                        control_handle,
                    })
                }
                0x5bde5404c4e18e2f => {
                    let mut req = fidl::new_empty!(UnboundedMaybeLargeValue);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingDecodeUnboundedMaybeLargeValueRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<UnboundedMaybeLargeValue>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::DecodeUnboundedMaybeLargeValue {
                        bytes: req.bytes,

                        control_handle,
                    })
                }
                0x3f50d644d96b6394 => {
                    let mut req = fidl::new_empty!(UnboundedMaybeLargeResource);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingDecodeUnboundedMaybeLargeResourceRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<UnboundedMaybeLargeResource>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::DecodeUnboundedMaybeLargeResource {
                        elements: req.elements,

                        control_handle,
                    })
                }
                0x5adf4f83d06a28d3 => {
                    let mut req = fidl::new_empty!(BoundedKnownToBeSmall);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeBoundedKnownToBeSmallRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<BoundedKnownToBeSmall>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::EncodeBoundedKnownToBeSmall {
                        bytes: req.bytes,

                        responder: OverflowingEncodeBoundedKnownToBeSmallResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x36c5f106da9a80e0 => {
                    let mut req = fidl::new_empty!(BoundedMaybeLarge);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeBoundedMaybeLargeRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<BoundedMaybeLarge>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::EncodeBoundedMaybeLarge {
                        bytes: req.bytes,

                        responder: OverflowingEncodeBoundedMaybeLargeResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x3b1167d912bf6bf1 => {
                    let mut req = fidl::new_empty!(SemiBoundedBelievedToBeSmall);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeSemiBoundedBelievedToBeSmallRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<SemiBoundedBelievedToBeSmall>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::EncodeSemiBoundedBelievedToBeSmall {
                        payload: req,
                        responder: OverflowingEncodeSemiBoundedBelievedToBeSmallResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x1f7994e5062e246f => {
                    let mut req = fidl::new_empty!(SemiBoundedMaybeLarge);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeSemiBoundedMaybeLargeRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<SemiBoundedMaybeLarge>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::EncodeSemiBoundedMaybeLarge {
                        payload: req,
                        responder: OverflowingEncodeSemiBoundedMaybeLargeResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x2f6e3f3a9bf3e39a => {
                    let mut req = fidl::new_empty!(UnboundedMaybeLargeValue);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeUnboundedMaybeLargeValueRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<UnboundedMaybeLargeValue>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::EncodeUnboundedMaybeLargeValue {
                        bytes: req.bytes,

                        responder: OverflowingEncodeUnboundedMaybeLargeValueResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x4c5431cc3af0a62 => {
                    let mut req = fidl::new_empty!(UnboundedMaybeLargeResource);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeUnboundedMaybeLargeResourceRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<UnboundedMaybeLargeResource>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    Ok(OverflowingRequest::EncodeUnboundedMaybeLargeResource {
                        elements: req.elements,

                        responder: OverflowingEncodeUnboundedMaybeLargeResourceResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ if header.tx_id() == 0
                    && header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) =>
                {
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };
                    Ok(OverflowingRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                        unknown_method_type: fidl::endpoints::UnknownMethodType::OneWay,
                    })
                    // with_tls_decode_buf will clear the handles when we return
                    // before the application can handle the _UnknownMethod, so
                    // we don't need to clear it explicitly to meet the RFC
                    // requirement to close handles before calling an unknown
                    // interaction handler.
                }
                _ if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = OverflowingControlHandle { inner: this.inner.clone() };

                    let msg = fidl::encoding::TransactionMessage {
                        header: fidl::encoding::TransactionHeader::new(
                            header.tx_id(),
                            header.ordinal(),
                            header.dynamic_flags(),
                        ),
                        body: fidl::encoding::Flexible::<()>::FrameworkErr(
                            fidl::encoding::FrameworkErr::UnknownMethod,
                        ),
                    };

                    // RFC-0138 requires us to close handles in the incoming
                    // message before replying, so we can't wait for
                    // with_tls_decode_buf to auto-clear handles when we return.
                    handles.clear();

                    // We are inside of with_tls_decode_buf, so we can't use
                    // with_tls_encode_buf. However, we know that the unknown
                    // interaction reply will not contain any handles, so
                    // creating a new Vec here does not cause an allocation.
                    let mut handles = Vec::new();
                    fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/Overflowing_UnknownMethodResponse");
                    fidl::encoding::Encoder::encode::<
                        fidl::encoding::TransactionMessageType<
                            fidl::encoding::FlexibleType<fidl::encoding::EmptyStruct>,
                        >,
                    >(bytes, &mut handles, msg)?;
                    fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
                    fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

                    control_handle.inner.send_raw_msg(&*bytes, &mut handles)?;

                    Ok(OverflowingRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                        unknown_method_type: fidl::endpoints::UnknownMethodType::TwoWay,
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <OverflowingMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum OverflowingRequest {
    DecodeBoundedKnownToBeSmall {
        bytes: Vec<u8>,
        control_handle: OverflowingControlHandle,
    },
    DecodeBoundedMaybeLarge {
        bytes: Vec<u8>,
        control_handle: OverflowingControlHandle,
    },
    DecodeSemiBoundedBelievedToBeSmall {
        payload: SemiBoundedBelievedToBeSmall,
        control_handle: OverflowingControlHandle,
    },
    DecodeSemiBoundedMaybeLarge {
        payload: SemiBoundedMaybeLarge,
        control_handle: OverflowingControlHandle,
    },
    DecodeUnboundedMaybeLargeValue {
        bytes: Vec<u8>,
        control_handle: OverflowingControlHandle,
    },
    DecodeUnboundedMaybeLargeResource {
        elements: [Elements; 64],
        control_handle: OverflowingControlHandle,
    },
    EncodeBoundedKnownToBeSmall {
        bytes: Vec<u8>,
        responder: OverflowingEncodeBoundedKnownToBeSmallResponder,
    },
    EncodeBoundedMaybeLarge {
        bytes: Vec<u8>,
        responder: OverflowingEncodeBoundedMaybeLargeResponder,
    },
    EncodeSemiBoundedBelievedToBeSmall {
        payload: SemiBoundedBelievedToBeSmall,
        responder: OverflowingEncodeSemiBoundedBelievedToBeSmallResponder,
    },
    EncodeSemiBoundedMaybeLarge {
        payload: SemiBoundedMaybeLarge,
        responder: OverflowingEncodeSemiBoundedMaybeLargeResponder,
    },
    EncodeUnboundedMaybeLargeValue {
        bytes: Vec<u8>,
        responder: OverflowingEncodeUnboundedMaybeLargeValueResponder,
    },
    EncodeUnboundedMaybeLargeResource {
        elements: [Elements; 64],
        responder: OverflowingEncodeUnboundedMaybeLargeResourceResponder,
    },
    /// An interaction was received which does not match any known method.
    #[non_exhaustive]
    _UnknownMethod {
        /// Ordinal of the method that was called.
        ordinal: u64,
        control_handle: OverflowingControlHandle,
        unknown_method_type: fidl::endpoints::UnknownMethodType,
    },
}

impl OverflowingRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_decode_bounded_known_to_be_small(
        self,
    ) -> Option<(Vec<u8>, OverflowingControlHandle)> {
        if let OverflowingRequest::DecodeBoundedKnownToBeSmall { bytes, control_handle } = self {
            Some((bytes, control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_decode_bounded_maybe_large(self) -> Option<(Vec<u8>, OverflowingControlHandle)> {
        if let OverflowingRequest::DecodeBoundedMaybeLarge { bytes, control_handle } = self {
            Some((bytes, control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_decode_semi_bounded_believed_to_be_small(
        self,
    ) -> Option<(SemiBoundedBelievedToBeSmall, OverflowingControlHandle)> {
        if let OverflowingRequest::DecodeSemiBoundedBelievedToBeSmall { payload, control_handle } =
            self
        {
            Some((payload, control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_decode_semi_bounded_maybe_large(
        self,
    ) -> Option<(SemiBoundedMaybeLarge, OverflowingControlHandle)> {
        if let OverflowingRequest::DecodeSemiBoundedMaybeLarge { payload, control_handle } = self {
            Some((payload, control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_decode_unbounded_maybe_large_value(
        self,
    ) -> Option<(Vec<u8>, OverflowingControlHandle)> {
        if let OverflowingRequest::DecodeUnboundedMaybeLargeValue { bytes, control_handle } = self {
            Some((bytes, control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_decode_unbounded_maybe_large_resource(
        self,
    ) -> Option<([Elements; 64], OverflowingControlHandle)> {
        if let OverflowingRequest::DecodeUnboundedMaybeLargeResource { elements, control_handle } =
            self
        {
            Some((elements, control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_encode_bounded_known_to_be_small(
        self,
    ) -> Option<(Vec<u8>, OverflowingEncodeBoundedKnownToBeSmallResponder)> {
        if let OverflowingRequest::EncodeBoundedKnownToBeSmall { bytes, responder } = self {
            Some((bytes, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_encode_bounded_maybe_large(
        self,
    ) -> Option<(Vec<u8>, OverflowingEncodeBoundedMaybeLargeResponder)> {
        if let OverflowingRequest::EncodeBoundedMaybeLarge { bytes, responder } = self {
            Some((bytes, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_encode_semi_bounded_believed_to_be_small(
        self,
    ) -> Option<(
        SemiBoundedBelievedToBeSmall,
        OverflowingEncodeSemiBoundedBelievedToBeSmallResponder,
    )> {
        if let OverflowingRequest::EncodeSemiBoundedBelievedToBeSmall { payload, responder } = self
        {
            Some((payload, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_encode_semi_bounded_maybe_large(
        self,
    ) -> Option<(SemiBoundedMaybeLarge, OverflowingEncodeSemiBoundedMaybeLargeResponder)> {
        if let OverflowingRequest::EncodeSemiBoundedMaybeLarge { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_encode_unbounded_maybe_large_value(
        self,
    ) -> Option<(Vec<u8>, OverflowingEncodeUnboundedMaybeLargeValueResponder)> {
        if let OverflowingRequest::EncodeUnboundedMaybeLargeValue { bytes, responder } = self {
            Some((bytes, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_encode_unbounded_maybe_large_resource(
        self,
    ) -> Option<([Elements; 64], OverflowingEncodeUnboundedMaybeLargeResourceResponder)> {
        if let OverflowingRequest::EncodeUnboundedMaybeLargeResource { elements, responder } = self
        {
            Some((elements, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            OverflowingRequest::DecodeBoundedKnownToBeSmall { .. } => {
                "decode_bounded_known_to_be_small"
            }
            OverflowingRequest::DecodeBoundedMaybeLarge { .. } => "decode_bounded_maybe_large",
            OverflowingRequest::DecodeSemiBoundedBelievedToBeSmall { .. } => {
                "decode_semi_bounded_believed_to_be_small"
            }
            OverflowingRequest::DecodeSemiBoundedMaybeLarge { .. } => {
                "decode_semi_bounded_maybe_large"
            }
            OverflowingRequest::DecodeUnboundedMaybeLargeValue { .. } => {
                "decode_unbounded_maybe_large_value"
            }
            OverflowingRequest::DecodeUnboundedMaybeLargeResource { .. } => {
                "decode_unbounded_maybe_large_resource"
            }
            OverflowingRequest::EncodeBoundedKnownToBeSmall { .. } => {
                "encode_bounded_known_to_be_small"
            }
            OverflowingRequest::EncodeBoundedMaybeLarge { .. } => "encode_bounded_maybe_large",
            OverflowingRequest::EncodeSemiBoundedBelievedToBeSmall { .. } => {
                "encode_semi_bounded_believed_to_be_small"
            }
            OverflowingRequest::EncodeSemiBoundedMaybeLarge { .. } => {
                "encode_semi_bounded_maybe_large"
            }
            OverflowingRequest::EncodeUnboundedMaybeLargeValue { .. } => {
                "encode_unbounded_maybe_large_value"
            }
            OverflowingRequest::EncodeUnboundedMaybeLargeResource { .. } => {
                "encode_unbounded_maybe_large_resource"
            }
            OverflowingRequest::_UnknownMethod {
                unknown_method_type: fidl::endpoints::UnknownMethodType::OneWay,
                ..
            } => "unknown one-way method",
            OverflowingRequest::_UnknownMethod {
                unknown_method_type: fidl::endpoints::UnknownMethodType::TwoWay,
                ..
            } => "unknown two-way method",
        }
    }
}

#[derive(Debug, Clone)]
pub struct OverflowingControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for OverflowingControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl OverflowingControlHandle {}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct OverflowingEncodeBoundedKnownToBeSmallResponder {
    control_handle: std::mem::ManuallyDrop<OverflowingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`OverflowingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for OverflowingEncodeBoundedKnownToBeSmallResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for OverflowingEncodeBoundedKnownToBeSmallResponder {
    type ControlHandle = OverflowingControlHandle;

    fn control_handle(&self) -> &OverflowingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl OverflowingEncodeBoundedKnownToBeSmallResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        let r = self.send_raw(bytes);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        let r = self.send_raw(bytes);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (bytes,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeBoundedKnownToBeSmallResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<BoundedKnownToBeSmall>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct OverflowingEncodeBoundedMaybeLargeResponder {
    control_handle: std::mem::ManuallyDrop<OverflowingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`OverflowingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for OverflowingEncodeBoundedMaybeLargeResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for OverflowingEncodeBoundedMaybeLargeResponder {
    type ControlHandle = OverflowingControlHandle;

    fn control_handle(&self) -> &OverflowingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl OverflowingEncodeBoundedMaybeLargeResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        let r = self.send_raw(bytes);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        let r = self.send_raw(bytes);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (bytes,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeBoundedMaybeLargeResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<BoundedMaybeLarge>,
            >(bytes, handles, msg)?;
            fidl::encoding::maybe_overflowing_after_encode(bytes, handles)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct OverflowingEncodeSemiBoundedBelievedToBeSmallResponder {
    control_handle: std::mem::ManuallyDrop<OverflowingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`OverflowingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for OverflowingEncodeSemiBoundedBelievedToBeSmallResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for OverflowingEncodeSemiBoundedBelievedToBeSmallResponder {
    type ControlHandle = OverflowingControlHandle;

    fn control_handle(&self) -> &OverflowingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl OverflowingEncodeSemiBoundedBelievedToBeSmallResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut payload: &mut SemiBoundedBelievedToBeSmall) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &mut SemiBoundedBelievedToBeSmall,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut payload: &mut SemiBoundedBelievedToBeSmall) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &*payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeSemiBoundedBelievedToBeSmallResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<SemiBoundedBelievedToBeSmall>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct OverflowingEncodeSemiBoundedMaybeLargeResponder {
    control_handle: std::mem::ManuallyDrop<OverflowingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`OverflowingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for OverflowingEncodeSemiBoundedMaybeLargeResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for OverflowingEncodeSemiBoundedMaybeLargeResponder {
    type ControlHandle = OverflowingControlHandle;

    fn control_handle(&self) -> &OverflowingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl OverflowingEncodeSemiBoundedMaybeLargeResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut payload: &mut SemiBoundedMaybeLarge) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &mut SemiBoundedMaybeLarge,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut payload: &mut SemiBoundedMaybeLarge) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &*payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeSemiBoundedMaybeLargeResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<SemiBoundedMaybeLarge>,
            >(bytes, handles, msg)?;
            fidl::encoding::maybe_overflowing_after_encode(bytes, handles)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct OverflowingEncodeUnboundedMaybeLargeValueResponder {
    control_handle: std::mem::ManuallyDrop<OverflowingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`OverflowingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for OverflowingEncodeUnboundedMaybeLargeValueResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for OverflowingEncodeUnboundedMaybeLargeValueResponder {
    type ControlHandle = OverflowingControlHandle;

    fn control_handle(&self) -> &OverflowingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl OverflowingEncodeUnboundedMaybeLargeValueResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        let r = self.send_raw(bytes);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        let r = self.send_raw(bytes);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut bytes: &[u8]) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (bytes,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeUnboundedMaybeLargeValueResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<UnboundedMaybeLargeValue>,
            >(bytes, handles, msg)?;
            fidl::encoding::maybe_overflowing_after_encode(bytes, handles)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct OverflowingEncodeUnboundedMaybeLargeResourceResponder {
    control_handle: std::mem::ManuallyDrop<OverflowingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`OverflowingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for OverflowingEncodeUnboundedMaybeLargeResourceResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for OverflowingEncodeUnboundedMaybeLargeResourceResponder {
    type ControlHandle = OverflowingControlHandle;

    fn control_handle(&self) -> &OverflowingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl OverflowingEncodeUnboundedMaybeLargeResourceResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut elements: &mut [&mut Elements; 64]) -> Result<(), fidl::Error> {
        let r = self.send_raw(elements);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut elements: &mut [&mut Elements; 64],
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(elements);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut elements: &mut [&mut Elements; 64]) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (&mut {
                let mut temp: [Elements; 64] =
                    fidl::new_empty!(fidl::encoding::Array<Elements, 64>);
                for (i, x) in elements.iter_mut().enumerate() {
                    temp[i] = std::mem::replace(x, fidl::new_empty!(Elements));
                }
                temp
            },),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.largemessages/OverflowingEncodeUnboundedMaybeLargeResourceResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<UnboundedMaybeLargeResource>,
            >(bytes, handles, msg)?;
            fidl::encoding::maybe_overflowing_after_encode(bytes, handles)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
