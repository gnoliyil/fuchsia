// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        endpoints::{ControlHandle as _, Responder as _},
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

pub const ALL_BINDINGS: u32 = 0;

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct DenyEachBindingOnlyDenyCppRequest {
    pub a: bool,
}

impl fidl::Persistable for DenyEachBindingOnlyDenyCppRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct DenyEachBindingOnlyDenyDartRequest {
    pub a: bool,
}

impl fidl::Persistable for DenyEachBindingOnlyDenyDartRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct DenyEachBindingOnlyDenyGoRequest {
    pub a: bool,
}

impl fidl::Persistable for DenyEachBindingOnlyDenyGoRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct DenyEachBindingOnlyDenyLibfuzzerRequest {
    pub a: bool,
}

impl fidl::Persistable for DenyEachBindingOnlyDenyLibfuzzerRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct DenyEachBindingOnlyDenySyzkallerRequest {
    pub a: bool,
}

impl fidl::Persistable for DenyEachBindingOnlyDenySyzkallerRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct DenyEachBindingOnlyDenyCppResponse {
    pub b: i32,
}

impl fidl::Persistable for DenyEachBindingOnlyDenyCppResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct DenyEachBindingOnlyDenyDartResponse {
    pub b: i32,
}

impl fidl::Persistable for DenyEachBindingOnlyDenyDartResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct DenyEachBindingOnlyDenyGoResponse {
    pub b: i32,
}

impl fidl::Persistable for DenyEachBindingOnlyDenyGoResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct DenyEachBindingOnlyDenyLibfuzzerResponse {
    pub b: i32,
}

impl fidl::Persistable for DenyEachBindingOnlyDenyLibfuzzerResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct DenyEachBindingOnlyDenySyzkallerResponse {
    pub b: i32,
}

impl fidl::Persistable for DenyEachBindingOnlyDenySyzkallerResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct MemberOnlyAppearsInImportingLibrary {
    pub a: bool,
}

impl fidl::Persistable for MemberOnlyAppearsInImportingLibrary {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct OnlyAppearsInImportingLibrary {
    pub member_only_appears_in_importing_library: MemberOnlyAppearsInImportingLibrary,
}

impl fidl::Persistable for OnlyAppearsInImportingLibrary {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct OnlyRust {
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for OnlyRust {}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct AllowedMarker;

impl fidl::endpoints::ProtocolMarker for AllowedMarker {
    type Proxy = AllowedProxy;
    type RequestStream = AllowedRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) Allowed";
}

pub trait AllowedProxyInterface: Send + Sync {}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct AllowedSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl AllowedSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <AllowedMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<AllowedEvent, fidl::Error> {
        AllowedEvent::decode(self.client.wait_for_event(deadline)?)
    }
}

#[derive(Debug, Clone)]
pub struct AllowedProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for AllowedProxy {
    type Protocol = AllowedMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl AllowedProxy {
    /// Create a new Proxy for Allowed
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <AllowedMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the Allowed protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> AllowedEventStream {
        AllowedEventStream { event_receiver: self.client.take_event_receiver() }
    }
}

impl AllowedProxyInterface for AllowedProxy {}

pub struct AllowedEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for AllowedEventStream {}

impl futures::stream::FusedStream for AllowedEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for AllowedEventStream {
    type Item = Result<AllowedEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(AllowedEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum AllowedEvent {}

impl AllowedEvent {
    /// Decodes a message buffer as a [`AllowedEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<AllowedEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <AllowedMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for Allowed
pub struct AllowedRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for AllowedRequestStream {}

impl futures::stream::FusedStream for AllowedRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for AllowedRequestStream {
    type Protocol = AllowedMarker;
    type ControlHandle = AllowedControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        AllowedControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for AllowedRequestStream {
    type Item = Result<AllowedRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled AllowedRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <AllowedMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}

#[derive(Debug)]
pub enum AllowedRequest {}

impl AllowedRequest {
    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {}
    }
}

#[derive(Debug, Clone)]
pub struct AllowedControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for AllowedControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl AllowedControlHandle {}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct DenyEachBindingMarker;

impl fidl::endpoints::ProtocolMarker for DenyEachBindingMarker {
    type Proxy = DenyEachBindingProxy;
    type RequestStream = DenyEachBindingRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) DenyEachBinding";
}
pub type DenyEachBindingOnlyDenyCppResult = Result<i32, u32>;
pub type DenyEachBindingOnlyDenyDartResult = Result<i32, u32>;
pub type DenyEachBindingOnlyDenyGoResult = Result<i32, u32>;
pub type DenyEachBindingOnlyDenyLibfuzzerResult = Result<i32, u32>;
pub type DenyEachBindingOnlyDenySyzkallerResult = Result<i32, u32>;

pub trait DenyEachBindingProxyInterface: Send + Sync {
    type OnlyDenyCppResponseFut: std::future::Future<Output = Result<DenyEachBindingOnlyDenyCppResult, fidl::Error>>
        + Send;
    fn r#only_deny_cpp(&self, a: bool) -> Self::OnlyDenyCppResponseFut;
    type OnlyDenyDartResponseFut: std::future::Future<Output = Result<DenyEachBindingOnlyDenyDartResult, fidl::Error>>
        + Send;
    fn r#only_deny_dart(&self, a: bool) -> Self::OnlyDenyDartResponseFut;
    type OnlyDenyGoResponseFut: std::future::Future<Output = Result<DenyEachBindingOnlyDenyGoResult, fidl::Error>>
        + Send;
    fn r#only_deny_go(&self, a: bool) -> Self::OnlyDenyGoResponseFut;
    type OnlyDenyLibfuzzerResponseFut: std::future::Future<Output = Result<DenyEachBindingOnlyDenyLibfuzzerResult, fidl::Error>>
        + Send;
    fn r#only_deny_libfuzzer(&self, a: bool) -> Self::OnlyDenyLibfuzzerResponseFut;
    type OnlyDenySyzkallerResponseFut: std::future::Future<Output = Result<DenyEachBindingOnlyDenySyzkallerResult, fidl::Error>>
        + Send;
    fn r#only_deny_syzkaller(&self, a: bool) -> Self::OnlyDenySyzkallerResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct DenyEachBindingSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl DenyEachBindingSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <DenyEachBindingMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<DenyEachBindingEvent, fidl::Error> {
        DenyEachBindingEvent::decode(self.client.wait_for_event(deadline)?)
    }

    pub fn r#only_deny_cpp(
        &self,
        mut a: bool,
        ___deadline: zx::Time,
    ) -> Result<DenyEachBindingOnlyDenyCppResult, fidl::Error> {
        let _response = self.client.send_query::<
            DenyEachBindingOnlyDenyCppRequest,
            fidl::encoding::ResultType<DenyEachBindingOnlyDenyCppResponse, u32>,
        >(
            (a,),
            0x290bad96051b1b92,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x.b))
    }

    pub fn r#only_deny_dart(
        &self,
        mut a: bool,
        ___deadline: zx::Time,
    ) -> Result<DenyEachBindingOnlyDenyDartResult, fidl::Error> {
        let _response = self.client.send_query::<
            DenyEachBindingOnlyDenyDartRequest,
            fidl::encoding::ResultType<DenyEachBindingOnlyDenyDartResponse, u32>,
        >(
            (a,),
            0x75384066a26d87d7,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x.b))
    }

    pub fn r#only_deny_go(
        &self,
        mut a: bool,
        ___deadline: zx::Time,
    ) -> Result<DenyEachBindingOnlyDenyGoResult, fidl::Error> {
        let _response = self.client.send_query::<
            DenyEachBindingOnlyDenyGoRequest,
            fidl::encoding::ResultType<DenyEachBindingOnlyDenyGoResponse, u32>,
        >(
            (a,),
            0x657655b981478d99,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x.b))
    }

    pub fn r#only_deny_libfuzzer(
        &self,
        mut a: bool,
        ___deadline: zx::Time,
    ) -> Result<DenyEachBindingOnlyDenyLibfuzzerResult, fidl::Error> {
        let _response = self.client.send_query::<
            DenyEachBindingOnlyDenyLibfuzzerRequest,
            fidl::encoding::ResultType<DenyEachBindingOnlyDenyLibfuzzerResponse, u32>,
        >(
            (a,),
            0x1e4f89c329617b1e,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x.b))
    }

    pub fn r#only_deny_syzkaller(
        &self,
        mut a: bool,
        ___deadline: zx::Time,
    ) -> Result<DenyEachBindingOnlyDenySyzkallerResult, fidl::Error> {
        let _response = self.client.send_query::<
            DenyEachBindingOnlyDenySyzkallerRequest,
            fidl::encoding::ResultType<DenyEachBindingOnlyDenySyzkallerResponse, u32>,
        >(
            (a,),
            0x202ee614a749e98a,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x.b))
    }
}

#[derive(Debug, Clone)]
pub struct DenyEachBindingProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for DenyEachBindingProxy {
    type Protocol = DenyEachBindingMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl DenyEachBindingProxy {
    /// Create a new Proxy for DenyEachBinding
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <DenyEachBindingMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the DenyEachBinding protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> DenyEachBindingEventStream {
        DenyEachBindingEventStream { event_receiver: self.client.take_event_receiver() }
    }

    pub fn r#only_deny_cpp(
        &self,
        mut a: bool,
    ) -> fidl::client::QueryResponseFut<DenyEachBindingOnlyDenyCppResult> {
        DenyEachBindingProxyInterface::r#only_deny_cpp(self, a)
    }

    pub fn r#only_deny_dart(
        &self,
        mut a: bool,
    ) -> fidl::client::QueryResponseFut<DenyEachBindingOnlyDenyDartResult> {
        DenyEachBindingProxyInterface::r#only_deny_dart(self, a)
    }

    pub fn r#only_deny_go(
        &self,
        mut a: bool,
    ) -> fidl::client::QueryResponseFut<DenyEachBindingOnlyDenyGoResult> {
        DenyEachBindingProxyInterface::r#only_deny_go(self, a)
    }

    pub fn r#only_deny_libfuzzer(
        &self,
        mut a: bool,
    ) -> fidl::client::QueryResponseFut<DenyEachBindingOnlyDenyLibfuzzerResult> {
        DenyEachBindingProxyInterface::r#only_deny_libfuzzer(self, a)
    }

    pub fn r#only_deny_syzkaller(
        &self,
        mut a: bool,
    ) -> fidl::client::QueryResponseFut<DenyEachBindingOnlyDenySyzkallerResult> {
        DenyEachBindingProxyInterface::r#only_deny_syzkaller(self, a)
    }
}

impl DenyEachBindingProxyInterface for DenyEachBindingProxy {
    type OnlyDenyCppResponseFut = fidl::client::QueryResponseFut<DenyEachBindingOnlyDenyCppResult>;
    fn r#only_deny_cpp(&self, mut a: bool) -> Self::OnlyDenyCppResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<DenyEachBindingOnlyDenyCppResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<DenyEachBindingOnlyDenyCppResponse, u32>,
            >(_buf?)?;
            Ok(_response.map(|x| x.b))
        }
        self.client.send_query_and_decode::<
            DenyEachBindingOnlyDenyCppRequest,
            DenyEachBindingOnlyDenyCppResult,
        >(
            (a,),
            0x290bad96051b1b92,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type OnlyDenyDartResponseFut =
        fidl::client::QueryResponseFut<DenyEachBindingOnlyDenyDartResult>;
    fn r#only_deny_dart(&self, mut a: bool) -> Self::OnlyDenyDartResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<DenyEachBindingOnlyDenyDartResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<DenyEachBindingOnlyDenyDartResponse, u32>,
            >(_buf?)?;
            Ok(_response.map(|x| x.b))
        }
        self.client.send_query_and_decode::<
            DenyEachBindingOnlyDenyDartRequest,
            DenyEachBindingOnlyDenyDartResult,
        >(
            (a,),
            0x75384066a26d87d7,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type OnlyDenyGoResponseFut = fidl::client::QueryResponseFut<DenyEachBindingOnlyDenyGoResult>;
    fn r#only_deny_go(&self, mut a: bool) -> Self::OnlyDenyGoResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<DenyEachBindingOnlyDenyGoResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<DenyEachBindingOnlyDenyGoResponse, u32>,
            >(_buf?)?;
            Ok(_response.map(|x| x.b))
        }
        self.client.send_query_and_decode::<
            DenyEachBindingOnlyDenyGoRequest,
            DenyEachBindingOnlyDenyGoResult,
        >(
            (a,),
            0x657655b981478d99,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type OnlyDenyLibfuzzerResponseFut =
        fidl::client::QueryResponseFut<DenyEachBindingOnlyDenyLibfuzzerResult>;
    fn r#only_deny_libfuzzer(&self, mut a: bool) -> Self::OnlyDenyLibfuzzerResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<DenyEachBindingOnlyDenyLibfuzzerResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<DenyEachBindingOnlyDenyLibfuzzerResponse, u32>,
            >(_buf?)?;
            Ok(_response.map(|x| x.b))
        }
        self.client.send_query_and_decode::<
            DenyEachBindingOnlyDenyLibfuzzerRequest,
            DenyEachBindingOnlyDenyLibfuzzerResult,
        >(
            (a,),
            0x1e4f89c329617b1e,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type OnlyDenySyzkallerResponseFut =
        fidl::client::QueryResponseFut<DenyEachBindingOnlyDenySyzkallerResult>;
    fn r#only_deny_syzkaller(&self, mut a: bool) -> Self::OnlyDenySyzkallerResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<DenyEachBindingOnlyDenySyzkallerResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<DenyEachBindingOnlyDenySyzkallerResponse, u32>,
            >(_buf?)?;
            Ok(_response.map(|x| x.b))
        }
        self.client.send_query_and_decode::<
            DenyEachBindingOnlyDenySyzkallerRequest,
            DenyEachBindingOnlyDenySyzkallerResult,
        >(
            (a,),
            0x202ee614a749e98a,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct DenyEachBindingEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for DenyEachBindingEventStream {}

impl futures::stream::FusedStream for DenyEachBindingEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for DenyEachBindingEventStream {
    type Item = Result<DenyEachBindingEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(DenyEachBindingEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum DenyEachBindingEvent {}

impl DenyEachBindingEvent {
    /// Decodes a message buffer as a [`DenyEachBindingEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<DenyEachBindingEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <DenyEachBindingMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for DenyEachBinding
pub struct DenyEachBindingRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for DenyEachBindingRequestStream {}

impl futures::stream::FusedStream for DenyEachBindingRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for DenyEachBindingRequestStream {
    type Protocol = DenyEachBindingMarker;
    type ControlHandle = DenyEachBindingControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        DenyEachBindingControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for DenyEachBindingRequestStream {
    type Item = Result<DenyEachBindingRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled DenyEachBindingRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x290bad96051b1b92 => {
                    let mut req = fidl::new_empty!(DenyEachBindingOnlyDenyCppRequest);
                    fidl::encoding::Decoder::decode_into::<DenyEachBindingOnlyDenyCppRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = DenyEachBindingControlHandle { inner: this.inner.clone() };

                    Ok(DenyEachBindingRequest::OnlyDenyCpp {
                        a: req.a,

                        responder: DenyEachBindingOnlyDenyCppResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x75384066a26d87d7 => {
                    let mut req = fidl::new_empty!(DenyEachBindingOnlyDenyDartRequest);
                    fidl::encoding::Decoder::decode_into::<DenyEachBindingOnlyDenyDartRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = DenyEachBindingControlHandle { inner: this.inner.clone() };

                    Ok(DenyEachBindingRequest::OnlyDenyDart {
                        a: req.a,

                        responder: DenyEachBindingOnlyDenyDartResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x657655b981478d99 => {
                    let mut req = fidl::new_empty!(DenyEachBindingOnlyDenyGoRequest);
                    fidl::encoding::Decoder::decode_into::<DenyEachBindingOnlyDenyGoRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = DenyEachBindingControlHandle { inner: this.inner.clone() };

                    Ok(DenyEachBindingRequest::OnlyDenyGo {
                        a: req.a,

                        responder: DenyEachBindingOnlyDenyGoResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x1e4f89c329617b1e => {
                    let mut req = fidl::new_empty!(DenyEachBindingOnlyDenyLibfuzzerRequest);
                    fidl::encoding::Decoder::decode_into::<DenyEachBindingOnlyDenyLibfuzzerRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = DenyEachBindingControlHandle { inner: this.inner.clone() };

                    Ok(DenyEachBindingRequest::OnlyDenyLibfuzzer {
                        a: req.a,

                        responder: DenyEachBindingOnlyDenyLibfuzzerResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x202ee614a749e98a => {
                    let mut req = fidl::new_empty!(DenyEachBindingOnlyDenySyzkallerRequest);
                    fidl::encoding::Decoder::decode_into::<DenyEachBindingOnlyDenySyzkallerRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = DenyEachBindingControlHandle { inner: this.inner.clone() };

                    Ok(DenyEachBindingRequest::OnlyDenySyzkaller {
                        a: req.a,

                        responder: DenyEachBindingOnlyDenySyzkallerResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <DenyEachBindingMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}

#[derive(Debug)]
pub enum DenyEachBindingRequest {
    OnlyDenyCpp { a: bool, responder: DenyEachBindingOnlyDenyCppResponder },
    OnlyDenyDart { a: bool, responder: DenyEachBindingOnlyDenyDartResponder },
    OnlyDenyGo { a: bool, responder: DenyEachBindingOnlyDenyGoResponder },
    OnlyDenyLibfuzzer { a: bool, responder: DenyEachBindingOnlyDenyLibfuzzerResponder },
    OnlyDenySyzkaller { a: bool, responder: DenyEachBindingOnlyDenySyzkallerResponder },
}

impl DenyEachBindingRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_only_deny_cpp(self) -> Option<(bool, DenyEachBindingOnlyDenyCppResponder)> {
        if let DenyEachBindingRequest::OnlyDenyCpp { a, responder } = self {
            Some((a, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_only_deny_dart(self) -> Option<(bool, DenyEachBindingOnlyDenyDartResponder)> {
        if let DenyEachBindingRequest::OnlyDenyDart { a, responder } = self {
            Some((a, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_only_deny_go(self) -> Option<(bool, DenyEachBindingOnlyDenyGoResponder)> {
        if let DenyEachBindingRequest::OnlyDenyGo { a, responder } = self {
            Some((a, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_only_deny_libfuzzer(
        self,
    ) -> Option<(bool, DenyEachBindingOnlyDenyLibfuzzerResponder)> {
        if let DenyEachBindingRequest::OnlyDenyLibfuzzer { a, responder } = self {
            Some((a, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_only_deny_syzkaller(
        self,
    ) -> Option<(bool, DenyEachBindingOnlyDenySyzkallerResponder)> {
        if let DenyEachBindingRequest::OnlyDenySyzkaller { a, responder } = self {
            Some((a, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            DenyEachBindingRequest::OnlyDenyCpp { .. } => "only_deny_cpp",
            DenyEachBindingRequest::OnlyDenyDart { .. } => "only_deny_dart",
            DenyEachBindingRequest::OnlyDenyGo { .. } => "only_deny_go",
            DenyEachBindingRequest::OnlyDenyLibfuzzer { .. } => "only_deny_libfuzzer",
            DenyEachBindingRequest::OnlyDenySyzkaller { .. } => "only_deny_syzkaller",
        }
    }
}

#[derive(Debug, Clone)]
pub struct DenyEachBindingControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for DenyEachBindingControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl DenyEachBindingControlHandle {}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct DenyEachBindingOnlyDenyCppResponder {
    control_handle: std::mem::ManuallyDrop<DenyEachBindingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`DenyEachBindingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for DenyEachBindingOnlyDenyCppResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for DenyEachBindingOnlyDenyCppResponder {
    type ControlHandle = DenyEachBindingControlHandle;

    fn control_handle(&self) -> &DenyEachBindingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl DenyEachBindingOnlyDenyCppResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.map(|b| (b,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<DenyEachBindingOnlyDenyCppResponse, u32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct DenyEachBindingOnlyDenyDartResponder {
    control_handle: std::mem::ManuallyDrop<DenyEachBindingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`DenyEachBindingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for DenyEachBindingOnlyDenyDartResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for DenyEachBindingOnlyDenyDartResponder {
    type ControlHandle = DenyEachBindingControlHandle;

    fn control_handle(&self) -> &DenyEachBindingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl DenyEachBindingOnlyDenyDartResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.map(|b| (b,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<DenyEachBindingOnlyDenyDartResponse, u32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct DenyEachBindingOnlyDenyGoResponder {
    control_handle: std::mem::ManuallyDrop<DenyEachBindingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`DenyEachBindingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for DenyEachBindingOnlyDenyGoResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for DenyEachBindingOnlyDenyGoResponder {
    type ControlHandle = DenyEachBindingControlHandle;

    fn control_handle(&self) -> &DenyEachBindingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl DenyEachBindingOnlyDenyGoResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.map(|b| (b,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<DenyEachBindingOnlyDenyGoResponse, u32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct DenyEachBindingOnlyDenyLibfuzzerResponder {
    control_handle: std::mem::ManuallyDrop<DenyEachBindingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`DenyEachBindingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for DenyEachBindingOnlyDenyLibfuzzerResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for DenyEachBindingOnlyDenyLibfuzzerResponder {
    type ControlHandle = DenyEachBindingControlHandle;

    fn control_handle(&self) -> &DenyEachBindingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl DenyEachBindingOnlyDenyLibfuzzerResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.map(|b| (b,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<DenyEachBindingOnlyDenyLibfuzzerResponse, u32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct DenyEachBindingOnlyDenySyzkallerResponder {
    control_handle: std::mem::ManuallyDrop<DenyEachBindingControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`DenyEachBindingControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for DenyEachBindingOnlyDenySyzkallerResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for DenyEachBindingOnlyDenySyzkallerResponder {
    type ControlHandle = DenyEachBindingControlHandle;

    fn control_handle(&self) -> &DenyEachBindingControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl DenyEachBindingOnlyDenySyzkallerResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<i32, u32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.map(|b| (b,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<DenyEachBindingOnlyDenySyzkallerResponse, u32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ImportsSameNameContextMarker;

impl fidl::endpoints::ProtocolMarker for ImportsSameNameContextMarker {
    type Proxy = ImportsSameNameContextProxy;
    type RequestStream = ImportsSameNameContextRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) ImportsSameNameContext";
}

pub trait ImportsSameNameContextProxyInterface: Send + Sync {
    fn r#unattributed(&self) -> Result<(), fidl::Error>;
    fn r#always_appears_in_importing_library(&self) -> Result<(), fidl::Error>;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct ImportsSameNameContextSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl ImportsSameNameContextSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <ImportsSameNameContextMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<ImportsSameNameContextEvent, fidl::Error> {
        ImportsSameNameContextEvent::decode(self.client.wait_for_event(deadline)?)
    }

    pub fn r#unattributed(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x698380acfd29e8f,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn r#always_appears_in_importing_library(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x2874096c521236f8,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

#[derive(Debug, Clone)]
pub struct ImportsSameNameContextProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for ImportsSameNameContextProxy {
    type Protocol = ImportsSameNameContextMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl ImportsSameNameContextProxy {
    /// Create a new Proxy for ImportsSameNameContext
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <ImportsSameNameContextMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the ImportsSameNameContext protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> ImportsSameNameContextEventStream {
        ImportsSameNameContextEventStream { event_receiver: self.client.take_event_receiver() }
    }

    pub fn r#unattributed(&self) -> Result<(), fidl::Error> {
        ImportsSameNameContextProxyInterface::r#unattributed(self)
    }

    pub fn r#always_appears_in_importing_library(&self) -> Result<(), fidl::Error> {
        ImportsSameNameContextProxyInterface::r#always_appears_in_importing_library(self)
    }
}

impl ImportsSameNameContextProxyInterface for ImportsSameNameContextProxy {
    fn r#unattributed(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x698380acfd29e8f,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    fn r#always_appears_in_importing_library(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x2874096c521236f8,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

pub struct ImportsSameNameContextEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for ImportsSameNameContextEventStream {}

impl futures::stream::FusedStream for ImportsSameNameContextEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for ImportsSameNameContextEventStream {
    type Item = Result<ImportsSameNameContextEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(ImportsSameNameContextEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum ImportsSameNameContextEvent {}

impl ImportsSameNameContextEvent {
    /// Decodes a message buffer as a [`ImportsSameNameContextEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<ImportsSameNameContextEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <ImportsSameNameContextMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for ImportsSameNameContext
pub struct ImportsSameNameContextRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for ImportsSameNameContextRequestStream {}

impl futures::stream::FusedStream for ImportsSameNameContextRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for ImportsSameNameContextRequestStream {
    type Protocol = ImportsSameNameContextMarker;
    type ControlHandle = ImportsSameNameContextControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        ImportsSameNameContextControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for ImportsSameNameContextRequestStream {
    type Item = Result<ImportsSameNameContextRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled ImportsSameNameContextRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x698380acfd29e8f => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = ImportsSameNameContextControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(ImportsSameNameContextRequest::Unattributed {
                            control_handle,
                    })
                }
                0x2874096c521236f8 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = ImportsSameNameContextControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(ImportsSameNameContextRequest::AlwaysAppearsInImportingLibrary {
                            control_handle,
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <ImportsSameNameContextMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}

#[derive(Debug)]
pub enum ImportsSameNameContextRequest {
    Unattributed { control_handle: ImportsSameNameContextControlHandle },
    AlwaysAppearsInImportingLibrary { control_handle: ImportsSameNameContextControlHandle },
}

impl ImportsSameNameContextRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_unattributed(self) -> Option<(ImportsSameNameContextControlHandle)> {
        if let ImportsSameNameContextRequest::Unattributed { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_always_appears_in_importing_library(
        self,
    ) -> Option<(ImportsSameNameContextControlHandle)> {
        if let ImportsSameNameContextRequest::AlwaysAppearsInImportingLibrary { control_handle } =
            self
        {
            Some((control_handle))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            ImportsSameNameContextRequest::Unattributed { .. } => "unattributed",
            ImportsSameNameContextRequest::AlwaysAppearsInImportingLibrary { .. } => {
                "always_appears_in_importing_library"
            }
        }
    }
}

#[derive(Debug, Clone)]
pub struct ImportsSameNameContextControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for ImportsSameNameContextControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl ImportsSameNameContextControlHandle {}

mod internal {
    #[allow(unused_imports)]
    use super::*;

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenyCppRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenyCppRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenyCppRequest>
        for &DenyEachBindingOnlyDenyCppRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyCppRequest>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<DenyEachBindingOnlyDenyCppRequest>::encode(
                (<bool as fidl::encoding::ValueTypeMarker>::borrow(&self.a),),
                encoder,
                offset,
                _depth,
            )
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<bool>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenyCppRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyCppRequest>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenyCppRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { a: fidl::new_empty!(bool) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            fidl::decode!(bool, &mut self.a, decoder, offset + member_offset, _depth)?;
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenyDartRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenyDartRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenyDartRequest>
        for &DenyEachBindingOnlyDenyDartRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyDartRequest>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<DenyEachBindingOnlyDenyDartRequest>::encode(
                (<bool as fidl::encoding::ValueTypeMarker>::borrow(&self.a),),
                encoder,
                offset,
                _depth,
            )
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<bool>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenyDartRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyDartRequest>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenyDartRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { a: fidl::new_empty!(bool) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            fidl::decode!(bool, &mut self.a, decoder, offset + member_offset, _depth)?;
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenyGoRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenyGoRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenyGoRequest>
        for &DenyEachBindingOnlyDenyGoRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyGoRequest>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<DenyEachBindingOnlyDenyGoRequest>::encode(
                (<bool as fidl::encoding::ValueTypeMarker>::borrow(&self.a),),
                encoder,
                offset,
                _depth,
            )
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<bool>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenyGoRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyGoRequest>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenyGoRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { a: fidl::new_empty!(bool) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            fidl::decode!(bool, &mut self.a, decoder, offset + member_offset, _depth)?;
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenyLibfuzzerRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenyLibfuzzerRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenyLibfuzzerRequest>
        for &DenyEachBindingOnlyDenyLibfuzzerRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyLibfuzzerRequest>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<DenyEachBindingOnlyDenyLibfuzzerRequest>::encode(
                (<bool as fidl::encoding::ValueTypeMarker>::borrow(&self.a),),
                encoder,
                offset,
                _depth,
            )
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<bool>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenyLibfuzzerRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyLibfuzzerRequest>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenyLibfuzzerRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { a: fidl::new_empty!(bool) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            fidl::decode!(bool, &mut self.a, decoder, offset + member_offset, _depth)?;
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenySyzkallerRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenySyzkallerRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenySyzkallerRequest>
        for &DenyEachBindingOnlyDenySyzkallerRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenySyzkallerRequest>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<DenyEachBindingOnlyDenySyzkallerRequest>::encode(
                (<bool as fidl::encoding::ValueTypeMarker>::borrow(&self.a),),
                encoder,
                offset,
                _depth,
            )
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<bool>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenySyzkallerRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenySyzkallerRequest>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenySyzkallerRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { a: fidl::new_empty!(bool) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            fidl::decode!(bool, &mut self.a, decoder, offset + member_offset, _depth)?;
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenyCppResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenyCppResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenyCppResponse>
        for &DenyEachBindingOnlyDenyCppResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyCppResponse>(offset);
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().offset(offset as isize);
                #[allow(clippy::transmute_undefined_repr)] // TODO(fxbug.dev/95059)
                let typed_buf_ptr = std::mem::transmute::<
                    *mut u8,
                    *mut DenyEachBindingOnlyDenyCppResponse,
                >(buf_ptr);
                typed_buf_ptr
                    .write_unaligned((self as *const DenyEachBindingOnlyDenyCppResponse).read());
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenyCppResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyCppResponse>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenyCppResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { b: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().offset(offset as isize) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                let obj_ptr = std::mem::transmute::<*mut Self, *mut u8>(self);
                std::ptr::copy_nonoverlapping(buf_ptr, obj_ptr, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenyDartResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenyDartResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenyDartResponse>
        for &DenyEachBindingOnlyDenyDartResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyDartResponse>(offset);
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().offset(offset as isize);
                #[allow(clippy::transmute_undefined_repr)] // TODO(fxbug.dev/95059)
                let typed_buf_ptr = std::mem::transmute::<
                    *mut u8,
                    *mut DenyEachBindingOnlyDenyDartResponse,
                >(buf_ptr);
                typed_buf_ptr
                    .write_unaligned((self as *const DenyEachBindingOnlyDenyDartResponse).read());
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenyDartResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyDartResponse>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenyDartResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { b: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().offset(offset as isize) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                let obj_ptr = std::mem::transmute::<*mut Self, *mut u8>(self);
                std::ptr::copy_nonoverlapping(buf_ptr, obj_ptr, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenyGoResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenyGoResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenyGoResponse>
        for &DenyEachBindingOnlyDenyGoResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyGoResponse>(offset);
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().offset(offset as isize);
                #[allow(clippy::transmute_undefined_repr)] // TODO(fxbug.dev/95059)
                let typed_buf_ptr =
                    std::mem::transmute::<*mut u8, *mut DenyEachBindingOnlyDenyGoResponse>(buf_ptr);
                typed_buf_ptr
                    .write_unaligned((self as *const DenyEachBindingOnlyDenyGoResponse).read());
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenyGoResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyGoResponse>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenyGoResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { b: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().offset(offset as isize) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                let obj_ptr = std::mem::transmute::<*mut Self, *mut u8>(self);
                std::ptr::copy_nonoverlapping(buf_ptr, obj_ptr, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenyLibfuzzerResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenyLibfuzzerResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenyLibfuzzerResponse>
        for &DenyEachBindingOnlyDenyLibfuzzerResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyLibfuzzerResponse>(offset);
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().offset(offset as isize);
                #[allow(clippy::transmute_undefined_repr)] // TODO(fxbug.dev/95059)
                let typed_buf_ptr = std::mem::transmute::<
                    *mut u8,
                    *mut DenyEachBindingOnlyDenyLibfuzzerResponse,
                >(buf_ptr);
                typed_buf_ptr.write_unaligned(
                    (self as *const DenyEachBindingOnlyDenyLibfuzzerResponse).read(),
                );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenyLibfuzzerResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenyLibfuzzerResponse>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenyLibfuzzerResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { b: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().offset(offset as isize) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                let obj_ptr = std::mem::transmute::<*mut Self, *mut u8>(self);
                std::ptr::copy_nonoverlapping(buf_ptr, obj_ptr, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DenyEachBindingOnlyDenySyzkallerResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for DenyEachBindingOnlyDenySyzkallerResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DenyEachBindingOnlyDenySyzkallerResponse>
        for &DenyEachBindingOnlyDenySyzkallerResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenySyzkallerResponse>(offset);
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().offset(offset as isize);
                #[allow(clippy::transmute_undefined_repr)] // TODO(fxbug.dev/95059)
                let typed_buf_ptr = std::mem::transmute::<
                    *mut u8,
                    *mut DenyEachBindingOnlyDenySyzkallerResponse,
                >(buf_ptr);
                typed_buf_ptr.write_unaligned(
                    (self as *const DenyEachBindingOnlyDenySyzkallerResponse).read(),
                );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<DenyEachBindingOnlyDenySyzkallerResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DenyEachBindingOnlyDenySyzkallerResponse>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DenyEachBindingOnlyDenySyzkallerResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { b: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().offset(offset as isize) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                let obj_ptr = std::mem::transmute::<*mut Self, *mut u8>(self);
                std::ptr::copy_nonoverlapping(buf_ptr, obj_ptr, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for MemberOnlyAppearsInImportingLibrary {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for MemberOnlyAppearsInImportingLibrary {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<MemberOnlyAppearsInImportingLibrary>
        for &MemberOnlyAppearsInImportingLibrary
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<MemberOnlyAppearsInImportingLibrary>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<MemberOnlyAppearsInImportingLibrary>::encode(
                (<bool as fidl::encoding::ValueTypeMarker>::borrow(&self.a),),
                encoder,
                offset,
                _depth,
            )
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<bool>>
        fidl::encoding::Encode<MemberOnlyAppearsInImportingLibrary> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<MemberOnlyAppearsInImportingLibrary>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for MemberOnlyAppearsInImportingLibrary {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { a: fidl::new_empty!(bool) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            fidl::decode!(bool, &mut self.a, decoder, offset + member_offset, _depth)?;
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for OnlyAppearsInImportingLibrary {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for OnlyAppearsInImportingLibrary {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<OnlyAppearsInImportingLibrary>
        for &OnlyAppearsInImportingLibrary
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<OnlyAppearsInImportingLibrary>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<OnlyAppearsInImportingLibrary>::encode(
                (<MemberOnlyAppearsInImportingLibrary as fidl::encoding::ValueTypeMarker>::borrow(
                    &self.member_only_appears_in_importing_library,
                ),),
                encoder,
                offset,
                _depth,
            )
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<MemberOnlyAppearsInImportingLibrary>>
        fidl::encoding::Encode<OnlyAppearsInImportingLibrary> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<OnlyAppearsInImportingLibrary>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for OnlyAppearsInImportingLibrary {
        #[inline(always)]
        fn new_empty() -> Self {
            Self {
                member_only_appears_in_importing_library: fidl::new_empty!(
                    MemberOnlyAppearsInImportingLibrary
                ),
            }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            fidl::decode!(
                MemberOnlyAppearsInImportingLibrary,
                &mut self.member_only_appears_in_importing_library,
                decoder,
                offset + member_offset,
                _depth
            )?;
            Ok(())
        }
    }

    impl OnlyRust {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for OnlyRust {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for OnlyRust {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<OnlyRust> for &OnlyRust {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<OnlyRust>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for OnlyRust {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }
}
