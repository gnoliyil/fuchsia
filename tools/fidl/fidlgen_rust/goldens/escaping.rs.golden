// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#![warn(clippy::all)]
#![allow(unused_parens, unused_mut, unused_imports, nonstandard_style)]

use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        endpoints::{ControlHandle as _, Responder as _},
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[cfg(target_os = "fuchsia")]
use fuchsia_zircon as zx;

pub const BASIC: &str = "'\"\\\n\r\t";

pub const DOLLAR: &str = "$";

pub const DOLLAR_BRACE: &str = "${";

pub const MAX: &str = "\u{10ffff}";

pub const NULL: &str = "\u{0}";

pub const SMILE_LEADING_ZERO: &str = "ðŸ˜€";

pub const SMILE_LITERAL: &str = "ðŸ˜€";

pub const SMILE_LOWER: &str = "ðŸ˜€";

pub const SMILE_UPPER: &str = "ðŸ˜€";

/// "pleaseescapethisdocommentproperly"
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct DocCommentWithQuotes;

impl fidl::Persistable for DocCommentWithQuotes {}

mod internal {
    use super::*;

    unsafe impl fidl::encoding::TypeMarker for DocCommentWithQuotes {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 1,
                fidl::encoding::WireFormatVersion::V2 => 1,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for DocCommentWithQuotes {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<DocCommentWithQuotes> for &DocCommentWithQuotes {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DocCommentWithQuotes>(offset);
            encoder.write_num(0u8, offset);
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for DocCommentWithQuotes {
        #[inline(always)]
        fn new_empty() -> Self {
            Self
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            match decoder.read_num::<u8>(offset) {
                0 => Ok(()),
                _ => Err(fidl::Error::Invalid),
            }
        }
    }
}
