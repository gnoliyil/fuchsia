// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        encoding::zerocopy,
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_enum, fidl_struct, fidl_table, fidl_union,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

const _FIDL_TRACE_BINDINGS_RUST: u32 = 6;

#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(u32)]
pub enum ErrorEnum {
    ErrFoo = 1,
    ErrBar = 2,
}

impl ErrorEnum {
    #[inline]
    pub fn from_primitive(prim: u32) -> Option<Self> {
        match prim {
            1 => Some(Self::ErrFoo),
            2 => Some(Self::ErrBar),
            _ => None,
        }
    }

    #[inline]
    pub const fn into_primitive(self) -> u32 {
        self as u32
    }

    #[deprecated = "Strict enums should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}

fidl_enum! {
    name: ErrorEnum,
    prim_ty: u32,
    strict: true,
    min_member: ErrFoo,
}

#[derive(Debug, Clone)]
pub enum TheUnion {
    V(u32),
    #[deprecated = "Use `TheUnion::unknown()` to construct and `TheUnionUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `TheUnion` member.
#[macro_export]
macro_rules! TheUnionUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for TheUnion {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::V(x), Self::V(y)) => *x == *y,
            _ => false,
        }
    }
}

impl TheUnion {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::V(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for TheUnion {}

fidl_union! {
    name: TheUnion,
    members: [
        V {
            ty: u32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct ChannelProtocolEventARequest {
    pub a: i64,
    pub b: i64,
}

impl fidl::encoding::TopLevel for ChannelProtocolEventARequest {}

fidl_struct! {
    copy: true,
    name: ChannelProtocolEventARequest,
    members: [
        a {
            ty: i64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        b {
            ty: i64,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct ChannelProtocolMethodARequest {
    pub a: i64,
    pub b: i64,
}

impl fidl::encoding::TopLevel for ChannelProtocolMethodARequest {}

fidl_struct! {
    copy: true,
    name: ChannelProtocolMethodARequest,
    members: [
        a {
            ty: i64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        b {
            ty: i64,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct ChannelProtocolMethodBRequest {
    pub a: i64,
    pub b: i64,
}

impl fidl::encoding::TopLevel for ChannelProtocolMethodBRequest {}

fidl_struct! {
    copy: true,
    name: ChannelProtocolMethodBRequest,
    members: [
        a {
            ty: i64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        b {
            ty: i64,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct ChannelProtocolMethodBResponse {
    pub result: i64,
}

impl fidl::encoding::TopLevel for ChannelProtocolMethodBResponse {}

fidl_struct! {
    copy: true,
    name: ChannelProtocolMethodBResponse,
    members: [
        result {
            ty: i64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 8,
    size_v2: 8,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ChannelProtocolMutateSocketRequest {
    pub a: fidl::Socket,
}

impl fidl::encoding::TopLevel for ChannelProtocolMutateSocketRequest {}

fidl_struct! {
    name: ChannelProtocolMutateSocketRequest,
    resource: true,
    members: [
        a {
            ty: fidl::encoding::HandleType<fidl::Socket, { fidl::ObjectType::SOCKET.into_raw() }, 2147483648>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ChannelProtocolMutateSocketResponse {
    pub b: fidl::Socket,
}

impl fidl::encoding::TopLevel for ChannelProtocolMutateSocketResponse {}

fidl_struct! {
    name: ChannelProtocolMutateSocketResponse,
    resource: true,
    members: [
        b {
            ty: fidl::encoding::HandleType<fidl::Socket, { fidl::ObjectType::SOCKET.into_raw() }, 2147483648>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ChannelProtocolTakeHandleRequest {
    pub h: fidl::Handle,
}

impl fidl::encoding::TopLevel for ChannelProtocolTakeHandleRequest {}

fidl_struct! {
    name: ChannelProtocolTakeHandleRequest,
    resource: true,
    members: [
        h {
            ty: fidl::encoding::HandleType<fidl::Handle, { fidl::ObjectType::NONE.into_raw() }, 2147483648>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct HandleRightsProtocolAnEventRequest {
    pub h: fidl::Socket,
}

impl fidl::encoding::TopLevel for HandleRightsProtocolAnEventRequest {}

fidl_struct! {
    name: HandleRightsProtocolAnEventRequest,
    resource: true,
    members: [
        h {
            ty: fidl::encoding::HandleType<fidl::Socket, { fidl::ObjectType::SOCKET.into_raw() }, 3>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct HandleRightsProtocolNoResponseMethodRequest {
    pub h: fidl::Socket,
}

impl fidl::encoding::TopLevel for HandleRightsProtocolNoResponseMethodRequest {}

fidl_struct! {
    name: HandleRightsProtocolNoResponseMethodRequest,
    resource: true,
    members: [
        h {
            ty: fidl::encoding::HandleType<fidl::Socket, { fidl::ObjectType::SOCKET.into_raw() }, 3>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct HandleRightsProtocolResponseMethodRequest {
    pub h: fidl::Socket,
}

impl fidl::encoding::TopLevel for HandleRightsProtocolResponseMethodRequest {}

fidl_struct! {
    name: HandleRightsProtocolResponseMethodRequest,
    resource: true,
    members: [
        h {
            ty: fidl::encoding::HandleType<fidl::Socket, { fidl::ObjectType::SOCKET.into_raw() }, 3>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct HandleRightsProtocolResponseMethodResponse {
    pub h: fidl::Socket,
}

impl fidl::encoding::TopLevel for HandleRightsProtocolResponseMethodResponse {}

fidl_struct! {
    name: HandleRightsProtocolResponseMethodResponse,
    resource: true,
    members: [
        h {
            ty: fidl::encoding::HandleType<fidl::Socket, { fidl::ObjectType::SOCKET.into_raw() }, 2>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ManyParametersFifteenRequest {
    pub p1: bool,
    pub p2: bool,
    pub p3: bool,
    pub p4: bool,
    pub p5: bool,
    pub p6: bool,
    pub p7: bool,
    pub p8: bool,
    pub p9: bool,
    pub p10: bool,
    pub p11: bool,
    pub p12: bool,
    pub p13: bool,
    pub p14: bool,
    pub p15: bool,
}

impl fidl::encoding::TopLevel for ManyParametersFifteenRequest {}

fidl_struct! {
    name: ManyParametersFifteenRequest,
    members: [
        p1 {
            ty: bool,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        p2 {
            ty: bool,
            index: 1,
            typevar: T1,
            offset_v1: 1,
            offset_v2: 1,
        },
        p3 {
            ty: bool,
            index: 2,
            typevar: T2,
            offset_v1: 2,
            offset_v2: 2,
        },
        p4 {
            ty: bool,
            index: 3,
            typevar: T3,
            offset_v1: 3,
            offset_v2: 3,
        },
        p5 {
            ty: bool,
            index: 4,
            typevar: T4,
            offset_v1: 4,
            offset_v2: 4,
        },
        p6 {
            ty: bool,
            index: 5,
            typevar: T5,
            offset_v1: 5,
            offset_v2: 5,
        },
        p7 {
            ty: bool,
            index: 6,
            typevar: T6,
            offset_v1: 6,
            offset_v2: 6,
        },
        p8 {
            ty: bool,
            index: 7,
            typevar: T7,
            offset_v1: 7,
            offset_v2: 7,
        },
        p9 {
            ty: bool,
            index: 8,
            typevar: T8,
            offset_v1: 8,
            offset_v2: 8,
        },
        p10 {
            ty: bool,
            index: 9,
            typevar: T9,
            offset_v1: 9,
            offset_v2: 9,
        },
        p11 {
            ty: bool,
            index: 10,
            typevar: T10,
            offset_v1: 10,
            offset_v2: 10,
        },
        p12 {
            ty: bool,
            index: 11,
            typevar: T11,
            offset_v1: 11,
            offset_v2: 11,
        },
        p13 {
            ty: bool,
            index: 12,
            typevar: T12,
            offset_v1: 12,
            offset_v2: 12,
        },
        p14 {
            ty: bool,
            index: 13,
            typevar: T13,
            offset_v1: 13,
            offset_v2: 13,
        },
        p15 {
            ty: bool,
            index: 14,
            typevar: T14,
            offset_v1: 14,
            offset_v2: 14,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 15,
    size_v2: 15,
    align_v1: 1,
    align_v2: 1,
}

#[derive(Debug, Clone, PartialEq)]
pub struct MethodWithUnionUnionMethodRequest {
    pub u: TheUnion,
}

impl fidl::encoding::TopLevel for MethodWithUnionUnionMethodRequest {}

fidl_struct! {
    name: MethodWithUnionUnionMethodRequest,
    members: [
        u {
            ty: TheUnion,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 24,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, PartialEq)]
pub struct MethodWithUnionUnionMethodResponse {
    pub u: Option<Box<TheUnion>>,
}

impl fidl::encoding::TopLevel for MethodWithUnionUnionMethodResponse {}

fidl_struct! {
    name: MethodWithUnionUnionMethodResponse,
    members: [
        u {
            ty: fidl::encoding::OptionalUnion<TheUnion>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 24,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ProtocolEnds {
    pub client: fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>,
    pub server: fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>,
    pub client_opt: Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
    pub server_opt: Option<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
}

impl fidl::encoding::TopLevel for ProtocolEnds {}

fidl_struct! {
    name: ProtocolEnds,
    resource: true,
    members: [
        client {
            ty: fidl::encoding::Endpoint<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        server {
            ty: fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
            resource: true,
            index: 1,
            typevar: T1,
            offset_v1: 4,
            offset_v2: 4,
        },
        client_opt {
            ty: fidl::encoding::Optional<fidl::encoding::Endpoint<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>>,
            resource: true,
            index: 2,
            typevar: T2,
            offset_v1: 8,
            offset_v2: 8,
        },
        server_opt {
            ty: fidl::encoding::Optional<fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>>,
            resource: true,
            index: 3,
            typevar: T3,
            offset_v1: 12,
            offset_v2: 12,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct TransitionalEventRequest {
    pub x: i64,
}

impl fidl::encoding::TopLevel for TransitionalEventRequest {}

fidl_struct! {
    copy: true,
    name: TransitionalEventRequest,
    members: [
        x {
            ty: i64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 8,
    size_v2: 8,
    align_v1: 8,
    align_v2: 8,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct TransitionalOneWayRequest {
    pub x: i64,
}

impl fidl::encoding::TopLevel for TransitionalOneWayRequest {}

fidl_struct! {
    copy: true,
    name: TransitionalOneWayRequest,
    members: [
        x {
            ty: i64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 8,
    size_v2: 8,
    align_v1: 8,
    align_v2: 8,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct TransitionalRequestRequest {
    pub x: i64,
}

impl fidl::encoding::TopLevel for TransitionalRequestRequest {}

fidl_struct! {
    copy: true,
    name: TransitionalRequestRequest,
    members: [
        x {
            ty: i64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 8,
    size_v2: 8,
    align_v1: 8,
    align_v2: 8,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct TransitionalRequestResponse {
    pub y: i64,
}

impl fidl::encoding::TopLevel for TransitionalRequestResponse {}

fidl_struct! {
    copy: true,
    name: TransitionalRequestResponse,
    members: [
        y {
            ty: i64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 8,
    size_v2: 8,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithAndWithoutRequestResponseNoRequestWithResponseResponse {
    pub ret: String,
}

impl fidl::encoding::TopLevel for WithAndWithoutRequestResponseNoRequestWithResponseResponse {}

fidl_struct! {
    name: WithAndWithoutRequestResponseNoRequestWithResponseResponse,
    members: [
        ret {
            ty: fidl::encoding::UnboundedString,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithAndWithoutRequestResponseOnWithResponseRequest {
    pub ret: String,
}

impl fidl::encoding::TopLevel for WithAndWithoutRequestResponseOnWithResponseRequest {}

fidl_struct! {
    name: WithAndWithoutRequestResponseOnWithResponseRequest,
    members: [
        ret {
            ty: fidl::encoding::UnboundedString,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithAndWithoutRequestResponseWithRequestEmptyResponseRequest {
    pub arg: String,
}

impl fidl::encoding::TopLevel for WithAndWithoutRequestResponseWithRequestEmptyResponseRequest {}

fidl_struct! {
    name: WithAndWithoutRequestResponseWithRequestEmptyResponseRequest,
    members: [
        arg {
            ty: fidl::encoding::UnboundedString,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithAndWithoutRequestResponseWithRequestNoResponseRequest {
    pub arg: String,
}

impl fidl::encoding::TopLevel for WithAndWithoutRequestResponseWithRequestNoResponseRequest {}

fidl_struct! {
    name: WithAndWithoutRequestResponseWithRequestNoResponseRequest,
    members: [
        arg {
            ty: fidl::encoding::UnboundedString,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithAndWithoutRequestResponseWithRequestWithResponseRequest {
    pub arg: String,
}

impl fidl::encoding::TopLevel for WithAndWithoutRequestResponseWithRequestWithResponseRequest {}

fidl_struct! {
    name: WithAndWithoutRequestResponseWithRequestWithResponseRequest,
    members: [
        arg {
            ty: fidl::encoding::UnboundedString,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithAndWithoutRequestResponseWithRequestWithResponseResponse {
    pub ret: String,
}

impl fidl::encoding::TopLevel for WithAndWithoutRequestResponseWithRequestWithResponseResponse {}

fidl_struct! {
    name: WithAndWithoutRequestResponseWithRequestWithResponseResponse,
    members: [
        ret {
            ty: fidl::encoding::UnboundedString,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithErrorSyntaxHandleInResultResponse {
    pub h: fidl::Handle,
}

impl fidl::encoding::TopLevel for WithErrorSyntaxHandleInResultResponse {}

fidl_struct! {
    name: WithErrorSyntaxHandleInResultResponse,
    resource: true,
    members: [
        h {
            ty: fidl::encoding::HandleType<fidl::Handle, { fidl::ObjectType::NONE.into_raw() }, 2147483648>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct WithErrorSyntaxResponseAsStructResponse {
    pub a: i64,
    pub b: i64,
    pub c: i64,
}

impl fidl::encoding::TopLevel for WithErrorSyntaxResponseAsStructResponse {}

fidl_struct! {
    copy: true,
    name: WithErrorSyntaxResponseAsStructResponse,
    members: [
        a {
            ty: i64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        b {
            ty: i64,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
        c {
            ty: i64,
            index: 2,
            typevar: T2,
            offset_v1: 16,
            offset_v2: 16,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 24,
    size_v2: 24,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithProtocolEndsClientEndsRequest {
    pub in_: fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>,
}

impl fidl::encoding::TopLevel for WithProtocolEndsClientEndsRequest {}

fidl_struct! {
    name: WithProtocolEndsClientEndsRequest,
    resource: true,
    members: [
        in_ {
            ty: fidl::encoding::Endpoint<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithProtocolEndsClientEndsResponse {
    pub out: Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
}

impl fidl::encoding::TopLevel for WithProtocolEndsClientEndsResponse {}

fidl_struct! {
    name: WithProtocolEndsClientEndsResponse,
    resource: true,
    members: [
        out {
            ty: fidl::encoding::Optional<fidl::encoding::Endpoint<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithProtocolEndsServerEndsRequest {
    pub in_: Option<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
}

impl fidl::encoding::TopLevel for WithProtocolEndsServerEndsRequest {}

fidl_struct! {
    name: WithProtocolEndsServerEndsRequest,
    resource: true,
    members: [
        in_ {
            ty: fidl::encoding::Optional<fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithProtocolEndsServerEndsResponse {
    pub out: fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>,
}

impl fidl::encoding::TopLevel for WithProtocolEndsServerEndsResponse {}

fidl_struct! {
    name: WithProtocolEndsServerEndsResponse,
    resource: true,
    members: [
        out {
            ty: fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithProtocolEndsStructContainingEndsRequest {
    pub in_: ProtocolEnds,
}

impl fidl::encoding::TopLevel for WithProtocolEndsStructContainingEndsRequest {}

fidl_struct! {
    name: WithProtocolEndsStructContainingEndsRequest,
    resource: true,
    members: [
        in_ {
            ty: ProtocolEnds,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithProtocolEndsStructContainingEndsResponse {
    pub out: ProtocolEnds,
}

impl fidl::encoding::TopLevel for WithProtocolEndsStructContainingEndsResponse {}

fidl_struct! {
    name: WithProtocolEndsStructContainingEndsResponse,
    resource: true,
    members: [
        out {
            ty: ProtocolEnds,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct AnotherDiscoverableProtocolMarker;

impl fidl::endpoints::ProtocolMarker for AnotherDiscoverableProtocolMarker {
    type Proxy = AnotherDiscoverableProtocolProxy;
    type RequestStream = AnotherDiscoverableProtocolRequestStream;
    const DEBUG_NAME: &'static str = "fake.library.FakeProtocol";
}
impl fidl::endpoints::DiscoverableProtocolMarker for AnotherDiscoverableProtocolMarker {}

pub trait AnotherDiscoverableProtocolProxyInterface: Send + Sync {}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct AnotherDiscoverableProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl AnotherDiscoverableProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <AnotherDiscoverableProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<AnotherDiscoverableProtocolEvent, fidl::Error> {
        AnotherDiscoverableProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
}

#[derive(Debug, Clone)]
pub struct AnotherDiscoverableProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for AnotherDiscoverableProtocolProxy {
    type Protocol = AnotherDiscoverableProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl AnotherDiscoverableProtocolProxy {
    /// Create a new Proxy for AnotherDiscoverableProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <AnotherDiscoverableProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the AnotherDiscoverableProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> AnotherDiscoverableProtocolEventStream {
        AnotherDiscoverableProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
}

impl AnotherDiscoverableProtocolProxyInterface for AnotherDiscoverableProtocolProxy {}

pub struct AnotherDiscoverableProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for AnotherDiscoverableProtocolEventStream {}

impl futures::stream::FusedStream for AnotherDiscoverableProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for AnotherDiscoverableProtocolEventStream {
    type Item = Result<AnotherDiscoverableProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(AnotherDiscoverableProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum AnotherDiscoverableProtocolEvent {}

impl AnotherDiscoverableProtocolEvent {
    /// Decodes a message buffer as a [`AnotherDiscoverableProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<AnotherDiscoverableProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <AnotherDiscoverableProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for AnotherDiscoverableProtocol
pub struct AnotherDiscoverableProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for AnotherDiscoverableProtocolRequestStream {}

impl futures::stream::FusedStream for AnotherDiscoverableProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for AnotherDiscoverableProtocolRequestStream {
    type Protocol = AnotherDiscoverableProtocolMarker;
    type ControlHandle = AnotherDiscoverableProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        AnotherDiscoverableProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for AnotherDiscoverableProtocolRequestStream {
    type Item = Result<AnotherDiscoverableProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled AnotherDiscoverableProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <AnotherDiscoverableProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum AnotherDiscoverableProtocolRequest {}

impl AnotherDiscoverableProtocolRequest {
    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {}
    }
}

#[derive(Debug, Clone)]
pub struct AnotherDiscoverableProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for AnotherDiscoverableProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl AnotherDiscoverableProtocolControlHandle {}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ChannelProtocolMarker;

impl fidl::endpoints::ProtocolMarker for ChannelProtocolMarker {
    type Proxy = ChannelProtocolProxy;
    type RequestStream = ChannelProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) ChannelProtocol";
}

pub trait ChannelProtocolProxyInterface: Send + Sync {
    fn r#method_a(&self, a: i64, b: i64) -> Result<(), fidl::Error>;
    type MethodBResponseFut: std::future::Future<Output = Result<i64, fidl::Error>> + Send;
    fn r#method_b(&self, a: i64, b: i64) -> Self::MethodBResponseFut;
    type TakeHandleResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#take_handle(&self, h: fidl::Handle) -> Self::TakeHandleResponseFut;
    type MutateSocketResponseFut: std::future::Future<Output = Result<fidl::Socket, fidl::Error>>
        + Send;
    fn r#mutate_socket(&self, a: fidl::Socket) -> Self::MutateSocketResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct ChannelProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl ChannelProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <ChannelProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<ChannelProtocolEvent, fidl::Error> {
        ChannelProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#method_a(&self, mut a: i64, mut b: i64) -> Result<(), fidl::Error> {
        self.client.send::<ChannelProtocolMethodARequest, false>(
            (a, b),
            0x2bc8d7d32bc66ba2,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#method_b(
        &self,
        mut a: i64,
        mut b: i64,
        ___deadline: zx::Time,
    ) -> Result<i64, fidl::Error> {
        let _response = self.client.send_query::<
                ChannelProtocolMethodBRequest,
                ChannelProtocolMethodBResponse,false,false>(
                (a, b,),
                0x7b8dd3d6c741c9c6,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.result)
    }
    pub fn r#take_handle(
        &self,
        mut h: fidl::Handle,
        ___deadline: zx::Time,
    ) -> Result<(), fidl::Error> {
        let _response = self.client.send_query::<
                ChannelProtocolTakeHandleRequest,
                fidl::encoding::EmptyPayload,false,false>(
                (h,),
                0x836fa31201a0a65,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response)
    }
    pub fn r#mutate_socket(
        &self,
        mut a: fidl::Socket,
        ___deadline: zx::Time,
    ) -> Result<fidl::Socket, fidl::Error> {
        let _response = self.client.send_query::<
                ChannelProtocolMutateSocketRequest,
                ChannelProtocolMutateSocketResponse,false,false>(
                (a,),
                0x66dbcccc06f7f14f,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.b)
    }
}

#[derive(Debug, Clone)]
pub struct ChannelProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for ChannelProtocolProxy {
    type Protocol = ChannelProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl ChannelProtocolProxy {
    /// Create a new Proxy for ChannelProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <ChannelProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the ChannelProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> ChannelProtocolEventStream {
        ChannelProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#method_a(&self, mut a: i64, mut b: i64) -> Result<(), fidl::Error> {
        ChannelProtocolProxyInterface::r#method_a(self, a, b)
    }
    pub fn r#method_b(&self, mut a: i64, mut b: i64) -> fidl::client::QueryResponseFut<i64> {
        ChannelProtocolProxyInterface::r#method_b(self, a, b)
    }
    pub fn r#take_handle(&self, mut h: fidl::Handle) -> fidl::client::QueryResponseFut<()> {
        ChannelProtocolProxyInterface::r#take_handle(self, h)
    }
    pub fn r#mutate_socket(
        &self,
        mut a: fidl::Socket,
    ) -> fidl::client::QueryResponseFut<fidl::Socket> {
        ChannelProtocolProxyInterface::r#mutate_socket(self, a)
    }
}

impl ChannelProtocolProxyInterface for ChannelProtocolProxy {
    fn r#method_a(&self, mut a: i64, mut b: i64) -> Result<(), fidl::Error> {
        self.client.send::<ChannelProtocolMethodARequest, false>(
            (a, b),
            0x2bc8d7d32bc66ba2,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    type MethodBResponseFut = fidl::client::QueryResponseFut<i64>;
    fn r#method_b(&self, mut a: i64, mut b: i64) -> Self::MethodBResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i64, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                ChannelProtocolMethodBResponse,
                false,
            >(_buf?)?;
            Ok(_response.result)
        }
        self.client.send_query_and_decode::<ChannelProtocolMethodBRequest, i64, false>(
            (a, b),
            0x7b8dd3d6c741c9c6,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type TakeHandleResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#take_handle(&self, mut h: fidl::Handle) -> Self::TakeHandleResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::EmptyPayload,
                false,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<ChannelProtocolTakeHandleRequest, (), false>(
            (h,),
            0x836fa31201a0a65,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type MutateSocketResponseFut = fidl::client::QueryResponseFut<fidl::Socket>;
    fn r#mutate_socket(&self, mut a: fidl::Socket) -> Self::MutateSocketResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<fidl::Socket, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                ChannelProtocolMutateSocketResponse,
                false,
            >(_buf?)?;
            Ok(_response.b)
        }
        self.client
            .send_query_and_decode::<ChannelProtocolMutateSocketRequest, fidl::Socket, false>(
                (a,),
                0x66dbcccc06f7f14f,
                fidl::encoding::DynamicFlags::empty(),
                _decode,
            )
    }
}

pub struct ChannelProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for ChannelProtocolEventStream {}

impl futures::stream::FusedStream for ChannelProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for ChannelProtocolEventStream {
    type Item = Result<ChannelProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(ChannelProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum ChannelProtocolEvent {
    EventA { a: i64, b: i64 },
}

impl ChannelProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_event_a(self) -> Option<(i64, i64)> {
        if let ChannelProtocolEvent::EventA { a, b } = self {
            Some((a, b))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`ChannelProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<ChannelProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x1ed0a220297145ce => {
                let mut out = fidl::new_empty!(ChannelProtocolEventARequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/ChannelProtocolEventAEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible);
                }
                fidl::encoding::Decoder::decode_into::<ChannelProtocolEventARequest>(
                    &tx_header,
                    _body_bytes,
                    _handles,
                    &mut out,
                )?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((ChannelProtocolEvent::EventA { a: out.a, b: out.b }))
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <ChannelProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for ChannelProtocol
pub struct ChannelProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for ChannelProtocolRequestStream {}

impl futures::stream::FusedStream for ChannelProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for ChannelProtocolRequestStream {
    type Protocol = ChannelProtocolMarker;
    type ControlHandle = ChannelProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        ChannelProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for ChannelProtocolRequestStream {
    type Item = Result<ChannelProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled ChannelProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x2bc8d7d32bc66ba2 => {
                    let mut req = fidl::new_empty!(ChannelProtocolMethodARequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/ChannelProtocolMethodARequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<ChannelProtocolMethodARequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = ChannelProtocolControlHandle { inner: this.inner.clone() };

                    Ok(ChannelProtocolRequest::MethodA { a: req.a, b: req.b, control_handle })
                }
                0x7b8dd3d6c741c9c6 => {
                    let mut req = fidl::new_empty!(ChannelProtocolMethodBRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/ChannelProtocolMethodBRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<ChannelProtocolMethodBRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = ChannelProtocolControlHandle { inner: this.inner.clone() };

                    Ok(ChannelProtocolRequest::MethodB {
                        a: req.a,
                        b: req.b,

                        responder: ChannelProtocolMethodBResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x836fa31201a0a65 => {
                    let mut req = fidl::new_empty!(ChannelProtocolTakeHandleRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/ChannelProtocolTakeHandleRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<ChannelProtocolTakeHandleRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = ChannelProtocolControlHandle { inner: this.inner.clone() };

                    Ok(ChannelProtocolRequest::TakeHandle {
                        h: req.h,

                        responder: ChannelProtocolTakeHandleResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x66dbcccc06f7f14f => {
                    let mut req = fidl::new_empty!(ChannelProtocolMutateSocketRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/ChannelProtocolMutateSocketRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<ChannelProtocolMutateSocketRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = ChannelProtocolControlHandle { inner: this.inner.clone() };

                    Ok(ChannelProtocolRequest::MutateSocket {
                        a: req.a,

                        responder: ChannelProtocolMutateSocketResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <ChannelProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum ChannelProtocolRequest {
    MethodA { a: i64, b: i64, control_handle: ChannelProtocolControlHandle },
    MethodB { a: i64, b: i64, responder: ChannelProtocolMethodBResponder },
    TakeHandle { h: fidl::Handle, responder: ChannelProtocolTakeHandleResponder },
    MutateSocket { a: fidl::Socket, responder: ChannelProtocolMutateSocketResponder },
}

impl ChannelProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_method_a(self) -> Option<(i64, i64, ChannelProtocolControlHandle)> {
        if let ChannelProtocolRequest::MethodA { a, b, control_handle } = self {
            Some((a, b, control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_method_b(self) -> Option<(i64, i64, ChannelProtocolMethodBResponder)> {
        if let ChannelProtocolRequest::MethodB { a, b, responder } = self {
            Some((a, b, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_take_handle(self) -> Option<(fidl::Handle, ChannelProtocolTakeHandleResponder)> {
        if let ChannelProtocolRequest::TakeHandle { h, responder } = self {
            Some((h, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_mutate_socket(
        self,
    ) -> Option<(fidl::Socket, ChannelProtocolMutateSocketResponder)> {
        if let ChannelProtocolRequest::MutateSocket { a, responder } = self {
            Some((a, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            ChannelProtocolRequest::MethodA { .. } => "method_a",
            ChannelProtocolRequest::MethodB { .. } => "method_b",
            ChannelProtocolRequest::TakeHandle { .. } => "take_handle",
            ChannelProtocolRequest::MutateSocket { .. } => "mutate_socket",
        }
    }
}

#[derive(Debug, Clone)]
pub struct ChannelProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for ChannelProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl ChannelProtocolControlHandle {
    pub fn send_event_a(&self, mut a: i64, mut b: i64) -> Result<(), fidl::Error> {
        self.inner.send::<ChannelProtocolEventARequest, false>(
            (a, b),
            0,
            0x1ed0a220297145ce,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct ChannelProtocolMethodBResponder {
    control_handle: std::mem::ManuallyDrop<ChannelProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`ChannelProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for ChannelProtocolMethodBResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for ChannelProtocolMethodBResponder {
    type ControlHandle = ChannelProtocolControlHandle;

    fn control_handle(&self) -> &ChannelProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl ChannelProtocolMethodBResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: i64) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: i64) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: i64) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (result,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/ChannelProtocolMethodBResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<ChannelProtocolMethodBResponse>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct ChannelProtocolTakeHandleResponder {
    control_handle: std::mem::ManuallyDrop<ChannelProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`ChannelProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for ChannelProtocolTakeHandleResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for ChannelProtocolTakeHandleResponder {
    type ControlHandle = ChannelProtocolControlHandle;

    fn control_handle(&self) -> &ChannelProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl ChannelProtocolTakeHandleResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/ChannelProtocolTakeHandleResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::EmptyPayload>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct ChannelProtocolMutateSocketResponder {
    control_handle: std::mem::ManuallyDrop<ChannelProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`ChannelProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for ChannelProtocolMutateSocketResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for ChannelProtocolMutateSocketResponder {
    type ControlHandle = ChannelProtocolControlHandle;

    fn control_handle(&self) -> &ChannelProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl ChannelProtocolMutateSocketResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut b: fidl::Socket) -> Result<(), fidl::Error> {
        let r = self.send_raw(b);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut b: fidl::Socket) -> Result<(), fidl::Error> {
        let r = self.send_raw(b);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut b: fidl::Socket) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (b,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/ChannelProtocolMutateSocketResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<ChannelProtocolMutateSocketResponse>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct DiscoverableProtocolMarker;

impl fidl::endpoints::ProtocolMarker for DiscoverableProtocolMarker {
    type Proxy = DiscoverableProtocolProxy;
    type RequestStream = DiscoverableProtocolRequestStream;
    const DEBUG_NAME: &'static str = "test.protocols.DiscoverableProtocol";
}
impl fidl::endpoints::DiscoverableProtocolMarker for DiscoverableProtocolMarker {}

pub trait DiscoverableProtocolProxyInterface: Send + Sync {
    fn r#method(&self) -> Result<(), fidl::Error>;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct DiscoverableProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl DiscoverableProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <DiscoverableProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<DiscoverableProtocolEvent, fidl::Error> {
        DiscoverableProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#method(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x2ff5ba3a2bd170eb,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

#[derive(Debug, Clone)]
pub struct DiscoverableProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for DiscoverableProtocolProxy {
    type Protocol = DiscoverableProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl DiscoverableProtocolProxy {
    /// Create a new Proxy for DiscoverableProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <DiscoverableProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the DiscoverableProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> DiscoverableProtocolEventStream {
        DiscoverableProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#method(&self) -> Result<(), fidl::Error> {
        DiscoverableProtocolProxyInterface::r#method(self)
    }
}

impl DiscoverableProtocolProxyInterface for DiscoverableProtocolProxy {
    fn r#method(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x2ff5ba3a2bd170eb,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

pub struct DiscoverableProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for DiscoverableProtocolEventStream {}

impl futures::stream::FusedStream for DiscoverableProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for DiscoverableProtocolEventStream {
    type Item = Result<DiscoverableProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(DiscoverableProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum DiscoverableProtocolEvent {}

impl DiscoverableProtocolEvent {
    /// Decodes a message buffer as a [`DiscoverableProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<DiscoverableProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <DiscoverableProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for DiscoverableProtocol
pub struct DiscoverableProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for DiscoverableProtocolRequestStream {}

impl futures::stream::FusedStream for DiscoverableProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for DiscoverableProtocolRequestStream {
    type Protocol = DiscoverableProtocolMarker;
    type ControlHandle = DiscoverableProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        DiscoverableProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for DiscoverableProtocolRequestStream {
    type Item = Result<DiscoverableProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled DiscoverableProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x2ff5ba3a2bd170eb => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/DiscoverableProtocolMethodRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle =
                        DiscoverableProtocolControlHandle { inner: this.inner.clone() };

                    Ok(DiscoverableProtocolRequest::Method { control_handle })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <DiscoverableProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum DiscoverableProtocolRequest {
    Method { control_handle: DiscoverableProtocolControlHandle },
}

impl DiscoverableProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_method(self) -> Option<(DiscoverableProtocolControlHandle)> {
        if let DiscoverableProtocolRequest::Method { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            DiscoverableProtocolRequest::Method { .. } => "method",
        }
    }
}

#[derive(Debug, Clone)]
pub struct DiscoverableProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for DiscoverableProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl DiscoverableProtocolControlHandle {}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct HandleRightsProtocolMarker;

impl fidl::endpoints::ProtocolMarker for HandleRightsProtocolMarker {
    type Proxy = HandleRightsProtocolProxy;
    type RequestStream = HandleRightsProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) HandleRightsProtocol";
}

pub trait HandleRightsProtocolProxyInterface: Send + Sync {
    fn r#no_response_method(&self, h: fidl::Socket) -> Result<(), fidl::Error>;
    type ResponseMethodResponseFut: std::future::Future<Output = Result<fidl::Socket, fidl::Error>>
        + Send;
    fn r#response_method(&self, h: fidl::Socket) -> Self::ResponseMethodResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct HandleRightsProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl HandleRightsProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <HandleRightsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<HandleRightsProtocolEvent, fidl::Error> {
        HandleRightsProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#no_response_method(&self, mut h: fidl::Socket) -> Result<(), fidl::Error> {
        self.client.send::<HandleRightsProtocolNoResponseMethodRequest, false>(
            (h,),
            0x10078afd320d2bfd,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#response_method(
        &self,
        mut h: fidl::Socket,
        ___deadline: zx::Time,
    ) -> Result<fidl::Socket, fidl::Error> {
        let _response = self.client.send_query::<
                HandleRightsProtocolResponseMethodRequest,
                HandleRightsProtocolResponseMethodResponse,false,false>(
                (h,),
                0x52a8f194ac143547,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.h)
    }
}

#[derive(Debug, Clone)]
pub struct HandleRightsProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for HandleRightsProtocolProxy {
    type Protocol = HandleRightsProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl HandleRightsProtocolProxy {
    /// Create a new Proxy for HandleRightsProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <HandleRightsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the HandleRightsProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> HandleRightsProtocolEventStream {
        HandleRightsProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#no_response_method(&self, mut h: fidl::Socket) -> Result<(), fidl::Error> {
        HandleRightsProtocolProxyInterface::r#no_response_method(self, h)
    }
    pub fn r#response_method(
        &self,
        mut h: fidl::Socket,
    ) -> fidl::client::QueryResponseFut<fidl::Socket> {
        HandleRightsProtocolProxyInterface::r#response_method(self, h)
    }
}

impl HandleRightsProtocolProxyInterface for HandleRightsProtocolProxy {
    fn r#no_response_method(&self, mut h: fidl::Socket) -> Result<(), fidl::Error> {
        self.client.send::<HandleRightsProtocolNoResponseMethodRequest, false>(
            (h,),
            0x10078afd320d2bfd,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    type ResponseMethodResponseFut = fidl::client::QueryResponseFut<fidl::Socket>;
    fn r#response_method(&self, mut h: fidl::Socket) -> Self::ResponseMethodResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<fidl::Socket, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                HandleRightsProtocolResponseMethodResponse,
                false,
            >(_buf?)?;
            Ok(_response.h)
        }
        self.client.send_query_and_decode::<
            HandleRightsProtocolResponseMethodRequest,
            fidl::Socket,
            false,
        >(
            (h,),
            0x52a8f194ac143547,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct HandleRightsProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for HandleRightsProtocolEventStream {}

impl futures::stream::FusedStream for HandleRightsProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for HandleRightsProtocolEventStream {
    type Item = Result<HandleRightsProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(HandleRightsProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum HandleRightsProtocolEvent {
    AnEvent { h: fidl::Socket },
}

impl HandleRightsProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_an_event(self) -> Option<fidl::Socket> {
        if let HandleRightsProtocolEvent::AnEvent { h } = self {
            Some((h))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`HandleRightsProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<HandleRightsProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x69dad41418eb133 => {
                let mut out = fidl::new_empty!(HandleRightsProtocolAnEventRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/HandleRightsProtocolAnEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible);
                }
                fidl::encoding::Decoder::decode_into::<HandleRightsProtocolAnEventRequest>(
                    &tx_header,
                    _body_bytes,
                    _handles,
                    &mut out,
                )?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((HandleRightsProtocolEvent::AnEvent { h: out.h }))
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <HandleRightsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for HandleRightsProtocol
pub struct HandleRightsProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for HandleRightsProtocolRequestStream {}

impl futures::stream::FusedStream for HandleRightsProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for HandleRightsProtocolRequestStream {
    type Protocol = HandleRightsProtocolMarker;
    type ControlHandle = HandleRightsProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        HandleRightsProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for HandleRightsProtocolRequestStream {
    type Item = Result<HandleRightsProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled HandleRightsProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x10078afd320d2bfd => {
                    let mut req = fidl::new_empty!(HandleRightsProtocolNoResponseMethodRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/HandleRightsProtocolNoResponseMethodRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<
                        HandleRightsProtocolNoResponseMethodRequest,
                    >(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle =
                        HandleRightsProtocolControlHandle { inner: this.inner.clone() };

                    Ok(HandleRightsProtocolRequest::NoResponseMethod { h: req.h, control_handle })
                }
                0x52a8f194ac143547 => {
                    let mut req = fidl::new_empty!(HandleRightsProtocolResponseMethodRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/HandleRightsProtocolResponseMethodRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<
                        HandleRightsProtocolResponseMethodRequest,
                    >(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle =
                        HandleRightsProtocolControlHandle { inner: this.inner.clone() };

                    Ok(HandleRightsProtocolRequest::ResponseMethod {
                        h: req.h,

                        responder: HandleRightsProtocolResponseMethodResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <HandleRightsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum HandleRightsProtocolRequest {
    NoResponseMethod { h: fidl::Socket, control_handle: HandleRightsProtocolControlHandle },
    ResponseMethod { h: fidl::Socket, responder: HandleRightsProtocolResponseMethodResponder },
}

impl HandleRightsProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_no_response_method(
        self,
    ) -> Option<(fidl::Socket, HandleRightsProtocolControlHandle)> {
        if let HandleRightsProtocolRequest::NoResponseMethod { h, control_handle } = self {
            Some((h, control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_response_method(
        self,
    ) -> Option<(fidl::Socket, HandleRightsProtocolResponseMethodResponder)> {
        if let HandleRightsProtocolRequest::ResponseMethod { h, responder } = self {
            Some((h, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            HandleRightsProtocolRequest::NoResponseMethod { .. } => "no_response_method",
            HandleRightsProtocolRequest::ResponseMethod { .. } => "response_method",
        }
    }
}

#[derive(Debug, Clone)]
pub struct HandleRightsProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for HandleRightsProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl HandleRightsProtocolControlHandle {
    pub fn send_an_event(&self, mut h: fidl::Socket) -> Result<(), fidl::Error> {
        self.inner.send::<HandleRightsProtocolAnEventRequest, false>(
            (h,),
            0,
            0x69dad41418eb133,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct HandleRightsProtocolResponseMethodResponder {
    control_handle: std::mem::ManuallyDrop<HandleRightsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`HandleRightsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for HandleRightsProtocolResponseMethodResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for HandleRightsProtocolResponseMethodResponder {
    type ControlHandle = HandleRightsProtocolControlHandle;

    fn control_handle(&self) -> &HandleRightsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl HandleRightsProtocolResponseMethodResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut h: fidl::Socket) -> Result<(), fidl::Error> {
        let r = self.send_raw(h);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut h: fidl::Socket) -> Result<(), fidl::Error> {
        let r = self.send_raw(h);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut h: fidl::Socket) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (h,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/HandleRightsProtocolResponseMethodResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<HandleRightsProtocolResponseMethodResponse>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ManyParametersMarker;

impl fidl::endpoints::ProtocolMarker for ManyParametersMarker {
    type Proxy = ManyParametersProxy;
    type RequestStream = ManyParametersRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) ManyParameters";
}

pub trait ManyParametersProxyInterface: Send + Sync {
    fn r#fifteen(
        &self,
        p1: bool,
        p2: bool,
        p3: bool,
        p4: bool,
        p5: bool,
        p6: bool,
        p7: bool,
        p8: bool,
        p9: bool,
        p10: bool,
        p11: bool,
        p12: bool,
        p13: bool,
        p14: bool,
        p15: bool,
    ) -> Result<(), fidl::Error>;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct ManyParametersSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl ManyParametersSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <ManyParametersMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<ManyParametersEvent, fidl::Error> {
        ManyParametersEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#fifteen(
        &self,
        mut p1: bool,
        mut p2: bool,
        mut p3: bool,
        mut p4: bool,
        mut p5: bool,
        mut p6: bool,
        mut p7: bool,
        mut p8: bool,
        mut p9: bool,
        mut p10: bool,
        mut p11: bool,
        mut p12: bool,
        mut p13: bool,
        mut p14: bool,
        mut p15: bool,
    ) -> Result<(), fidl::Error> {
        self.client.send::<ManyParametersFifteenRequest, false>(
            (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15),
            0x59233bcecd338967,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

#[derive(Debug, Clone)]
pub struct ManyParametersProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for ManyParametersProxy {
    type Protocol = ManyParametersMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl ManyParametersProxy {
    /// Create a new Proxy for ManyParameters
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <ManyParametersMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the ManyParameters protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> ManyParametersEventStream {
        ManyParametersEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#fifteen(
        &self,
        mut p1: bool,
        mut p2: bool,
        mut p3: bool,
        mut p4: bool,
        mut p5: bool,
        mut p6: bool,
        mut p7: bool,
        mut p8: bool,
        mut p9: bool,
        mut p10: bool,
        mut p11: bool,
        mut p12: bool,
        mut p13: bool,
        mut p14: bool,
        mut p15: bool,
    ) -> Result<(), fidl::Error> {
        ManyParametersProxyInterface::r#fifteen(
            self, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15,
        )
    }
}

impl ManyParametersProxyInterface for ManyParametersProxy {
    fn r#fifteen(
        &self,
        mut p1: bool,
        mut p2: bool,
        mut p3: bool,
        mut p4: bool,
        mut p5: bool,
        mut p6: bool,
        mut p7: bool,
        mut p8: bool,
        mut p9: bool,
        mut p10: bool,
        mut p11: bool,
        mut p12: bool,
        mut p13: bool,
        mut p14: bool,
        mut p15: bool,
    ) -> Result<(), fidl::Error> {
        self.client.send::<ManyParametersFifteenRequest, false>(
            (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15),
            0x59233bcecd338967,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

pub struct ManyParametersEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for ManyParametersEventStream {}

impl futures::stream::FusedStream for ManyParametersEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for ManyParametersEventStream {
    type Item = Result<ManyParametersEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(ManyParametersEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum ManyParametersEvent {}

impl ManyParametersEvent {
    /// Decodes a message buffer as a [`ManyParametersEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<ManyParametersEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <ManyParametersMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for ManyParameters
pub struct ManyParametersRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for ManyParametersRequestStream {}

impl futures::stream::FusedStream for ManyParametersRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for ManyParametersRequestStream {
    type Protocol = ManyParametersMarker;
    type ControlHandle = ManyParametersControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        ManyParametersControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for ManyParametersRequestStream {
    type Item = Result<ManyParametersRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled ManyParametersRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x59233bcecd338967 => {
                    let mut req = fidl::new_empty!(ManyParametersFifteenRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/ManyParametersFifteenRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<ManyParametersFifteenRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = ManyParametersControlHandle { inner: this.inner.clone() };

                    Ok(ManyParametersRequest::Fifteen {
                        p1: req.p1,
                        p2: req.p2,
                        p3: req.p3,
                        p4: req.p4,
                        p5: req.p5,
                        p6: req.p6,
                        p7: req.p7,
                        p8: req.p8,
                        p9: req.p9,
                        p10: req.p10,
                        p11: req.p11,
                        p12: req.p12,
                        p13: req.p13,
                        p14: req.p14,
                        p15: req.p15,

                        control_handle,
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <ManyParametersMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum ManyParametersRequest {
    Fifteen {
        p1: bool,
        p2: bool,
        p3: bool,
        p4: bool,
        p5: bool,
        p6: bool,
        p7: bool,
        p8: bool,
        p9: bool,
        p10: bool,
        p11: bool,
        p12: bool,
        p13: bool,
        p14: bool,
        p15: bool,
        control_handle: ManyParametersControlHandle,
    },
}

impl ManyParametersRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_fifteen(
        self,
    ) -> Option<(
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        bool,
        ManyParametersControlHandle,
    )> {
        if let ManyParametersRequest::Fifteen {
            p1,
            p2,
            p3,
            p4,
            p5,
            p6,
            p7,
            p8,
            p9,
            p10,
            p11,
            p12,
            p13,
            p14,
            p15,
            control_handle,
        } = self
        {
            Some((p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, control_handle))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            ManyParametersRequest::Fifteen { .. } => "fifteen",
        }
    }
}

#[derive(Debug, Clone)]
pub struct ManyParametersControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for ManyParametersControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl ManyParametersControlHandle {}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct MethodWithUnionMarker;

impl fidl::endpoints::ProtocolMarker for MethodWithUnionMarker {
    type Proxy = MethodWithUnionProxy;
    type RequestStream = MethodWithUnionRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) MethodWithUnion";
}

pub trait MethodWithUnionProxyInterface: Send + Sync {
    type UnionMethodResponseFut: std::future::Future<Output = Result<Option<Box<TheUnion>>, fidl::Error>>
        + Send;
    fn r#union_method(&self, u: &mut TheUnion) -> Self::UnionMethodResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct MethodWithUnionSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl MethodWithUnionSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <MethodWithUnionMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<MethodWithUnionEvent, fidl::Error> {
        MethodWithUnionEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#union_method(
        &self,
        mut u: &mut TheUnion,
        ___deadline: zx::Time,
    ) -> Result<Option<Box<TheUnion>>, fidl::Error> {
        let _response = self.client.send_query::<
                MethodWithUnionUnionMethodRequest,
                MethodWithUnionUnionMethodResponse,false,true>(
                (&*u,),
                0x393e7f5b2b821218,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.u)
    }
}

#[derive(Debug, Clone)]
pub struct MethodWithUnionProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for MethodWithUnionProxy {
    type Protocol = MethodWithUnionMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl MethodWithUnionProxy {
    /// Create a new Proxy for MethodWithUnion
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <MethodWithUnionMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the MethodWithUnion protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> MethodWithUnionEventStream {
        MethodWithUnionEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#union_method(
        &self,
        mut u: &mut TheUnion,
    ) -> fidl::client::QueryResponseFut<Option<Box<TheUnion>>> {
        MethodWithUnionProxyInterface::r#union_method(self, u)
    }
}

impl MethodWithUnionProxyInterface for MethodWithUnionProxy {
    type UnionMethodResponseFut = fidl::client::QueryResponseFut<Option<Box<TheUnion>>>;
    fn r#union_method(&self, mut u: &mut TheUnion) -> Self::UnionMethodResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<Option<Box<TheUnion>>, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                MethodWithUnionUnionMethodResponse,
                true,
            >(_buf?)?;
            Ok(_response.u)
        }
        self.client.send_query_and_decode::<
            MethodWithUnionUnionMethodRequest,
            Option<Box<TheUnion>>,
            false,
        >(
            (&*u,),
            0x393e7f5b2b821218,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct MethodWithUnionEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for MethodWithUnionEventStream {}

impl futures::stream::FusedStream for MethodWithUnionEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for MethodWithUnionEventStream {
    type Item = Result<MethodWithUnionEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(MethodWithUnionEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum MethodWithUnionEvent {}

impl MethodWithUnionEvent {
    /// Decodes a message buffer as a [`MethodWithUnionEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<MethodWithUnionEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <MethodWithUnionMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for MethodWithUnion
pub struct MethodWithUnionRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for MethodWithUnionRequestStream {}

impl futures::stream::FusedStream for MethodWithUnionRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for MethodWithUnionRequestStream {
    type Protocol = MethodWithUnionMarker;
    type ControlHandle = MethodWithUnionControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        MethodWithUnionControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for MethodWithUnionRequestStream {
    type Item = Result<MethodWithUnionRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled MethodWithUnionRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x393e7f5b2b821218 => {
                    let mut req = fidl::new_empty!(MethodWithUnionUnionMethodRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/MethodWithUnionUnionMethodRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<MethodWithUnionUnionMethodRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = MethodWithUnionControlHandle { inner: this.inner.clone() };

                    Ok(MethodWithUnionRequest::UnionMethod {
                        u: req.u,

                        responder: MethodWithUnionUnionMethodResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <MethodWithUnionMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum MethodWithUnionRequest {
    UnionMethod { u: TheUnion, responder: MethodWithUnionUnionMethodResponder },
}

impl MethodWithUnionRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_union_method(self) -> Option<(TheUnion, MethodWithUnionUnionMethodResponder)> {
        if let MethodWithUnionRequest::UnionMethod { u, responder } = self {
            Some((u, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            MethodWithUnionRequest::UnionMethod { .. } => "union_method",
        }
    }
}

#[derive(Debug, Clone)]
pub struct MethodWithUnionControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for MethodWithUnionControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl MethodWithUnionControlHandle {}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MethodWithUnionUnionMethodResponder {
    control_handle: std::mem::ManuallyDrop<MethodWithUnionControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MethodWithUnionControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MethodWithUnionUnionMethodResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MethodWithUnionUnionMethodResponder {
    type ControlHandle = MethodWithUnionControlHandle;

    fn control_handle(&self) -> &MethodWithUnionControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MethodWithUnionUnionMethodResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut u: Option<&mut TheUnion>) -> Result<(), fidl::Error> {
        let r = self.send_raw(u);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut u: Option<&mut TheUnion>) -> Result<(), fidl::Error> {
        let r = self.send_raw(u);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut u: Option<&mut TheUnion>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (u.map(|x| &*x),),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/MethodWithUnionUnionMethodResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<MethodWithUnionUnionMethodResponse>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct TransitionalMarker;

impl fidl::endpoints::ProtocolMarker for TransitionalMarker {
    type Proxy = TransitionalProxy;
    type RequestStream = TransitionalRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) Transitional";
}

pub trait TransitionalProxyInterface: Send + Sync {
    type RequestResponseFut: std::future::Future<Output = Result<i64, fidl::Error>> + Send;
    #[allow(unused_variables)]
    fn r#request(&self, x: i64) -> Self::RequestResponseFut {
        unimplemented!("transitional method request is unimplemented");
    }
    #[allow(unused_variables)]
    fn r#one_way(&self, x: i64) -> Result<(), fidl::Error> {
        unimplemented!("transitional method one_way is unimplemented");
    }
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct TransitionalSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl TransitionalSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <TransitionalMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<TransitionalEvent, fidl::Error> {
        TransitionalEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#request(&self, mut x: i64, ___deadline: zx::Time) -> Result<i64, fidl::Error> {
        let _response = self
            .client
            .send_query::<TransitionalRequestRequest, TransitionalRequestResponse, false, false>(
                (x,),
                0x512cc1ba467fef08,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.y)
    }
    pub fn r#one_way(&self, mut x: i64) -> Result<(), fidl::Error> {
        self.client.send::<TransitionalOneWayRequest, false>(
            (x,),
            0x3c2ee8512dc7f7e7,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

#[derive(Debug, Clone)]
pub struct TransitionalProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for TransitionalProxy {
    type Protocol = TransitionalMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl TransitionalProxy {
    /// Create a new Proxy for Transitional
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <TransitionalMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the Transitional protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> TransitionalEventStream {
        TransitionalEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#request(&self, mut x: i64) -> fidl::client::QueryResponseFut<i64> {
        TransitionalProxyInterface::r#request(self, x)
    }
    pub fn r#one_way(&self, mut x: i64) -> Result<(), fidl::Error> {
        TransitionalProxyInterface::r#one_way(self, x)
    }
}

impl TransitionalProxyInterface for TransitionalProxy {
    type RequestResponseFut = fidl::client::QueryResponseFut<i64>;
    fn r#request(&self, mut x: i64) -> Self::RequestResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i64, fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<TransitionalRequestResponse, false>(_buf?)?;
            Ok(_response.y)
        }
        self.client.send_query_and_decode::<TransitionalRequestRequest, i64, false>(
            (x,),
            0x512cc1ba467fef08,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    fn r#one_way(&self, mut x: i64) -> Result<(), fidl::Error> {
        self.client.send::<TransitionalOneWayRequest, false>(
            (x,),
            0x3c2ee8512dc7f7e7,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

pub struct TransitionalEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for TransitionalEventStream {}

impl futures::stream::FusedStream for TransitionalEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for TransitionalEventStream {
    type Item = Result<TransitionalEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(TransitionalEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum TransitionalEvent {
    Event { x: i64 },
}

impl TransitionalEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_event(self) -> Option<i64> {
        if let TransitionalEvent::Event { x } = self {
            Some((x))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`TransitionalEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<TransitionalEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x76113c4b4d484841 => {
                let mut out = fidl::new_empty!(TransitionalEventRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/TransitionalEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible);
                }
                fidl::encoding::Decoder::decode_into::<TransitionalEventRequest>(
                    &tx_header,
                    _body_bytes,
                    _handles,
                    &mut out,
                )?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((TransitionalEvent::Event { x: out.x }))
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <TransitionalMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for Transitional
pub struct TransitionalRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for TransitionalRequestStream {}

impl futures::stream::FusedStream for TransitionalRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for TransitionalRequestStream {
    type Protocol = TransitionalMarker;
    type ControlHandle = TransitionalControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        TransitionalControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for TransitionalRequestStream {
    type Item = Result<TransitionalRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled TransitionalRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x512cc1ba467fef08 => {
                    let mut req = fidl::new_empty!(TransitionalRequestRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/TransitionalRequestRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<TransitionalRequestRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = TransitionalControlHandle { inner: this.inner.clone() };

                    Ok(TransitionalRequest::Request {
                        x: req.x,

                        responder: TransitionalRequestResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x3c2ee8512dc7f7e7 => {
                    let mut req = fidl::new_empty!(TransitionalOneWayRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/TransitionalOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<TransitionalOneWayRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = TransitionalControlHandle { inner: this.inner.clone() };

                    Ok(TransitionalRequest::OneWay { x: req.x, control_handle })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <TransitionalMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum TransitionalRequest {
    Request { x: i64, responder: TransitionalRequestResponder },
    OneWay { x: i64, control_handle: TransitionalControlHandle },
}

impl TransitionalRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_request(self) -> Option<(i64, TransitionalRequestResponder)> {
        if let TransitionalRequest::Request { x, responder } = self {
            Some((x, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_one_way(self) -> Option<(i64, TransitionalControlHandle)> {
        if let TransitionalRequest::OneWay { x, control_handle } = self {
            Some((x, control_handle))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            TransitionalRequest::Request { .. } => "request",
            TransitionalRequest::OneWay { .. } => "one_way",
        }
    }
}

#[derive(Debug, Clone)]
pub struct TransitionalControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for TransitionalControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl TransitionalControlHandle {
    pub fn send_event(&self, mut x: i64) -> Result<(), fidl::Error> {
        self.inner.send::<TransitionalEventRequest, false>(
            (x,),
            0,
            0x76113c4b4d484841,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct TransitionalRequestResponder {
    control_handle: std::mem::ManuallyDrop<TransitionalControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`TransitionalControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for TransitionalRequestResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for TransitionalRequestResponder {
    type ControlHandle = TransitionalControlHandle;

    fn control_handle(&self) -> &TransitionalControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl TransitionalRequestResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut y: i64) -> Result<(), fidl::Error> {
        let r = self.send_raw(y);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut y: i64) -> Result<(), fidl::Error> {
        let r = self.send_raw(y);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut y: i64) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (y,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/TransitionalRequestResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<TransitionalRequestResponse>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithAndWithoutRequestResponseMarker;

impl fidl::endpoints::ProtocolMarker for WithAndWithoutRequestResponseMarker {
    type Proxy = WithAndWithoutRequestResponseProxy;
    type RequestStream = WithAndWithoutRequestResponseRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) WithAndWithoutRequestResponse";
}

pub trait WithAndWithoutRequestResponseProxyInterface: Send + Sync {
    fn r#no_request_no_response(&self) -> Result<(), fidl::Error>;
    type NoRequestEmptyResponseResponseFut: std::future::Future<Output = Result<(), fidl::Error>>
        + Send;
    fn r#no_request_empty_response(&self) -> Self::NoRequestEmptyResponseResponseFut;
    type NoRequestWithResponseResponseFut: std::future::Future<Output = Result<String, fidl::Error>>
        + Send;
    fn r#no_request_with_response(&self) -> Self::NoRequestWithResponseResponseFut;
    fn r#with_request_no_response(&self, arg: &str) -> Result<(), fidl::Error>;
    type WithRequestEmptyResponseResponseFut: std::future::Future<Output = Result<(), fidl::Error>>
        + Send;
    fn r#with_request_empty_response(&self, arg: &str)
        -> Self::WithRequestEmptyResponseResponseFut;
    type WithRequestWithResponseResponseFut: std::future::Future<Output = Result<String, fidl::Error>>
        + Send;
    fn r#with_request_with_response(&self, arg: &str) -> Self::WithRequestWithResponseResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct WithAndWithoutRequestResponseSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl WithAndWithoutRequestResponseSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <WithAndWithoutRequestResponseMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<WithAndWithoutRequestResponseEvent, fidl::Error> {
        WithAndWithoutRequestResponseEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#no_request_no_response(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x4b212a6c8c5f7bab,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#no_request_empty_response(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::EmptyPayload, false, false>(
                (),
                0x16a329d17f458668,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }
    pub fn r#no_request_with_response(&self, ___deadline: zx::Time) -> Result<String, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                WithAndWithoutRequestResponseNoRequestWithResponseResponse,false,true>(
                (),
                0x7d6b2fcf0e2a65bd,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.ret)
    }
    pub fn r#with_request_no_response(&self, mut arg: &str) -> Result<(), fidl::Error> {
        self.client.send::<WithAndWithoutRequestResponseWithRequestNoResponseRequest, false>(
            (arg,),
            0x65ab625138c50a77,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#with_request_empty_response(
        &self,
        mut arg: &str,
        ___deadline: zx::Time,
    ) -> Result<(), fidl::Error> {
        let _response = self.client.send_query::<
                WithAndWithoutRequestResponseWithRequestEmptyResponseRequest,
                fidl::encoding::EmptyPayload,false,false>(
                (arg,),
                0x27ee4d2bd405df5f,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response)
    }
    pub fn r#with_request_with_response(
        &self,
        mut arg: &str,
        ___deadline: zx::Time,
    ) -> Result<String, fidl::Error> {
        let _response = self.client.send_query::<
                WithAndWithoutRequestResponseWithRequestWithResponseRequest,
                WithAndWithoutRequestResponseWithRequestWithResponseResponse,false,true>(
                (arg,),
                0x590e91945d58f5b1,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.ret)
    }
}

#[derive(Debug, Clone)]
pub struct WithAndWithoutRequestResponseProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for WithAndWithoutRequestResponseProxy {
    type Protocol = WithAndWithoutRequestResponseMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl WithAndWithoutRequestResponseProxy {
    /// Create a new Proxy for WithAndWithoutRequestResponse
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <WithAndWithoutRequestResponseMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the WithAndWithoutRequestResponse protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> WithAndWithoutRequestResponseEventStream {
        WithAndWithoutRequestResponseEventStream {
            event_receiver: self.client.take_event_receiver(),
        }
    }
    pub fn r#no_request_no_response(&self) -> Result<(), fidl::Error> {
        WithAndWithoutRequestResponseProxyInterface::r#no_request_no_response(self)
    }
    pub fn r#no_request_empty_response(&self) -> fidl::client::QueryResponseFut<()> {
        WithAndWithoutRequestResponseProxyInterface::r#no_request_empty_response(self)
    }
    pub fn r#no_request_with_response(&self) -> fidl::client::QueryResponseFut<String> {
        WithAndWithoutRequestResponseProxyInterface::r#no_request_with_response(self)
    }
    pub fn r#with_request_no_response(&self, mut arg: &str) -> Result<(), fidl::Error> {
        WithAndWithoutRequestResponseProxyInterface::r#with_request_no_response(self, arg)
    }
    pub fn r#with_request_empty_response(
        &self,
        mut arg: &str,
    ) -> fidl::client::QueryResponseFut<()> {
        WithAndWithoutRequestResponseProxyInterface::r#with_request_empty_response(self, arg)
    }
    pub fn r#with_request_with_response(
        &self,
        mut arg: &str,
    ) -> fidl::client::QueryResponseFut<String> {
        WithAndWithoutRequestResponseProxyInterface::r#with_request_with_response(self, arg)
    }
}

impl WithAndWithoutRequestResponseProxyInterface for WithAndWithoutRequestResponseProxy {
    fn r#no_request_no_response(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x4b212a6c8c5f7bab,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    type NoRequestEmptyResponseResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#no_request_empty_response(&self) -> Self::NoRequestEmptyResponseResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::EmptyPayload,
                false,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, (), false>(
            (),
            0x16a329d17f458668,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type NoRequestWithResponseResponseFut = fidl::client::QueryResponseFut<String>;
    fn r#no_request_with_response(&self) -> Self::NoRequestWithResponseResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<String, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                WithAndWithoutRequestResponseNoRequestWithResponseResponse,
                true,
            >(_buf?)?;
            Ok(_response.ret)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, String, false>(
            (),
            0x7d6b2fcf0e2a65bd,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    fn r#with_request_no_response(&self, mut arg: &str) -> Result<(), fidl::Error> {
        self.client.send::<WithAndWithoutRequestResponseWithRequestNoResponseRequest, false>(
            (arg,),
            0x65ab625138c50a77,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    type WithRequestEmptyResponseResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#with_request_empty_response(
        &self,
        mut arg: &str,
    ) -> Self::WithRequestEmptyResponseResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::EmptyPayload,
                false,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            WithAndWithoutRequestResponseWithRequestEmptyResponseRequest,
            (),
            false,
        >(
            (arg,),
            0x27ee4d2bd405df5f,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type WithRequestWithResponseResponseFut = fidl::client::QueryResponseFut<String>;
    fn r#with_request_with_response(
        &self,
        mut arg: &str,
    ) -> Self::WithRequestWithResponseResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<String, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                WithAndWithoutRequestResponseWithRequestWithResponseResponse,
                true,
            >(_buf?)?;
            Ok(_response.ret)
        }
        self.client.send_query_and_decode::<
            WithAndWithoutRequestResponseWithRequestWithResponseRequest,
            String,
            false,
        >(
            (arg,),
            0x590e91945d58f5b1,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct WithAndWithoutRequestResponseEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for WithAndWithoutRequestResponseEventStream {}

impl futures::stream::FusedStream for WithAndWithoutRequestResponseEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for WithAndWithoutRequestResponseEventStream {
    type Item = Result<WithAndWithoutRequestResponseEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(WithAndWithoutRequestResponseEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum WithAndWithoutRequestResponseEvent {
    OnEmptyResponse {},
    OnWithResponse { ret: String },
}

impl WithAndWithoutRequestResponseEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_empty_response(self) -> Option<()> {
        if let WithAndWithoutRequestResponseEvent::OnEmptyResponse {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_with_response(self) -> Option<String> {
        if let WithAndWithoutRequestResponseEvent::OnWithResponse { ret } = self {
            Some((ret))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`WithAndWithoutRequestResponseEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<WithAndWithoutRequestResponseEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x4ae85a2b8d7c2e56 => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseOnEmptyResponseEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    WithAndWithoutRequestResponseEvent::OnEmptyResponse {
                    }
                ))
            }
            0x50a6f21a322f31a8 => {
                let mut out = fidl::new_empty!(WithAndWithoutRequestResponseOnWithResponseRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseOnWithResponseEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<WithAndWithoutRequestResponseOnWithResponseRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    WithAndWithoutRequestResponseEvent::OnWithResponse {ret: out.ret,

                    }
                ))
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <WithAndWithoutRequestResponseMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for WithAndWithoutRequestResponse
pub struct WithAndWithoutRequestResponseRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for WithAndWithoutRequestResponseRequestStream {}

impl futures::stream::FusedStream for WithAndWithoutRequestResponseRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for WithAndWithoutRequestResponseRequestStream {
    type Protocol = WithAndWithoutRequestResponseMarker;
    type ControlHandle = WithAndWithoutRequestResponseControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        WithAndWithoutRequestResponseControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for WithAndWithoutRequestResponseRequestStream {
    type Item = Result<WithAndWithoutRequestResponseRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled WithAndWithoutRequestResponseRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x4b212a6c8c5f7bab => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseNoRequestNoResponseRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithAndWithoutRequestResponseControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(WithAndWithoutRequestResponseRequest::NoRequestNoResponse {
                            control_handle,
                    })
                }
                0x16a329d17f458668 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseNoRequestEmptyResponseRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithAndWithoutRequestResponseControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(WithAndWithoutRequestResponseRequest::NoRequestEmptyResponse {
                            responder:WithAndWithoutRequestResponseNoRequestEmptyResponseResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x7d6b2fcf0e2a65bd => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseNoRequestWithResponseRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithAndWithoutRequestResponseControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(WithAndWithoutRequestResponseRequest::NoRequestWithResponse {
                            responder:WithAndWithoutRequestResponseNoRequestWithResponseResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x65ab625138c50a77 => {
                    let mut req = fidl::new_empty!(WithAndWithoutRequestResponseWithRequestNoResponseRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseWithRequestNoResponseRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<WithAndWithoutRequestResponseWithRequestNoResponseRequest>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithAndWithoutRequestResponseControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(WithAndWithoutRequestResponseRequest::WithRequestNoResponse {arg: req.arg,

                            control_handle,
                    })
                }
                0x27ee4d2bd405df5f => {
                    let mut req = fidl::new_empty!(WithAndWithoutRequestResponseWithRequestEmptyResponseRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseWithRequestEmptyResponseRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<WithAndWithoutRequestResponseWithRequestEmptyResponseRequest>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithAndWithoutRequestResponseControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(WithAndWithoutRequestResponseRequest::WithRequestEmptyResponse {arg: req.arg,

                            responder:WithAndWithoutRequestResponseWithRequestEmptyResponseResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x590e91945d58f5b1 => {
                    let mut req = fidl::new_empty!(WithAndWithoutRequestResponseWithRequestWithResponseRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseWithRequestWithResponseRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<WithAndWithoutRequestResponseWithRequestWithResponseRequest>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithAndWithoutRequestResponseControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(WithAndWithoutRequestResponseRequest::WithRequestWithResponse {arg: req.arg,

                            responder:WithAndWithoutRequestResponseWithRequestWithResponseResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <WithAndWithoutRequestResponseMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum WithAndWithoutRequestResponseRequest {
    NoRequestNoResponse {
        control_handle: WithAndWithoutRequestResponseControlHandle,
    },
    NoRequestEmptyResponse {
        responder: WithAndWithoutRequestResponseNoRequestEmptyResponseResponder,
    },
    NoRequestWithResponse {
        responder: WithAndWithoutRequestResponseNoRequestWithResponseResponder,
    },
    WithRequestNoResponse {
        arg: String,
        control_handle: WithAndWithoutRequestResponseControlHandle,
    },
    WithRequestEmptyResponse {
        arg: String,
        responder: WithAndWithoutRequestResponseWithRequestEmptyResponseResponder,
    },
    WithRequestWithResponse {
        arg: String,
        responder: WithAndWithoutRequestResponseWithRequestWithResponseResponder,
    },
}

impl WithAndWithoutRequestResponseRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_no_request_no_response(
        self,
    ) -> Option<(WithAndWithoutRequestResponseControlHandle)> {
        if let WithAndWithoutRequestResponseRequest::NoRequestNoResponse { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_no_request_empty_response(
        self,
    ) -> Option<(WithAndWithoutRequestResponseNoRequestEmptyResponseResponder)> {
        if let WithAndWithoutRequestResponseRequest::NoRequestEmptyResponse { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_no_request_with_response(
        self,
    ) -> Option<(WithAndWithoutRequestResponseNoRequestWithResponseResponder)> {
        if let WithAndWithoutRequestResponseRequest::NoRequestWithResponse { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_with_request_no_response(
        self,
    ) -> Option<(String, WithAndWithoutRequestResponseControlHandle)> {
        if let WithAndWithoutRequestResponseRequest::WithRequestNoResponse { arg, control_handle } =
            self
        {
            Some((arg, control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_with_request_empty_response(
        self,
    ) -> Option<(String, WithAndWithoutRequestResponseWithRequestEmptyResponseResponder)> {
        if let WithAndWithoutRequestResponseRequest::WithRequestEmptyResponse { arg, responder } =
            self
        {
            Some((arg, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_with_request_with_response(
        self,
    ) -> Option<(String, WithAndWithoutRequestResponseWithRequestWithResponseResponder)> {
        if let WithAndWithoutRequestResponseRequest::WithRequestWithResponse { arg, responder } =
            self
        {
            Some((arg, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            WithAndWithoutRequestResponseRequest::NoRequestNoResponse { .. } => {
                "no_request_no_response"
            }
            WithAndWithoutRequestResponseRequest::NoRequestEmptyResponse { .. } => {
                "no_request_empty_response"
            }
            WithAndWithoutRequestResponseRequest::NoRequestWithResponse { .. } => {
                "no_request_with_response"
            }
            WithAndWithoutRequestResponseRequest::WithRequestNoResponse { .. } => {
                "with_request_no_response"
            }
            WithAndWithoutRequestResponseRequest::WithRequestEmptyResponse { .. } => {
                "with_request_empty_response"
            }
            WithAndWithoutRequestResponseRequest::WithRequestWithResponse { .. } => {
                "with_request_with_response"
            }
        }
    }
}

#[derive(Debug, Clone)]
pub struct WithAndWithoutRequestResponseControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for WithAndWithoutRequestResponseControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl WithAndWithoutRequestResponseControlHandle {
    pub fn send_on_empty_response(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0,
            0x4ae85a2b8d7c2e56,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_on_with_response(&self, mut ret: &str) -> Result<(), fidl::Error> {
        self.inner.send::<WithAndWithoutRequestResponseOnWithResponseRequest, false>(
            (ret,),
            0,
            0x50a6f21a322f31a8,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithAndWithoutRequestResponseNoRequestEmptyResponseResponder {
    control_handle: std::mem::ManuallyDrop<WithAndWithoutRequestResponseControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithAndWithoutRequestResponseControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithAndWithoutRequestResponseNoRequestEmptyResponseResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithAndWithoutRequestResponseNoRequestEmptyResponseResponder {
    type ControlHandle = WithAndWithoutRequestResponseControlHandle;

    fn control_handle(&self) -> &WithAndWithoutRequestResponseControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithAndWithoutRequestResponseNoRequestEmptyResponseResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseNoRequestEmptyResponseResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::EmptyPayload>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithAndWithoutRequestResponseNoRequestWithResponseResponder {
    control_handle: std::mem::ManuallyDrop<WithAndWithoutRequestResponseControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithAndWithoutRequestResponseControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithAndWithoutRequestResponseNoRequestWithResponseResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithAndWithoutRequestResponseNoRequestWithResponseResponder {
    type ControlHandle = WithAndWithoutRequestResponseControlHandle;

    fn control_handle(&self) -> &WithAndWithoutRequestResponseControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithAndWithoutRequestResponseNoRequestWithResponseResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut ret: &str) -> Result<(), fidl::Error> {
        let r = self.send_raw(ret);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut ret: &str) -> Result<(), fidl::Error> {
        let r = self.send_raw(ret);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut ret: &str) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (ret,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseNoRequestWithResponseResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    WithAndWithoutRequestResponseNoRequestWithResponseResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithAndWithoutRequestResponseWithRequestEmptyResponseResponder {
    control_handle: std::mem::ManuallyDrop<WithAndWithoutRequestResponseControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithAndWithoutRequestResponseControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithAndWithoutRequestResponseWithRequestEmptyResponseResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithAndWithoutRequestResponseWithRequestEmptyResponseResponder {
    type ControlHandle = WithAndWithoutRequestResponseControlHandle;

    fn control_handle(&self) -> &WithAndWithoutRequestResponseControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithAndWithoutRequestResponseWithRequestEmptyResponseResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseWithRequestEmptyResponseResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::EmptyPayload>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithAndWithoutRequestResponseWithRequestWithResponseResponder {
    control_handle: std::mem::ManuallyDrop<WithAndWithoutRequestResponseControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithAndWithoutRequestResponseControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithAndWithoutRequestResponseWithRequestWithResponseResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithAndWithoutRequestResponseWithRequestWithResponseResponder {
    type ControlHandle = WithAndWithoutRequestResponseControlHandle;

    fn control_handle(&self) -> &WithAndWithoutRequestResponseControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithAndWithoutRequestResponseWithRequestWithResponseResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut ret: &str) -> Result<(), fidl::Error> {
        let r = self.send_raw(ret);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut ret: &str) -> Result<(), fidl::Error> {
        let r = self.send_raw(ret);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut ret: &str) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (ret,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithAndWithoutRequestResponseWithRequestWithResponseResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    WithAndWithoutRequestResponseWithRequestWithResponseResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithErrorSyntaxMarker;

impl fidl::endpoints::ProtocolMarker for WithErrorSyntaxMarker {
    type Proxy = WithErrorSyntaxProxy;
    type RequestStream = WithErrorSyntaxRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) WithErrorSyntax";
}
pub type WithErrorSyntaxResponseAsStructResult = Result<(i64, i64, i64), u32>;
pub type WithErrorSyntaxErrorAsPrimitiveResult = Result<(), u32>;
pub type WithErrorSyntaxErrorAsEnumResult = Result<(), ErrorEnum>;
pub type WithErrorSyntaxHandleInResultResult = Result<fidl::Handle, u32>;

pub trait WithErrorSyntaxProxyInterface: Send + Sync {
    type ResponseAsStructResponseFut: std::future::Future<Output = Result<WithErrorSyntaxResponseAsStructResult, fidl::Error>>
        + Send;
    fn r#response_as_struct(&self) -> Self::ResponseAsStructResponseFut;
    type ErrorAsPrimitiveResponseFut: std::future::Future<Output = Result<WithErrorSyntaxErrorAsPrimitiveResult, fidl::Error>>
        + Send;
    fn r#error_as_primitive(&self) -> Self::ErrorAsPrimitiveResponseFut;
    type ErrorAsEnumResponseFut: std::future::Future<Output = Result<WithErrorSyntaxErrorAsEnumResult, fidl::Error>>
        + Send;
    fn r#error_as_enum(&self) -> Self::ErrorAsEnumResponseFut;
    type HandleInResultResponseFut: std::future::Future<Output = Result<WithErrorSyntaxHandleInResultResult, fidl::Error>>
        + Send;
    fn r#handle_in_result(&self) -> Self::HandleInResultResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct WithErrorSyntaxSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl WithErrorSyntaxSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <WithErrorSyntaxMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<WithErrorSyntaxEvent, fidl::Error> {
        WithErrorSyntaxEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#response_as_struct(
        &self,
        ___deadline: zx::Time,
    ) -> Result<WithErrorSyntaxResponseAsStructResult, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                fidl::encoding::ResultType<WithErrorSyntaxResponseAsStructResponse, u32>,false,false>(
                (),
                0x3b902a6d8d24693,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.map(|x| (x.a, x.b, x.c)))
    }
    pub fn r#error_as_primitive(
        &self,
        ___deadline: zx::Time,
    ) -> Result<WithErrorSyntaxErrorAsPrimitiveResult, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, u32>,false,false>(
                (),
                0x602fd6bd920135e7,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.map(|x| x))
    }
    pub fn r#error_as_enum(
        &self,
        ___deadline: zx::Time,
    ) -> Result<WithErrorSyntaxErrorAsEnumResult, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, ErrorEnum>,false,false>(
                (),
                0x4c371e1673212f43,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.map(|x| x))
    }
    pub fn r#handle_in_result(
        &self,
        ___deadline: zx::Time,
    ) -> Result<WithErrorSyntaxHandleInResultResult, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                fidl::encoding::ResultType<WithErrorSyntaxHandleInResultResponse, u32>,false,false>(
                (),
                0x13092c5b835b0cbf,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.map(|x| x.h))
    }
}

#[derive(Debug, Clone)]
pub struct WithErrorSyntaxProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for WithErrorSyntaxProxy {
    type Protocol = WithErrorSyntaxMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl WithErrorSyntaxProxy {
    /// Create a new Proxy for WithErrorSyntax
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <WithErrorSyntaxMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the WithErrorSyntax protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> WithErrorSyntaxEventStream {
        WithErrorSyntaxEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#response_as_struct(
        &self,
    ) -> fidl::client::QueryResponseFut<WithErrorSyntaxResponseAsStructResult> {
        WithErrorSyntaxProxyInterface::r#response_as_struct(self)
    }
    pub fn r#error_as_primitive(
        &self,
    ) -> fidl::client::QueryResponseFut<WithErrorSyntaxErrorAsPrimitiveResult> {
        WithErrorSyntaxProxyInterface::r#error_as_primitive(self)
    }
    pub fn r#error_as_enum(
        &self,
    ) -> fidl::client::QueryResponseFut<WithErrorSyntaxErrorAsEnumResult> {
        WithErrorSyntaxProxyInterface::r#error_as_enum(self)
    }
    pub fn r#handle_in_result(
        &self,
    ) -> fidl::client::QueryResponseFut<WithErrorSyntaxHandleInResultResult> {
        WithErrorSyntaxProxyInterface::r#handle_in_result(self)
    }
}

impl WithErrorSyntaxProxyInterface for WithErrorSyntaxProxy {
    type ResponseAsStructResponseFut =
        fidl::client::QueryResponseFut<WithErrorSyntaxResponseAsStructResult>;
    fn r#response_as_struct(&self) -> Self::ResponseAsStructResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<WithErrorSyntaxResponseAsStructResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<WithErrorSyntaxResponseAsStructResponse, u32>,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| (x.a, x.b, x.c)))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            WithErrorSyntaxResponseAsStructResult,
            false,
        >(
            (),
            0x3b902a6d8d24693,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type ErrorAsPrimitiveResponseFut =
        fidl::client::QueryResponseFut<WithErrorSyntaxErrorAsPrimitiveResult>;
    fn r#error_as_primitive(&self) -> Self::ErrorAsPrimitiveResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<WithErrorSyntaxErrorAsPrimitiveResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, u32>,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            WithErrorSyntaxErrorAsPrimitiveResult,
            false,
        >(
            (),
            0x602fd6bd920135e7,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type ErrorAsEnumResponseFut = fidl::client::QueryResponseFut<WithErrorSyntaxErrorAsEnumResult>;
    fn r#error_as_enum(&self) -> Self::ErrorAsEnumResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<WithErrorSyntaxErrorAsEnumResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, ErrorEnum>,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            WithErrorSyntaxErrorAsEnumResult,
            false,
        >(
            (),
            0x4c371e1673212f43,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type HandleInResultResponseFut =
        fidl::client::QueryResponseFut<WithErrorSyntaxHandleInResultResult>;
    fn r#handle_in_result(&self) -> Self::HandleInResultResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<WithErrorSyntaxHandleInResultResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<WithErrorSyntaxHandleInResultResponse, u32>,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x.h))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            WithErrorSyntaxHandleInResultResult,
            false,
        >(
            (),
            0x13092c5b835b0cbf,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct WithErrorSyntaxEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for WithErrorSyntaxEventStream {}

impl futures::stream::FusedStream for WithErrorSyntaxEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for WithErrorSyntaxEventStream {
    type Item = Result<WithErrorSyntaxEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(WithErrorSyntaxEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum WithErrorSyntaxEvent {}

impl WithErrorSyntaxEvent {
    /// Decodes a message buffer as a [`WithErrorSyntaxEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<WithErrorSyntaxEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <WithErrorSyntaxMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for WithErrorSyntax
pub struct WithErrorSyntaxRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for WithErrorSyntaxRequestStream {}

impl futures::stream::FusedStream for WithErrorSyntaxRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for WithErrorSyntaxRequestStream {
    type Protocol = WithErrorSyntaxMarker;
    type ControlHandle = WithErrorSyntaxControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        WithErrorSyntaxControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for WithErrorSyntaxRequestStream {
    type Item = Result<WithErrorSyntaxRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled WithErrorSyntaxRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x3b902a6d8d24693 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithErrorSyntaxResponseAsStructRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithErrorSyntaxControlHandle { inner: this.inner.clone() };

                    Ok(WithErrorSyntaxRequest::ResponseAsStruct {
                        responder: WithErrorSyntaxResponseAsStructResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x602fd6bd920135e7 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithErrorSyntaxErrorAsPrimitiveRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithErrorSyntaxControlHandle { inner: this.inner.clone() };

                    Ok(WithErrorSyntaxRequest::ErrorAsPrimitive {
                        responder: WithErrorSyntaxErrorAsPrimitiveResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x4c371e1673212f43 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithErrorSyntaxErrorAsEnumRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithErrorSyntaxControlHandle { inner: this.inner.clone() };

                    Ok(WithErrorSyntaxRequest::ErrorAsEnum {
                        responder: WithErrorSyntaxErrorAsEnumResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x13092c5b835b0cbf => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithErrorSyntaxHandleInResultRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = WithErrorSyntaxControlHandle { inner: this.inner.clone() };

                    Ok(WithErrorSyntaxRequest::HandleInResult {
                        responder: WithErrorSyntaxHandleInResultResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <WithErrorSyntaxMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum WithErrorSyntaxRequest {
    ResponseAsStruct { responder: WithErrorSyntaxResponseAsStructResponder },
    ErrorAsPrimitive { responder: WithErrorSyntaxErrorAsPrimitiveResponder },
    ErrorAsEnum { responder: WithErrorSyntaxErrorAsEnumResponder },
    HandleInResult { responder: WithErrorSyntaxHandleInResultResponder },
}

impl WithErrorSyntaxRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_response_as_struct(self) -> Option<(WithErrorSyntaxResponseAsStructResponder)> {
        if let WithErrorSyntaxRequest::ResponseAsStruct { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_error_as_primitive(self) -> Option<(WithErrorSyntaxErrorAsPrimitiveResponder)> {
        if let WithErrorSyntaxRequest::ErrorAsPrimitive { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_error_as_enum(self) -> Option<(WithErrorSyntaxErrorAsEnumResponder)> {
        if let WithErrorSyntaxRequest::ErrorAsEnum { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_handle_in_result(self) -> Option<(WithErrorSyntaxHandleInResultResponder)> {
        if let WithErrorSyntaxRequest::HandleInResult { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            WithErrorSyntaxRequest::ResponseAsStruct { .. } => "response_as_struct",
            WithErrorSyntaxRequest::ErrorAsPrimitive { .. } => "error_as_primitive",
            WithErrorSyntaxRequest::ErrorAsEnum { .. } => "error_as_enum",
            WithErrorSyntaxRequest::HandleInResult { .. } => "handle_in_result",
        }
    }
}

#[derive(Debug, Clone)]
pub struct WithErrorSyntaxControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for WithErrorSyntaxControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl WithErrorSyntaxControlHandle {}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithErrorSyntaxResponseAsStructResponder {
    control_handle: std::mem::ManuallyDrop<WithErrorSyntaxControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithErrorSyntaxControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithErrorSyntaxResponseAsStructResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithErrorSyntaxResponseAsStructResponder {
    type ControlHandle = WithErrorSyntaxControlHandle;

    fn control_handle(&self) -> &WithErrorSyntaxControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithErrorSyntaxResponseAsStructResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut WithErrorSyntaxResponseAsStructResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut WithErrorSyntaxResponseAsStructResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut WithErrorSyntaxResponseAsStructResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_mut().map_err(|e| *e).map(|(a, b, c)| (*a, *b, *c)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithErrorSyntaxResponseAsStructResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<WithErrorSyntaxResponseAsStructResponse, u32>,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithErrorSyntaxErrorAsPrimitiveResponder {
    control_handle: std::mem::ManuallyDrop<WithErrorSyntaxControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithErrorSyntaxControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithErrorSyntaxErrorAsPrimitiveResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithErrorSyntaxErrorAsPrimitiveResponder {
    type ControlHandle = WithErrorSyntaxControlHandle;

    fn control_handle(&self) -> &WithErrorSyntaxControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithErrorSyntaxErrorAsPrimitiveResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut WithErrorSyntaxErrorAsPrimitiveResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut WithErrorSyntaxErrorAsPrimitiveResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut WithErrorSyntaxErrorAsPrimitiveResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: *result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithErrorSyntaxErrorAsPrimitiveResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<fidl::encoding::EmptyStruct, u32>,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithErrorSyntaxErrorAsEnumResponder {
    control_handle: std::mem::ManuallyDrop<WithErrorSyntaxControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithErrorSyntaxControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithErrorSyntaxErrorAsEnumResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithErrorSyntaxErrorAsEnumResponder {
    type ControlHandle = WithErrorSyntaxControlHandle;

    fn control_handle(&self) -> &WithErrorSyntaxControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithErrorSyntaxErrorAsEnumResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut WithErrorSyntaxErrorAsEnumResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut WithErrorSyntaxErrorAsEnumResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut WithErrorSyntaxErrorAsEnumResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: *result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithErrorSyntaxErrorAsEnumResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<fidl::encoding::EmptyStruct, ErrorEnum>,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithErrorSyntaxHandleInResultResponder {
    control_handle: std::mem::ManuallyDrop<WithErrorSyntaxControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithErrorSyntaxControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithErrorSyntaxHandleInResultResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithErrorSyntaxHandleInResultResponder {
    type ControlHandle = WithErrorSyntaxControlHandle;

    fn control_handle(&self) -> &WithErrorSyntaxControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithErrorSyntaxHandleInResultResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut WithErrorSyntaxHandleInResultResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut WithErrorSyntaxHandleInResultResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut WithErrorSyntaxHandleInResultResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result
                .as_mut()
                .map_err(|e| *e)
                .map(|h| (std::mem::replace(h, fidl::Handle::invalid().into()),)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithErrorSyntaxHandleInResultResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<WithErrorSyntaxHandleInResultResponse, u32>,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct WithProtocolEndsMarker;

impl fidl::endpoints::ProtocolMarker for WithProtocolEndsMarker {
    type Proxy = WithProtocolEndsProxy;
    type RequestStream = WithProtocolEndsRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) WithProtocolEnds";
}

pub trait WithProtocolEndsProxyInterface: Send + Sync {
    type ClientEndsResponseFut: std::future::Future<
            Output = Result<
                Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
                fidl::Error,
            >,
        > + Send;
    fn r#client_ends(
        &self,
        in_: fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>,
    ) -> Self::ClientEndsResponseFut;
    type ServerEndsResponseFut: std::future::Future<
            Output = Result<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>, fidl::Error>,
        > + Send;
    fn r#server_ends(
        &self,
        in_: Option<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
    ) -> Self::ServerEndsResponseFut;
    type StructContainingEndsResponseFut: std::future::Future<Output = Result<ProtocolEnds, fidl::Error>>
        + Send;
    fn r#struct_containing_ends(
        &self,
        in_: &mut ProtocolEnds,
    ) -> Self::StructContainingEndsResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct WithProtocolEndsSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl WithProtocolEndsSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <WithProtocolEndsMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<WithProtocolEndsEvent, fidl::Error> {
        WithProtocolEndsEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#client_ends(
        &self,
        mut in_: fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>,
        ___deadline: zx::Time,
    ) -> Result<Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>, fidl::Error> {
        let _response = self.client.send_query::<
                WithProtocolEndsClientEndsRequest,
                WithProtocolEndsClientEndsResponse,false,false>(
                (in_,),
                0x51780563edb15042,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.out)
    }
    pub fn r#server_ends(
        &self,
        mut in_: Option<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
        ___deadline: zx::Time,
    ) -> Result<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>, fidl::Error> {
        let _response = self.client.send_query::<
                WithProtocolEndsServerEndsRequest,
                WithProtocolEndsServerEndsResponse,false,false>(
                (in_,),
                0x70a02c2ba2228a33,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.out)
    }
    pub fn r#struct_containing_ends(
        &self,
        mut in_: &mut ProtocolEnds,
        ___deadline: zx::Time,
    ) -> Result<ProtocolEnds, fidl::Error> {
        let _response = self.client.send_query::<
                WithProtocolEndsStructContainingEndsRequest,
                WithProtocolEndsStructContainingEndsResponse,false,false>(
                (in_,),
                0x3893f0baad26f5d5,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.out)
    }
}

#[derive(Debug, Clone)]
pub struct WithProtocolEndsProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for WithProtocolEndsProxy {
    type Protocol = WithProtocolEndsMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl WithProtocolEndsProxy {
    /// Create a new Proxy for WithProtocolEnds
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <WithProtocolEndsMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the WithProtocolEnds protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> WithProtocolEndsEventStream {
        WithProtocolEndsEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#client_ends(
        &self,
        mut in_: fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>,
    ) -> fidl::client::QueryResponseFut<
        Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
    > {
        WithProtocolEndsProxyInterface::r#client_ends(self, in_)
    }
    pub fn r#server_ends(
        &self,
        mut in_: Option<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
    ) -> fidl::client::QueryResponseFut<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>
    {
        WithProtocolEndsProxyInterface::r#server_ends(self, in_)
    }
    pub fn r#struct_containing_ends(
        &self,
        mut in_: &mut ProtocolEnds,
    ) -> fidl::client::QueryResponseFut<ProtocolEnds> {
        WithProtocolEndsProxyInterface::r#struct_containing_ends(self, in_)
    }
}

impl WithProtocolEndsProxyInterface for WithProtocolEndsProxy {
    type ClientEndsResponseFut = fidl::client::QueryResponseFut<
        Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
    >;
    fn r#client_ends(
        &self,
        mut in_: fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>,
    ) -> Self::ClientEndsResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                WithProtocolEndsClientEndsResponse,
                false,
            >(_buf?)?;
            Ok(_response.out)
        }
        self.client.send_query_and_decode::<
            WithProtocolEndsClientEndsRequest,
            Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
            false,
        >(
            (in_,),
            0x51780563edb15042,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type ServerEndsResponseFut =
        fidl::client::QueryResponseFut<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>;
    fn r#server_ends(
        &self,
        mut in_: Option<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
    ) -> Self::ServerEndsResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                WithProtocolEndsServerEndsResponse,
                false,
            >(_buf?)?;
            Ok(_response.out)
        }
        self.client.send_query_and_decode::<
            WithProtocolEndsServerEndsRequest,
            fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>,
            false,
        >(
            (in_,),
            0x70a02c2ba2228a33,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StructContainingEndsResponseFut = fidl::client::QueryResponseFut<ProtocolEnds>;
    fn r#struct_containing_ends(
        &self,
        mut in_: &mut ProtocolEnds,
    ) -> Self::StructContainingEndsResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<ProtocolEnds, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                WithProtocolEndsStructContainingEndsResponse,
                false,
            >(_buf?)?;
            Ok(_response.out)
        }
        self.client.send_query_and_decode::<
            WithProtocolEndsStructContainingEndsRequest,
            ProtocolEnds,
            false,
        >(
            (in_,),
            0x3893f0baad26f5d5,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct WithProtocolEndsEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for WithProtocolEndsEventStream {}

impl futures::stream::FusedStream for WithProtocolEndsEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for WithProtocolEndsEventStream {
    type Item = Result<WithProtocolEndsEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(WithProtocolEndsEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum WithProtocolEndsEvent {}

impl WithProtocolEndsEvent {
    /// Decodes a message buffer as a [`WithProtocolEndsEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<WithProtocolEndsEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <WithProtocolEndsMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for WithProtocolEnds
pub struct WithProtocolEndsRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for WithProtocolEndsRequestStream {}

impl futures::stream::FusedStream for WithProtocolEndsRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for WithProtocolEndsRequestStream {
    type Protocol = WithProtocolEndsMarker;
    type ControlHandle = WithProtocolEndsControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        WithProtocolEndsControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for WithProtocolEndsRequestStream {
    type Item = Result<WithProtocolEndsRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled WithProtocolEndsRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x51780563edb15042 => {
                    let mut req = fidl::new_empty!(WithProtocolEndsClientEndsRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithProtocolEndsClientEndsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<WithProtocolEndsClientEndsRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle =
                        WithProtocolEndsControlHandle { inner: this.inner.clone() };

                    Ok(WithProtocolEndsRequest::ClientEnds {
                        in_: req.in_,

                        responder: WithProtocolEndsClientEndsResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x70a02c2ba2228a33 => {
                    let mut req = fidl::new_empty!(WithProtocolEndsServerEndsRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithProtocolEndsServerEndsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<WithProtocolEndsServerEndsRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle =
                        WithProtocolEndsControlHandle { inner: this.inner.clone() };

                    Ok(WithProtocolEndsRequest::ServerEnds {
                        in_: req.in_,

                        responder: WithProtocolEndsServerEndsResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x3893f0baad26f5d5 => {
                    let mut req = fidl::new_empty!(WithProtocolEndsStructContainingEndsRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithProtocolEndsStructContainingEndsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<
                        WithProtocolEndsStructContainingEndsRequest,
                    >(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle =
                        WithProtocolEndsControlHandle { inner: this.inner.clone() };

                    Ok(WithProtocolEndsRequest::StructContainingEnds {
                        in_: req.in_,

                        responder: WithProtocolEndsStructContainingEndsResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <WithProtocolEndsMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum WithProtocolEndsRequest {
    ClientEnds {
        in_: fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>,
        responder: WithProtocolEndsClientEndsResponder,
    },
    ServerEnds {
        in_: Option<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
        responder: WithProtocolEndsServerEndsResponder,
    },
    StructContainingEnds {
        in_: ProtocolEnds,
        responder: WithProtocolEndsStructContainingEndsResponder,
    },
}

impl WithProtocolEndsRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_client_ends(
        self,
    ) -> Option<(
        fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>,
        WithProtocolEndsClientEndsResponder,
    )> {
        if let WithProtocolEndsRequest::ClientEnds { in_, responder } = self {
            Some((in_, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_server_ends(
        self,
    ) -> Option<(
        Option<fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>>,
        WithProtocolEndsServerEndsResponder,
    )> {
        if let WithProtocolEndsRequest::ServerEnds { in_, responder } = self {
            Some((in_, responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_struct_containing_ends(
        self,
    ) -> Option<(ProtocolEnds, WithProtocolEndsStructContainingEndsResponder)> {
        if let WithProtocolEndsRequest::StructContainingEnds { in_, responder } = self {
            Some((in_, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            WithProtocolEndsRequest::ClientEnds { .. } => "client_ends",
            WithProtocolEndsRequest::ServerEnds { .. } => "server_ends",
            WithProtocolEndsRequest::StructContainingEnds { .. } => "struct_containing_ends",
        }
    }
}

#[derive(Debug, Clone)]
pub struct WithProtocolEndsControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for WithProtocolEndsControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl WithProtocolEndsControlHandle {}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithProtocolEndsClientEndsResponder {
    control_handle: std::mem::ManuallyDrop<WithProtocolEndsControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithProtocolEndsControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithProtocolEndsClientEndsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithProtocolEndsClientEndsResponder {
    type ControlHandle = WithProtocolEndsControlHandle;

    fn control_handle(&self) -> &WithProtocolEndsControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithProtocolEndsClientEndsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut out: Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(out);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut out: Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(out);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut out: Option<fidl::endpoints::ClientEnd<DiscoverableProtocolMarker>>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (out,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithProtocolEndsClientEndsResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<WithProtocolEndsClientEndsResponse>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithProtocolEndsServerEndsResponder {
    control_handle: std::mem::ManuallyDrop<WithProtocolEndsControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithProtocolEndsControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithProtocolEndsServerEndsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithProtocolEndsServerEndsResponder {
    type ControlHandle = WithProtocolEndsControlHandle;

    fn control_handle(&self) -> &WithProtocolEndsControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithProtocolEndsServerEndsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut out: fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(out);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut out: fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(out);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut out: fidl::endpoints::ServerEnd<DiscoverableProtocolMarker>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (out,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithProtocolEndsServerEndsResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<WithProtocolEndsServerEndsResponse>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct WithProtocolEndsStructContainingEndsResponder {
    control_handle: std::mem::ManuallyDrop<WithProtocolEndsControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`WithProtocolEndsControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for WithProtocolEndsStructContainingEndsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for WithProtocolEndsStructContainingEndsResponder {
    type ControlHandle = WithProtocolEndsControlHandle;

    fn control_handle(&self) -> &WithProtocolEndsControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl WithProtocolEndsStructContainingEndsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut out: &mut ProtocolEnds) -> Result<(), fidl::Error> {
        let r = self.send_raw(out);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut out: &mut ProtocolEnds) -> Result<(), fidl::Error> {
        let r = self.send_raw(out);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut out: &mut ProtocolEnds) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (out,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.protocols/WithProtocolEndsStructContainingEndsResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    WithProtocolEndsStructContainingEndsResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
