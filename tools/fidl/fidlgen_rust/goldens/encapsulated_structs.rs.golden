// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_enum, fidl_struct, fidl_table, fidl_union,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(C)]
pub struct ArrayInt16Int8 {
    pub arr: [Int16Int8; 3],
}
impl fidl::Persistable for ArrayInt16Int8 {}

fidl_struct! {
    copy: true,
    name: ArrayInt16Int8,
    members: [
        arr {
            ty: fidl::encoding::Array<Int16Int8, 3>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
        {
            ty: u16,
            offset: 2,
            mask: 0xff00u16,
        },
        {
            ty: u16,
            offset: 6,
            mask: 0xff00u16,
        },
        {
            ty: u16,
            offset: 10,
            mask: 0xff00u16,
        },
    ],
    padding_v2: [
        {
            ty: u16,
            offset: 2,
            mask: 0xff00u16,
        },
        {
            ty: u16,
            offset: 6,
            mask: 0xff00u16,
        },
        {
            ty: u16,
            offset: 10,
            mask: 0xff00u16,
        },
    ],
    size_v1: 12,
    size_v2: 12,
    align_v1: 2,
    align_v2: 2,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(C)]
pub struct Int16Int8 {
    pub a: i16,
    pub b: i8,
}
impl fidl::Persistable for Int16Int8 {}

fidl_struct! {
    copy: true,
    name: Int16Int8,
    members: [
        a {
            ty: i16,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        b {
            ty: i8,
            index: 1,
            typevar: T1,
            offset_v1: 2,
            offset_v2: 2,
        },
    ],
    padding_v1: [
        {
            ty: u16,
            offset: 2,
            mask: 0xff00u16,
        },
    ],
    padding_v2: [
        {
            ty: u16,
            offset: 2,
            mask: 0xff00u16,
        },
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 2,
    align_v2: 2,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(C)]
pub struct Int8Int32 {
    pub a: i8,
    pub b: i32,
}
impl fidl::Persistable for Int8Int32 {}

fidl_struct! {
    copy: true,
    name: Int8Int32,
    members: [
        a {
            ty: i8,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        b {
            ty: i32,
            index: 1,
            typevar: T1,
            offset_v1: 4,
            offset_v2: 4,
        },
    ],
    padding_v1: [
        {
            ty: u32,
            offset: 0,
            mask: 0xffffff00u32,
        },
    ],
    padding_v2: [
        {
            ty: u32,
            offset: 0,
            mask: 0xffffff00u32,
        },
    ],
    size_v1: 8,
    size_v2: 8,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct NonInlineStructTestStruct {
    pub element: Option<Box<Int16Int8>>,
    pub h: fidl::Handle,
}
impl fidl::Standalone for NonInlineStructTestStruct {}

fidl_struct! {
    name: NonInlineStructTestStruct,
    resource: true,
    members: [
        element {
            ty: fidl::encoding::Boxed<Int16Int8>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        h {
            ty: fidl::encoding::HandleType<fidl::Handle, { fidl::ObjectType::NONE.into_raw() }, 2147483648>,
            resource: true,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
    ],
    padding_v1: [
        {
            ty: u64,
            offset: 8,
            mask: 0xffffffff00000000u64,
        },
    ],
    padding_v2: [
        {
            ty: u64,
            offset: 8,
            mask: 0xffffffff00000000u64,
        },
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(C)]
pub struct StructPaddingTestStruct {
    pub trailing: Int16Int8,
    pub inner: Int8Int32,
    pub array: ArrayInt16Int8,
}
impl fidl::Persistable for StructPaddingTestStruct {}

fidl_struct! {
    copy: true,
    name: StructPaddingTestStruct,
    members: [
        trailing {
            ty: Int16Int8,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        inner {
            ty: Int8Int32,
            index: 1,
            typevar: T1,
            offset_v1: 4,
            offset_v2: 4,
        },
        array {
            ty: ArrayInt16Int8,
            index: 2,
            typevar: T2,
            offset_v1: 12,
            offset_v2: 12,
        },
    ],
    padding_v1: [
        {
            ty: u32,
            offset: 0,
            mask: 0xff000000u32,
        },
        {
            ty: u32,
            offset: 4,
            mask: 0xffffff00u32,
        },
        {
            ty: u32,
            offset: 12,
            mask: 0xff000000u32,
        },
        {
            ty: u32,
            offset: 16,
            mask: 0xff000000u32,
        },
        {
            ty: u32,
            offset: 20,
            mask: 0xff000000u32,
        },
    ],
    padding_v2: [
        {
            ty: u32,
            offset: 0,
            mask: 0xff000000u32,
        },
        {
            ty: u32,
            offset: 4,
            mask: 0xffffff00u32,
        },
        {
            ty: u32,
            offset: 12,
            mask: 0xff000000u32,
        },
        {
            ty: u32,
            offset: 16,
            mask: 0xff000000u32,
        },
        {
            ty: u32,
            offset: 20,
            mask: 0xff000000u32,
        },
    ],
    size_v1: 24,
    size_v2: 24,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct TopLevelStruct {
    pub a: StructPaddingTestStruct,
    pub b: NonInlineStructTestStruct,
}
impl fidl::Standalone for TopLevelStruct {}

fidl_struct! {
    name: TopLevelStruct,
    resource: true,
    members: [
        a {
            ty: StructPaddingTestStruct,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        b {
            ty: NonInlineStructTestStruct,
            resource: true,
            index: 1,
            typevar: T1,
            offset_v1: 24,
            offset_v2: 24,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 40,
    size_v2: 40,
    align_v1: 8,
    align_v2: 8,
}
