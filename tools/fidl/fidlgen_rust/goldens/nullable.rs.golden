// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_enum, fidl_struct, fidl_table, fidl_union,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

const _FIDL_TRACE_BINDINGS_RUST: u32 = 6;

#[derive(Debug, Copy, Clone, PartialEq, PartialOrd)]
pub enum SimpleUnion {
    A(i32),
    B(f32),
}

impl SimpleUnion {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::A(_) => 1,
            Self::B(_) => 2,
        }
    }
    #[deprecated = "Strict unions should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}
impl fidl::Persistable for SimpleUnion {}

fidl_union! {
    name: SimpleUnion,
    members: [
        A {
            ty: i32,
            ordinal: 1,
        },
        B {
            ty: f32,
            ordinal: 2,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(C)]
pub struct Int32Wrapper {
    pub val: i32,
}
impl fidl::Persistable for Int32Wrapper {}

fidl_struct! {
    copy: true,
    name: Int32Wrapper,
    members: [
        val {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(C)]
pub struct SimpleProtocolAddRequest {
    pub a: i32,
    pub b: i32,
}
impl fidl::Persistable for SimpleProtocolAddRequest {}

fidl_struct! {
    copy: true,
    name: SimpleProtocolAddRequest,
    members: [
        a {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        b {
            ty: i32,
            index: 1,
            typevar: T1,
            offset_v1: 4,
            offset_v2: 4,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 8,
    size_v2: 8,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(C)]
pub struct SimpleProtocolAddResponse {
    pub sum: i32,
}
impl fidl::Persistable for SimpleProtocolAddResponse {}

fidl_struct! {
    copy: true,
    name: SimpleProtocolAddResponse,
    members: [
        sum {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct StructWithNullableHandle {
    pub val: Option<fidl::Vmo>,
}
impl fidl::Standalone for StructWithNullableHandle {}

fidl_struct! {
    name: StructWithNullableHandle,
    resource: true,
    members: [
        val {
            ty: fidl::encoding::Optional<fidl::encoding::HandleType<fidl::Vmo, { fidl::ObjectType::VMO.into_raw() }, 2147483648>>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct StructWithNullableProtocol {
    pub val: Option<fidl::endpoints::ClientEnd<SimpleProtocolMarker>>,
}
impl fidl::Standalone for StructWithNullableProtocol {}

fidl_struct! {
    name: StructWithNullableProtocol,
    resource: true,
    members: [
        val {
            ty: fidl::encoding::Optional<fidl::encoding::Endpoint<fidl::endpoints::ClientEnd<SimpleProtocolMarker>>>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct StructWithNullableRequest {
    pub val: Option<fidl::endpoints::ServerEnd<SimpleProtocolMarker>>,
}
impl fidl::Standalone for StructWithNullableRequest {}

fidl_struct! {
    name: StructWithNullableRequest,
    resource: true,
    members: [
        val {
            ty: fidl::encoding::Optional<fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<SimpleProtocolMarker>>>,
            resource: true,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct StructWithNullableString {
    pub val: Option<String>,
}
impl fidl::Persistable for StructWithNullableString {}

fidl_struct! {
    name: StructWithNullableString,
    members: [
        val {
            ty: fidl::encoding::Optional<fidl::encoding::UnboundedString>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct StructWithNullableStruct {
    pub val: Option<Box<Int32Wrapper>>,
}
impl fidl::Persistable for StructWithNullableStruct {}

fidl_struct! {
    name: StructWithNullableStruct,
    members: [
        val {
            ty: fidl::encoding::Boxed<Int32Wrapper>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 8,
    size_v2: 8,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, PartialEq, PartialOrd)]
pub struct StructWithNullableUnion {
    pub val: Option<Box<SimpleUnion>>,
}
impl fidl::Persistable for StructWithNullableUnion {}

fidl_struct! {
    name: StructWithNullableUnion,
    members: [
        val {
            ty: fidl::encoding::OptionalUnion<SimpleUnion>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 24,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct StructWithNullableVector {
    pub val: Option<Vec<i32>>,
}
impl fidl::Persistable for StructWithNullableVector {}

fidl_struct! {
    name: StructWithNullableVector,
    members: [
        val {
            ty: fidl::encoding::Optional<fidl::encoding::UnboundedVector<i32>>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SimpleProtocolMarker;

impl fidl::endpoints::ProtocolMarker for SimpleProtocolMarker {
    type Proxy = SimpleProtocolProxy;
    type RequestStream = SimpleProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) SimpleProtocol";
}

pub trait SimpleProtocolProxyInterface: Send + Sync {
    type AddResponseFut: std::future::Future<Output = Result<i32, fidl::Error>> + Send;
    fn r#add(&self, a: i32, b: i32) -> Self::AddResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct SimpleProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl SimpleProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <SimpleProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<SimpleProtocolEvent, fidl::Error> {
        SimpleProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#add(&self, mut a: i32, mut b: i32, ___deadline: zx::Time) -> Result<i32, fidl::Error> {
        let _response = self
            .client
            .send_query::<SimpleProtocolAddRequest, SimpleProtocolAddResponse, false, false>(
                (a, b),
                0x7ee19cf19ae30276,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.sum)
    }
}

#[derive(Debug, Clone)]
pub struct SimpleProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for SimpleProtocolProxy {
    type Protocol = SimpleProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl SimpleProtocolProxy {
    /// Create a new Proxy for SimpleProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <SimpleProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the SimpleProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> SimpleProtocolEventStream {
        SimpleProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#add(&self, mut a: i32, mut b: i32) -> fidl::client::QueryResponseFut<i32> {
        SimpleProtocolProxyInterface::r#add(self, a, b)
    }
}

impl SimpleProtocolProxyInterface for SimpleProtocolProxy {
    type AddResponseFut = fidl::client::QueryResponseFut<i32>;
    fn r#add(&self, mut a: i32, mut b: i32) -> Self::AddResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i32, fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<SimpleProtocolAddResponse, false>(_buf?)?;
            Ok(_response.sum)
        }
        self.client.send_query_and_decode::<SimpleProtocolAddRequest, i32, false>(
            (a, b),
            0x7ee19cf19ae30276,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct SimpleProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for SimpleProtocolEventStream {}

impl futures::stream::FusedStream for SimpleProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for SimpleProtocolEventStream {
    type Item = Result<SimpleProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(SimpleProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum SimpleProtocolEvent {}

impl SimpleProtocolEvent {
    /// Decodes a message buffer as a [`SimpleProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<SimpleProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name:
                    <SimpleProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for SimpleProtocol
pub struct SimpleProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for SimpleProtocolRequestStream {}

impl futures::stream::FusedStream for SimpleProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for SimpleProtocolRequestStream {
    type Protocol = SimpleProtocolMarker;
    type ControlHandle = SimpleProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        SimpleProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for SimpleProtocolRequestStream {
    type Item = Result<SimpleProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled SimpleProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x7ee19cf19ae30276 => {
                    let mut req = fidl::new_empty!(SimpleProtocolAddRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.nullable/SimpleProtocolAddRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW)
                    {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<SimpleProtocolAddRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = SimpleProtocolControlHandle { inner: this.inner.clone() };

                    Ok(SimpleProtocolRequest::Add {
                        a: req.a,
                        b: req.b,

                        responder: SimpleProtocolAddResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <SimpleProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum SimpleProtocolRequest {
    Add { a: i32, b: i32, responder: SimpleProtocolAddResponder },
}

impl SimpleProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_add(self) -> Option<(i32, i32, SimpleProtocolAddResponder)> {
        if let SimpleProtocolRequest::Add { a, b, responder } = self {
            Some((a, b, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            SimpleProtocolRequest::Add { .. } => "add",
        }
    }
}

#[derive(Debug, Clone)]
pub struct SimpleProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for SimpleProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl SimpleProtocolControlHandle {}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct SimpleProtocolAddResponder {
    control_handle: std::mem::ManuallyDrop<SimpleProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`SimpleProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for SimpleProtocolAddResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for SimpleProtocolAddResponder {
    type ControlHandle = SimpleProtocolControlHandle;

    fn control_handle(&self) -> &SimpleProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl SimpleProtocolAddResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut sum: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(sum);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut sum: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(sum);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut sum: i32) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (sum,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.nullable/SimpleProtocolAddResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<SimpleProtocolAddResponse>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
