// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        encoding::zerocopy,
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_enum, fidl_struct, fidl_table, fidl_union,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub enum UnionLargeArray {
    A([u32; 100]),
}

impl UnionLargeArray {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::A(_) => 1,
        }
    }
    #[deprecated = "Strict unions should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}
impl fidl::encoding::Persistable for UnionLargeArray {}

fidl_union! {
    name: UnionLargeArray,
    members: [
        A {
            ty: fidl::encoding::Array<u32, 100>,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub enum UnionSmallArray {
    A([u32; 2]),
}

impl UnionSmallArray {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::A(_) => 1,
        }
    }
    #[deprecated = "Strict unions should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}
impl fidl::encoding::Persistable for UnionSmallArray {}

fidl_union! {
    name: UnionSmallArray,
    members: [
        A {
            ty: fidl::encoding::Array<u32, 2>,
            ordinal: 1,
        },
    ],
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct StructLargeArray {
    pub a: [u32; 100],
}
impl fidl::encoding::Persistable for StructLargeArray {}

fidl_struct! {
    copy: true,
    name: StructLargeArray,
    members: [
        a {
            ty: fidl::encoding::Array<u32, 100>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 400,
    size_v2: 400,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct StructSmallArray {
    pub a: [u32; 2],
}
impl fidl::encoding::Persistable for StructSmallArray {}

fidl_struct! {
    copy: true,
    name: StructSmallArray,
    members: [
        a {
            ty: fidl::encoding::Array<u32, 2>,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 8,
    size_v2: 8,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Clone, PartialEq)]
pub struct TableLargeArray {
    pub a: Option<[u32; 100]>,
    #[deprecated = "Use `..TableLargeArray::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl TableLargeArray {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { a: None, __non_exhaustive: () };
}

impl std::default::Default for TableLargeArray {
    fn default() -> Self {
        Self::EMPTY
    }
}
impl fidl::encoding::Persistable for TableLargeArray {}

fidl_table! {
    name: TableLargeArray,
    members: [
        a {
            ty: fidl::encoding::Array<u32, 100>,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct TableSmallArray {
    pub a: Option<[u32; 2]>,
    #[deprecated = "Use `..TableSmallArray::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl TableSmallArray {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { a: None, __non_exhaustive: () };
}

impl std::default::Default for TableSmallArray {
    fn default() -> Self {
        Self::EMPTY
    }
}
impl fidl::encoding::Persistable for TableSmallArray {}

fidl_table! {
    name: TableSmallArray,
    members: [
        a {
            ty: fidl::encoding::Array<u32, 2>,
            ordinal: 1,
        },
    ],
}
