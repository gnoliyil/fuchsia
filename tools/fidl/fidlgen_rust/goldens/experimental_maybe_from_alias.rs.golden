// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        endpoints::{ControlHandle as _, Responder as _},
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[derive(Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Testing {
    pub u1: u64,
    pub u2: Vec<u64>,
    pub u3: [u64; 1],
    pub u4: Vec<Vec<u64>>,
    pub u5: Vec<[u64; 1]>,
    pub u6: [Vec<u64>; 4],
    pub u7: [[u64; 1]; 4],
    pub v1: Option<Vec<u64>>,
    pub v2: Vec<Option<Vec<u64>>>,
    pub v3: [Option<Vec<u64>>; 4],
    pub a1: [u64; 1],
    pub a2: Vec<[u64; 1]>,
    pub a3: [[u64; 1]; 4],
    pub r1: Option<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
    pub r2: Vec<Option<fidl::endpoints::ServerEnd<MyProtocolMarker>>>,
    pub r3: [Option<fidl::endpoints::ServerEnd<MyProtocolMarker>>; 4],
    pub b1: Vec<u8>,
    pub b2: Vec<Vec<u8>>,
    pub b3: [Vec<u8>; 4],
    pub s1: String,
    pub s2: Vec<String>,
    pub s3: [String; 4],
    pub vv1: Vec<u64>,
    pub vv2: Vec<Vec<u64>>,
    pub vv3: [Vec<u64>; 3],
    pub aa1: [u64; 2],
    pub aa2: Vec<[u64; 2]>,
    pub aa3: [[u64; 2]; 3],
}

impl fidl::Standalone for Testing {}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct MyProtocolMarker;

impl fidl::endpoints::ProtocolMarker for MyProtocolMarker {
    type Proxy = MyProtocolProxy;
    type RequestStream = MyProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) MyProtocol";
}

pub trait MyProtocolProxyInterface: Send + Sync {}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct MyProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl MyProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <MyProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<MyProtocolEvent, fidl::Error> {
        MyProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
}

#[derive(Debug, Clone)]
pub struct MyProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for MyProtocolProxy {
    type Protocol = MyProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl MyProtocolProxy {
    /// Create a new Proxy for MyProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <MyProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the MyProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> MyProtocolEventStream {
        MyProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
}

impl MyProtocolProxyInterface for MyProtocolProxy {}

pub struct MyProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for MyProtocolEventStream {}

impl futures::stream::FusedStream for MyProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for MyProtocolEventStream {
    type Item = Result<MyProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(MyProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum MyProtocolEvent {}

impl MyProtocolEvent {
    /// Decodes a message buffer as a [`MyProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<MyProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <MyProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for MyProtocol
pub struct MyProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for MyProtocolRequestStream {}

impl futures::stream::FusedStream for MyProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for MyProtocolRequestStream {
    type Protocol = MyProtocolMarker;
    type ControlHandle = MyProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        MyProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for MyProtocolRequestStream {
    type Item = Result<MyProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled MyProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <MyProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}

#[derive(Debug)]
pub enum MyProtocolRequest {}

impl MyProtocolRequest {
    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {}
    }
}

#[derive(Debug, Clone)]
pub struct MyProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for MyProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl MyProtocolControlHandle {}

mod internal {
    #[allow(unused_imports)]
    use super::*;

    unsafe impl fidl::encoding::TypeMarker for Testing {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 8,
                fidl::encoding::WireFormatVersion::V2 => 8,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 704,
                fidl::encoding::WireFormatVersion::V2 => 704,
            }
        }
    }
    impl fidl::encoding::ResourceTypeMarker for Testing {
        type Borrowed<'a> = &'a mut Self;
        fn take_or_borrow<'a>(
            value: &'a mut <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<Testing> for &mut Testing {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<Testing>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<Testing>::encode(
                (
                    <u64 as fidl::encoding::ValueTypeMarker>::borrow(&self.u1),
                    <fidl::encoding::Vector<u64, 1> as fidl::encoding::ValueTypeMarker>::borrow(&self.u2),
                    <fidl::encoding::Array<u64, 1> as fidl::encoding::ValueTypeMarker>::borrow(&self.u3),
                    <fidl::encoding::UnboundedVector<fidl::encoding::Vector<u64, 1>> as fidl::encoding::ValueTypeMarker>::borrow(&self.u4),
                    <fidl::encoding::UnboundedVector<fidl::encoding::Array<u64, 1>> as fidl::encoding::ValueTypeMarker>::borrow(&self.u5),
                    <fidl::encoding::Array<fidl::encoding::Vector<u64, 1>, 4> as fidl::encoding::ValueTypeMarker>::borrow(&self.u6),
                    <fidl::encoding::Array<fidl::encoding::Array<u64, 1>, 4> as fidl::encoding::ValueTypeMarker>::borrow(&self.u7),
                    <fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>> as fidl::encoding::ValueTypeMarker>::borrow(&self.v1),
                    <fidl::encoding::UnboundedVector<fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>> as fidl::encoding::ValueTypeMarker>::borrow(&self.v2),
                    <fidl::encoding::Array<fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>, 4> as fidl::encoding::ValueTypeMarker>::borrow(&self.v3),
                    <fidl::encoding::Array<u64, 1> as fidl::encoding::ValueTypeMarker>::borrow(&self.a1),
                    <fidl::encoding::UnboundedVector<fidl::encoding::Array<u64, 1>> as fidl::encoding::ValueTypeMarker>::borrow(&self.a2),
                    <fidl::encoding::Array<fidl::encoding::Array<u64, 1>, 4> as fidl::encoding::ValueTypeMarker>::borrow(&self.a3),
                    <fidl::encoding::Optional<fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>> as fidl::encoding::ResourceTypeMarker>::take_or_borrow(&mut self.r1),
                    <fidl::encoding::UnboundedVector<fidl::encoding::Optional<fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>>> as fidl::encoding::ResourceTypeMarker>::take_or_borrow(&mut self.r2),
                    <fidl::encoding::Array<fidl::encoding::Optional<fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>>, 4> as fidl::encoding::ResourceTypeMarker>::take_or_borrow(&mut self.r3),
                    <fidl::encoding::UnboundedVector<u8> as fidl::encoding::ValueTypeMarker>::borrow(&self.b1),
                    <fidl::encoding::UnboundedVector<fidl::encoding::UnboundedVector<u8>> as fidl::encoding::ValueTypeMarker>::borrow(&self.b2),
                    <fidl::encoding::Array<fidl::encoding::UnboundedVector<u8>, 4> as fidl::encoding::ValueTypeMarker>::borrow(&self.b3),
                    <fidl::encoding::UnboundedString as fidl::encoding::ValueTypeMarker>::borrow(&self.s1),
                    <fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString> as fidl::encoding::ValueTypeMarker>::borrow(&self.s2),
                    <fidl::encoding::Array<fidl::encoding::UnboundedString, 4> as fidl::encoding::ValueTypeMarker>::borrow(&self.s3),
                    <fidl::encoding::Vector<u64, 2> as fidl::encoding::ValueTypeMarker>::borrow(&self.vv1),
                    <fidl::encoding::Vector<fidl::encoding::Vector<u64, 2>, 3> as fidl::encoding::ValueTypeMarker>::borrow(&self.vv2),
                    <fidl::encoding::Array<fidl::encoding::Vector<u64, 2>, 3> as fidl::encoding::ValueTypeMarker>::borrow(&self.vv3),
                    <fidl::encoding::Array<u64, 2> as fidl::encoding::ValueTypeMarker>::borrow(&self.aa1),
                    <fidl::encoding::Vector<fidl::encoding::Array<u64, 2>, 3> as fidl::encoding::ValueTypeMarker>::borrow(&self.aa2),
                    <fidl::encoding::Array<fidl::encoding::Array<u64, 2>, 3> as fidl::encoding::ValueTypeMarker>::borrow(&self.aa3),
                ),
                encoder, offset, _depth
            )
        }
    }
    unsafe impl<
            T0: fidl::encoding::Encode<u64>,
            T1: fidl::encoding::Encode<fidl::encoding::Vector<u64, 1>>,
            T2: fidl::encoding::Encode<fidl::encoding::Array<u64, 1>>,
            T3: fidl::encoding::Encode<fidl::encoding::UnboundedVector<fidl::encoding::Vector<u64, 1>>>,
            T4: fidl::encoding::Encode<fidl::encoding::UnboundedVector<fidl::encoding::Array<u64, 1>>>,
            T5: fidl::encoding::Encode<fidl::encoding::Array<fidl::encoding::Vector<u64, 1>, 4>>,
            T6: fidl::encoding::Encode<fidl::encoding::Array<fidl::encoding::Array<u64, 1>, 4>>,
            T7: fidl::encoding::Encode<fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>>,
            T8: fidl::encoding::Encode<
                fidl::encoding::UnboundedVector<
                    fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>,
                >,
            >,
            T9: fidl::encoding::Encode<
                fidl::encoding::Array<
                    fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>,
                    4,
                >,
            >,
            T10: fidl::encoding::Encode<fidl::encoding::Array<u64, 1>>,
            T11: fidl::encoding::Encode<fidl::encoding::UnboundedVector<fidl::encoding::Array<u64, 1>>>,
            T12: fidl::encoding::Encode<fidl::encoding::Array<fidl::encoding::Array<u64, 1>, 4>>,
            T13: fidl::encoding::Encode<
                fidl::encoding::Optional<
                    fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
                >,
            >,
            T14: fidl::encoding::Encode<
                fidl::encoding::UnboundedVector<
                    fidl::encoding::Optional<
                        fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
                    >,
                >,
            >,
            T15: fidl::encoding::Encode<
                fidl::encoding::Array<
                    fidl::encoding::Optional<
                        fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
                    >,
                    4,
                >,
            >,
            T16: fidl::encoding::Encode<fidl::encoding::UnboundedVector<u8>>,
            T17: fidl::encoding::Encode<
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedVector<u8>>,
            >,
            T18: fidl::encoding::Encode<fidl::encoding::Array<fidl::encoding::UnboundedVector<u8>, 4>>,
            T19: fidl::encoding::Encode<fidl::encoding::UnboundedString>,
            T20: fidl::encoding::Encode<
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString>,
            >,
            T21: fidl::encoding::Encode<fidl::encoding::Array<fidl::encoding::UnboundedString, 4>>,
            T22: fidl::encoding::Encode<fidl::encoding::Vector<u64, 2>>,
            T23: fidl::encoding::Encode<fidl::encoding::Vector<fidl::encoding::Vector<u64, 2>, 3>>,
            T24: fidl::encoding::Encode<fidl::encoding::Array<fidl::encoding::Vector<u64, 2>, 3>>,
            T25: fidl::encoding::Encode<fidl::encoding::Array<u64, 2>>,
            T26: fidl::encoding::Encode<fidl::encoding::Vector<fidl::encoding::Array<u64, 2>, 3>>,
            T27: fidl::encoding::Encode<fidl::encoding::Array<fidl::encoding::Array<u64, 2>, 3>>,
        > fidl::encoding::Encode<Testing>
        for (
            T0,
            T1,
            T2,
            T3,
            T4,
            T5,
            T6,
            T7,
            T8,
            T9,
            T10,
            T11,
            T12,
            T13,
            T14,
            T15,
            T16,
            T17,
            T18,
            T19,
            T20,
            T21,
            T22,
            T23,
            T24,
            T25,
            T26,
            T27,
        )
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<Testing>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => unsafe {
                    let ptr = encoder.buf.as_mut_ptr().offset(offset as isize).offset(312);
                    std::mem::transmute::<*mut u8, *mut u64>(ptr).write_unaligned(0);
                },
                fidl::encoding::WireFormatVersion::V2 => unsafe {
                    let ptr = encoder.buf.as_mut_ptr().offset(offset as isize).offset(312);
                    std::mem::transmute::<*mut u8, *mut u64>(ptr).write_unaligned(0);
                },
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 8,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            self.1.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 24,
            };
            self.2.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 32,
                fidl::encoding::WireFormatVersion::V2 => 32,
            };
            self.3.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 48,
                fidl::encoding::WireFormatVersion::V2 => 48,
            };
            self.4.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 64,
                fidl::encoding::WireFormatVersion::V2 => 64,
            };
            self.5.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 128,
                fidl::encoding::WireFormatVersion::V2 => 128,
            };
            self.6.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 160,
                fidl::encoding::WireFormatVersion::V2 => 160,
            };
            self.7.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 176,
                fidl::encoding::WireFormatVersion::V2 => 176,
            };
            self.8.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 192,
                fidl::encoding::WireFormatVersion::V2 => 192,
            };
            self.9.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 256,
                fidl::encoding::WireFormatVersion::V2 => 256,
            };
            self.10.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 264,
                fidl::encoding::WireFormatVersion::V2 => 264,
            };
            self.11.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 280,
                fidl::encoding::WireFormatVersion::V2 => 280,
            };
            self.12.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 312,
                fidl::encoding::WireFormatVersion::V2 => 312,
            };
            self.13.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 320,
                fidl::encoding::WireFormatVersion::V2 => 320,
            };
            self.14.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 336,
                fidl::encoding::WireFormatVersion::V2 => 336,
            };
            self.15.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 352,
                fidl::encoding::WireFormatVersion::V2 => 352,
            };
            self.16.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 368,
                fidl::encoding::WireFormatVersion::V2 => 368,
            };
            self.17.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 384,
                fidl::encoding::WireFormatVersion::V2 => 384,
            };
            self.18.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 448,
                fidl::encoding::WireFormatVersion::V2 => 448,
            };
            self.19.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 464,
                fidl::encoding::WireFormatVersion::V2 => 464,
            };
            self.20.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 480,
                fidl::encoding::WireFormatVersion::V2 => 480,
            };
            self.21.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 544,
                fidl::encoding::WireFormatVersion::V2 => 544,
            };
            self.22.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 560,
                fidl::encoding::WireFormatVersion::V2 => 560,
            };
            self.23.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 576,
                fidl::encoding::WireFormatVersion::V2 => 576,
            };
            self.24.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 624,
                fidl::encoding::WireFormatVersion::V2 => 624,
            };
            self.25.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 640,
                fidl::encoding::WireFormatVersion::V2 => 640,
            };
            self.26.encode(encoder, offset + member_offset, depth)?;
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 656,
                fidl::encoding::WireFormatVersion::V2 => 656,
            };
            self.27.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for Testing {
        #[inline(always)]
        fn new_empty() -> Self {
            Self {
                u1: fidl::new_empty!(u64),
                u2: fidl::new_empty!(fidl::encoding::Vector<u64, 1>),
                u3: fidl::new_empty!(fidl::encoding::Array<u64, 1>),
                u4: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<fidl::encoding::Vector<u64, 1>>
                ),
                u5: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<fidl::encoding::Array<u64, 1>>
                ),
                u6: fidl::new_empty!(fidl::encoding::Array<fidl::encoding::Vector<u64, 1>, 4>),
                u7: fidl::new_empty!(fidl::encoding::Array<fidl::encoding::Array<u64, 1>, 4>),
                v1: fidl::new_empty!(
                    fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>
                ),
                v2: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<
                        fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>,
                    >
                ),
                v3: fidl::new_empty!(
                    fidl::encoding::Array<
                        fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>,
                        4,
                    >
                ),
                a1: fidl::new_empty!(fidl::encoding::Array<u64, 1>),
                a2: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<fidl::encoding::Array<u64, 1>>
                ),
                a3: fidl::new_empty!(fidl::encoding::Array<fidl::encoding::Array<u64, 1>, 4>),
                r1: fidl::new_empty!(
                    fidl::encoding::Optional<
                        fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
                    >
                ),
                r2: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<
                        fidl::encoding::Optional<
                            fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
                        >,
                    >
                ),
                r3: fidl::new_empty!(
                    fidl::encoding::Array<
                        fidl::encoding::Optional<
                            fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
                        >,
                        4,
                    >
                ),
                b1: fidl::new_empty!(fidl::encoding::UnboundedVector<u8>),
                b2: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<fidl::encoding::UnboundedVector<u8>>
                ),
                b3: fidl::new_empty!(fidl::encoding::Array<fidl::encoding::UnboundedVector<u8>, 4>),
                s1: fidl::new_empty!(fidl::encoding::UnboundedString),
                s2: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString>
                ),
                s3: fidl::new_empty!(fidl::encoding::Array<fidl::encoding::UnboundedString, 4>),
                vv1: fidl::new_empty!(fidl::encoding::Vector<u64, 2>),
                vv2: fidl::new_empty!(fidl::encoding::Vector<fidl::encoding::Vector<u64, 2>, 3>),
                vv3: fidl::new_empty!(fidl::encoding::Array<fidl::encoding::Vector<u64, 2>, 3>),
                aa1: fidl::new_empty!(fidl::encoding::Array<u64, 2>),
                aa2: fidl::new_empty!(fidl::encoding::Vector<fidl::encoding::Array<u64, 2>, 3>),
                aa3: fidl::new_empty!(fidl::encoding::Array<fidl::encoding::Array<u64, 2>, 3>),
            }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {
                    let ptr = unsafe { decoder.buf.as_ptr().offset(offset as isize).offset(312) };
                    let padval = unsafe {
                        std::mem::transmute::<*const u8, *const u64>(ptr).read_unaligned()
                    };
                    let maskedval = padval & 0xffffffff00000000u64;
                    if (maskedval != 0) {
                        return Err(fidl::Error::NonZeroPadding {
                            padding_start: offset
                                + 312
                                + ((0xffffffff00000000u64 as u64).trailing_zeros() / 8) as usize,
                        });
                    }
                }
                fidl::encoding::WireFormatVersion::V2 => {
                    let ptr = unsafe { decoder.buf.as_ptr().offset(offset as isize).offset(312) };
                    let padval = unsafe {
                        std::mem::transmute::<*const u8, *const u64>(ptr).read_unaligned()
                    };
                    let maskedval = padval & 0xffffffff00000000u64;
                    if (maskedval != 0) {
                        return Err(fidl::Error::NonZeroPadding {
                            padding_start: offset
                                + 312
                                + ((0xffffffff00000000u64 as u64).trailing_zeros() / 8) as usize,
                        });
                    }
                }
            };
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            fidl::decode!(u64, &mut self.u1, decoder, offset + member_offset, _depth)?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 8,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            fidl::decode!(fidl::encoding::Vector<u64, 1>, &mut self.u2, decoder, offset + member_offset, _depth)?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 24,
            };
            fidl::decode!(fidl::encoding::Array<u64, 1>, &mut self.u3, decoder, offset + member_offset, _depth)?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 32,
                fidl::encoding::WireFormatVersion::V2 => 32,
            };
            fidl::decode!(
                fidl::encoding::UnboundedVector<fidl::encoding::Vector<u64, 1>>,
                &mut self.u4,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 48,
                fidl::encoding::WireFormatVersion::V2 => 48,
            };
            fidl::decode!(
                fidl::encoding::UnboundedVector<fidl::encoding::Array<u64, 1>>,
                &mut self.u5,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 64,
                fidl::encoding::WireFormatVersion::V2 => 64,
            };
            fidl::decode!(
                fidl::encoding::Array<fidl::encoding::Vector<u64, 1>, 4>,
                &mut self.u6,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 128,
                fidl::encoding::WireFormatVersion::V2 => 128,
            };
            fidl::decode!(
                fidl::encoding::Array<fidl::encoding::Array<u64, 1>, 4>,
                &mut self.u7,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 160,
                fidl::encoding::WireFormatVersion::V2 => 160,
            };
            fidl::decode!(
                fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>,
                &mut self.v1,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 176,
                fidl::encoding::WireFormatVersion::V2 => 176,
            };
            fidl::decode!(
                fidl::encoding::UnboundedVector<
                    fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>,
                >,
                &mut self.v2,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 192,
                fidl::encoding::WireFormatVersion::V2 => 192,
            };
            fidl::decode!(
                fidl::encoding::Array<
                    fidl::encoding::Optional<fidl::encoding::UnboundedVector<u64>>,
                    4,
                >,
                &mut self.v3,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 256,
                fidl::encoding::WireFormatVersion::V2 => 256,
            };
            fidl::decode!(fidl::encoding::Array<u64, 1>, &mut self.a1, decoder, offset + member_offset, _depth)?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 264,
                fidl::encoding::WireFormatVersion::V2 => 264,
            };
            fidl::decode!(
                fidl::encoding::UnboundedVector<fidl::encoding::Array<u64, 1>>,
                &mut self.a2,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 280,
                fidl::encoding::WireFormatVersion::V2 => 280,
            };
            fidl::decode!(
                fidl::encoding::Array<fidl::encoding::Array<u64, 1>, 4>,
                &mut self.a3,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 312,
                fidl::encoding::WireFormatVersion::V2 => 312,
            };
            fidl::decode!(
                fidl::encoding::Optional<
                    fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
                >,
                &mut self.r1,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 320,
                fidl::encoding::WireFormatVersion::V2 => 320,
            };
            fidl::decode!(
                fidl::encoding::UnboundedVector<
                    fidl::encoding::Optional<
                        fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
                    >,
                >,
                &mut self.r2,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 336,
                fidl::encoding::WireFormatVersion::V2 => 336,
            };
            fidl::decode!(
                fidl::encoding::Array<
                    fidl::encoding::Optional<
                        fidl::encoding::Endpoint<fidl::endpoints::ServerEnd<MyProtocolMarker>>,
                    >,
                    4,
                >,
                &mut self.r3,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 352,
                fidl::encoding::WireFormatVersion::V2 => 352,
            };
            fidl::decode!(
                fidl::encoding::UnboundedVector<u8>,
                &mut self.b1,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 368,
                fidl::encoding::WireFormatVersion::V2 => 368,
            };
            fidl::decode!(
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedVector<u8>>,
                &mut self.b2,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 384,
                fidl::encoding::WireFormatVersion::V2 => 384,
            };
            fidl::decode!(
                fidl::encoding::Array<fidl::encoding::UnboundedVector<u8>, 4>,
                &mut self.b3,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 448,
                fidl::encoding::WireFormatVersion::V2 => 448,
            };
            fidl::decode!(
                fidl::encoding::UnboundedString,
                &mut self.s1,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 464,
                fidl::encoding::WireFormatVersion::V2 => 464,
            };
            fidl::decode!(
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString>,
                &mut self.s2,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 480,
                fidl::encoding::WireFormatVersion::V2 => 480,
            };
            fidl::decode!(fidl::encoding::Array<fidl::encoding::UnboundedString, 4>, &mut self.s3, decoder, offset + member_offset, _depth)?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 544,
                fidl::encoding::WireFormatVersion::V2 => 544,
            };
            fidl::decode!(fidl::encoding::Vector<u64, 2>, &mut self.vv1, decoder, offset + member_offset, _depth)?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 560,
                fidl::encoding::WireFormatVersion::V2 => 560,
            };
            fidl::decode!(
                fidl::encoding::Vector<fidl::encoding::Vector<u64, 2>, 3>,
                &mut self.vv2,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 576,
                fidl::encoding::WireFormatVersion::V2 => 576,
            };
            fidl::decode!(
                fidl::encoding::Array<fidl::encoding::Vector<u64, 2>, 3>,
                &mut self.vv3,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 624,
                fidl::encoding::WireFormatVersion::V2 => 624,
            };
            fidl::decode!(fidl::encoding::Array<u64, 2>, &mut self.aa1, decoder, offset + member_offset, _depth)?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 640,
                fidl::encoding::WireFormatVersion::V2 => 640,
            };
            fidl::decode!(
                fidl::encoding::Vector<fidl::encoding::Array<u64, 2>, 3>,
                &mut self.aa2,
                decoder,
                offset + member_offset,
                _depth
            )?;
            let member_offset = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 656,
                fidl::encoding::WireFormatVersion::V2 => 656,
            };
            fidl::decode!(
                fidl::encoding::Array<fidl::encoding::Array<u64, 2>, 3>,
                &mut self.aa3,
                decoder,
                offset + member_offset,
                _depth
            )?;
            Ok(())
        }
    }
}
