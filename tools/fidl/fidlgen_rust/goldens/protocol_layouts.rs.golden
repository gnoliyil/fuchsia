// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        endpoints::{ControlHandle as _, Responder as _},
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[derive(Clone, Debug, Default, PartialEq)]
pub struct LocalTablePayload {
    pub a: Option<u16>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for LocalTablePayload {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct MainProtocolOneWayAnonRequest {
    pub a: Option<u16>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for MainProtocolOneWayAnonRequest {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct MainProtocolTwoWayAnonResponse {
    pub a: Option<u16>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for MainProtocolTwoWayAnonResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct MainProtocolTwoWayAnonWithErrorRequest {
    pub a: Option<u16>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for MainProtocolTwoWayAnonWithErrorRequest {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct MainProtocolOnAnonWithErrorResponse {
    pub a: Option<u16>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for MainProtocolOnAnonWithErrorResponse {}

#[derive(Clone, Debug)]
pub enum LocalUnionPayload {
    B(bool),
    #[deprecated = "Use `LocalUnionPayload::unknown()` to construct and `LocalUnionPayloadUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `LocalUnionPayload` member.
#[macro_export]
macro_rules! LocalUnionPayloadUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for LocalUnionPayload {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::B(x), Self::B(y)) => *x == *y,
            _ => false,
        }
    }
}

impl LocalUnionPayload {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::B(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for LocalUnionPayload {}

#[derive(Clone, Debug)]
pub enum MainProtocolOnAnonRequest {
    B(bool),
    #[deprecated = "Use `MainProtocolOnAnonRequest::unknown()` to construct and `MainProtocolOnAnonRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `MainProtocolOnAnonRequest` member.
#[macro_export]
macro_rules! MainProtocolOnAnonRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for MainProtocolOnAnonRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::B(x), Self::B(y)) => *x == *y,
            _ => false,
        }
    }
}

impl MainProtocolOnAnonRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::B(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for MainProtocolOnAnonRequest {}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonRequest {
    B(bool),
    #[deprecated = "Use `MainProtocolTwoWayAnonRequest::unknown()` to construct and `MainProtocolTwoWayAnonRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `MainProtocolTwoWayAnonRequest` member.
#[macro_export]
macro_rules! MainProtocolTwoWayAnonRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for MainProtocolTwoWayAnonRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::B(x), Self::B(y)) => *x == *y,
            _ => false,
        }
    }
}

impl MainProtocolTwoWayAnonRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::B(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for MainProtocolTwoWayAnonRequest {}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonWithErrorResponse {
    B(bool),
    #[deprecated = "Use `MainProtocolTwoWayAnonWithErrorResponse::unknown()` to construct and `MainProtocolTwoWayAnonWithErrorResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `MainProtocolTwoWayAnonWithErrorResponse` member.
#[macro_export]
macro_rules! MainProtocolTwoWayAnonWithErrorResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for MainProtocolTwoWayAnonWithErrorResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::B(x), Self::B(y)) => *x == *y,
            _ => false,
        }
    }
}

impl MainProtocolTwoWayAnonWithErrorResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::B(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for MainProtocolTwoWayAnonWithErrorResponse {}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct MainProtocolMarker;

impl fidl::endpoints::ProtocolMarker for MainProtocolMarker {
    type Proxy = MainProtocolProxy;
    type RequestStream = MainProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) MainProtocol";
}
pub type MainProtocolTwoWayImportWithErrorResult =
    Result<fidl_test_protocollayouts_imported::ImportUnionPayload, u32>;
pub type MainProtocolOnImportWithErrorResult =
    Result<fidl_test_protocollayouts_imported::ImportTablePayload, u32>;
pub type MainProtocolTwoWayLocalWithErrorResult = Result<LocalUnionPayload, u32>;
pub type MainProtocolOnLocalWithErrorResult = Result<LocalTablePayload, u32>;
pub type MainProtocolTwoWayAnonWithErrorResult =
    Result<MainProtocolTwoWayAnonWithErrorResponse, u32>;
pub type MainProtocolOnAnonWithErrorResult = Result<MainProtocolOnAnonWithErrorResponse, u32>;

pub trait MainProtocolProxyInterface: Send + Sync {
    fn r#one_way_anon_composed(
        &self,
        payload: &fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest,
    ) -> Result<(), fidl::Error>;
    type TwoWayAnonComposedResponseFut: std::future::Future<
            Output = Result<
                fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
                fidl::Error,
            >,
        > + Send;
    fn r#two_way_anon_composed(
        &self,
        payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest,
    ) -> Self::TwoWayAnonComposedResponseFut;
    type TwoWayAnonComposedWithErrorResponseFut: std::future::Future<Output = Result<fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResult, fidl::Error>> + Send;
    fn r#two_way_anon_composed_with_error(
        &self,
        payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest,
    ) -> Self::TwoWayAnonComposedWithErrorResponseFut;
    fn r#one_way_named_composed(
        &self,
        payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error>;
    type TwoWayNamedComposedResponseFut: std::future::Future<
            Output = Result<fidl_test_protocollayouts_imported::ImportTablePayload, fidl::Error>,
        > + Send;
    fn r#two_way_named_composed(
        &self,
        payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
    ) -> Self::TwoWayNamedComposedResponseFut;
    type TwoWayNamedComposedWithErrorResponseFut: std::future::Future<Output = Result<fidl_test_protocollayouts_imported::ComposedProtocolTwoWayNamedComposedWithErrorResult, fidl::Error>> + Send;
    fn r#two_way_named_composed_with_error(
        &self,
        payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Self::TwoWayNamedComposedWithErrorResponseFut;
    fn r#one_way_import(
        &self,
        payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error>;
    type TwoWayImportResponseFut: std::future::Future<
            Output = Result<fidl_test_protocollayouts_imported::ImportTablePayload, fidl::Error>,
        > + Send;
    fn r#two_way_import(
        &self,
        payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
    ) -> Self::TwoWayImportResponseFut;
    type TwoWayImportWithErrorResponseFut: std::future::Future<Output = Result<MainProtocolTwoWayImportWithErrorResult, fidl::Error>>
        + Send;
    fn r#two_way_import_with_error(
        &self,
        payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Self::TwoWayImportWithErrorResponseFut;
    fn r#one_way_local(&self, payload: &LocalTablePayload) -> Result<(), fidl::Error>;
    type TwoWayLocalResponseFut: std::future::Future<Output = Result<LocalTablePayload, fidl::Error>>
        + Send;
    fn r#two_way_local(&self, payload: &LocalUnionPayload) -> Self::TwoWayLocalResponseFut;
    type TwoWayLocalWithErrorResponseFut: std::future::Future<Output = Result<MainProtocolTwoWayLocalWithErrorResult, fidl::Error>>
        + Send;
    fn r#two_way_local_with_error(
        &self,
        payload: &LocalTablePayload,
    ) -> Self::TwoWayLocalWithErrorResponseFut;
    fn r#one_way_anon(&self, payload: &MainProtocolOneWayAnonRequest) -> Result<(), fidl::Error>;
    type TwoWayAnonResponseFut: std::future::Future<Output = Result<MainProtocolTwoWayAnonResponse, fidl::Error>>
        + Send;
    fn r#two_way_anon(
        &self,
        payload: &MainProtocolTwoWayAnonRequest,
    ) -> Self::TwoWayAnonResponseFut;
    type TwoWayAnonWithErrorResponseFut: std::future::Future<Output = Result<MainProtocolTwoWayAnonWithErrorResult, fidl::Error>>
        + Send;
    fn r#two_way_anon_with_error(
        &self,
        payload: &MainProtocolTwoWayAnonWithErrorRequest,
    ) -> Self::TwoWayAnonWithErrorResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct MainProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl MainProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <MainProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<MainProtocolEvent, fidl::Error> {
        MainProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }

    pub fn r#one_way_anon_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest,
    ) -> Result<(), fidl::Error> {
        self.client
            .send::<fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest>(
                payload,
                0x67da05e1ae3f5e1,
                fidl::encoding::DynamicFlags::empty(),
            )
    }

    pub fn r#two_way_anon_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest,
        ___deadline: zx::Time,
    ) -> Result<
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
        fidl::Error,
    > {
        let _response = self.client.send_query::<
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest,
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
        >(
            payload,
            0x16afa17ea70d3370,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#two_way_anon_composed_with_error(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest,
        ___deadline: zx::Time,
    ) -> Result<
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResult,
        fidl::Error,
    > {
        let _response = self.client.send_query::<
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest,
            fidl::encoding::ResultType<fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResponse, u32>,
        >(
            payload,
            0x2ed33746b7bb119d,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#one_way_named_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        self.client.send::<fidl_test_protocollayouts_imported::ImportTablePayload>(
            payload,
            0x5d78ce13958eee58,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn r#two_way_named_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
        ___deadline: zx::Time,
    ) -> Result<fidl_test_protocollayouts_imported::ImportTablePayload, fidl::Error> {
        let _response = self.client.send_query::<
            fidl_test_protocollayouts_imported::ImportUnionPayload,
            fidl_test_protocollayouts_imported::ImportTablePayload,
        >(
            payload,
            0xf67f27cae663810,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#two_way_named_composed_with_error(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
        ___deadline: zx::Time,
    ) -> Result<
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayNamedComposedWithErrorResult,
        fidl::Error,
    > {
        let _response = self.client.send_query::<
            fidl_test_protocollayouts_imported::ImportTablePayload,
            fidl::encoding::ResultType<fidl_test_protocollayouts_imported::ImportUnionPayload, u32>,
        >(
            payload,
            0x30dac4182813ef7f,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#one_way_import(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        self.client.send::<fidl_test_protocollayouts_imported::ImportTablePayload>(
            payload,
            0x530db65f2691d3b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn r#two_way_import(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
        ___deadline: zx::Time,
    ) -> Result<fidl_test_protocollayouts_imported::ImportTablePayload, fidl::Error> {
        let _response = self.client.send_query::<
            fidl_test_protocollayouts_imported::ImportUnionPayload,
            fidl_test_protocollayouts_imported::ImportTablePayload,
        >(
            payload,
            0x2bf680c8f0d40604,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#two_way_import_with_error(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
        ___deadline: zx::Time,
    ) -> Result<MainProtocolTwoWayImportWithErrorResult, fidl::Error> {
        let _response = self.client.send_query::<
            fidl_test_protocollayouts_imported::ImportTablePayload,
            fidl::encoding::ResultType<fidl_test_protocollayouts_imported::ImportUnionPayload, u32>,
        >(
            payload,
            0x432093586084ff0a,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#one_way_local(&self, mut payload: &LocalTablePayload) -> Result<(), fidl::Error> {
        self.client.send::<LocalTablePayload>(
            payload,
            0x54759b55efd60f43,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn r#two_way_local(
        &self,
        mut payload: &LocalUnionPayload,
        ___deadline: zx::Time,
    ) -> Result<LocalTablePayload, fidl::Error> {
        let _response = self.client.send_query::<LocalUnionPayload, LocalTablePayload>(
            payload,
            0x6bbeeb18f39c539b,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#two_way_local_with_error(
        &self,
        mut payload: &LocalTablePayload,
        ___deadline: zx::Time,
    ) -> Result<MainProtocolTwoWayLocalWithErrorResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<LocalTablePayload, fidl::encoding::ResultType<LocalUnionPayload, u32>>(
                payload,
                0x4dd8e7287c4c9b57,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#one_way_anon(
        &self,
        mut payload: &MainProtocolOneWayAnonRequest,
    ) -> Result<(), fidl::Error> {
        self.client.send::<MainProtocolOneWayAnonRequest>(
            payload,
            0x3a552f30c77c76ec,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn r#two_way_anon(
        &self,
        mut payload: &MainProtocolTwoWayAnonRequest,
        ___deadline: zx::Time,
    ) -> Result<MainProtocolTwoWayAnonResponse, fidl::Error> {
        let _response = self
            .client
            .send_query::<MainProtocolTwoWayAnonRequest, MainProtocolTwoWayAnonResponse>(
                payload,
                0x672eb5e71efdabcf,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }

    pub fn r#two_way_anon_with_error(
        &self,
        mut payload: &MainProtocolTwoWayAnonWithErrorRequest,
        ___deadline: zx::Time,
    ) -> Result<MainProtocolTwoWayAnonWithErrorResult, fidl::Error> {
        let _response = self.client.send_query::<
            MainProtocolTwoWayAnonWithErrorRequest,
            fidl::encoding::ResultType<MainProtocolTwoWayAnonWithErrorResponse, u32>,
        >(
            payload,
            0x6bd5fcf6f7b46df1,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x))
    }
}

#[derive(Debug, Clone)]
pub struct MainProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for MainProtocolProxy {
    type Protocol = MainProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl MainProtocolProxy {
    /// Create a new Proxy for MainProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <MainProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the MainProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> MainProtocolEventStream {
        MainProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }

    pub fn r#one_way_anon_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest,
    ) -> Result<(), fidl::Error> {
        MainProtocolProxyInterface::r#one_way_anon_composed(self, payload)
    }

    pub fn r#two_way_anon_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest,
    ) -> fidl::client::QueryResponseFut<
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
    > {
        MainProtocolProxyInterface::r#two_way_anon_composed(self, payload)
    }

    pub fn r#two_way_anon_composed_with_error(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest,
    ) -> fidl::client::QueryResponseFut<
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResult,
    > {
        MainProtocolProxyInterface::r#two_way_anon_composed_with_error(self, payload)
    }

    pub fn r#one_way_named_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        MainProtocolProxyInterface::r#one_way_named_composed(self, payload)
    }

    pub fn r#two_way_named_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
    ) -> fidl::client::QueryResponseFut<fidl_test_protocollayouts_imported::ImportTablePayload>
    {
        MainProtocolProxyInterface::r#two_way_named_composed(self, payload)
    }

    pub fn r#two_way_named_composed_with_error(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> fidl::client::QueryResponseFut<
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayNamedComposedWithErrorResult,
    > {
        MainProtocolProxyInterface::r#two_way_named_composed_with_error(self, payload)
    }

    pub fn r#one_way_import(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        MainProtocolProxyInterface::r#one_way_import(self, payload)
    }

    pub fn r#two_way_import(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
    ) -> fidl::client::QueryResponseFut<fidl_test_protocollayouts_imported::ImportTablePayload>
    {
        MainProtocolProxyInterface::r#two_way_import(self, payload)
    }

    pub fn r#two_way_import_with_error(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> fidl::client::QueryResponseFut<MainProtocolTwoWayImportWithErrorResult> {
        MainProtocolProxyInterface::r#two_way_import_with_error(self, payload)
    }

    pub fn r#one_way_local(&self, mut payload: &LocalTablePayload) -> Result<(), fidl::Error> {
        MainProtocolProxyInterface::r#one_way_local(self, payload)
    }

    pub fn r#two_way_local(
        &self,
        mut payload: &LocalUnionPayload,
    ) -> fidl::client::QueryResponseFut<LocalTablePayload> {
        MainProtocolProxyInterface::r#two_way_local(self, payload)
    }

    pub fn r#two_way_local_with_error(
        &self,
        mut payload: &LocalTablePayload,
    ) -> fidl::client::QueryResponseFut<MainProtocolTwoWayLocalWithErrorResult> {
        MainProtocolProxyInterface::r#two_way_local_with_error(self, payload)
    }

    pub fn r#one_way_anon(
        &self,
        mut payload: &MainProtocolOneWayAnonRequest,
    ) -> Result<(), fidl::Error> {
        MainProtocolProxyInterface::r#one_way_anon(self, payload)
    }

    pub fn r#two_way_anon(
        &self,
        mut payload: &MainProtocolTwoWayAnonRequest,
    ) -> fidl::client::QueryResponseFut<MainProtocolTwoWayAnonResponse> {
        MainProtocolProxyInterface::r#two_way_anon(self, payload)
    }

    pub fn r#two_way_anon_with_error(
        &self,
        mut payload: &MainProtocolTwoWayAnonWithErrorRequest,
    ) -> fidl::client::QueryResponseFut<MainProtocolTwoWayAnonWithErrorResult> {
        MainProtocolProxyInterface::r#two_way_anon_with_error(self, payload)
    }
}

impl MainProtocolProxyInterface for MainProtocolProxy {
    fn r#one_way_anon_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest,
    ) -> Result<(), fidl::Error> {
        self.client
            .send::<fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest>(
                payload,
                0x67da05e1ae3f5e1,
                fidl::encoding::DynamicFlags::empty(),
            )
    }

    type TwoWayAnonComposedResponseFut = fidl::client::QueryResponseFut<
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
    >;
    fn r#two_way_anon_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest,
    ) -> Self::TwoWayAnonComposedResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
            fidl::Error,
        > {
            let _response = fidl::client::decode_transaction_body::<
                fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest,
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
        >(
            payload,
            0x16afa17ea70d3370,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type TwoWayAnonComposedWithErrorResponseFut = fidl::client::QueryResponseFut<
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResult,
    >;
    fn r#two_way_anon_composed_with_error(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest,
    ) -> Self::TwoWayAnonComposedWithErrorResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResult,
            fidl::Error,
        > {
            let _response = fidl::client::decode_transaction_body::<fidl::encoding::ResultType<fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResponse, u32>>(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest,
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResult,
        >(
            payload,
            0x2ed33746b7bb119d,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    fn r#one_way_named_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        self.client.send::<fidl_test_protocollayouts_imported::ImportTablePayload>(
            payload,
            0x5d78ce13958eee58,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    type TwoWayNamedComposedResponseFut =
        fidl::client::QueryResponseFut<fidl_test_protocollayouts_imported::ImportTablePayload>;
    fn r#two_way_named_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
    ) -> Self::TwoWayNamedComposedResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<fidl_test_protocollayouts_imported::ImportTablePayload, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl_test_protocollayouts_imported::ImportTablePayload,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl_test_protocollayouts_imported::ImportUnionPayload,
            fidl_test_protocollayouts_imported::ImportTablePayload,
        >(
            payload,
            0xf67f27cae663810,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type TwoWayNamedComposedWithErrorResponseFut = fidl::client::QueryResponseFut<
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayNamedComposedWithErrorResult,
    >;
    fn r#two_way_named_composed_with_error(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Self::TwoWayNamedComposedWithErrorResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayNamedComposedWithErrorResult,
            fidl::Error,
        > {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    fidl_test_protocollayouts_imported::ImportUnionPayload,
                    u32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl_test_protocollayouts_imported::ImportTablePayload,
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayNamedComposedWithErrorResult,
        >(
            payload,
            0x30dac4182813ef7f,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    fn r#one_way_import(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        self.client.send::<fidl_test_protocollayouts_imported::ImportTablePayload>(
            payload,
            0x530db65f2691d3b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    type TwoWayImportResponseFut =
        fidl::client::QueryResponseFut<fidl_test_protocollayouts_imported::ImportTablePayload>;
    fn r#two_way_import(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
    ) -> Self::TwoWayImportResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<fidl_test_protocollayouts_imported::ImportTablePayload, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl_test_protocollayouts_imported::ImportTablePayload,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl_test_protocollayouts_imported::ImportUnionPayload,
            fidl_test_protocollayouts_imported::ImportTablePayload,
        >(
            payload,
            0x2bf680c8f0d40604,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type TwoWayImportWithErrorResponseFut =
        fidl::client::QueryResponseFut<MainProtocolTwoWayImportWithErrorResult>;
    fn r#two_way_import_with_error(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Self::TwoWayImportWithErrorResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<MainProtocolTwoWayImportWithErrorResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    fidl_test_protocollayouts_imported::ImportUnionPayload,
                    u32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl_test_protocollayouts_imported::ImportTablePayload,
            MainProtocolTwoWayImportWithErrorResult,
        >(
            payload,
            0x432093586084ff0a,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    fn r#one_way_local(&self, mut payload: &LocalTablePayload) -> Result<(), fidl::Error> {
        self.client.send::<LocalTablePayload>(
            payload,
            0x54759b55efd60f43,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    type TwoWayLocalResponseFut = fidl::client::QueryResponseFut<LocalTablePayload>;
    fn r#two_way_local(&self, mut payload: &LocalUnionPayload) -> Self::TwoWayLocalResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<LocalTablePayload, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<LocalTablePayload>(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<LocalUnionPayload, LocalTablePayload>(
            payload,
            0x6bbeeb18f39c539b,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type TwoWayLocalWithErrorResponseFut =
        fidl::client::QueryResponseFut<MainProtocolTwoWayLocalWithErrorResult>;
    fn r#two_way_local_with_error(
        &self,
        mut payload: &LocalTablePayload,
    ) -> Self::TwoWayLocalWithErrorResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<MainProtocolTwoWayLocalWithErrorResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<LocalUnionPayload, u32>,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client
            .send_query_and_decode::<LocalTablePayload, MainProtocolTwoWayLocalWithErrorResult>(
                payload,
                0x4dd8e7287c4c9b57,
                fidl::encoding::DynamicFlags::empty(),
                _decode,
            )
    }

    fn r#one_way_anon(
        &self,
        mut payload: &MainProtocolOneWayAnonRequest,
    ) -> Result<(), fidl::Error> {
        self.client.send::<MainProtocolOneWayAnonRequest>(
            payload,
            0x3a552f30c77c76ec,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    type TwoWayAnonResponseFut = fidl::client::QueryResponseFut<MainProtocolTwoWayAnonResponse>;
    fn r#two_way_anon(
        &self,
        mut payload: &MainProtocolTwoWayAnonRequest,
    ) -> Self::TwoWayAnonResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<MainProtocolTwoWayAnonResponse, fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<MainProtocolTwoWayAnonResponse>(_buf?)?;
            Ok(_response)
        }
        self.client
            .send_query_and_decode::<MainProtocolTwoWayAnonRequest, MainProtocolTwoWayAnonResponse>(
                payload,
                0x672eb5e71efdabcf,
                fidl::encoding::DynamicFlags::empty(),
                _decode,
            )
    }

    type TwoWayAnonWithErrorResponseFut =
        fidl::client::QueryResponseFut<MainProtocolTwoWayAnonWithErrorResult>;
    fn r#two_way_anon_with_error(
        &self,
        mut payload: &MainProtocolTwoWayAnonWithErrorRequest,
    ) -> Self::TwoWayAnonWithErrorResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<MainProtocolTwoWayAnonWithErrorResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<MainProtocolTwoWayAnonWithErrorResponse, u32>,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            MainProtocolTwoWayAnonWithErrorRequest,
            MainProtocolTwoWayAnonWithErrorResult,
        >(
            payload,
            0x6bd5fcf6f7b46df1,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct MainProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for MainProtocolEventStream {}

impl futures::stream::FusedStream for MainProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for MainProtocolEventStream {
    type Item = Result<MainProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(MainProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum MainProtocolEvent {
    OnAnonComposed {
        payload: fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest,
    },
    OnAnonComposedWithError {
        result: fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedWithErrorResult,
    },
    OnNamedComposed {
        payload: fidl_test_protocollayouts_imported::ImportUnionPayload,
    },
    OnNamedComposedWithError {
        result: fidl_test_protocollayouts_imported::ComposedProtocolOnNamedComposedWithErrorResult,
    },
    OnImport {
        payload: fidl_test_protocollayouts_imported::ImportUnionPayload,
    },
    OnImportWithError {
        result: MainProtocolOnImportWithErrorResult,
    },
    OnLocal {
        payload: LocalUnionPayload,
    },
    OnLocalWithError {
        result: MainProtocolOnLocalWithErrorResult,
    },
    OnAnon {
        payload: MainProtocolOnAnonRequest,
    },
    OnAnonWithError {
        result: MainProtocolOnAnonWithErrorResult,
    },
}

impl MainProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_anon_composed(
        self,
    ) -> Option<fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest> {
        if let MainProtocolEvent::OnAnonComposed { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_anon_composed_with_error(
        self,
    ) -> Option<fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedWithErrorResult>
    {
        if let MainProtocolEvent::OnAnonComposedWithError { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_named_composed(
        self,
    ) -> Option<fidl_test_protocollayouts_imported::ImportUnionPayload> {
        if let MainProtocolEvent::OnNamedComposed { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_named_composed_with_error(
        self,
    ) -> Option<fidl_test_protocollayouts_imported::ComposedProtocolOnNamedComposedWithErrorResult>
    {
        if let MainProtocolEvent::OnNamedComposedWithError { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_import(self) -> Option<fidl_test_protocollayouts_imported::ImportUnionPayload> {
        if let MainProtocolEvent::OnImport { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_import_with_error(self) -> Option<MainProtocolOnImportWithErrorResult> {
        if let MainProtocolEvent::OnImportWithError { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_local(self) -> Option<LocalUnionPayload> {
        if let MainProtocolEvent::OnLocal { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_local_with_error(self) -> Option<MainProtocolOnLocalWithErrorResult> {
        if let MainProtocolEvent::OnLocalWithError { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_anon(self) -> Option<MainProtocolOnAnonRequest> {
        if let MainProtocolEvent::OnAnon { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_on_anon_with_error(self) -> Option<MainProtocolOnAnonWithErrorResult> {
        if let MainProtocolEvent::OnAnonWithError { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`MainProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<MainProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x7fa8a0bf08128a0b => {
                let mut out = fidl::new_empty!(
                    fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest
                );
                fidl::encoding::Decoder::decode_into::<
                    fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest,
                >(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((MainProtocolEvent::OnAnonComposed { payload: out }))
            }
            0x9e24af9a2790a3b => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedWithErrorResponse, u32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedWithErrorResponse, u32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((MainProtocolEvent::OnAnonComposedWithError { result: out.map(|x| x) }))
            }
            0x5e68f92a5b28cdea => {
                let mut out =
                    fidl::new_empty!(fidl_test_protocollayouts_imported::ImportUnionPayload);
                fidl::encoding::Decoder::decode_into::<
                    fidl_test_protocollayouts_imported::ImportUnionPayload,
                >(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((MainProtocolEvent::OnNamedComposed { payload: out }))
            }
            0x67eb74dad2a05c0b => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl_test_protocollayouts_imported::ImportTablePayload, u32>);
                fidl::encoding::Decoder::decode_into::<
                    fidl::encoding::ResultType<
                        fidl_test_protocollayouts_imported::ImportTablePayload,
                        u32,
                    >,
                >(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((MainProtocolEvent::OnNamedComposedWithError { result: out.map(|x| x) }))
            }
            0x5b61e3156b09acd0 => {
                let mut out =
                    fidl::new_empty!(fidl_test_protocollayouts_imported::ImportUnionPayload);
                fidl::encoding::Decoder::decode_into::<
                    fidl_test_protocollayouts_imported::ImportUnionPayload,
                >(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((MainProtocolEvent::OnImport { payload: out }))
            }
            0xf988d72f8ee4fd7 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl_test_protocollayouts_imported::ImportTablePayload, u32>);
                fidl::encoding::Decoder::decode_into::<
                    fidl::encoding::ResultType<
                        fidl_test_protocollayouts_imported::ImportTablePayload,
                        u32,
                    >,
                >(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((MainProtocolEvent::OnImportWithError { result: out.map(|x| x) }))
            }
            0x3a46c48153f0437c => {
                let mut out = fidl::new_empty!(LocalUnionPayload);
                fidl::encoding::Decoder::decode_into::<LocalUnionPayload>(
                    &tx_header,
                    _body_bytes,
                    _handles,
                    &mut out,
                )?;
                Ok((MainProtocolEvent::OnLocal { payload: out }))
            }
            0x79ac5bbdc7114e24 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<LocalTablePayload, u32>);
                fidl::encoding::Decoder::decode_into::<
                    fidl::encoding::ResultType<LocalTablePayload, u32>,
                >(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((MainProtocolEvent::OnLocalWithError { result: out.map(|x| x) }))
            }
            0x64f7b1ec1ba0810b => {
                let mut out = fidl::new_empty!(MainProtocolOnAnonRequest);
                fidl::encoding::Decoder::decode_into::<MainProtocolOnAnonRequest>(
                    &tx_header,
                    _body_bytes,
                    _handles,
                    &mut out,
                )?;
                Ok((MainProtocolEvent::OnAnon { payload: out }))
            }
            0x32f63a6e25a83699 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<MainProtocolOnAnonWithErrorResponse, u32>);
                fidl::encoding::Decoder::decode_into::<
                    fidl::encoding::ResultType<MainProtocolOnAnonWithErrorResponse, u32>,
                >(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((MainProtocolEvent::OnAnonWithError { result: out.map(|x| x) }))
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <MainProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for MainProtocol
pub struct MainProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for MainProtocolRequestStream {}

impl futures::stream::FusedStream for MainProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for MainProtocolRequestStream {
    type Protocol = MainProtocolMarker;
    type ControlHandle = MainProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        MainProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for MainProtocolRequestStream {
    type Item = Result<MainProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled MainProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x67da05e1ae3f5e1 => {
                    let mut req = fidl::new_empty!(fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest);
                    fidl::encoding::Decoder::decode_into::<fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::OneWayAnonComposed { payload: req, control_handle })
                }
                0x16afa17ea70d3370 => {
                    let mut req = fidl::new_empty!(fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest);
                    fidl::encoding::Decoder::decode_into::<fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayAnonComposed {
                        payload: req,
                        responder: MainProtocolTwoWayAnonComposedResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x2ed33746b7bb119d => {
                    let mut req = fidl::new_empty!(fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest);
                    fidl::encoding::Decoder::decode_into::<fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayAnonComposedWithError {
                        payload: req,
                        responder: MainProtocolTwoWayAnonComposedWithErrorResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x5d78ce13958eee58 => {
                    let mut req =
                        fidl::new_empty!(fidl_test_protocollayouts_imported::ImportTablePayload);
                    fidl::encoding::Decoder::decode_into::<
                        fidl_test_protocollayouts_imported::ImportTablePayload,
                    >(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::OneWayNamedComposed { payload: req, control_handle })
                }
                0xf67f27cae663810 => {
                    let mut req =
                        fidl::new_empty!(fidl_test_protocollayouts_imported::ImportUnionPayload);
                    fidl::encoding::Decoder::decode_into::<
                        fidl_test_protocollayouts_imported::ImportUnionPayload,
                    >(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayNamedComposed {
                        payload: req,
                        responder: MainProtocolTwoWayNamedComposedResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x30dac4182813ef7f => {
                    let mut req =
                        fidl::new_empty!(fidl_test_protocollayouts_imported::ImportTablePayload);
                    fidl::encoding::Decoder::decode_into::<
                        fidl_test_protocollayouts_imported::ImportTablePayload,
                    >(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayNamedComposedWithError {
                        payload: req,
                        responder: MainProtocolTwoWayNamedComposedWithErrorResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x530db65f2691d3b => {
                    let mut req =
                        fidl::new_empty!(fidl_test_protocollayouts_imported::ImportTablePayload);
                    fidl::encoding::Decoder::decode_into::<
                        fidl_test_protocollayouts_imported::ImportTablePayload,
                    >(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::OneWayImport { payload: req, control_handle })
                }
                0x2bf680c8f0d40604 => {
                    let mut req =
                        fidl::new_empty!(fidl_test_protocollayouts_imported::ImportUnionPayload);
                    fidl::encoding::Decoder::decode_into::<
                        fidl_test_protocollayouts_imported::ImportUnionPayload,
                    >(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayImport {
                        payload: req,
                        responder: MainProtocolTwoWayImportResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x432093586084ff0a => {
                    let mut req =
                        fidl::new_empty!(fidl_test_protocollayouts_imported::ImportTablePayload);
                    fidl::encoding::Decoder::decode_into::<
                        fidl_test_protocollayouts_imported::ImportTablePayload,
                    >(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayImportWithError {
                        payload: req,
                        responder: MainProtocolTwoWayImportWithErrorResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x54759b55efd60f43 => {
                    let mut req = fidl::new_empty!(LocalTablePayload);
                    fidl::encoding::Decoder::decode_into::<LocalTablePayload>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::OneWayLocal { payload: req, control_handle })
                }
                0x6bbeeb18f39c539b => {
                    let mut req = fidl::new_empty!(LocalUnionPayload);
                    fidl::encoding::Decoder::decode_into::<LocalUnionPayload>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayLocal {
                        payload: req,
                        responder: MainProtocolTwoWayLocalResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x4dd8e7287c4c9b57 => {
                    let mut req = fidl::new_empty!(LocalTablePayload);
                    fidl::encoding::Decoder::decode_into::<LocalTablePayload>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayLocalWithError {
                        payload: req,
                        responder: MainProtocolTwoWayLocalWithErrorResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x3a552f30c77c76ec => {
                    let mut req = fidl::new_empty!(MainProtocolOneWayAnonRequest);
                    fidl::encoding::Decoder::decode_into::<MainProtocolOneWayAnonRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::OneWayAnon { payload: req, control_handle })
                }
                0x672eb5e71efdabcf => {
                    let mut req = fidl::new_empty!(MainProtocolTwoWayAnonRequest);
                    fidl::encoding::Decoder::decode_into::<MainProtocolTwoWayAnonRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayAnon {
                        payload: req,
                        responder: MainProtocolTwoWayAnonResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                0x6bd5fcf6f7b46df1 => {
                    let mut req = fidl::new_empty!(MainProtocolTwoWayAnonWithErrorRequest);
                    fidl::encoding::Decoder::decode_into::<MainProtocolTwoWayAnonWithErrorRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    let control_handle = MainProtocolControlHandle { inner: this.inner.clone() };

                    Ok(MainProtocolRequest::TwoWayAnonWithError {
                        payload: req,
                        responder: MainProtocolTwoWayAnonWithErrorResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <MainProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}

#[derive(Debug)]
pub enum MainProtocolRequest {
    OneWayAnonComposed {
        payload: fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest,
        control_handle: MainProtocolControlHandle,
    },
    TwoWayAnonComposed {
        payload: fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest,
        responder: MainProtocolTwoWayAnonComposedResponder,
    },
    TwoWayAnonComposedWithError {
        payload:
            fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest,
        responder: MainProtocolTwoWayAnonComposedWithErrorResponder,
    },
    OneWayNamedComposed {
        payload: fidl_test_protocollayouts_imported::ImportTablePayload,
        control_handle: MainProtocolControlHandle,
    },
    TwoWayNamedComposed {
        payload: fidl_test_protocollayouts_imported::ImportUnionPayload,
        responder: MainProtocolTwoWayNamedComposedResponder,
    },
    TwoWayNamedComposedWithError {
        payload: fidl_test_protocollayouts_imported::ImportTablePayload,
        responder: MainProtocolTwoWayNamedComposedWithErrorResponder,
    },
    OneWayImport {
        payload: fidl_test_protocollayouts_imported::ImportTablePayload,
        control_handle: MainProtocolControlHandle,
    },
    TwoWayImport {
        payload: fidl_test_protocollayouts_imported::ImportUnionPayload,
        responder: MainProtocolTwoWayImportResponder,
    },
    TwoWayImportWithError {
        payload: fidl_test_protocollayouts_imported::ImportTablePayload,
        responder: MainProtocolTwoWayImportWithErrorResponder,
    },
    OneWayLocal {
        payload: LocalTablePayload,
        control_handle: MainProtocolControlHandle,
    },
    TwoWayLocal {
        payload: LocalUnionPayload,
        responder: MainProtocolTwoWayLocalResponder,
    },
    TwoWayLocalWithError {
        payload: LocalTablePayload,
        responder: MainProtocolTwoWayLocalWithErrorResponder,
    },
    OneWayAnon {
        payload: MainProtocolOneWayAnonRequest,
        control_handle: MainProtocolControlHandle,
    },
    TwoWayAnon {
        payload: MainProtocolTwoWayAnonRequest,
        responder: MainProtocolTwoWayAnonResponder,
    },
    TwoWayAnonWithError {
        payload: MainProtocolTwoWayAnonWithErrorRequest,
        responder: MainProtocolTwoWayAnonWithErrorResponder,
    },
}

impl MainProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_one_way_anon_composed(
        self,
    ) -> Option<(
        fidl_test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest,
        MainProtocolControlHandle,
    )> {
        if let MainProtocolRequest::OneWayAnonComposed { payload, control_handle } = self {
            Some((payload, control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_anon_composed(
        self,
    ) -> Option<(
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest,
        MainProtocolTwoWayAnonComposedResponder,
    )> {
        if let MainProtocolRequest::TwoWayAnonComposed { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_anon_composed_with_error(
        self,
    ) -> Option<(
        fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorRequest,
        MainProtocolTwoWayAnonComposedWithErrorResponder,
    )> {
        if let MainProtocolRequest::TwoWayAnonComposedWithError { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_one_way_named_composed(
        self,
    ) -> Option<(fidl_test_protocollayouts_imported::ImportTablePayload, MainProtocolControlHandle)>
    {
        if let MainProtocolRequest::OneWayNamedComposed { payload, control_handle } = self {
            Some((payload, control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_named_composed(
        self,
    ) -> Option<(
        fidl_test_protocollayouts_imported::ImportUnionPayload,
        MainProtocolTwoWayNamedComposedResponder,
    )> {
        if let MainProtocolRequest::TwoWayNamedComposed { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_named_composed_with_error(
        self,
    ) -> Option<(
        fidl_test_protocollayouts_imported::ImportTablePayload,
        MainProtocolTwoWayNamedComposedWithErrorResponder,
    )> {
        if let MainProtocolRequest::TwoWayNamedComposedWithError { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_one_way_import(
        self,
    ) -> Option<(fidl_test_protocollayouts_imported::ImportTablePayload, MainProtocolControlHandle)>
    {
        if let MainProtocolRequest::OneWayImport { payload, control_handle } = self {
            Some((payload, control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_import(
        self,
    ) -> Option<(
        fidl_test_protocollayouts_imported::ImportUnionPayload,
        MainProtocolTwoWayImportResponder,
    )> {
        if let MainProtocolRequest::TwoWayImport { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_import_with_error(
        self,
    ) -> Option<(
        fidl_test_protocollayouts_imported::ImportTablePayload,
        MainProtocolTwoWayImportWithErrorResponder,
    )> {
        if let MainProtocolRequest::TwoWayImportWithError { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_one_way_local(self) -> Option<(LocalTablePayload, MainProtocolControlHandle)> {
        if let MainProtocolRequest::OneWayLocal { payload, control_handle } = self {
            Some((payload, control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_local(
        self,
    ) -> Option<(LocalUnionPayload, MainProtocolTwoWayLocalResponder)> {
        if let MainProtocolRequest::TwoWayLocal { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_local_with_error(
        self,
    ) -> Option<(LocalTablePayload, MainProtocolTwoWayLocalWithErrorResponder)> {
        if let MainProtocolRequest::TwoWayLocalWithError { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_one_way_anon(
        self,
    ) -> Option<(MainProtocolOneWayAnonRequest, MainProtocolControlHandle)> {
        if let MainProtocolRequest::OneWayAnon { payload, control_handle } = self {
            Some((payload, control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_anon(
        self,
    ) -> Option<(MainProtocolTwoWayAnonRequest, MainProtocolTwoWayAnonResponder)> {
        if let MainProtocolRequest::TwoWayAnon { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_two_way_anon_with_error(
        self,
    ) -> Option<(MainProtocolTwoWayAnonWithErrorRequest, MainProtocolTwoWayAnonWithErrorResponder)>
    {
        if let MainProtocolRequest::TwoWayAnonWithError { payload, responder } = self {
            Some((payload, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            MainProtocolRequest::OneWayAnonComposed { .. } => "one_way_anon_composed",
            MainProtocolRequest::TwoWayAnonComposed { .. } => "two_way_anon_composed",
            MainProtocolRequest::TwoWayAnonComposedWithError { .. } => {
                "two_way_anon_composed_with_error"
            }
            MainProtocolRequest::OneWayNamedComposed { .. } => "one_way_named_composed",
            MainProtocolRequest::TwoWayNamedComposed { .. } => "two_way_named_composed",
            MainProtocolRequest::TwoWayNamedComposedWithError { .. } => {
                "two_way_named_composed_with_error"
            }
            MainProtocolRequest::OneWayImport { .. } => "one_way_import",
            MainProtocolRequest::TwoWayImport { .. } => "two_way_import",
            MainProtocolRequest::TwoWayImportWithError { .. } => "two_way_import_with_error",
            MainProtocolRequest::OneWayLocal { .. } => "one_way_local",
            MainProtocolRequest::TwoWayLocal { .. } => "two_way_local",
            MainProtocolRequest::TwoWayLocalWithError { .. } => "two_way_local_with_error",
            MainProtocolRequest::OneWayAnon { .. } => "one_way_anon",
            MainProtocolRequest::TwoWayAnon { .. } => "two_way_anon",
            MainProtocolRequest::TwoWayAnonWithError { .. } => "two_way_anon_with_error",
        }
    }
}

#[derive(Debug, Clone)]
pub struct MainProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for MainProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl MainProtocolControlHandle {
    pub fn send_on_anon_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest,
    ) -> Result<(), fidl::Error> {
        self.inner
            .send::<fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest>(
                payload,
                0,
                0x7fa8a0bf08128a0b,
                fidl::encoding::DynamicFlags::empty(),
            )
    }

    pub fn send_on_anon_composed_with_error(
        &self,
        mut result: Result<
            &fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedWithErrorResponse,
            u32,
        >,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            fidl_test_protocollayouts_imported::ComposedProtocolOnAnonComposedWithErrorResponse,
            u32,
        >>(result, 0, 0x9e24af9a2790a3b, fidl::encoding::DynamicFlags::empty())
    }

    pub fn send_on_named_composed(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl_test_protocollayouts_imported::ImportUnionPayload>(
            payload,
            0,
            0x5e68f92a5b28cdea,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_on_named_composed_with_error(
        &self,
        mut result: Result<&fidl_test_protocollayouts_imported::ImportTablePayload, u32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            fidl_test_protocollayouts_imported::ImportTablePayload,
            u32,
        >>(result, 0, 0x67eb74dad2a05c0b, fidl::encoding::DynamicFlags::empty())
    }

    pub fn send_on_import(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportUnionPayload,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl_test_protocollayouts_imported::ImportUnionPayload>(
            payload,
            0,
            0x5b61e3156b09acd0,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_on_import_with_error(
        &self,
        mut result: Result<&fidl_test_protocollayouts_imported::ImportTablePayload, u32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            fidl_test_protocollayouts_imported::ImportTablePayload,
            u32,
        >>(result, 0, 0xf988d72f8ee4fd7, fidl::encoding::DynamicFlags::empty())
    }

    pub fn send_on_local(&self, mut payload: &LocalUnionPayload) -> Result<(), fidl::Error> {
        self.inner.send::<LocalUnionPayload>(
            payload,
            0,
            0x3a46c48153f0437c,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_on_local_with_error(
        &self,
        mut result: Result<&LocalTablePayload, u32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<LocalTablePayload, u32>>(
            result,
            0,
            0x79ac5bbdc7114e24,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_on_anon(&self, mut payload: &MainProtocolOnAnonRequest) -> Result<(), fidl::Error> {
        self.inner.send::<MainProtocolOnAnonRequest>(
            payload,
            0,
            0x64f7b1ec1ba0810b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_on_anon_with_error(
        &self,
        mut result: Result<&MainProtocolOnAnonWithErrorResponse, u32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<MainProtocolOnAnonWithErrorResponse, u32>>(
            result,
            0,
            0x32f63a6e25a83699,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayAnonComposedResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayAnonComposedResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayAnonComposedResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayAnonComposedResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayAnonComposedWithErrorResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayAnonComposedWithErrorResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayAnonComposedWithErrorResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayAnonComposedWithErrorResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResponse, u32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResponse, u32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResponse, u32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::ResultType<fidl_test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedWithErrorResponse, u32>>
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayNamedComposedResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayNamedComposedResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayNamedComposedResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayNamedComposedResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl_test_protocollayouts_imported::ImportTablePayload,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayNamedComposedWithErrorResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayNamedComposedWithErrorResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayNamedComposedWithErrorResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayNamedComposedWithErrorResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&fidl_test_protocollayouts_imported::ImportUnionPayload, u32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&fidl_test_protocollayouts_imported::ImportUnionPayload, u32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&fidl_test_protocollayouts_imported::ImportUnionPayload, u32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        fidl_test_protocollayouts_imported::ImportUnionPayload,
                        u32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayImportResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayImportResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayImportResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayImportResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &fidl_test_protocollayouts_imported::ImportTablePayload,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl_test_protocollayouts_imported::ImportTablePayload,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayImportWithErrorResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayImportWithErrorResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayImportWithErrorResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayImportWithErrorResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&fidl_test_protocollayouts_imported::ImportUnionPayload, u32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&fidl_test_protocollayouts_imported::ImportUnionPayload, u32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&fidl_test_protocollayouts_imported::ImportUnionPayload, u32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        fidl_test_protocollayouts_imported::ImportUnionPayload,
                        u32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayLocalResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayLocalResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayLocalResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayLocalResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut payload: &LocalTablePayload) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &LocalTablePayload,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut payload: &LocalTablePayload) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<LocalTablePayload>,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayLocalWithErrorResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayLocalWithErrorResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayLocalWithErrorResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayLocalWithErrorResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<&LocalUnionPayload, u32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&LocalUnionPayload, u32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<&LocalUnionPayload, u32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<LocalUnionPayload, u32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayAnonResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayAnonResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayAnonResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayAnonResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut payload: &MainProtocolTwoWayAnonResponse) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &MainProtocolTwoWayAnonResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut payload: &MainProtocolTwoWayAnonResponse) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<MainProtocolTwoWayAnonResponse>,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct MainProtocolTwoWayAnonWithErrorResponder {
    control_handle: std::mem::ManuallyDrop<MainProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`MainProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for MainProtocolTwoWayAnonWithErrorResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for MainProtocolTwoWayAnonWithErrorResponder {
    type ControlHandle = MainProtocolControlHandle;

    fn control_handle(&self) -> &MainProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl MainProtocolTwoWayAnonWithErrorResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&MainProtocolTwoWayAnonWithErrorResponse, u32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&MainProtocolTwoWayAnonWithErrorResponse, u32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&MainProtocolTwoWayAnonWithErrorResponse, u32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<MainProtocolTwoWayAnonWithErrorResponse, u32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

mod internal {
    #[allow(unused_imports)]
    use super::*;

    impl LocalTablePayload {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.a {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for LocalTablePayload {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for LocalTablePayload {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<LocalTablePayload> for &LocalTablePayload {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<LocalTablePayload>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<u16>(
                self.a.as_ref().map(<u16 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for LocalTablePayload {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <u16 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.a.get_or_insert_with(|| fidl::new_empty!(u16));
                fidl::decode!(u16, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl MainProtocolOneWayAnonRequest {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.a {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for MainProtocolOneWayAnonRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for MainProtocolOneWayAnonRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<MainProtocolOneWayAnonRequest>
        for &MainProtocolOneWayAnonRequest
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<MainProtocolOneWayAnonRequest>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<u16>(
                self.a.as_ref().map(<u16 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for MainProtocolOneWayAnonRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <u16 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.a.get_or_insert_with(|| fidl::new_empty!(u16));
                fidl::decode!(u16, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl MainProtocolTwoWayAnonResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.a {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for MainProtocolTwoWayAnonResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for MainProtocolTwoWayAnonResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<MainProtocolTwoWayAnonResponse>
        for &MainProtocolTwoWayAnonResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<MainProtocolTwoWayAnonResponse>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<u16>(
                self.a.as_ref().map(<u16 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for MainProtocolTwoWayAnonResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <u16 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.a.get_or_insert_with(|| fidl::new_empty!(u16));
                fidl::decode!(u16, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl MainProtocolTwoWayAnonWithErrorRequest {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.a {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for MainProtocolTwoWayAnonWithErrorRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for MainProtocolTwoWayAnonWithErrorRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<MainProtocolTwoWayAnonWithErrorRequest>
        for &MainProtocolTwoWayAnonWithErrorRequest
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<MainProtocolTwoWayAnonWithErrorRequest>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<u16>(
                self.a.as_ref().map(<u16 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for MainProtocolTwoWayAnonWithErrorRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <u16 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.a.get_or_insert_with(|| fidl::new_empty!(u16));
                fidl::decode!(u16, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl MainProtocolOnAnonWithErrorResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.a {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for MainProtocolOnAnonWithErrorResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for MainProtocolOnAnonWithErrorResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<MainProtocolOnAnonWithErrorResponse>
        for &MainProtocolOnAnonWithErrorResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<MainProtocolOnAnonWithErrorResponse>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<u16>(
                self.a.as_ref().map(<u16 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for MainProtocolOnAnonWithErrorResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <u16 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.a.get_or_insert_with(|| fidl::new_empty!(u16));
                fidl::decode!(u16, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for LocalUnionPayload {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for LocalUnionPayload {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<LocalUnionPayload> for &LocalUnionPayload {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<LocalUnionPayload>(offset);
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                LocalUnionPayload::B(ref val) => fidl::encoding::encode_in_envelope::<bool>(
                    <bool as fidl::encoding::ValueTypeMarker>::borrow(val),
                    encoder,
                    offset + 8,
                    _depth,
                ),
                #[allow(deprecated)]
                LocalUnionPayload::__Unknown { .. } => Err(fidl::Error::UnknownUnionTag),
            }
        }
    }

    impl fidl::encoding::Decode<Self> for LocalUnionPayload {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <bool as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let LocalUnionPayload::B(_) = self {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = LocalUnionPayload::B(fidl::new_empty!(bool));
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let LocalUnionPayload::B(ref mut val) = self {
                        fidl::decode!(bool, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = LocalUnionPayload::__Unknown { ordinal };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for MainProtocolOnAnonRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for MainProtocolOnAnonRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<MainProtocolOnAnonRequest> for &MainProtocolOnAnonRequest {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<MainProtocolOnAnonRequest>(offset);
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                MainProtocolOnAnonRequest::B(ref val) => {
                    fidl::encoding::encode_in_envelope::<bool>(
                        <bool as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                MainProtocolOnAnonRequest::__Unknown { .. } => Err(fidl::Error::UnknownUnionTag),
            }
        }
    }

    impl fidl::encoding::Decode<Self> for MainProtocolOnAnonRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <bool as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let MainProtocolOnAnonRequest::B(_) = self {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = MainProtocolOnAnonRequest::B(fidl::new_empty!(bool));
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let MainProtocolOnAnonRequest::B(ref mut val) = self {
                        fidl::decode!(bool, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = MainProtocolOnAnonRequest::__Unknown { ordinal };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for MainProtocolTwoWayAnonRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for MainProtocolTwoWayAnonRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<MainProtocolTwoWayAnonRequest>
        for &MainProtocolTwoWayAnonRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<MainProtocolTwoWayAnonRequest>(offset);
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                MainProtocolTwoWayAnonRequest::B(ref val) => {
                    fidl::encoding::encode_in_envelope::<bool>(
                        <bool as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                MainProtocolTwoWayAnonRequest::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for MainProtocolTwoWayAnonRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <bool as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let MainProtocolTwoWayAnonRequest::B(_) = self {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = MainProtocolTwoWayAnonRequest::B(fidl::new_empty!(bool));
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let MainProtocolTwoWayAnonRequest::B(ref mut val) = self {
                        fidl::decode!(bool, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = MainProtocolTwoWayAnonRequest::__Unknown { ordinal };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for MainProtocolTwoWayAnonWithErrorResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for MainProtocolTwoWayAnonWithErrorResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<MainProtocolTwoWayAnonWithErrorResponse>
        for &MainProtocolTwoWayAnonWithErrorResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<MainProtocolTwoWayAnonWithErrorResponse>(offset);
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                MainProtocolTwoWayAnonWithErrorResponse::B(ref val) => {
                    fidl::encoding::encode_in_envelope::<bool>(
                        <bool as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                MainProtocolTwoWayAnonWithErrorResponse::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for MainProtocolTwoWayAnonWithErrorResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <bool as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let MainProtocolTwoWayAnonWithErrorResponse::B(_) = self {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = MainProtocolTwoWayAnonWithErrorResponse::B(fidl::new_empty!(bool));
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let MainProtocolTwoWayAnonWithErrorResponse::B(ref mut val) = self {
                        fidl::decode!(bool, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = MainProtocolTwoWayAnonWithErrorResponse::__Unknown { ordinal };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }
}
