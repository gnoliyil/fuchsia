// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        encoding::zerocopy,
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_enum, fidl_struct, fidl_table, fidl_union,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

const _FIDL_TRACE_BINDINGS_RUST: u32 = 6;
bitflags! {
    pub struct BitsMember: u32 {
        const BIT_ONE = 1;
        const BIT_TWO = 2;
    }
}

impl BitsMember {
    #[inline(always)]
    pub fn from_bits_allow_unknown(bits: u32) -> Self {
        unsafe { Self::from_bits_unchecked(bits) }
    }

    #[inline(always)]
    pub fn has_unknown_bits(&self) -> bool {
        self.get_unknown_bits() != 0
    }

    #[inline(always)]
    pub fn get_unknown_bits(&self) -> u32 {
        self.bits & !Self::all().bits
    }
}

fidl_bits! {
    name: BitsMember,
    prim_ty: u32,
    flexible: true,
}

bitflags! {
    pub struct Flags: u16 {
        const INLINE = 1;
    }
}

impl Flags {
    #[inline(always)]
    pub fn from_bits_allow_unknown(bits: u16) -> Self {
        unsafe { Self::from_bits_unchecked(bits) }
    }

    #[inline(always)]
    pub fn has_unknown_bits(&self) -> bool {
        self.get_unknown_bits() != 0
    }

    #[inline(always)]
    pub fn get_unknown_bits(&self) -> u16 {
        self.bits & !Self::all().bits
    }
}

fidl_bits! {
    name: Flags,
    prim_ty: u16,
    flexible: true,
}

#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[non_exhaustive]
pub enum Op {
    Add,
    Mul,
    Div,
    #[deprecated = "Use `Op::unknown()` to construct and `OpUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    __Unknown(u32),
}
/// Pattern that matches an unknown `Op` member.
#[macro_export]
macro_rules! OpUnknown {
    () => {
        _
    };
}

impl Op {
    #[inline]
    pub fn from_primitive(prim: u32) -> Option<Self> {
        match prim {
            1 => Some(Self::Add),
            2 => Some(Self::Mul),
            3 => Some(Self::Div),
            _ => None,
        }
    }

    #[inline]
    pub fn from_primitive_allow_unknown(prim: u32) -> Self {
        match prim {
            1 => Self::Add,
            2 => Self::Mul,
            3 => Self::Div,
            #[allow(deprecated)]
            x => Self::__Unknown(x),
        }
    }

    #[inline]
    pub fn unknown() -> Self {
        #[allow(deprecated)]
        Self::__Unknown(0xffffffff)
    }

    #[inline]
    pub const fn into_primitive(self) -> u32 {
        match self {
            Self::Add => 1,
            Self::Mul => 2,
            Self::Div => 3,
            #[allow(deprecated)]
            Self::__Unknown(x) => x,
        }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown(_) => true,
            _ => false,
        }
    }
}

fidl_enum! {
    name: Op,
    prim_ty: u32,
    flexible: true,
}

#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[non_exhaustive]
pub enum SomeProtocolSomeMethodError {
    ErrorOne,
    ErrorTwo,
    #[deprecated = "Use `SomeProtocolSomeMethodError::unknown()` to construct and `SomeProtocolSomeMethodErrorUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    __Unknown(u32),
}
/// Pattern that matches an unknown `SomeProtocolSomeMethodError` member.
#[macro_export]
macro_rules! SomeProtocolSomeMethodErrorUnknown {
    () => {
        _
    };
}

impl SomeProtocolSomeMethodError {
    #[inline]
    pub fn from_primitive(prim: u32) -> Option<Self> {
        match prim {
            1 => Some(Self::ErrorOne),
            2 => Some(Self::ErrorTwo),
            _ => None,
        }
    }

    #[inline]
    pub fn from_primitive_allow_unknown(prim: u32) -> Self {
        match prim {
            1 => Self::ErrorOne,
            2 => Self::ErrorTwo,
            #[allow(deprecated)]
            x => Self::__Unknown(x),
        }
    }

    #[inline]
    pub fn unknown() -> Self {
        #[allow(deprecated)]
        Self::__Unknown(0xffffffff)
    }

    #[inline]
    pub const fn into_primitive(self) -> u32 {
        match self {
            Self::ErrorOne => 1,
            Self::ErrorTwo => 2,
            #[allow(deprecated)]
            Self::__Unknown(x) => x,
        }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown(_) => true,
            _ => false,
        }
    }
}

fidl_enum! {
    name: SomeProtocolSomeMethodError,
    prim_ty: u32,
    flexible: true,
}

#[derive(Debug, Clone)]
pub enum Expression {
    Value(u64),
    BinOp(OverrideTest),
    FunctionApplication(FunctionApplication),
    #[deprecated = "Use `Expression::unknown()` to construct and `ExpressionUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `Expression` member.
#[macro_export]
macro_rules! ExpressionUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for Expression {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::Value(x), Self::Value(y)) => *x == *y,
            (Self::BinOp(x), Self::BinOp(y)) => *x == *y,
            (Self::FunctionApplication(x), Self::FunctionApplication(y)) => *x == *y,
            _ => false,
        }
    }
}

impl Expression {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::Value(_) => 1,
            Self::BinOp(_) => 2,
            Self::FunctionApplication(_) => 3,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::encoding::Persistable for Expression {}

fidl_union! {
    name: Expression,
    members: [
        Value {
            ty: u64,
            ordinal: 1,
        },
        BinOp {
            ty: OverrideTest,
            ordinal: 2,
        },
        FunctionApplication {
            ty: FunctionApplication,
            ordinal: 3,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnionMember {
    UnionData(u8),
    #[deprecated = "Use `UnionMember::unknown()` to construct and `UnionMemberUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnionMember` member.
#[macro_export]
macro_rules! UnionMemberUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnionMember {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::UnionData(x), Self::UnionData(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnionMember {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::UnionData(_) => 2,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::encoding::Persistable for UnionMember {}

fidl_union! {
    name: UnionMember,
    members: [
        UnionData {
            ty: u8,
            ordinal: 2,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub struct OverrideTest {
    pub op: Op,
    pub left: Option<Box<Expression>>,
    pub right: Option<Box<Expression>>,
}
impl fidl::encoding::Persistable for OverrideTest {}

fidl_struct! {
    name: OverrideTest,
    members: [
        op {
            ty: Op,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        left {
            ty: fidl::encoding::OptionalUnion<Expression>,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
        right {
            ty: fidl::encoding::OptionalUnion<Expression>,
            index: 2,
            typevar: T2,
            offset_v1: 32,
            offset_v2: 24,
        },
    ],
    padding_v1: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
    ],
    padding_v2: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
    ],
    size_v1: 56,
    size_v2: 40,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Clone, PartialEq)]
pub struct SomeProtocolSomeMethodRequest {
    pub union_member: UnionMember,
    pub table_member: TableMember,
}
impl fidl::encoding::Persistable for SomeProtocolSomeMethodRequest {}

fidl_struct! {
    name: SomeProtocolSomeMethodRequest,
    members: [
        union_member {
            ty: UnionMember,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        table_member {
            ty: TableMember,
            index: 1,
            typevar: T1,
            offset_v1: 24,
            offset_v2: 16,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 40,
    size_v2: 32,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SomeProtocolSomeMethodResponse {
    pub bits_member: BitsMember,
}
impl fidl::encoding::Persistable for SomeProtocolSomeMethodResponse {}

fidl_struct! {
    name: SomeProtocolSomeMethodResponse,
    members: [
        bits_member {
            ty: BitsMember,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct TableData {
    pub data: u8,
}
impl fidl::encoding::Persistable for TableData {}

fidl_struct! {
    copy: true,
    name: TableData,
    members: [
        data {
            ty: u8,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 1,
    size_v2: 1,
    align_v1: 1,
    align_v2: 1,
}

#[derive(Debug, Clone, PartialEq)]
pub struct FunctionApplication {
    pub func: Option<String>,
    pub args: Option<Vec<Option<Box<Expression>>>>,
    pub flags: Option<Flags>,
    #[deprecated = "Use `..FunctionApplication::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl FunctionApplication {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { func: None, args: None, flags: None, __non_exhaustive: () };
}
impl fidl::encoding::Persistable for FunctionApplication {}

fidl_table! {
    name: FunctionApplication,
    members: [
        func {
            ty: fidl::encoding::BoundedString<100>,
            ordinal: 1,
        },
        args {
            ty: fidl::encoding::Vector<fidl::encoding::OptionalUnion<Expression>, 5>,
            ordinal: 3,
        },
        flags {
            ty: Flags,
            ordinal: 4,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct TableMember {
    pub table_data: Option<Vec<TableData>>,
    #[deprecated = "Use `..TableMember::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl TableMember {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { table_data: None, __non_exhaustive: () };
}
impl fidl::encoding::Persistable for TableMember {}

fidl_table! {
    name: TableMember,
    members: [
        table_data {
            ty: fidl::encoding::Vector<TableData, 10>,
            ordinal: 2,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SomeProtocolMarker;

impl fidl::endpoints::ProtocolMarker for SomeProtocolMarker {
    type Proxy = SomeProtocolProxy;
    type RequestStream = SomeProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) SomeProtocol";
}
pub type SomeProtocolSomeMethodResult = Result<BitsMember, SomeProtocolSomeMethodError>;

pub trait SomeProtocolProxyInterface: Send + Sync {
    type SomeMethodResponseFut: std::future::Future<Output = Result<SomeProtocolSomeMethodResult, fidl::Error>>
        + Send;
    fn r#some_method(
        &self,
        union_member: &mut UnionMember,
        table_member: TableMember,
    ) -> Self::SomeMethodResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct SomeProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl SomeProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <SomeProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: zx::Time) -> Result<SomeProtocolEvent, fidl::Error> {
        SomeProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#some_method(
        &self,
        mut union_member: &mut UnionMember,
        mut table_member: TableMember,
        ___deadline: zx::Time,
    ) -> Result<SomeProtocolSomeMethodResult, fidl::Error> {
        let _response =
            self.client.send_query::<SomeProtocolSomeMethodRequest, fidl::encoding::ResultType<
                SomeProtocolSomeMethodResponse,
                SomeProtocolSomeMethodError,
            >, false, false>(
                (&*union_member, &table_member),
                0x22ea52ec7a5146d8,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x.bits_member))
    }
}

#[derive(Debug, Clone)]
pub struct SomeProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for SomeProtocolProxy {
    type Protocol = SomeProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl SomeProtocolProxy {
    /// Create a new Proxy for SomeProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <SomeProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the SomeProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> SomeProtocolEventStream {
        SomeProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#some_method(
        &self,
        mut union_member: &mut UnionMember,
        mut table_member: TableMember,
    ) -> fidl::client::QueryResponseFut<SomeProtocolSomeMethodResult> {
        SomeProtocolProxyInterface::r#some_method(self, union_member, table_member)
    }
}

impl SomeProtocolProxyInterface for SomeProtocolProxy {
    type SomeMethodResponseFut = fidl::client::QueryResponseFut<SomeProtocolSomeMethodResult>;
    fn r#some_method(
        &self,
        mut union_member: &mut UnionMember,
        mut table_member: TableMember,
    ) -> Self::SomeMethodResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<SomeProtocolSomeMethodResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    SomeProtocolSomeMethodResponse,
                    SomeProtocolSomeMethodError,
                >,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x.bits_member))
        }
        self.client.send_query_and_decode::<
            SomeProtocolSomeMethodRequest,
            SomeProtocolSomeMethodResult,
            false,
        >(
            (&*union_member, &table_member,),
            0x22ea52ec7a5146d8,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct SomeProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for SomeProtocolEventStream {}

impl futures::stream::FusedStream for SomeProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for SomeProtocolEventStream {
    type Item = Result<SomeProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(SomeProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum SomeProtocolEvent {}

impl SomeProtocolEvent {
    /// Decodes a message buffer as a [`SomeProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(mut buf: fidl::MessageBufEtc) -> Result<SomeProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <SomeProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for SomeProtocol
pub struct SomeProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for SomeProtocolRequestStream {}

impl futures::stream::FusedStream for SomeProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for SomeProtocolRequestStream {
    type Protocol = SomeProtocolMarker;
    type ControlHandle = SomeProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        SomeProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for SomeProtocolRequestStream {
    type Item = Result<SomeProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled SomeProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x22ea52ec7a5146d8 => {
                    let mut req = fidl::new_empty!(SomeProtocolSomeMethodRequest);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.anonymous/SomeProtocolSomeMethodRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::maybe_overflowing_decode::<SomeProtocolSomeMethodRequest>(
                        &header,
                        _body_bytes,
                        handles,
                        &mut req,
                    )?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = SomeProtocolControlHandle { inner: this.inner.clone() };

                    Ok(SomeProtocolRequest::SomeMethod {
                        union_member: req.union_member,
                        table_member: req.table_member,

                        responder: SomeProtocolSomeMethodResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id(),
                            ordinal: header.ordinal(),
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name:
                        <SomeProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum SomeProtocolRequest {
    SomeMethod {
        union_member: UnionMember,
        table_member: TableMember,
        responder: SomeProtocolSomeMethodResponder,
    },
}

impl SomeProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_some_method(
        self,
    ) -> Option<(UnionMember, TableMember, SomeProtocolSomeMethodResponder)> {
        if let SomeProtocolRequest::SomeMethod { union_member, table_member, responder } = self {
            Some((union_member, table_member, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            SomeProtocolRequest::SomeMethod { .. } => "some_method",
        }
    }
}

#[derive(Debug, Clone)]
pub struct SomeProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for SomeProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl SomeProtocolControlHandle {}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct SomeProtocolSomeMethodResponder {
    control_handle: std::mem::ManuallyDrop<SomeProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`SomeProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for SomeProtocolSomeMethodResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for SomeProtocolSomeMethodResponder {
    type ControlHandle = SomeProtocolControlHandle;

    fn control_handle(&self) -> &SomeProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl SomeProtocolSomeMethodResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: &mut SomeProtocolSomeMethodResult) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut SomeProtocolSomeMethodResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: &mut SomeProtocolSomeMethodResult) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_mut().map_err(|e| *e).map(|bits_member| (*bits_member,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.anonymous/SomeProtocolSomeMethodResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        SomeProtocolSomeMethodResponse,
                        SomeProtocolSomeMethodError,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
