// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        encoding::zerocopy,
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_enum, fidl_struct, fidl_table, fidl_union,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub enum UnionSize12Alignment4 {
    Variant([u8; 6]),
}

impl UnionSize12Alignment4 {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::Variant(_) => 1,
        }
    }
    #[deprecated = "Strict unions should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}
impl fidl::Persistable for UnionSize12Alignment4 {}

fidl_union! {
    name: UnionSize12Alignment4,
    members: [
        Variant {
            ty: fidl::encoding::Array<u8, 6>,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub enum UnionSize24Alignment8 {
    Variant(StructSize16Alignment8),
}

impl UnionSize24Alignment8 {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::Variant(_) => 1,
        }
    }
    #[deprecated = "Strict unions should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}
impl fidl::Persistable for UnionSize24Alignment8 {}

fidl_union! {
    name: UnionSize24Alignment8,
    members: [
        Variant {
            ty: StructSize16Alignment8,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub enum UnionSize36Alignment4 {
    Variant([u8; 32]),
}

impl UnionSize36Alignment4 {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::Variant(_) => 1,
        }
    }
    #[deprecated = "Strict unions should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}
impl fidl::Persistable for UnionSize36Alignment4 {}

fidl_union! {
    name: UnionSize36Alignment4,
    members: [
        Variant {
            ty: fidl::encoding::Array<u8, 32>,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub enum UnionSize8Alignment4 {
    Variant(u32),
}

impl UnionSize8Alignment4 {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::Variant(_) => 1,
        }
    }
    #[deprecated = "Strict unions should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}
impl fidl::Persistable for UnionSize8Alignment4 {}

fidl_union! {
    name: UnionSize8Alignment4,
    members: [
        Variant {
            ty: u32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SandwichUnionSize12Alignment4 {
    pub before: u32,
    pub union: UnionSize12Alignment4,
    pub after: i32,
}
impl fidl::Persistable for SandwichUnionSize12Alignment4 {}

fidl_struct! {
    name: SandwichUnionSize12Alignment4,
    members: [
        before {
            ty: u32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        union {
            ty: UnionSize12Alignment4,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
        after {
            ty: i32,
            index: 2,
            typevar: T2,
            offset_v1: 32,
            offset_v2: 24,
        },
    ],
    padding_v1: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 32,
            mask: 0xffffffff00000000u64,
        },
    ],
    padding_v2: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 24,
            mask: 0xffffffff00000000u64,
        },
    ],
    size_v1: 40,
    size_v2: 32,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SandwichUnionSize24Alignment8 {
    pub before: u32,
    pub union: UnionSize24Alignment8,
    pub after: u32,
}
impl fidl::Persistable for SandwichUnionSize24Alignment8 {}

fidl_struct! {
    name: SandwichUnionSize24Alignment8,
    members: [
        before {
            ty: u32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        union {
            ty: UnionSize24Alignment8,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
        after {
            ty: u32,
            index: 2,
            typevar: T2,
            offset_v1: 32,
            offset_v2: 24,
        },
    ],
    padding_v1: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 32,
            mask: 0xffffffff00000000u64,
        },
    ],
    padding_v2: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 24,
            mask: 0xffffffff00000000u64,
        },
    ],
    size_v1: 40,
    size_v2: 32,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SandwichUnionSize36Alignment4 {
    pub before: u32,
    pub union: UnionSize36Alignment4,
    pub after: u32,
}
impl fidl::Persistable for SandwichUnionSize36Alignment4 {}

fidl_struct! {
    name: SandwichUnionSize36Alignment4,
    members: [
        before {
            ty: u32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        union {
            ty: UnionSize36Alignment4,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
        after {
            ty: u32,
            index: 2,
            typevar: T2,
            offset_v1: 32,
            offset_v2: 24,
        },
    ],
    padding_v1: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 32,
            mask: 0xffffffff00000000u64,
        },
    ],
    padding_v2: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 24,
            mask: 0xffffffff00000000u64,
        },
    ],
    size_v1: 40,
    size_v2: 32,
    align_v1: 8,
    align_v2: 8,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SandwichUnionSize8Alignment4 {
    pub before: u32,
    pub union: UnionSize8Alignment4,
    pub after: u32,
}
impl fidl::Persistable for SandwichUnionSize8Alignment4 {}

fidl_struct! {
    name: SandwichUnionSize8Alignment4,
    members: [
        before {
            ty: u32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        union {
            ty: UnionSize8Alignment4,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
        after {
            ty: u32,
            index: 2,
            typevar: T2,
            offset_v1: 32,
            offset_v2: 24,
        },
    ],
    padding_v1: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 32,
            mask: 0xffffffff00000000u64,
        },
    ],
    padding_v2: [
        {
            ty: u64,
            offset: 0,
            mask: 0xffffffff00000000u64,
        },
        {
            ty: u64,
            offset: 24,
            mask: 0xffffffff00000000u64,
        },
    ],
    size_v1: 40,
    size_v2: 32,
    align_v1: 8,
    align_v2: 8,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct StructSize16Alignment8 {
    pub f1: u64,
    pub f2: u64,
}
impl fidl::Persistable for StructSize16Alignment8 {}

fidl_struct! {
    copy: true,
    name: StructSize16Alignment8,
    members: [
        f1 {
            ty: u64,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
        f2 {
            ty: u64,
            index: 1,
            typevar: T1,
            offset_v1: 8,
            offset_v2: 8,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 16,
    size_v2: 16,
    align_v1: 8,
    align_v2: 8,
}
