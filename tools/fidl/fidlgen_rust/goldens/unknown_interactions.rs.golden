// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_new_defaults

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        encoding::zerocopy,
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_enum, fidl_struct, fidl_table, fidl_union,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

const _FIDL_TRACE_BINDINGS_RUST: u32 = 6;

#[derive(Debug, Clone)]
pub enum UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::unknown()` to construct and `UnknownInteractionsAjarProtocolFlexibleEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolFlexibleEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolFlexibleEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolFlexibleEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsAjarProtocolStrictEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictEventUnionRequest::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolStrictEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolStrictEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolStrictEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolStrictEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsClosedProtocolStrictEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictEventUnionRequest::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsClosedProtocolStrictEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsClosedProtocolStrictEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsClosedProtocolStrictEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsClosedProtocolStrictEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsProtocolFlexibleEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleEventUnionRequest::unknown()` to construct and `UnknownInteractionsProtocolFlexibleEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolFlexibleEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolFlexibleEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsProtocolFlexibleEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsProtocolStrictEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictEventUnionRequest::unknown()` to construct and `UnknownInteractionsProtocolStrictEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolStrictEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolStrictEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsProtocolStrictEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolStrictTwoWayUnionResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolFlexibleEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolFlexibleEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsProtocolFlexibleTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsProtocolStrictEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolStrictEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolStrictEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolStrictEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolStrictEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone)]
pub enum UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolStrictTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolStrictEventFieldsRequest {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventFieldsRequest {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsAjarProtocolStrictEventFieldsRequest,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsClosedProtocolStrictEventFieldsRequest {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventFieldsRequest {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsClosedProtocolStrictEventFieldsRequest,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsProtocolFlexibleEventFieldsRequest {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventFieldsRequest {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsProtocolFlexibleEventFieldsRequest,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsProtocolStrictEventFieldsRequest {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictEventFieldsRequest {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsProtocolStrictEventFieldsRequest,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayFieldsResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsProtocolStrictTwoWayFieldsResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsProtocolFlexibleEventFieldsErrResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventFieldsErrResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsProtocolFlexibleEventFieldsErrResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsProtocolStrictEventFieldsErrResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictEventFieldsErrResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsProtocolStrictEventFieldsErrResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, zerocopy::AsBytes, zerocopy::FromBytes,
)]
#[repr(C)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse {
    pub some_field: i32,
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse {}

fidl_struct! {
    copy: true,
    name: UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse,
    members: [
        some_field {
            ty: i32,
            index: 0,
            typevar: T0,
            offset_v1: 0,
            offset_v2: 0,
        },
    ],
    padding_v1: [
    ],
    padding_v2: [
    ],
    size_v1: 4,
    size_v2: 4,
    align_v1: 4,
    align_v2: 4,
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolFlexibleEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolStrictEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolStrictEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsClosedProtocolStrictEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsClosedProtocolStrictEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsProtocolFlexibleEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsProtocolStrictEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsProtocolStrictEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolStrictTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolFlexibleEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsProtocolStrictEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolStrictEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, Default, PartialEq)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}
impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolStrictTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnknownInteractionsAjarProtocolMarker;

impl fidl::endpoints::ProtocolMarker for UnknownInteractionsAjarProtocolMarker {
    type Proxy = UnknownInteractionsAjarProtocolProxy;
    type RequestStream = UnknownInteractionsAjarProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) UnknownInteractionsAjarProtocol";
}
pub type UnknownInteractionsAjarProtocolStrictTwoWayErrResult = Result<(), i32>;
pub type UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult =
    Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult =
    Result<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolStrictEventErrResult = Result<(), i32>;
pub type UnknownInteractionsAjarProtocolStrictEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsAjarProtocolStrictEventUnionErrResult =
    Result<UnknownInteractionsAjarProtocolStrictEventUnionErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolStrictEventTableErrResult =
    Result<UnknownInteractionsAjarProtocolStrictEventTableErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolFlexibleEventErrResult = Result<(), i32>;
pub type UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult =
    Result<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolFlexibleEventTableErrResult =
    Result<UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse, i32>;

pub trait UnknownInteractionsAjarProtocolProxyInterface: Send + Sync {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error>;
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error>;
    type StrictTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut;
    type StrictTwoWayFieldsResponseFut: std::future::Future<Output = Result<i32, fidl::Error>>
        + Send;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut;
    type StrictTwoWayUnionResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse, fidl::Error>,
        > + Send;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut;
    type StrictTwoWayTableResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse, fidl::Error>,
        > + Send;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut;
    type StrictTwoWayErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut;
    type StrictTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut;
    type StrictTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut;
    type StrictTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct UnknownInteractionsAjarProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl UnknownInteractionsAjarProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolEvent, fidl::Error> {
        UnknownInteractionsAjarProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0xd4663d6b2b5048b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x2275b8171ae4834f,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn r#strict_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::EmptyPayload, false, false>(
                (),
                0x50e66d328336038,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }
    pub fn r#strict_two_way_fields(&self, ___deadline: zx::Time) -> Result<i32, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse,false,false>(
                (),
                0x1947e36d61e4493a,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.some_field)
    }
    pub fn r#strict_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,false,true>(
                (),
                0x5177371967e0e6d1,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response)
    }
    pub fn r#strict_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,false,true>(
                (),
                0x6f8f9343b34e2ed4,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response)
    }
    pub fn r#strict_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayErrResult, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,false,false>(
                (),
                0x5b47637577c69006,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.map(|x| x))
    }
    pub fn r#strict_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult, fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse,
                i32,
            >, false, false>(
                (),
                0x844ff7bb3f186d9,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x.some_field))
    }
    pub fn r#strict_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult, fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse,
                i32,
            >, false, true>(
                (),
                0x2cbfd5a859d4ac95,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x))
    }
    pub fn r#strict_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult, fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse,
                i32,
            >, false, true>(
                (),
                0x30c9e1b3da57dc37,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x))
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsAjarProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for UnknownInteractionsAjarProtocolProxy {
    type Protocol = UnknownInteractionsAjarProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl UnknownInteractionsAjarProtocolProxy {
    /// Create a new Proxy for UnknownInteractionsAjarProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the UnknownInteractionsAjarProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> UnknownInteractionsAjarProtocolEventStream {
        UnknownInteractionsAjarProtocolEventStream {
            event_receiver: self.client.take_event_receiver(),
        }
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_one_way(self)
    }
    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsAjarProtocolProxyInterface::r#flexible_one_way(self)
    }
    pub fn r#strict_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way(self)
    }
    pub fn r#strict_two_way_fields(&self) -> fidl::client::QueryResponseFut<i32> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_fields(self)
    }
    pub fn r#strict_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_union(self)
    }
    pub fn r#strict_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_table(self)
    }
    pub fn r#strict_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayErrResult> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_err(self)
    }
    pub fn r#strict_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_fields_err(self)
    }
    pub fn r#strict_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_union_err(self)
    }
    pub fn r#strict_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_table_err(self)
    }
}

impl UnknownInteractionsAjarProtocolProxyInterface for UnknownInteractionsAjarProtocolProxy {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0xd4663d6b2b5048b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x2275b8171ae4834f,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    type StrictTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::EmptyPayload,
                false,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, (), false>(
            (),
            0x50e66d328336038,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<i32>;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i32, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse,
                false,
            >(_buf?)?;
            Ok(_response.some_field)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, i32, false>(
            (),
            0x1947e36d61e4493a,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse>;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
                true,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
            false,
        >(
            (),
            0x5177371967e0e6d1,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse>;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
                true,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
            false,
        >(
            (),
            0x6f8f9343b34e2ed4,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayErrResult>;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayErrResult,
            false,
        >(
            (),
            0x5b47637577c69006,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayFieldsErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult>;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse,
                    i32,
                >,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x.some_field))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
            false,
        >(
            (),
            0x844ff7bb3f186d9,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult>;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse,
                    i32,
                >,
                true,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult,
            false,
        >(
            (),
            0x2cbfd5a859d4ac95,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult>;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse,
                    i32,
                >,
                true,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult,
            false,
        >(
            (),
            0x30c9e1b3da57dc37,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct UnknownInteractionsAjarProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for UnknownInteractionsAjarProtocolEventStream {}

impl futures::stream::FusedStream for UnknownInteractionsAjarProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for UnknownInteractionsAjarProtocolEventStream {
    type Item = Result<UnknownInteractionsAjarProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(UnknownInteractionsAjarProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsAjarProtocolEvent {
    StrictEvent {},
    StrictEventFields {
        some_field: i32,
    },
    StrictEventUnion {
        payload: UnknownInteractionsAjarProtocolStrictEventUnionRequest,
    },
    StrictEventTable {
        payload: UnknownInteractionsAjarProtocolStrictEventTableRequest,
    },
    StrictEventErr {
        result: UnknownInteractionsAjarProtocolStrictEventErrResult,
    },
    StrictEventFieldsErr {
        result: UnknownInteractionsAjarProtocolStrictEventFieldsErrResult,
    },
    StrictEventUnionErr {
        result: UnknownInteractionsAjarProtocolStrictEventUnionErrResult,
    },
    StrictEventTableErr {
        result: UnknownInteractionsAjarProtocolStrictEventTableErrResult,
    },
    FlexibleEvent {},
    FlexibleEventFields {
        some_field: i32,
    },
    FlexibleEventUnion {
        payload: UnknownInteractionsAjarProtocolFlexibleEventUnionRequest,
    },
    FlexibleEventTable {
        payload: UnknownInteractionsAjarProtocolFlexibleEventTableRequest,
    },
    FlexibleEventErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventErrResult,
    },
    FlexibleEventFieldsErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult,
    },
    FlexibleEventUnionErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult,
    },
    FlexibleEventTableErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventTableErrResult,
    },
    #[non_exhaustive]
    _UnknownEvent {
        /// Ordinal of the event that was sent.
        ordinal: u64,
    },
}

impl UnknownInteractionsAjarProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event(self) -> Option<()> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventUnionRequest> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventTableRequest> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventFieldsErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventUnionErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventTableErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event(self) -> Option<()> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventUnionRequest> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventTableRequest> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventTableErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`UnknownInteractionsAjarProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<UnknownInteractionsAjarProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x6022ae999e9dc2b0 => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEvent {
                    }
                ))
            }
            0x510586752445c769 => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolStrictEventFieldsRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsAjarProtocolStrictEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x57794b4cc91f816f => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolStrictEventUnionRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsAjarProtocolStrictEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventUnion {payload: out,
                    }
                ))
            }
            0x92639249201f89d => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolStrictEventTableRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsAjarProtocolStrictEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventTable {payload: out,
                    }
                ))
            }
            0x715bfcab27f735ed => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0x3ae22659224effb9 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0xab5b2d1199942b => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventUnionErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x6c6abc426c7c8406 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventTableErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            0x11c9ba570ce71df3 => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEvent {
                    }
                ))
            }
            0x3ba8fd32bf87d862 => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x7c3823f47ce0fcad => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolFlexibleEventUnionRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsAjarProtocolFlexibleEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventUnion {payload: out,
                    }
                ))
            }
            0x9ca944d1d6436b0 => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolFlexibleEventTableRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsAjarProtocolFlexibleEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventTable {payload: out,
                    }
                ))
            }
            0x4fbe0d51e074e5bc => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0x22a3e45e944031c4 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0xc1637e7694d6680 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x6e69d4c524bf3a27 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            _ if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                Ok(UnknownInteractionsAjarProtocolEvent::_UnknownEvent {
                    ordinal: tx_header.ordinal(),
                })
                // MessageBufEtc will close handles on drop, before the
                // application can handle the _UnknownEvent variant, so this
                // satisfies the RFC-0138 requirement to close handles first.
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for UnknownInteractionsAjarProtocol
pub struct UnknownInteractionsAjarProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for UnknownInteractionsAjarProtocolRequestStream {}

impl futures::stream::FusedStream for UnknownInteractionsAjarProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for UnknownInteractionsAjarProtocolRequestStream {
    type Protocol = UnknownInteractionsAjarProtocolMarker;
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        UnknownInteractionsAjarProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for UnknownInteractionsAjarProtocolRequestStream {
    type Item = Result<UnknownInteractionsAjarProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled UnknownInteractionsAjarProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0xd4663d6b2b5048b => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictOneWay {
                            control_handle,
                    })
                }
                0x2275b8171ae4834f => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::FlexibleOneWay {
                            control_handle,
                    })
                }
                0x50e66d328336038 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWay {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x1947e36d61e4493a => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayFieldsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayFields {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x5177371967e0e6d1 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayUnionRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnion {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x6f8f9343b34e2ed4 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayTableRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayTable {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x5b47637577c69006 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayErr {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x844ff7bb3f186d9 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayFieldsErr {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x2cbfd5a859d4ac95 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayUnionErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnionErr {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x30c9e1b3da57dc37 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayTableErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayTableErr {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                _ if header.tx_id() == 0 && header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };
                    Ok(UnknownInteractionsAjarProtocolRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                    })
                    // with_tls_decode_buf will clear the handles when we return
                    // before the application can handle the _UnknownMethod, so
                    // we don't need to clear it explicitly to meet the RFC
                    // requirement to close handles before calling an unknown
                    // interaction handler.
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum UnknownInteractionsAjarProtocolRequest {
    StrictOneWay {
        control_handle: UnknownInteractionsAjarProtocolControlHandle,
    },
    FlexibleOneWay {
        control_handle: UnknownInteractionsAjarProtocolControlHandle,
    },
    StrictTwoWay {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayResponder,
    },
    StrictTwoWayFields {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder,
    },
    StrictTwoWayUnion {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder,
    },
    StrictTwoWayTable {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayTableResponder,
    },
    StrictTwoWayErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayErrResponder,
    },
    StrictTwoWayFieldsErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder,
    },
    StrictTwoWayUnionErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder,
    },
    StrictTwoWayTableErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder,
    },
    /// An interaction was received which does not match any known method.
    #[non_exhaustive]
    _UnknownMethod {
        /// Ordinal of the method that was called.
        ordinal: u64,
        control_handle: UnknownInteractionsAjarProtocolControlHandle,
    },
}

impl UnknownInteractionsAjarProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_one_way(self) -> Option<(UnknownInteractionsAjarProtocolControlHandle)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_one_way(self) -> Option<(UnknownInteractionsAjarProtocolControlHandle)> {
        if let UnknownInteractionsAjarProtocolRequest::FlexibleOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayTableResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayFieldsErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            UnknownInteractionsAjarProtocolRequest::StrictOneWay { .. } => "strict_one_way",
            UnknownInteractionsAjarProtocolRequest::FlexibleOneWay { .. } => "flexible_one_way",
            UnknownInteractionsAjarProtocolRequest::StrictTwoWay { .. } => "strict_two_way",
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayFields { .. } => {
                "strict_two_way_fields"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnion { .. } => {
                "strict_two_way_union"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayTable { .. } => {
                "strict_two_way_table"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayErr { .. } => "strict_two_way_err",
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayFieldsErr { .. } => {
                "strict_two_way_fields_err"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnionErr { .. } => {
                "strict_two_way_union_err"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayTableErr { .. } => {
                "strict_two_way_table_err"
            }
            UnknownInteractionsAjarProtocolRequest::_UnknownMethod { .. } => {
                "unknown one-way method"
            }
        }
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsAjarProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for UnknownInteractionsAjarProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl UnknownInteractionsAjarProtocolControlHandle {
    pub fn send_strict_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0,
            0x6022ae999e9dc2b0,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolStrictEventFieldsRequest, false>(
            (some_field,),
            0,
            0x510586752445c769,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_union(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolStrictEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolStrictEventUnionRequest, false>(
            payload,
            0,
            0x57794b4cc91f816f,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_table(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolStrictEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolStrictEventTableRequest, false>(
            payload,
            0,
            0x92639249201f89d,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictEventErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>, false>(
            *result,
            0,
            0x715bfcab27f735ed,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse,
            i32,
        >, false>(
            result.as_mut().map_err(|e| *e).map(|some_field| (*some_field,)),
            0,
            0x3ae22659224effb9,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolStrictEventUnionErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0xab5b2d1199942b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolStrictEventTableErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0x6c6abc426c7c8406,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_flexible_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0,
            0x11c9ba570ce71df3,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest, false>(
            (some_field,),
            0,
            0x3ba8fd32bf87d862,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_union(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolFlexibleEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolFlexibleEventUnionRequest, false>(
            payload,
            0,
            0x7c3823f47ce0fcad,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_table(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolFlexibleEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolFlexibleEventTableRequest, false>(
            payload,
            0,
            0x9ca944d1d6436b0,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolFlexibleEventErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>, false>(
            *result,
            0,
            0x4fbe0d51e074e5bc,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse,
            i32,
        >, false>(
            result.as_mut().map_err(|e| *e).map(|some_field| (*some_field,)),
            0,
            0x22a3e45e944031c4,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0xc1637e7694d6680,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolFlexibleEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0x6e69d4c524bf3a27,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::EmptyPayload>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (some_field,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayTableResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: *result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_mut().map_err(|e| *e).map(|some_field| (*some_field,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_ref().map_err(|e| *e),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_ref().map_err(|e| *e),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnknownInteractionsClosedProtocolMarker;

impl fidl::endpoints::ProtocolMarker for UnknownInteractionsClosedProtocolMarker {
    type Proxy = UnknownInteractionsClosedProtocolProxy;
    type RequestStream = UnknownInteractionsClosedProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) UnknownInteractionsClosedProtocol";
}
pub type UnknownInteractionsClosedProtocolStrictTwoWayErrResult = Result<(), i32>;
pub type UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult =
    Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse, i32>;
pub type UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult =
    Result<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse, i32>;
pub type UnknownInteractionsClosedProtocolStrictEventErrResult = Result<(), i32>;
pub type UnknownInteractionsClosedProtocolStrictEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsClosedProtocolStrictEventUnionErrResult =
    Result<UnknownInteractionsClosedProtocolStrictEventUnionErrResponse, i32>;
pub type UnknownInteractionsClosedProtocolStrictEventTableErrResult =
    Result<UnknownInteractionsClosedProtocolStrictEventTableErrResponse, i32>;

pub trait UnknownInteractionsClosedProtocolProxyInterface: Send + Sync {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error>;
    type StrictTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut;
    type StrictTwoWayFieldsResponseFut: std::future::Future<Output = Result<i32, fidl::Error>>
        + Send;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut;
    type StrictTwoWayUnionResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut;
    type StrictTwoWayTableResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut;
    type StrictTwoWayErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsClosedProtocolStrictTwoWayErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut;
    type StrictTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut;
    type StrictTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut;
    type StrictTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct UnknownInteractionsClosedProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl UnknownInteractionsClosedProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolEvent, fidl::Error> {
        UnknownInteractionsClosedProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x59282385962da24,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#strict_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::EmptyPayload, false, false>(
                (),
                0x5eda305d6b22f1f7,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }
    pub fn r#strict_two_way_fields(&self, ___deadline: zx::Time) -> Result<i32, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse,false,false>(
                (),
                0x1323afa3e0541253,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.some_field)
    }
    pub fn r#strict_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,false,true>(
                (),
                0x68b32554eb0f6fa7,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response)
    }
    pub fn r#strict_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,false,true>(
                (),
                0x6e4a94d44b69e785,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response)
    }
    pub fn r#strict_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayErrResult, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,false,false>(
                (),
                0x4fa35d5433db4d3a,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.map(|x| x))
    }
    pub fn r#strict_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult, fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse,
                i32,
            >, false, false>(
                (),
                0xb22aebf23bb58fd,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x.some_field))
    }
    pub fn r#strict_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult, fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse,
                i32,
            >, false, true>(
                (),
                0xcd65d4d29a43c80,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x))
    }
    pub fn r#strict_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult, fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse,
                i32,
            >, false, true>(
                (),
                0x117dde20b92f7b90,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x))
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsClosedProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for UnknownInteractionsClosedProtocolProxy {
    type Protocol = UnknownInteractionsClosedProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl UnknownInteractionsClosedProtocolProxy {
    /// Create a new Proxy for UnknownInteractionsClosedProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the UnknownInteractionsClosedProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> UnknownInteractionsClosedProtocolEventStream {
        UnknownInteractionsClosedProtocolEventStream {
            event_receiver: self.client.take_event_receiver(),
        }
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_one_way(self)
    }
    pub fn r#strict_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way(self)
    }
    pub fn r#strict_two_way_fields(&self) -> fidl::client::QueryResponseFut<i32> {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_fields(self)
    }
    pub fn r#strict_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_union(self)
    }
    pub fn r#strict_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_table(self)
    }
    pub fn r#strict_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayErrResult>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_err(self)
    }
    pub fn r#strict_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_fields_err(self)
    }
    pub fn r#strict_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_union_err(self)
    }
    pub fn r#strict_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_table_err(self)
    }
}

impl UnknownInteractionsClosedProtocolProxyInterface for UnknownInteractionsClosedProtocolProxy {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x59282385962da24,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    type StrictTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::EmptyPayload,
                false,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, (), false>(
            (),
            0x5eda305d6b22f1f7,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<i32>;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i32, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse,
                false,
            >(_buf?)?;
            Ok(_response.some_field)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, i32, false>(
            (),
            0x1323afa3e0541253,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse>;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
                true,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
            false,
        >(
            (),
            0x68b32554eb0f6fa7,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse>;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
                true,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
            false,
        >(
            (),
            0x6e4a94d44b69e785,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayErrResult>;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayErrResult,
            false,
        >(
            (),
            0x4fa35d5433db4d3a,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayFieldsErrResponseFut = fidl::client::QueryResponseFut<
        UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
    >;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse,
                    i32,
                >,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x.some_field))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
            false,
        >(
            (),
            0xb22aebf23bb58fd,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult>;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse,
                    i32,
                >,
                true,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
            false,
        >(
            (),
            0xcd65d4d29a43c80,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult>;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse,
                    i32,
                >,
                true,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
            false,
        >(
            (),
            0x117dde20b92f7b90,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct UnknownInteractionsClosedProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for UnknownInteractionsClosedProtocolEventStream {}

impl futures::stream::FusedStream for UnknownInteractionsClosedProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for UnknownInteractionsClosedProtocolEventStream {
    type Item = Result<UnknownInteractionsClosedProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(UnknownInteractionsClosedProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsClosedProtocolEvent {
    StrictEvent {},
    StrictEventFields { some_field: i32 },
    StrictEventUnion { payload: UnknownInteractionsClosedProtocolStrictEventUnionRequest },
    StrictEventTable { payload: UnknownInteractionsClosedProtocolStrictEventTableRequest },
    StrictEventErr { result: UnknownInteractionsClosedProtocolStrictEventErrResult },
    StrictEventFieldsErr { result: UnknownInteractionsClosedProtocolStrictEventFieldsErrResult },
    StrictEventUnionErr { result: UnknownInteractionsClosedProtocolStrictEventUnionErrResult },
    StrictEventTableErr { result: UnknownInteractionsClosedProtocolStrictEventTableErrResult },
}

impl UnknownInteractionsClosedProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event(self) -> Option<()> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventUnionRequest> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventTableRequest> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_err(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventErrResult> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventFieldsErrResult> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union_err(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventUnionErrResult> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table_err(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventTableErrResult> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`UnknownInteractionsClosedProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<UnknownInteractionsClosedProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0xa8ee6ee302f693b => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEvent {
                    }
                ))
            }
            0x5d7c57b62e9c3a74 => {
                let mut out = fidl::new_empty!(UnknownInteractionsClosedProtocolStrictEventFieldsRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsClosedProtocolStrictEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x3b8475deeb4a9d64 => {
                let mut out = fidl::new_empty!(UnknownInteractionsClosedProtocolStrictEventUnionRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsClosedProtocolStrictEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventUnion {payload: out,
                    }
                ))
            }
            0x27da43fc85a7f5be => {
                let mut out = fidl::new_empty!(UnknownInteractionsClosedProtocolStrictEventTableRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsClosedProtocolStrictEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventTable {payload: out,
                    }
                ))
            }
            0x12b105b1430a1201 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0x2d16399d2e8a5c96 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0x6dcf67f2a1d16034 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventUnionErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x4e90e92eafa9eefa => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventTableErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for UnknownInteractionsClosedProtocol
pub struct UnknownInteractionsClosedProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for UnknownInteractionsClosedProtocolRequestStream {}

impl futures::stream::FusedStream for UnknownInteractionsClosedProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for UnknownInteractionsClosedProtocolRequestStream {
    type Protocol = UnknownInteractionsClosedProtocolMarker;
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        UnknownInteractionsClosedProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for UnknownInteractionsClosedProtocolRequestStream {
    type Item = Result<UnknownInteractionsClosedProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled UnknownInteractionsClosedProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x59282385962da24 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictOneWay {
                            control_handle,
                    })
                }
                0x5eda305d6b22f1f7 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWay {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x1323afa3e0541253 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayFieldsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayFields {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x68b32554eb0f6fa7 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayUnionRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnion {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x6e4a94d44b69e785 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayTableRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayTable {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x4fa35d5433db4d3a => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayErr {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0xb22aebf23bb58fd => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayFieldsErr {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0xcd65d4d29a43c80 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayUnionErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnionErr {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x117dde20b92f7b90 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayTableErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayTableErr {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum UnknownInteractionsClosedProtocolRequest {
    StrictOneWay {
        control_handle: UnknownInteractionsClosedProtocolControlHandle,
    },
    StrictTwoWay {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayResponder,
    },
    StrictTwoWayFields {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder,
    },
    StrictTwoWayUnion {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder,
    },
    StrictTwoWayTable {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayTableResponder,
    },
    StrictTwoWayErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayErrResponder,
    },
    StrictTwoWayFieldsErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder,
    },
    StrictTwoWayUnionErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder,
    },
    StrictTwoWayTableErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder,
    },
}

impl UnknownInteractionsClosedProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_one_way(self) -> Option<(UnknownInteractionsClosedProtocolControlHandle)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayTableResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayFieldsErr { responder } = self
        {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            UnknownInteractionsClosedProtocolRequest::StrictOneWay { .. } => "strict_one_way",
            UnknownInteractionsClosedProtocolRequest::StrictTwoWay { .. } => "strict_two_way",
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayFields { .. } => {
                "strict_two_way_fields"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnion { .. } => {
                "strict_two_way_union"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayTable { .. } => {
                "strict_two_way_table"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayErr { .. } => {
                "strict_two_way_err"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayFieldsErr { .. } => {
                "strict_two_way_fields_err"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnionErr { .. } => {
                "strict_two_way_union_err"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayTableErr { .. } => {
                "strict_two_way_table_err"
            }
        }
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsClosedProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for UnknownInteractionsClosedProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl UnknownInteractionsClosedProtocolControlHandle {
    pub fn send_strict_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0,
            0xa8ee6ee302f693b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsClosedProtocolStrictEventFieldsRequest, false>(
            (some_field,),
            0,
            0x5d7c57b62e9c3a74,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_union(
        &self,
        mut payload: &UnknownInteractionsClosedProtocolStrictEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsClosedProtocolStrictEventUnionRequest, false>(
            payload,
            0,
            0x3b8475deeb4a9d64,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_table(
        &self,
        mut payload: &UnknownInteractionsClosedProtocolStrictEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsClosedProtocolStrictEventTableRequest, false>(
            payload,
            0,
            0x27da43fc85a7f5be,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_err(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictEventErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>, false>(
            *result,
            0,
            0x12b105b1430a1201,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse,
            i32,
        >, false>(
            result.as_mut().map_err(|e| *e).map(|some_field| (*some_field,)),
            0,
            0x2d16399d2e8a5c96,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsClosedProtocolStrictEventUnionErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0x6dcf67f2a1d16034,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsClosedProtocolStrictEventTableErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0x4e90e92eafa9eefa,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::EmptyPayload>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (some_field,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayTableResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: *result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder
    for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder
{
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_mut().map_err(|e| *e).map(|some_field| (*some_field,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_ref().map_err(|e| *e),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_ref().map_err(|e| *e),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnknownInteractionsProtocolMarker;

impl fidl::endpoints::ProtocolMarker for UnknownInteractionsProtocolMarker {
    type Proxy = UnknownInteractionsProtocolProxy;
    type RequestStream = UnknownInteractionsProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) UnknownInteractionsProtocol";
}
pub type UnknownInteractionsProtocolStrictTwoWayErrResult = Result<(), i32>;
pub type UnknownInteractionsProtocolStrictTwoWayFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsProtocolStrictTwoWayUnionErrResult =
    Result<UnknownInteractionsProtocolStrictTwoWayUnionErrResponse, i32>;
pub type UnknownInteractionsProtocolStrictTwoWayTableErrResult =
    Result<UnknownInteractionsProtocolStrictTwoWayTableErrResponse, i32>;
pub type UnknownInteractionsProtocolFlexibleTwoWayErrResult = Result<(), i32>;
pub type UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult =
    Result<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse, i32>;
pub type UnknownInteractionsProtocolFlexibleTwoWayTableErrResult =
    Result<UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse, i32>;
pub type UnknownInteractionsProtocolStrictEventErrResult = Result<(), i32>;
pub type UnknownInteractionsProtocolStrictEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsProtocolStrictEventUnionErrResult =
    Result<UnknownInteractionsProtocolStrictEventUnionErrResponse, i32>;
pub type UnknownInteractionsProtocolStrictEventTableErrResult =
    Result<UnknownInteractionsProtocolStrictEventTableErrResponse, i32>;
pub type UnknownInteractionsProtocolFlexibleEventErrResult = Result<(), i32>;
pub type UnknownInteractionsProtocolFlexibleEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsProtocolFlexibleEventUnionErrResult =
    Result<UnknownInteractionsProtocolFlexibleEventUnionErrResponse, i32>;
pub type UnknownInteractionsProtocolFlexibleEventTableErrResult =
    Result<UnknownInteractionsProtocolFlexibleEventTableErrResponse, i32>;

pub trait UnknownInteractionsProtocolProxyInterface: Send + Sync {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error>;
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error>;
    type StrictTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut;
    type StrictTwoWayFieldsResponseFut: std::future::Future<Output = Result<i32, fidl::Error>>
        + Send;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut;
    type StrictTwoWayUnionResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayUnionResponse, fidl::Error>,
        > + Send;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut;
    type StrictTwoWayTableResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayTableResponse, fidl::Error>,
        > + Send;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut;
    type StrictTwoWayErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut;
    type StrictTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut;
    type StrictTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayUnionErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut;
    type StrictTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayTableErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut;
    type FlexibleTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#flexible_two_way(&self) -> Self::FlexibleTwoWayResponseFut;
    type FlexibleTwoWayFieldsResponseFut: std::future::Future<Output = Result<i32, fidl::Error>>
        + Send;
    fn r#flexible_two_way_fields(&self) -> Self::FlexibleTwoWayFieldsResponseFut;
    type FlexibleTwoWayUnionResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_union(&self) -> Self::FlexibleTwoWayUnionResponseFut;
    type FlexibleTwoWayTableResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayTableResponse, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_table(&self) -> Self::FlexibleTwoWayTableResponseFut;
    type FlexibleTwoWayErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayErrResult, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_err(&self) -> Self::FlexibleTwoWayErrResponseFut;
    type FlexibleTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_fields_err(&self) -> Self::FlexibleTwoWayFieldsErrResponseFut;
    type FlexibleTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_union_err(&self) -> Self::FlexibleTwoWayUnionErrResponseFut;
    type FlexibleTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_table_err(&self) -> Self::FlexibleTwoWayTableErrResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct UnknownInteractionsProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl UnknownInteractionsProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolEvent, fidl::Error> {
        UnknownInteractionsProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x4e7273b964d117a6,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x818bb3a7a910446,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn r#strict_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::EmptyPayload, false, false>(
                (),
                0x734c996b0f37b942,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }
    pub fn r#strict_two_way_fields(&self, ___deadline: zx::Time) -> Result<i32, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                UnknownInteractionsProtocolStrictTwoWayFieldsResponse,false,false>(
                (),
                0x334f4e7fff460ae3,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.some_field)
    }
    pub fn r#strict_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayUnionResponse, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                UnknownInteractionsProtocolStrictTwoWayUnionResponse,false,true>(
                (),
                0x2212805eca592cad,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response)
    }
    pub fn r#strict_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayTableResponse, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                UnknownInteractionsProtocolStrictTwoWayTableResponse,false,true>(
                (),
                0x746ebf8659ff23b7,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response)
    }
    pub fn r#strict_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayErrResult, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,false,false>(
                (),
                0x6d1c6002c51bb967,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?
            ;
        Ok(_response.map(|x| x))
    }
    pub fn r#strict_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult, fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse,
                i32,
            >, false, false>(
                (),
                0x2182a49480e5bd2b,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x.some_field))
    }
    pub fn r#strict_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayUnionErrResult, fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsProtocolStrictTwoWayUnionErrResponse,
                i32,
            >, false, true>(
                (),
                0x453af745d38b20ca,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x))
    }
    pub fn r#strict_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayTableErrResult, fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsProtocolStrictTwoWayTableErrResponse,
                i32,
            >, false, true>(
                (),
                0x4c26c7ab89cb68d8,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response.map(|x| x))
    }
    pub fn r#flexible_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                fidl::encoding::FlexibleType<fidl::encoding::EmptyStruct>,false,false>(
                (),
                0x4a5bb3397008b7c,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way")?
            ;
        Ok(_response)
    }
    pub fn r#flexible_two_way_fields(&self, ___deadline: zx::Time) -> Result<i32, fidl::Error> {
        let _response =
            self.client
                .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse,
                >, false, false>(
                    (),
                    0x3b13f82f44813a32,
                    fidl::encoding::DynamicFlags::FLEXIBLE,
                    ___deadline,
                )?
                .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields")?;
        Ok(_response.some_field)
    }
    pub fn r#flexible_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse, fidl::Error> {
        let _response =
            self.client
                .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
                >, false, true>(
                    (),
                    0x44301e4e8d514fb6,
                    fidl::encoding::DynamicFlags::FLEXIBLE,
                    ___deadline,
                )?
                .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union")?;
        Ok(_response)
    }
    pub fn r#flexible_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayTableResponse, fidl::Error> {
        let _response =
            self.client
                .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
                >, false, true>(
                    (),
                    0x7f492934b6c76187,
                    fidl::encoding::DynamicFlags::FLEXIBLE,
                    ___deadline,
                )?
                .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table")?;
        Ok(_response)
    }
    pub fn r#flexible_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayErrResult, fidl::Error> {
        let _response = self.client.send_query::<
                fidl::encoding::EmptyPayload,
                fidl::encoding::FlexibleResultType<fidl::encoding::EmptyStruct, i32>,false,false>(
                (),
                0x61240f878cc37c07,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_err")?
            ;
        Ok(_response.map(|x| x))
    }
    pub fn r#flexible_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleResultType<
                UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse,
                i32,
            >, false, false>(
                (),
                0xf2b9611a9089b05,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields_err")?;
        Ok(_response.map(|x| x.some_field))
    }
    pub fn r#flexible_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleResultType<
                UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,
                i32,
            >, false, true>(
                (),
                0x2172940a75f107d7,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union_err")?;
        Ok(_response.map(|x| x))
    }
    pub fn r#flexible_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleResultType<
                UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,
                i32,
            >, false, true>(
                (),
                0x6d8aab48e1693bf2,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table_err")?;
        Ok(_response.map(|x| x))
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for UnknownInteractionsProtocolProxy {
    type Protocol = UnknownInteractionsProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl UnknownInteractionsProtocolProxy {
    /// Create a new Proxy for UnknownInteractionsProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the UnknownInteractionsProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> UnknownInteractionsProtocolEventStream {
        UnknownInteractionsProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsProtocolProxyInterface::r#strict_one_way(self)
    }
    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_one_way(self)
    }
    pub fn r#strict_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way(self)
    }
    pub fn r#strict_two_way_fields(&self) -> fidl::client::QueryResponseFut<i32> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_fields(self)
    }
    pub fn r#strict_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayUnionResponse> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_union(self)
    }
    pub fn r#strict_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayTableResponse> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_table(self)
    }
    pub fn r#strict_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayErrResult> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_err(self)
    }
    pub fn r#strict_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult>
    {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_fields_err(self)
    }
    pub fn r#strict_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayUnionErrResult> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_union_err(self)
    }
    pub fn r#strict_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayTableErrResult> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_table_err(self)
    }
    pub fn r#flexible_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way(self)
    }
    pub fn r#flexible_two_way_fields(&self) -> fidl::client::QueryResponseFut<i32> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_fields(self)
    }
    pub fn r#flexible_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_union(self)
    }
    pub fn r#flexible_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayTableResponse>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_table(self)
    }
    pub fn r#flexible_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayErrResult> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_err(self)
    }
    pub fn r#flexible_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_fields_err(self)
    }
    pub fn r#flexible_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_union_err(self)
    }
    pub fn r#flexible_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_table_err(self)
    }
}

impl UnknownInteractionsProtocolProxyInterface for UnknownInteractionsProtocolProxy {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x4e7273b964d117a6,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0x818bb3a7a910446,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    type StrictTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::EmptyPayload,
                false,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, (), false>(
            (),
            0x734c996b0f37b942,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<i32>;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i32, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsProtocolStrictTwoWayFieldsResponse,
                false,
            >(_buf?)?;
            Ok(_response.some_field)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, i32, false>(
            (),
            0x334f4e7fff460ae3,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayUnionResponse>;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayUnionResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsProtocolStrictTwoWayUnionResponse,
                true,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayUnionResponse,
            false,
        >(
            (),
            0x2212805eca592cad,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayTableResponse>;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayTableResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsProtocolStrictTwoWayTableResponse,
                true,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayTableResponse,
            false,
        >(
            (),
            0x746ebf8659ff23b7,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayErrResult>;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayErrResult,
            false,
        >(
            (),
            0x6d1c6002c51bb967,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayFieldsErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult>;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse,
                    i32,
                >,
                false,
            >(_buf?)?;
            Ok(_response.map(|x| x.some_field))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayFieldsErrResult,
            false,
        >(
            (),
            0x2182a49480e5bd2b,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayUnionErrResult>;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayUnionErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsProtocolStrictTwoWayUnionErrResponse,
                    i32,
                >,
                true,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayUnionErrResult,
            false,
        >(
            (),
            0x453af745d38b20ca,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type StrictTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayTableErrResult>;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayTableErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsProtocolStrictTwoWayTableErrResponse,
                    i32,
                >,
                true,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayTableErrResult,
            false,
        >(
            (),
            0x4c26c7ab89cb68d8,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
    type FlexibleTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#flexible_two_way(&self) -> Self::FlexibleTwoWayResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleType<fidl::encoding::EmptyStruct>,
                false,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way")?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, (), false>(
            (),
            0x4a5bb3397008b7c,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }
    type FlexibleTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<i32>;
    fn r#flexible_two_way_fields(&self) -> Self::FlexibleTwoWayFieldsResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i32, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse,
                >,
                false,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields")?;
            Ok(_response.some_field)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, i32, false>(
            (),
            0x3b13f82f44813a32,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }
    type FlexibleTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse>;
    fn r#flexible_two_way_union(&self) -> Self::FlexibleTwoWayUnionResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
                >,
                true,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union")?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
            false,
        >(
            (),
            0x44301e4e8d514fb6,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }
    type FlexibleTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayTableResponse>;
    fn r#flexible_two_way_table(&self) -> Self::FlexibleTwoWayTableResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayTableResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
                >,
                true,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table")?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
            false,
        >(
            (),
            0x7f492934b6c76187,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }
    type FlexibleTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayErrResult>;
    fn r#flexible_two_way_err(&self) -> Self::FlexibleTwoWayErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleResultType<fidl::encoding::EmptyStruct, i32>,
                false,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_err")?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayErrResult,
            false,
        >(
            (),
            0x61240f878cc37c07,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }
    type FlexibleTwoWayFieldsErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult>;
    fn r#flexible_two_way_fields_err(&self) -> Self::FlexibleTwoWayFieldsErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleResultType<
                    UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse,
                    i32,
                >,
                false,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields_err")?;
            Ok(_response.map(|x| x.some_field))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult,
            false,
        >(
            (),
            0xf2b9611a9089b05,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }
    type FlexibleTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult>;
    fn r#flexible_two_way_union_err(&self) -> Self::FlexibleTwoWayUnionErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleResultType<
                    UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,
                    i32,
                >,
                true,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union_err")?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult,
            false,
        >(
            (),
            0x2172940a75f107d7,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }
    type FlexibleTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult>;
    fn r#flexible_two_way_table_err(&self) -> Self::FlexibleTwoWayTableErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleResultType<
                    UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,
                    i32,
                >,
                true,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table_err")?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayTableErrResult,
            false,
        >(
            (),
            0x6d8aab48e1693bf2,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }
}

pub struct UnknownInteractionsProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for UnknownInteractionsProtocolEventStream {}

impl futures::stream::FusedStream for UnknownInteractionsProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for UnknownInteractionsProtocolEventStream {
    type Item = Result<UnknownInteractionsProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(UnknownInteractionsProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsProtocolEvent {
    StrictEvent {},
    StrictEventFields {
        some_field: i32,
    },
    StrictEventUnion {
        payload: UnknownInteractionsProtocolStrictEventUnionRequest,
    },
    StrictEventTable {
        payload: UnknownInteractionsProtocolStrictEventTableRequest,
    },
    StrictEventErr {
        result: UnknownInteractionsProtocolStrictEventErrResult,
    },
    StrictEventFieldsErr {
        result: UnknownInteractionsProtocolStrictEventFieldsErrResult,
    },
    StrictEventUnionErr {
        result: UnknownInteractionsProtocolStrictEventUnionErrResult,
    },
    StrictEventTableErr {
        result: UnknownInteractionsProtocolStrictEventTableErrResult,
    },
    FlexibleEvent {},
    FlexibleEventFields {
        some_field: i32,
    },
    FlexibleEventUnion {
        payload: UnknownInteractionsProtocolFlexibleEventUnionRequest,
    },
    FlexibleEventTable {
        payload: UnknownInteractionsProtocolFlexibleEventTableRequest,
    },
    FlexibleEventErr {
        result: UnknownInteractionsProtocolFlexibleEventErrResult,
    },
    FlexibleEventFieldsErr {
        result: UnknownInteractionsProtocolFlexibleEventFieldsErrResult,
    },
    FlexibleEventUnionErr {
        result: UnknownInteractionsProtocolFlexibleEventUnionErrResult,
    },
    FlexibleEventTableErr {
        result: UnknownInteractionsProtocolFlexibleEventTableErrResult,
    },
    #[non_exhaustive]
    _UnknownEvent {
        /// Ordinal of the event that was sent.
        ordinal: u64,
    },
}

impl UnknownInteractionsProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event(self) -> Option<()> {
        if let UnknownInteractionsProtocolEvent::StrictEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsProtocolEvent::StrictEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventUnionRequest> {
        if let UnknownInteractionsProtocolEvent::StrictEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventTableRequest> {
        if let UnknownInteractionsProtocolEvent::StrictEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_err(self) -> Option<UnknownInteractionsProtocolStrictEventErrResult> {
        if let UnknownInteractionsProtocolEvent::StrictEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventFieldsErrResult> {
        if let UnknownInteractionsProtocolEvent::StrictEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union_err(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventUnionErrResult> {
        if let UnknownInteractionsProtocolEvent::StrictEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table_err(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventTableErrResult> {
        if let UnknownInteractionsProtocolEvent::StrictEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event(self) -> Option<()> {
        if let UnknownInteractionsProtocolEvent::FlexibleEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventUnionRequest> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventTableRequest> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_err(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventErrResult> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventFieldsErrResult> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union_err(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventUnionErrResult> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table_err(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventTableErrResult> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`UnknownInteractionsProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<UnknownInteractionsProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x9842669255c4fc1 => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEvent {
                    }
                ))
            }
            0x7b75ae46520ee732 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolStrictEventFieldsRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsProtocolStrictEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x3663b5197598cbda => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolStrictEventUnionRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsProtocolStrictEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventUnion {payload: out,
                    }
                ))
            }
            0x25a10039a9f96910 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolStrictEventTableRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsProtocolStrictEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventTable {payload: out,
                    }
                ))
            }
            0x3d956048f723bc6d => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0x72c0566865e53c8b => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventFieldsErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0x40f96851e6f82abb => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventUnionErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x6ca24cbed7b2784a => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventTableErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            0x61bb1fab7d767866 => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEvent {
                    }
                ))
            }
            0x3226dff9b0c1d801 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolFlexibleEventFieldsRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsProtocolFlexibleEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x22afd161ca71e467 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolFlexibleEventUnionRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsProtocolFlexibleEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventUnion {payload: out,
                    }
                ))
            }
            0x4f72dd46888b89e0 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolFlexibleEventTableRequest);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<UnknownInteractionsProtocolFlexibleEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventTable {payload: out,
                    }
                ))
            }
            0x4bda3e6fb22bb5a9 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0xf370ade2f7c7a4a => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventFieldsErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                    return Err(fidl::Error::LargeMessageImpossible)
                }
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0xc94989e5f6707ec => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventUnionErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x4dca02085aeb2d43 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventTableErrResponse, i32>);
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode::<fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            _ if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                Ok(UnknownInteractionsProtocolEvent::_UnknownEvent {
                    ordinal: tx_header.ordinal(),
                })
                // MessageBufEtc will close handles on drop, before the
                // application can handle the _UnknownEvent variant, so this
                // satisfies the RFC-0138 requirement to close handles first.
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for UnknownInteractionsProtocol
pub struct UnknownInteractionsProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for UnknownInteractionsProtocolRequestStream {}

impl futures::stream::FusedStream for UnknownInteractionsProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for UnknownInteractionsProtocolRequestStream {
    type Protocol = UnknownInteractionsProtocolMarker;
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        UnknownInteractionsProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for UnknownInteractionsProtocolRequestStream {
    type Item = Result<UnknownInteractionsProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled UnknownInteractionsProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x4e7273b964d117a6 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictOneWay {
                            control_handle,
                    })
                }
                0x818bb3a7a910446 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleOneWay {
                            control_handle,
                    })
                }
                0x734c996b0f37b942 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWay {
                            responder:UnknownInteractionsProtocolStrictTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x334f4e7fff460ae3 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayFieldsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayFields {
                            responder:UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x2212805eca592cad => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayUnionRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayUnion {
                            responder:UnknownInteractionsProtocolStrictTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x746ebf8659ff23b7 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayTableRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayTable {
                            responder:UnknownInteractionsProtocolStrictTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x6d1c6002c51bb967 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayErr {
                            responder:UnknownInteractionsProtocolStrictTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x2182a49480e5bd2b => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayFieldsErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayFieldsErr {
                            responder:UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x453af745d38b20ca => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayUnionErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayUnionErr {
                            responder:UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x4c26c7ab89cb68d8 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayTableErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayTableErr {
                            responder:UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x4a5bb3397008b7c => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWay {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x3b13f82f44813a32 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayFieldsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayFields {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x44301e4e8d514fb6 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayUnionRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayUnion {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x7f492934b6c76187 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayTableRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayTable {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x61240f878cc37c07 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayErr {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0xf2b9611a9089b05 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayFieldsErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayFieldsErr {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x2172940a75f107d7 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayUnionErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayUnionErr {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x6d8aab48e1693bf2 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayTableErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::BYTE_OVERFLOW) {
                        Err(fidl::Error::LargeMessageImpossible)?;
                    }
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayTableErr {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                _ if header.tx_id() == 0 && header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };
                    Ok(UnknownInteractionsProtocolRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                        unknown_method_type: fidl::endpoints::UnknownMethodType::OneWay,
                    })
                    // with_tls_decode_buf will clear the handles when we return
                    // before the application can handle the _UnknownMethod, so
                    // we don't need to clear it explicitly to meet the RFC
                    // requirement to close handles before calling an unknown
                    // interaction handler.
                }
                _ if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    let msg = fidl::encoding::TransactionMessage {
                        header: fidl::encoding::TransactionHeader::new(
                            header.tx_id(), header.ordinal(), header.dynamic_flags(),
                        ),
                        body: fidl::encoding::Flexible::<()>::FrameworkErr(
                            fidl::encoding::FrameworkErr::UnknownMethod
                        ),
                    };

                    // RFC-0138 requires us to close handles in the incoming
                    // message before replying, so we can't wait for
                    // with_tls_decode_buf to auto-clear handles when we return.
                    handles.clear();

                    // We are inside of with_tls_decode_buf, so we can't use
                    // with_tls_encode_buf. However, we know that the unknown
                    // interaction reply will not contain any handles, so
                    // creating a new Vec here does not cause an allocation.
                    let mut handles = Vec::new();
                    fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocol_UnknownMethodResponse");
                    fidl::encoding::Encoder::encode::<
                        fidl::encoding::TransactionMessageType<fidl::encoding::FlexibleType<fidl::encoding::EmptyStruct>>
                    >(bytes, &mut handles, msg)?;
                    fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
                    fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

                    control_handle.inner.send_raw_msg(&*bytes, &mut handles)?;

                    Ok(UnknownInteractionsProtocolRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                        unknown_method_type: fidl::endpoints::UnknownMethodType::TwoWay,
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum UnknownInteractionsProtocolRequest {
    StrictOneWay {
        control_handle: UnknownInteractionsProtocolControlHandle,
    },
    FlexibleOneWay {
        control_handle: UnknownInteractionsProtocolControlHandle,
    },
    StrictTwoWay {
        responder: UnknownInteractionsProtocolStrictTwoWayResponder,
    },
    StrictTwoWayFields {
        responder: UnknownInteractionsProtocolStrictTwoWayFieldsResponder,
    },
    StrictTwoWayUnion {
        responder: UnknownInteractionsProtocolStrictTwoWayUnionResponder,
    },
    StrictTwoWayTable {
        responder: UnknownInteractionsProtocolStrictTwoWayTableResponder,
    },
    StrictTwoWayErr {
        responder: UnknownInteractionsProtocolStrictTwoWayErrResponder,
    },
    StrictTwoWayFieldsErr {
        responder: UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder,
    },
    StrictTwoWayUnionErr {
        responder: UnknownInteractionsProtocolStrictTwoWayUnionErrResponder,
    },
    StrictTwoWayTableErr {
        responder: UnknownInteractionsProtocolStrictTwoWayTableErrResponder,
    },
    FlexibleTwoWay {
        responder: UnknownInteractionsProtocolFlexibleTwoWayResponder,
    },
    FlexibleTwoWayFields {
        responder: UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder,
    },
    FlexibleTwoWayUnion {
        responder: UnknownInteractionsProtocolFlexibleTwoWayUnionResponder,
    },
    FlexibleTwoWayTable {
        responder: UnknownInteractionsProtocolFlexibleTwoWayTableResponder,
    },
    FlexibleTwoWayErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayErrResponder,
    },
    FlexibleTwoWayFieldsErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder,
    },
    FlexibleTwoWayUnionErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder,
    },
    FlexibleTwoWayTableErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder,
    },
    /// An interaction was received which does not match any known method.
    #[non_exhaustive]
    _UnknownMethod {
        /// Ordinal of the method that was called.
        ordinal: u64,
        control_handle: UnknownInteractionsProtocolControlHandle,
        unknown_method_type: fidl::endpoints::UnknownMethodType,
    },
}

impl UnknownInteractionsProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_one_way(self) -> Option<(UnknownInteractionsProtocolControlHandle)> {
        if let UnknownInteractionsProtocolRequest::StrictOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_one_way(self) -> Option<(UnknownInteractionsProtocolControlHandle)> {
        if let UnknownInteractionsProtocolRequest::FlexibleOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way(self) -> Option<(UnknownInteractionsProtocolStrictTwoWayResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayFieldsResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayUnionResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayTableResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayFieldsErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayUnionErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayTableErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayUnionResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayTableResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayFieldsErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            UnknownInteractionsProtocolRequest::StrictOneWay { .. } => "strict_one_way",
            UnknownInteractionsProtocolRequest::FlexibleOneWay { .. } => "flexible_one_way",
            UnknownInteractionsProtocolRequest::StrictTwoWay { .. } => "strict_two_way",
            UnknownInteractionsProtocolRequest::StrictTwoWayFields { .. } => {
                "strict_two_way_fields"
            }
            UnknownInteractionsProtocolRequest::StrictTwoWayUnion { .. } => "strict_two_way_union",
            UnknownInteractionsProtocolRequest::StrictTwoWayTable { .. } => "strict_two_way_table",
            UnknownInteractionsProtocolRequest::StrictTwoWayErr { .. } => "strict_two_way_err",
            UnknownInteractionsProtocolRequest::StrictTwoWayFieldsErr { .. } => {
                "strict_two_way_fields_err"
            }
            UnknownInteractionsProtocolRequest::StrictTwoWayUnionErr { .. } => {
                "strict_two_way_union_err"
            }
            UnknownInteractionsProtocolRequest::StrictTwoWayTableErr { .. } => {
                "strict_two_way_table_err"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWay { .. } => "flexible_two_way",
            UnknownInteractionsProtocolRequest::FlexibleTwoWayFields { .. } => {
                "flexible_two_way_fields"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayUnion { .. } => {
                "flexible_two_way_union"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayTable { .. } => {
                "flexible_two_way_table"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayErr { .. } => "flexible_two_way_err",
            UnknownInteractionsProtocolRequest::FlexibleTwoWayFieldsErr { .. } => {
                "flexible_two_way_fields_err"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayUnionErr { .. } => {
                "flexible_two_way_union_err"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayTableErr { .. } => {
                "flexible_two_way_table_err"
            }
            UnknownInteractionsProtocolRequest::_UnknownMethod {
                unknown_method_type: fidl::endpoints::UnknownMethodType::OneWay,
                ..
            } => "unknown one-way method",
            UnknownInteractionsProtocolRequest::_UnknownMethod {
                unknown_method_type: fidl::endpoints::UnknownMethodType::TwoWay,
                ..
            } => "unknown two-way method",
        }
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for UnknownInteractionsProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl UnknownInteractionsProtocolControlHandle {
    pub fn send_strict_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0,
            0x9842669255c4fc1,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolStrictEventFieldsRequest, false>(
            (some_field,),
            0,
            0x7b75ae46520ee732,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_union(
        &self,
        mut payload: &UnknownInteractionsProtocolStrictEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolStrictEventUnionRequest, false>(
            payload,
            0,
            0x3663b5197598cbda,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_table(
        &self,
        mut payload: &UnknownInteractionsProtocolStrictEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolStrictEventTableRequest, false>(
            payload,
            0,
            0x25a10039a9f96910,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictEventErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>, false>(
            *result,
            0,
            0x3d956048f723bc6d,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolStrictEventFieldsErrResponse,
            i32,
        >, false>(
            result.as_mut().map_err(|e| *e).map(|some_field| (*some_field,)),
            0,
            0x72c0566865e53c8b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolStrictEventUnionErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0x40f96851e6f82abb,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_strict_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolStrictEventTableErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0x6ca24cbed7b2784a,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn send_flexible_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload, false>(
            (),
            0,
            0x61bb1fab7d767866,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolFlexibleEventFieldsRequest, false>(
            (some_field,),
            0,
            0x3226dff9b0c1d801,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_union(
        &self,
        mut payload: &UnknownInteractionsProtocolFlexibleEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolFlexibleEventUnionRequest, false>(
            payload,
            0,
            0x22afd161ca71e467,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_table(
        &self,
        mut payload: &UnknownInteractionsProtocolFlexibleEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolFlexibleEventTableRequest, false>(
            payload,
            0,
            0x4f72dd46888b89e0,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleEventErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>, false>(
            *result,
            0,
            0x4bda3e6fb22bb5a9,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolFlexibleEventFieldsErrResponse,
            i32,
        >, false>(
            result.as_mut().map_err(|e| *e).map(|some_field| (*some_field,)),
            0,
            0xf370ade2f7c7a4a,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolFlexibleEventUnionErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0xc94989e5f6707ec,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn send_flexible_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolFlexibleEventTableErrResponse,
            i32,
        >, false>(
            result.as_ref().map_err(|e| *e),
            0,
            0x4dca02085aeb2d43,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::EmptyPayload>,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (some_field,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayFieldsResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsProtocolStrictTwoWayFieldsResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayUnionResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsProtocolStrictTwoWayUnionResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayTableResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsProtocolStrictTwoWayTableResponse,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: *result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_mut().map_err(|e| *e).map(|some_field| (*some_field,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_ref().map_err(|e| *e),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayUnionErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsProtocolStrictTwoWayUnionErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.as_ref().map_err(|e| *e),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayTableErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsProtocolStrictTwoWayTableErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::Flexible::new(()),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleType<fidl::encoding::EmptyStruct>,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::Flexible::new((some_field,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleType<
                        UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::Flexible::new(payload),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayUnionResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleType<
                        UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::Flexible::new(payload),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayTableResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleType<
                        UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::FlexibleResult::new(*result),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleResultType<fidl::encoding::EmptyStruct, i32>,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::FlexibleResult::new(
                result.as_mut().map_err(|e| *e).map(|some_field| (*some_field,)),
            ),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleResultType<
                        UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::FlexibleResult::new(result.as_ref().map_err(|e| *e)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleResultType<
                        UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::FlexibleResult::new(result.as_ref().map_err(|e| *e)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse");
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleResultType<
                        UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}
