// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate
// fidl_experiment = unknown_interactions_new_defaults

#![warn(clippy::all)]
#![allow(unused_parens, unused_mut, unused_imports, nonstandard_style)]

use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        endpoints::{ControlHandle as _, Responder as _},
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[cfg(target_os = "fuchsia")]
use fuchsia_zircon as zx;

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolStrictEventFieldsRequest {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventFieldsRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsClosedProtocolStrictEventFieldsRequest {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventFieldsRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsProtocolFlexibleEventFieldsRequest {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventFieldsRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsProtocolStrictEventFieldsRequest {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictEventFieldsRequest {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayFieldsResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsProtocolFlexibleEventFieldsErrResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventFieldsErrResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsProtocolStrictEventFieldsErrResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictEventFieldsErrResponse {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse {
    pub some_field: i32,
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventTableRequest {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventTableRequest {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventTableErrResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventTableRequest {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventTableErrResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventTableRequest {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsProtocolStrictEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictEventTableRequest {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayTableResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventTableErrResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayTableResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsProtocolStrictEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictEventTableErrResponse {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..Default::default()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayTableErrResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::unknown()` to construct and `UnknownInteractionsAjarProtocolFlexibleEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolFlexibleEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolFlexibleEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsAjarProtocolStrictEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictEventUnionRequest::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolStrictEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolStrictEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventUnionRequest {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsClosedProtocolStrictEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictEventUnionRequest::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsClosedProtocolStrictEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsClosedProtocolStrictEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventUnionRequest {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsProtocolFlexibleEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleEventUnionRequest::unknown()` to construct and `UnknownInteractionsProtocolFlexibleEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolFlexibleEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolFlexibleEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventUnionRequest {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsProtocolStrictEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictEventUnionRequest::unknown()` to construct and `UnknownInteractionsProtocolStrictEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictEventUnionRequestUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolStrictEventUnionRequest {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolStrictEventUnionRequest {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictEventUnionRequest {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolStrictTwoWayUnionResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayUnionResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolFlexibleEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleEventUnionErrResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsProtocolFlexibleTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsProtocolStrictEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolStrictEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictEventUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolStrictEventUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolStrictEventUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictEventUnionErrResponse {}

#[derive(Clone, Debug)]
pub enum UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}

/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

// Custom PartialEq so that unknown variants are not equal to themselves.
impl PartialEq for UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Self::SomeField(x), Self::SomeField(y)) => *x == *y,
            _ => false,
        }
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        match *self {
            Self::SomeField(_) => 1,
            #[allow(deprecated)]
            Self::__Unknown { ordinal } => ordinal,
        }
    }

    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::Persistable for UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnknownInteractionsAjarProtocolMarker;

impl fidl::endpoints::ProtocolMarker for UnknownInteractionsAjarProtocolMarker {
    type Proxy = UnknownInteractionsAjarProtocolProxy;
    type RequestStream = UnknownInteractionsAjarProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) UnknownInteractionsAjarProtocol";
}
pub type UnknownInteractionsAjarProtocolStrictTwoWayErrResult = Result<(), i32>;
pub type UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult =
    Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult =
    Result<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolStrictEventErrResult = Result<(), i32>;
pub type UnknownInteractionsAjarProtocolStrictEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsAjarProtocolStrictEventUnionErrResult =
    Result<UnknownInteractionsAjarProtocolStrictEventUnionErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolStrictEventTableErrResult =
    Result<UnknownInteractionsAjarProtocolStrictEventTableErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolFlexibleEventErrResult = Result<(), i32>;
pub type UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult =
    Result<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse, i32>;
pub type UnknownInteractionsAjarProtocolFlexibleEventTableErrResult =
    Result<UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse, i32>;

pub trait UnknownInteractionsAjarProtocolProxyInterface: Send + Sync {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error>;
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error>;
    type StrictTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut;
    type StrictTwoWayFieldsResponseFut: std::future::Future<Output = Result<i32, fidl::Error>>
        + Send;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut;
    type StrictTwoWayUnionResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse, fidl::Error>,
        > + Send;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut;
    type StrictTwoWayTableResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse, fidl::Error>,
        > + Send;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut;
    type StrictTwoWayErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut;
    type StrictTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut;
    type StrictTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut;
    type StrictTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct UnknownInteractionsAjarProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl UnknownInteractionsAjarProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolEvent, fidl::Error> {
        UnknownInteractionsAjarProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }

    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0xd4663d6b2b5048b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x2275b8171ae4834f,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn r#strict_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::EmptyPayload>(
                (),
                0x50e66d328336038,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }

    pub fn r#strict_two_way_fields(&self, ___deadline: zx::Time) -> Result<i32, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse,
        >(
            (),
            0x1947e36d61e4493a,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.some_field)
    }

    pub fn r#strict_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
        >(
            (),
            0x5177371967e0e6d1,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#strict_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
        >(
            (),
            0x6f8f9343b34e2ed4,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#strict_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayErrResult, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
        >(
            (),
            0x5b47637577c69006,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#strict_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse,
                i32,
            >>(
                (), 0x844ff7bb3f186d9, fidl::encoding::DynamicFlags::empty(), ___deadline
            )?;
        Ok(_response.map(|x| x.some_field))
    }

    pub fn r#strict_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse,
                i32,
            >>(
                (), 0x2cbfd5a859d4ac95, fidl::encoding::DynamicFlags::empty(), ___deadline
            )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#strict_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse,
                i32,
            >>(
                (), 0x30c9e1b3da57dc37, fidl::encoding::DynamicFlags::empty(), ___deadline
            )?;
        Ok(_response.map(|x| x))
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsAjarProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for UnknownInteractionsAjarProtocolProxy {
    type Protocol = UnknownInteractionsAjarProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl UnknownInteractionsAjarProtocolProxy {
    /// Create a new Proxy for UnknownInteractionsAjarProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the UnknownInteractionsAjarProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> UnknownInteractionsAjarProtocolEventStream {
        UnknownInteractionsAjarProtocolEventStream {
            event_receiver: self.client.take_event_receiver(),
        }
    }

    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_one_way(self)
    }

    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsAjarProtocolProxyInterface::r#flexible_one_way(self)
    }

    pub fn r#strict_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way(self)
    }

    pub fn r#strict_two_way_fields(&self) -> fidl::client::QueryResponseFut<i32> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_fields(self)
    }

    pub fn r#strict_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_union(self)
    }

    pub fn r#strict_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_table(self)
    }

    pub fn r#strict_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayErrResult> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_err(self)
    }

    pub fn r#strict_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_fields_err(self)
    }

    pub fn r#strict_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_union_err(self)
    }

    pub fn r#strict_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_table_err(self)
    }
}

impl UnknownInteractionsAjarProtocolProxyInterface for UnknownInteractionsAjarProtocolProxy {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0xd4663d6b2b5048b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x2275b8171ae4834f,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    type StrictTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<fidl::encoding::EmptyPayload>(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, ()>(
            (),
            0x50e66d328336038,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<i32>;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i32, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse,
            >(_buf?)?;
            Ok(_response.some_field)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, i32>(
            (),
            0x1947e36d61e4493a,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse>;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
        >(
            (),
            0x5177371967e0e6d1,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse>;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
        >(
            (),
            0x6f8f9343b34e2ed4,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayErrResult>;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayErrResult,
        >(
            (),
            0x5b47637577c69006,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayFieldsErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult>;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse,
                    i32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x.some_field))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
        >(
            (),
            0x844ff7bb3f186d9,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult>;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse,
                    i32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult,
        >(
            (),
            0x2cbfd5a859d4ac95,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult>;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse,
                    i32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult,
        >(
            (),
            0x30c9e1b3da57dc37,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct UnknownInteractionsAjarProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for UnknownInteractionsAjarProtocolEventStream {}

impl futures::stream::FusedStream for UnknownInteractionsAjarProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for UnknownInteractionsAjarProtocolEventStream {
    type Item = Result<UnknownInteractionsAjarProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(UnknownInteractionsAjarProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsAjarProtocolEvent {
    StrictEvent {},
    StrictEventFields {
        some_field: i32,
    },
    StrictEventUnion {
        payload: UnknownInteractionsAjarProtocolStrictEventUnionRequest,
    },
    StrictEventTable {
        payload: UnknownInteractionsAjarProtocolStrictEventTableRequest,
    },
    StrictEventErr {
        result: UnknownInteractionsAjarProtocolStrictEventErrResult,
    },
    StrictEventFieldsErr {
        result: UnknownInteractionsAjarProtocolStrictEventFieldsErrResult,
    },
    StrictEventUnionErr {
        result: UnknownInteractionsAjarProtocolStrictEventUnionErrResult,
    },
    StrictEventTableErr {
        result: UnknownInteractionsAjarProtocolStrictEventTableErrResult,
    },
    FlexibleEvent {},
    FlexibleEventFields {
        some_field: i32,
    },
    FlexibleEventUnion {
        payload: UnknownInteractionsAjarProtocolFlexibleEventUnionRequest,
    },
    FlexibleEventTable {
        payload: UnknownInteractionsAjarProtocolFlexibleEventTableRequest,
    },
    FlexibleEventErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventErrResult,
    },
    FlexibleEventFieldsErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult,
    },
    FlexibleEventUnionErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult,
    },
    FlexibleEventTableErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventTableErrResult,
    },
    #[non_exhaustive]
    _UnknownEvent {
        /// Ordinal of the event that was sent.
        ordinal: u64,
    },
}

impl UnknownInteractionsAjarProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event(self) -> Option<()> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventUnionRequest> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventTableRequest> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventFieldsErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventUnionErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolStrictEventTableErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event(self) -> Option<()> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventUnionRequest> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventTableRequest> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table_err(
        self,
    ) -> Option<UnknownInteractionsAjarProtocolFlexibleEventTableErrResult> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`UnknownInteractionsAjarProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<UnknownInteractionsAjarProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x6022ae999e9dc2b0 => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEvent {
                    }
                ))
            }
            0x510586752445c769 => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolStrictEventFieldsRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsAjarProtocolStrictEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x57794b4cc91f816f => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolStrictEventUnionRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsAjarProtocolStrictEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventUnion {payload: out,
                    }
                ))
            }
            0x92639249201f89d => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolStrictEventTableRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsAjarProtocolStrictEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventTable {payload: out,
                    }
                ))
            }
            0x715bfcab27f735ed => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0x3ae22659224effb9 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0xab5b2d1199942b => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventUnionErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x6c6abc426c7c8406 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventTableErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolStrictEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            0x11c9ba570ce71df3 => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEvent {
                    }
                ))
            }
            0x3ba8fd32bf87d862 => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x7c3823f47ce0fcad => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolFlexibleEventUnionRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsAjarProtocolFlexibleEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventUnion {payload: out,
                    }
                ))
            }
            0x9ca944d1d6436b0 => {
                let mut out = fidl::new_empty!(UnknownInteractionsAjarProtocolFlexibleEventTableRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsAjarProtocolFlexibleEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventTable {payload: out,
                    }
                ))
            }
            0x4fbe0d51e074e5bc => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0x22a3e45e944031c4 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0xc1637e7694d6680 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x6e69d4c524bf3a27 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            _ if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                Ok(UnknownInteractionsAjarProtocolEvent::_UnknownEvent {
                    ordinal: tx_header.ordinal(),
                })
                // MessageBufEtc will close handles on drop, before the
                // application can handle the _UnknownEvent variant, so this
                // satisfies the RFC-0138 requirement to close handles first.
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for UnknownInteractionsAjarProtocol
pub struct UnknownInteractionsAjarProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for UnknownInteractionsAjarProtocolRequestStream {}

impl futures::stream::FusedStream for UnknownInteractionsAjarProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for UnknownInteractionsAjarProtocolRequestStream {
    type Protocol = UnknownInteractionsAjarProtocolMarker;
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        UnknownInteractionsAjarProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for UnknownInteractionsAjarProtocolRequestStream {
    type Item = Result<UnknownInteractionsAjarProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled UnknownInteractionsAjarProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0xd4663d6b2b5048b => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictOneWay {
                            control_handle,
                    })
                }
                0x2275b8171ae4834f => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::FlexibleOneWay {
                            control_handle,
                    })
                }
                0x50e66d328336038 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWay {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x1947e36d61e4493a => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayFields {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x5177371967e0e6d1 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnion {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x6f8f9343b34e2ed4 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayTable {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x5b47637577c69006 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayErr {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x844ff7bb3f186d9 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayFieldsErr {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x2cbfd5a859d4ac95 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnionErr {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x30c9e1b3da57dc37 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayTableErr {
                            responder:UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                _ if header.tx_id() == 0 && header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };
                    Ok(UnknownInteractionsAjarProtocolRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                    })
                    // with_tls_decode_buf will clear the handles when we return
                    // before the application can handle the _UnknownMethod, so
                    // we don't need to clear it explicitly to meet the RFC
                    // requirement to close handles before calling an unknown
                    // interaction handler.
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsAjarProtocolRequest {
    StrictOneWay {
        control_handle: UnknownInteractionsAjarProtocolControlHandle,
    },
    FlexibleOneWay {
        control_handle: UnknownInteractionsAjarProtocolControlHandle,
    },
    StrictTwoWay {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayResponder,
    },
    StrictTwoWayFields {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder,
    },
    StrictTwoWayUnion {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder,
    },
    StrictTwoWayTable {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayTableResponder,
    },
    StrictTwoWayErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayErrResponder,
    },
    StrictTwoWayFieldsErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder,
    },
    StrictTwoWayUnionErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder,
    },
    StrictTwoWayTableErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder,
    },
    /// An interaction was received which does not match any known method.
    #[non_exhaustive]
    _UnknownMethod {
        /// Ordinal of the method that was called.
        ordinal: u64,
        control_handle: UnknownInteractionsAjarProtocolControlHandle,
    },
}

impl UnknownInteractionsAjarProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_one_way(self) -> Option<(UnknownInteractionsAjarProtocolControlHandle)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_one_way(self) -> Option<(UnknownInteractionsAjarProtocolControlHandle)> {
        if let UnknownInteractionsAjarProtocolRequest::FlexibleOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayTableResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayFieldsErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            UnknownInteractionsAjarProtocolRequest::StrictOneWay { .. } => "strict_one_way",
            UnknownInteractionsAjarProtocolRequest::FlexibleOneWay { .. } => "flexible_one_way",
            UnknownInteractionsAjarProtocolRequest::StrictTwoWay { .. } => "strict_two_way",
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayFields { .. } => {
                "strict_two_way_fields"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnion { .. } => {
                "strict_two_way_union"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayTable { .. } => {
                "strict_two_way_table"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayErr { .. } => "strict_two_way_err",
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayFieldsErr { .. } => {
                "strict_two_way_fields_err"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnionErr { .. } => {
                "strict_two_way_union_err"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayTableErr { .. } => {
                "strict_two_way_table_err"
            }
            UnknownInteractionsAjarProtocolRequest::_UnknownMethod { .. } => {
                "unknown one-way method"
            }
        }
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsAjarProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for UnknownInteractionsAjarProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl UnknownInteractionsAjarProtocolControlHandle {
    pub fn send_strict_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload>(
            (),
            0,
            0x6022ae999e9dc2b0,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolStrictEventFieldsRequest>(
            (some_field,),
            0,
            0x510586752445c769,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_union(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolStrictEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolStrictEventUnionRequest>(
            payload,
            0,
            0x57794b4cc91f816f,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_table(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolStrictEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolStrictEventTableRequest>(
            payload,
            0,
            0x92639249201f89d,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_err(&self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(
            result,
            0,
            0x715bfcab27f735ed,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_fields_err(
        &self,
        mut result: Result<i32, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse,
            i32,
        >>(
            result.map(|some_field| (some_field,)),
            0,
            0x3ae22659224effb9,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_union_err(
        &self,
        mut result: Result<&UnknownInteractionsAjarProtocolStrictEventUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolStrictEventUnionErrResponse,
            i32,
        >>(result, 0, 0xab5b2d1199942b, fidl::encoding::DynamicFlags::empty())
    }

    pub fn send_strict_event_table_err(
        &self,
        mut result: Result<&UnknownInteractionsAjarProtocolStrictEventTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolStrictEventTableErrResponse,
            i32,
        >>(result, 0, 0x6c6abc426c7c8406, fidl::encoding::DynamicFlags::empty())
    }

    pub fn send_flexible_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload>(
            (),
            0,
            0x11c9ba570ce71df3,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest>(
            (some_field,),
            0,
            0x3ba8fd32bf87d862,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_union(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolFlexibleEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolFlexibleEventUnionRequest>(
            payload,
            0,
            0x7c3823f47ce0fcad,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_table(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolFlexibleEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsAjarProtocolFlexibleEventTableRequest>(
            payload,
            0,
            0x9ca944d1d6436b0,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_err(&self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(
            result,
            0,
            0x4fbe0d51e074e5bc,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_fields_err(
        &self,
        mut result: Result<i32, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse,
            i32,
        >>(
            result.map(|some_field| (some_field,)),
            0,
            0x22a3e45e944031c4,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_union_err(
        &self,
        mut result: Result<&UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse,
            i32,
        >>(result, 0, 0xc1637e7694d6680, fidl::encoding::DynamicFlags::FLEXIBLE)
    }

    pub fn send_flexible_event_table_err(
        &self,
        mut result: Result<&UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse,
            i32,
        >>(result, 0, 0x6e69d4c524bf3a27, fidl::encoding::DynamicFlags::FLEXIBLE)
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::EmptyPayload>,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (some_field,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.map(|some_field| (some_field,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnknownInteractionsClosedProtocolMarker;

impl fidl::endpoints::ProtocolMarker for UnknownInteractionsClosedProtocolMarker {
    type Proxy = UnknownInteractionsClosedProtocolProxy;
    type RequestStream = UnknownInteractionsClosedProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) UnknownInteractionsClosedProtocol";
}
pub type UnknownInteractionsClosedProtocolStrictTwoWayErrResult = Result<(), i32>;
pub type UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult =
    Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse, i32>;
pub type UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult =
    Result<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse, i32>;
pub type UnknownInteractionsClosedProtocolStrictEventErrResult = Result<(), i32>;
pub type UnknownInteractionsClosedProtocolStrictEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsClosedProtocolStrictEventUnionErrResult =
    Result<UnknownInteractionsClosedProtocolStrictEventUnionErrResponse, i32>;
pub type UnknownInteractionsClosedProtocolStrictEventTableErrResult =
    Result<UnknownInteractionsClosedProtocolStrictEventTableErrResponse, i32>;

pub trait UnknownInteractionsClosedProtocolProxyInterface: Send + Sync {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error>;
    type StrictTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut;
    type StrictTwoWayFieldsResponseFut: std::future::Future<Output = Result<i32, fidl::Error>>
        + Send;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut;
    type StrictTwoWayUnionResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut;
    type StrictTwoWayTableResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut;
    type StrictTwoWayErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsClosedProtocolStrictTwoWayErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut;
    type StrictTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut;
    type StrictTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut;
    type StrictTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<
                UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct UnknownInteractionsClosedProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl UnknownInteractionsClosedProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolEvent, fidl::Error> {
        UnknownInteractionsClosedProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }

    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x59282385962da24,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn r#strict_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::EmptyPayload>(
                (),
                0x5eda305d6b22f1f7,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }

    pub fn r#strict_two_way_fields(&self, ___deadline: zx::Time) -> Result<i32, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse,
        >(
            (),
            0x1323afa3e0541253,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.some_field)
    }

    pub fn r#strict_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
        >(
            (),
            0x68b32554eb0f6fa7,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#strict_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
        >(
            (),
            0x6e4a94d44b69e785,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#strict_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayErrResult, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
        >(
            (),
            0x4fa35d5433db4d3a,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#strict_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse,
                i32,
            >>(
                (), 0xb22aebf23bb58fd, fidl::encoding::DynamicFlags::empty(), ___deadline
            )?;
        Ok(_response.map(|x| x.some_field))
    }

    pub fn r#strict_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse,
                i32,
            >>(
                (), 0xcd65d4d29a43c80, fidl::encoding::DynamicFlags::empty(), ___deadline
            )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#strict_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse,
                i32,
            >>(
                (), 0x117dde20b92f7b90, fidl::encoding::DynamicFlags::empty(), ___deadline
            )?;
        Ok(_response.map(|x| x))
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsClosedProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for UnknownInteractionsClosedProtocolProxy {
    type Protocol = UnknownInteractionsClosedProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl UnknownInteractionsClosedProtocolProxy {
    /// Create a new Proxy for UnknownInteractionsClosedProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the UnknownInteractionsClosedProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> UnknownInteractionsClosedProtocolEventStream {
        UnknownInteractionsClosedProtocolEventStream {
            event_receiver: self.client.take_event_receiver(),
        }
    }

    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_one_way(self)
    }

    pub fn r#strict_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way(self)
    }

    pub fn r#strict_two_way_fields(&self) -> fidl::client::QueryResponseFut<i32> {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_fields(self)
    }

    pub fn r#strict_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_union(self)
    }

    pub fn r#strict_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_table(self)
    }

    pub fn r#strict_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayErrResult>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_err(self)
    }

    pub fn r#strict_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_fields_err(self)
    }

    pub fn r#strict_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_union_err(self)
    }

    pub fn r#strict_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_table_err(self)
    }
}

impl UnknownInteractionsClosedProtocolProxyInterface for UnknownInteractionsClosedProtocolProxy {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x59282385962da24,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    type StrictTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<fidl::encoding::EmptyPayload>(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, ()>(
            (),
            0x5eda305d6b22f1f7,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<i32>;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i32, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse,
            >(_buf?)?;
            Ok(_response.some_field)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, i32>(
            (),
            0x1323afa3e0541253,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse>;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
        >(
            (),
            0x68b32554eb0f6fa7,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse>;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
        >(
            (),
            0x6e4a94d44b69e785,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayErrResult>;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayErrResult,
        >(
            (),
            0x4fa35d5433db4d3a,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayFieldsErrResponseFut = fidl::client::QueryResponseFut<
        UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
    >;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse,
                    i32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x.some_field))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
        >(
            (),
            0xb22aebf23bb58fd,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult>;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse,
                    i32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
        >(
            (),
            0xcd65d4d29a43c80,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult>;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult, fidl::Error>
        {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse,
                    i32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
        >(
            (),
            0x117dde20b92f7b90,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct UnknownInteractionsClosedProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for UnknownInteractionsClosedProtocolEventStream {}

impl futures::stream::FusedStream for UnknownInteractionsClosedProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for UnknownInteractionsClosedProtocolEventStream {
    type Item = Result<UnknownInteractionsClosedProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(UnknownInteractionsClosedProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsClosedProtocolEvent {
    StrictEvent {},
    StrictEventFields { some_field: i32 },
    StrictEventUnion { payload: UnknownInteractionsClosedProtocolStrictEventUnionRequest },
    StrictEventTable { payload: UnknownInteractionsClosedProtocolStrictEventTableRequest },
    StrictEventErr { result: UnknownInteractionsClosedProtocolStrictEventErrResult },
    StrictEventFieldsErr { result: UnknownInteractionsClosedProtocolStrictEventFieldsErrResult },
    StrictEventUnionErr { result: UnknownInteractionsClosedProtocolStrictEventUnionErrResult },
    StrictEventTableErr { result: UnknownInteractionsClosedProtocolStrictEventTableErrResult },
}

impl UnknownInteractionsClosedProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event(self) -> Option<()> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventUnionRequest> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventTableRequest> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_err(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventErrResult> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventFieldsErrResult> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union_err(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventUnionErrResult> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table_err(
        self,
    ) -> Option<UnknownInteractionsClosedProtocolStrictEventTableErrResult> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`UnknownInteractionsClosedProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<UnknownInteractionsClosedProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0xa8ee6ee302f693b => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEvent {
                    }
                ))
            }
            0x5d7c57b62e9c3a74 => {
                let mut out = fidl::new_empty!(UnknownInteractionsClosedProtocolStrictEventFieldsRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsClosedProtocolStrictEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x3b8475deeb4a9d64 => {
                let mut out = fidl::new_empty!(UnknownInteractionsClosedProtocolStrictEventUnionRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsClosedProtocolStrictEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventUnion {payload: out,
                    }
                ))
            }
            0x27da43fc85a7f5be => {
                let mut out = fidl::new_empty!(UnknownInteractionsClosedProtocolStrictEventTableRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsClosedProtocolStrictEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventTable {payload: out,
                    }
                ))
            }
            0x12b105b1430a1201 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0x2d16399d2e8a5c96 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0x6dcf67f2a1d16034 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventUnionErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x4e90e92eafa9eefa => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventTableErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsClosedProtocolStrictEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for UnknownInteractionsClosedProtocol
pub struct UnknownInteractionsClosedProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for UnknownInteractionsClosedProtocolRequestStream {}

impl futures::stream::FusedStream for UnknownInteractionsClosedProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for UnknownInteractionsClosedProtocolRequestStream {
    type Protocol = UnknownInteractionsClosedProtocolMarker;
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        UnknownInteractionsClosedProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for UnknownInteractionsClosedProtocolRequestStream {
    type Item = Result<UnknownInteractionsClosedProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled UnknownInteractionsClosedProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x59282385962da24 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictOneWay {
                            control_handle,
                    })
                }
                0x5eda305d6b22f1f7 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWay {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x1323afa3e0541253 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayFields {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x68b32554eb0f6fa7 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnion {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x6e4a94d44b69e785 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayTable {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x4fa35d5433db4d3a => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayErr {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0xb22aebf23bb58fd => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayFieldsErr {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0xcd65d4d29a43c80 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnionErr {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x117dde20b92f7b90 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayTableErr {
                            responder:UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsClosedProtocolRequest {
    StrictOneWay {
        control_handle: UnknownInteractionsClosedProtocolControlHandle,
    },
    StrictTwoWay {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayResponder,
    },
    StrictTwoWayFields {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder,
    },
    StrictTwoWayUnion {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder,
    },
    StrictTwoWayTable {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayTableResponder,
    },
    StrictTwoWayErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayErrResponder,
    },
    StrictTwoWayFieldsErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder,
    },
    StrictTwoWayUnionErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder,
    },
    StrictTwoWayTableErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder,
    },
}

impl UnknownInteractionsClosedProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_one_way(self) -> Option<(UnknownInteractionsClosedProtocolControlHandle)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayTableResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayFieldsErr { responder } = self
        {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            UnknownInteractionsClosedProtocolRequest::StrictOneWay { .. } => "strict_one_way",
            UnknownInteractionsClosedProtocolRequest::StrictTwoWay { .. } => "strict_two_way",
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayFields { .. } => {
                "strict_two_way_fields"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnion { .. } => {
                "strict_two_way_union"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayTable { .. } => {
                "strict_two_way_table"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayErr { .. } => {
                "strict_two_way_err"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayFieldsErr { .. } => {
                "strict_two_way_fields_err"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnionErr { .. } => {
                "strict_two_way_union_err"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayTableErr { .. } => {
                "strict_two_way_table_err"
            }
        }
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsClosedProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for UnknownInteractionsClosedProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl UnknownInteractionsClosedProtocolControlHandle {
    pub fn send_strict_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload>(
            (),
            0,
            0xa8ee6ee302f693b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsClosedProtocolStrictEventFieldsRequest>(
            (some_field,),
            0,
            0x5d7c57b62e9c3a74,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_union(
        &self,
        mut payload: &UnknownInteractionsClosedProtocolStrictEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsClosedProtocolStrictEventUnionRequest>(
            payload,
            0,
            0x3b8475deeb4a9d64,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_table(
        &self,
        mut payload: &UnknownInteractionsClosedProtocolStrictEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsClosedProtocolStrictEventTableRequest>(
            payload,
            0,
            0x27da43fc85a7f5be,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_err(&self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(
            result,
            0,
            0x12b105b1430a1201,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_fields_err(
        &self,
        mut result: Result<i32, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse,
            i32,
        >>(
            result.map(|some_field| (some_field,)),
            0,
            0x2d16399d2e8a5c96,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_union_err(
        &self,
        mut result: Result<&UnknownInteractionsClosedProtocolStrictEventUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsClosedProtocolStrictEventUnionErrResponse,
            i32,
        >>(result, 0, 0x6dcf67f2a1d16034, fidl::encoding::DynamicFlags::empty())
    }

    pub fn send_strict_event_table_err(
        &self,
        mut result: Result<&UnknownInteractionsClosedProtocolStrictEventTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsClosedProtocolStrictEventTableErrResponse,
            i32,
        >>(result, 0, 0x4e90e92eafa9eefa, fidl::encoding::DynamicFlags::empty())
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::EmptyPayload>,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (some_field,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder
    for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder
{
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.map(|some_field| (some_field,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnknownInteractionsProtocolMarker;

impl fidl::endpoints::ProtocolMarker for UnknownInteractionsProtocolMarker {
    type Proxy = UnknownInteractionsProtocolProxy;
    type RequestStream = UnknownInteractionsProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) UnknownInteractionsProtocol";
}
pub type UnknownInteractionsProtocolStrictTwoWayErrResult = Result<(), i32>;
pub type UnknownInteractionsProtocolStrictTwoWayFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsProtocolStrictTwoWayUnionErrResult =
    Result<UnknownInteractionsProtocolStrictTwoWayUnionErrResponse, i32>;
pub type UnknownInteractionsProtocolStrictTwoWayTableErrResult =
    Result<UnknownInteractionsProtocolStrictTwoWayTableErrResponse, i32>;
pub type UnknownInteractionsProtocolFlexibleTwoWayErrResult = Result<(), i32>;
pub type UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult =
    Result<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse, i32>;
pub type UnknownInteractionsProtocolFlexibleTwoWayTableErrResult =
    Result<UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse, i32>;
pub type UnknownInteractionsProtocolStrictEventErrResult = Result<(), i32>;
pub type UnknownInteractionsProtocolStrictEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsProtocolStrictEventUnionErrResult =
    Result<UnknownInteractionsProtocolStrictEventUnionErrResponse, i32>;
pub type UnknownInteractionsProtocolStrictEventTableErrResult =
    Result<UnknownInteractionsProtocolStrictEventTableErrResponse, i32>;
pub type UnknownInteractionsProtocolFlexibleEventErrResult = Result<(), i32>;
pub type UnknownInteractionsProtocolFlexibleEventFieldsErrResult = Result<i32, i32>;
pub type UnknownInteractionsProtocolFlexibleEventUnionErrResult =
    Result<UnknownInteractionsProtocolFlexibleEventUnionErrResponse, i32>;
pub type UnknownInteractionsProtocolFlexibleEventTableErrResult =
    Result<UnknownInteractionsProtocolFlexibleEventTableErrResponse, i32>;

pub trait UnknownInteractionsProtocolProxyInterface: Send + Sync {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error>;
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error>;
    type StrictTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut;
    type StrictTwoWayFieldsResponseFut: std::future::Future<Output = Result<i32, fidl::Error>>
        + Send;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut;
    type StrictTwoWayUnionResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayUnionResponse, fidl::Error>,
        > + Send;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut;
    type StrictTwoWayTableResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayTableResponse, fidl::Error>,
        > + Send;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut;
    type StrictTwoWayErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut;
    type StrictTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut;
    type StrictTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayUnionErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut;
    type StrictTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolStrictTwoWayTableErrResult, fidl::Error>,
        > + Send;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut;
    type FlexibleTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#flexible_two_way(&self) -> Self::FlexibleTwoWayResponseFut;
    type FlexibleTwoWayFieldsResponseFut: std::future::Future<Output = Result<i32, fidl::Error>>
        + Send;
    fn r#flexible_two_way_fields(&self) -> Self::FlexibleTwoWayFieldsResponseFut;
    type FlexibleTwoWayUnionResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_union(&self) -> Self::FlexibleTwoWayUnionResponseFut;
    type FlexibleTwoWayTableResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayTableResponse, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_table(&self) -> Self::FlexibleTwoWayTableResponseFut;
    type FlexibleTwoWayErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayErrResult, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_err(&self) -> Self::FlexibleTwoWayErrResponseFut;
    type FlexibleTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_fields_err(&self) -> Self::FlexibleTwoWayFieldsErrResponseFut;
    type FlexibleTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_union_err(&self) -> Self::FlexibleTwoWayUnionErrResponseFut;
    type FlexibleTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult, fidl::Error>,
        > + Send;
    fn r#flexible_two_way_table_err(&self) -> Self::FlexibleTwoWayTableErrResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct UnknownInteractionsProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl UnknownInteractionsProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolEvent, fidl::Error> {
        UnknownInteractionsProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }

    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x4e7273b964d117a6,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x818bb3a7a910446,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn r#strict_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _response =
            self.client.send_query::<fidl::encoding::EmptyPayload, fidl::encoding::EmptyPayload>(
                (),
                0x734c996b0f37b942,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_response)
    }

    pub fn r#strict_two_way_fields(&self, ___deadline: zx::Time) -> Result<i32, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayFieldsResponse,
        >(
            (),
            0x334f4e7fff460ae3,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.some_field)
    }

    pub fn r#strict_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayUnionResponse, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayUnionResponse,
        >(
            (),
            0x2212805eca592cad,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#strict_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayTableResponse, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayTableResponse,
        >(
            (),
            0x746ebf8659ff23b7,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response)
    }

    pub fn r#strict_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayErrResult, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
        >(
            (),
            0x6d1c6002c51bb967,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#strict_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse,
                i32,
            >>(
                (), 0x2182a49480e5bd2b, fidl::encoding::DynamicFlags::empty(), ___deadline
            )?;
        Ok(_response.map(|x| x.some_field))
    }

    pub fn r#strict_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayUnionErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsProtocolStrictTwoWayUnionErrResponse,
                i32,
            >>(
                (), 0x453af745d38b20ca, fidl::encoding::DynamicFlags::empty(), ___deadline
            )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#strict_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolStrictTwoWayTableErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::ResultType<
                UnknownInteractionsProtocolStrictTwoWayTableErrResponse,
                i32,
            >>(
                (), 0x4c26c7ab89cb68d8, fidl::encoding::DynamicFlags::empty(), ___deadline
            )?;
        Ok(_response.map(|x| x))
    }

    pub fn r#flexible_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            fidl::encoding::FlexibleType<fidl::encoding::EmptyStruct>,
        >(
            (),
            0x4a5bb3397008b7c,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            ___deadline,
        )?
        .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way")?;
        Ok(_response)
    }

    pub fn r#flexible_two_way_fields(&self, ___deadline: zx::Time) -> Result<i32, fidl::Error> {
        let _response =
            self.client
                .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse,
                >>(
                    (), 0x3b13f82f44813a32, fidl::encoding::DynamicFlags::FLEXIBLE, ___deadline
                )?
                .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields")?;
        Ok(_response.some_field)
    }

    pub fn r#flexible_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse, fidl::Error> {
        let _response =
            self.client
                .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
                >>(
                    (), 0x44301e4e8d514fb6, fidl::encoding::DynamicFlags::FLEXIBLE, ___deadline
                )?
                .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union")?;
        Ok(_response)
    }

    pub fn r#flexible_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayTableResponse, fidl::Error> {
        let _response =
            self.client
                .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
                >>(
                    (), 0x7f492934b6c76187, fidl::encoding::DynamicFlags::FLEXIBLE, ___deadline
                )?
                .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table")?;
        Ok(_response)
    }

    pub fn r#flexible_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayErrResult, fidl::Error> {
        let _response = self.client.send_query::<
            fidl::encoding::EmptyPayload,
            fidl::encoding::FlexibleResultType<fidl::encoding::EmptyStruct, i32>,
        >(
            (),
            0x61240f878cc37c07,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            ___deadline,
        )?
        .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_err")?;
        Ok(_response.map(|x| x))
    }

    pub fn r#flexible_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleResultType<
                UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse,
                i32,
            >>(
                (), 0xf2b9611a9089b05, fidl::encoding::DynamicFlags::FLEXIBLE, ___deadline
            )?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields_err")?;
        Ok(_response.map(|x| x.some_field))
    }

    pub fn r#flexible_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleResultType<
                UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,
                i32,
            >>(
                (), 0x2172940a75f107d7, fidl::encoding::DynamicFlags::FLEXIBLE, ___deadline
            )?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union_err")?;
        Ok(_response.map(|x| x))
    }

    pub fn r#flexible_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult, fidl::Error> {
        let _response = self
            .client
            .send_query::<fidl::encoding::EmptyPayload, fidl::encoding::FlexibleResultType<
                UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,
                i32,
            >>(
                (), 0x6d8aab48e1693bf2, fidl::encoding::DynamicFlags::FLEXIBLE, ___deadline
            )?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table_err")?;
        Ok(_response.map(|x| x))
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for UnknownInteractionsProtocolProxy {
    type Protocol = UnknownInteractionsProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl UnknownInteractionsProtocolProxy {
    /// Create a new Proxy for UnknownInteractionsProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the UnknownInteractionsProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> UnknownInteractionsProtocolEventStream {
        UnknownInteractionsProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }

    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsProtocolProxyInterface::r#strict_one_way(self)
    }

    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_one_way(self)
    }

    pub fn r#strict_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way(self)
    }

    pub fn r#strict_two_way_fields(&self) -> fidl::client::QueryResponseFut<i32> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_fields(self)
    }

    pub fn r#strict_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayUnionResponse> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_union(self)
    }

    pub fn r#strict_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayTableResponse> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_table(self)
    }

    pub fn r#strict_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayErrResult> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_err(self)
    }

    pub fn r#strict_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult>
    {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_fields_err(self)
    }

    pub fn r#strict_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayUnionErrResult> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_union_err(self)
    }

    pub fn r#strict_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayTableErrResult> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_table_err(self)
    }

    pub fn r#flexible_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way(self)
    }

    pub fn r#flexible_two_way_fields(&self) -> fidl::client::QueryResponseFut<i32> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_fields(self)
    }

    pub fn r#flexible_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_union(self)
    }

    pub fn r#flexible_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayTableResponse>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_table(self)
    }

    pub fn r#flexible_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayErrResult> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_err(self)
    }

    pub fn r#flexible_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_fields_err(self)
    }

    pub fn r#flexible_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_union_err(self)
    }

    pub fn r#flexible_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_table_err(self)
    }
}

impl UnknownInteractionsProtocolProxyInterface for UnknownInteractionsProtocolProxy {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x4e7273b964d117a6,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<fidl::encoding::EmptyPayload>(
            (),
            0x818bb3a7a910446,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    type StrictTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response =
                fidl::client::decode_transaction_body::<fidl::encoding::EmptyPayload>(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, ()>(
            (),
            0x734c996b0f37b942,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<i32>;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i32, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsProtocolStrictTwoWayFieldsResponse,
            >(_buf?)?;
            Ok(_response.some_field)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, i32>(
            (),
            0x334f4e7fff460ae3,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayUnionResponse>;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayUnionResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsProtocolStrictTwoWayUnionResponse,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayUnionResponse,
        >(
            (),
            0x2212805eca592cad,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayTableResponse>;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayTableResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                UnknownInteractionsProtocolStrictTwoWayTableResponse,
            >(_buf?)?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayTableResponse,
        >(
            (),
            0x746ebf8659ff23b7,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayErrResult>;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayErrResult,
        >(
            (),
            0x6d1c6002c51bb967,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayFieldsErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult>;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayFieldsErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse,
                    i32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x.some_field))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayFieldsErrResult,
        >(
            (),
            0x2182a49480e5bd2b,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayUnionErrResult>;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayUnionErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsProtocolStrictTwoWayUnionErrResponse,
                    i32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayUnionErrResult,
        >(
            (),
            0x453af745d38b20ca,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type StrictTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolStrictTwoWayTableErrResult>;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolStrictTwoWayTableErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<
                    UnknownInteractionsProtocolStrictTwoWayTableErrResponse,
                    i32,
                >,
            >(_buf?)?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolStrictTwoWayTableErrResult,
        >(
            (),
            0x4c26c7ab89cb68d8,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type FlexibleTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#flexible_two_way(&self) -> Self::FlexibleTwoWayResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<(), fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleType<fidl::encoding::EmptyStruct>,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way")?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, ()>(
            (),
            0x4a5bb3397008b7c,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }

    type FlexibleTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<i32>;
    fn r#flexible_two_way_fields(&self) -> Self::FlexibleTwoWayFieldsResponseFut {
        fn _decode(mut _buf: Result<fidl::MessageBufEtc, fidl::Error>) -> Result<i32, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse,
                >,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields")?;
            Ok(_response.some_field)
        }
        self.client.send_query_and_decode::<fidl::encoding::EmptyPayload, i32>(
            (),
            0x3b13f82f44813a32,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }

    type FlexibleTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse>;
    fn r#flexible_two_way_union(&self) -> Self::FlexibleTwoWayUnionResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
                >,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union")?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
        >(
            (),
            0x44301e4e8d514fb6,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }

    type FlexibleTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayTableResponse>;
    fn r#flexible_two_way_table(&self) -> Self::FlexibleTwoWayTableResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayTableResponse, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleType<
                    UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
                >,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table")?;
            Ok(_response)
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
        >(
            (),
            0x7f492934b6c76187,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }

    type FlexibleTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayErrResult>;
    fn r#flexible_two_way_err(&self) -> Self::FlexibleTwoWayErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleResultType<fidl::encoding::EmptyStruct, i32>,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_err")?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayErrResult,
        >(
            (),
            0x61240f878cc37c07,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }

    type FlexibleTwoWayFieldsErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult>;
    fn r#flexible_two_way_fields_err(&self) -> Self::FlexibleTwoWayFieldsErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleResultType<
                    UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse,
                    i32,
                >,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields_err")?;
            Ok(_response.map(|x| x.some_field))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult,
        >(
            (),
            0xf2b9611a9089b05,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }

    type FlexibleTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult>;
    fn r#flexible_two_way_union_err(&self) -> Self::FlexibleTwoWayUnionErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleResultType<
                    UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,
                    i32,
                >,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union_err")?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult,
        >(
            (),
            0x2172940a75f107d7,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }

    type FlexibleTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult>;
    fn r#flexible_two_way_table_err(&self) -> Self::FlexibleTwoWayTableErrResponseFut {
        fn _decode(
            mut _buf: Result<fidl::MessageBufEtc, fidl::Error>,
        ) -> Result<UnknownInteractionsProtocolFlexibleTwoWayTableErrResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::FlexibleResultType<
                    UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,
                    i32,
                >,
            >(_buf?)?
            .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table_err")?;
            Ok(_response.map(|x| x))
        }
        self.client.send_query_and_decode::<
            fidl::encoding::EmptyPayload,
            UnknownInteractionsProtocolFlexibleTwoWayTableErrResult,
        >(
            (),
            0x6d8aab48e1693bf2,
            fidl::encoding::DynamicFlags::FLEXIBLE,
            _decode,
        )
    }
}

pub struct UnknownInteractionsProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for UnknownInteractionsProtocolEventStream {}

impl futures::stream::FusedStream for UnknownInteractionsProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for UnknownInteractionsProtocolEventStream {
    type Item = Result<UnknownInteractionsProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(UnknownInteractionsProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsProtocolEvent {
    StrictEvent {},
    StrictEventFields {
        some_field: i32,
    },
    StrictEventUnion {
        payload: UnknownInteractionsProtocolStrictEventUnionRequest,
    },
    StrictEventTable {
        payload: UnknownInteractionsProtocolStrictEventTableRequest,
    },
    StrictEventErr {
        result: UnknownInteractionsProtocolStrictEventErrResult,
    },
    StrictEventFieldsErr {
        result: UnknownInteractionsProtocolStrictEventFieldsErrResult,
    },
    StrictEventUnionErr {
        result: UnknownInteractionsProtocolStrictEventUnionErrResult,
    },
    StrictEventTableErr {
        result: UnknownInteractionsProtocolStrictEventTableErrResult,
    },
    FlexibleEvent {},
    FlexibleEventFields {
        some_field: i32,
    },
    FlexibleEventUnion {
        payload: UnknownInteractionsProtocolFlexibleEventUnionRequest,
    },
    FlexibleEventTable {
        payload: UnknownInteractionsProtocolFlexibleEventTableRequest,
    },
    FlexibleEventErr {
        result: UnknownInteractionsProtocolFlexibleEventErrResult,
    },
    FlexibleEventFieldsErr {
        result: UnknownInteractionsProtocolFlexibleEventFieldsErrResult,
    },
    FlexibleEventUnionErr {
        result: UnknownInteractionsProtocolFlexibleEventUnionErrResult,
    },
    FlexibleEventTableErr {
        result: UnknownInteractionsProtocolFlexibleEventTableErrResult,
    },
    #[non_exhaustive]
    _UnknownEvent {
        /// Ordinal of the event that was sent.
        ordinal: u64,
    },
}

impl UnknownInteractionsProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event(self) -> Option<()> {
        if let UnknownInteractionsProtocolEvent::StrictEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsProtocolEvent::StrictEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventUnionRequest> {
        if let UnknownInteractionsProtocolEvent::StrictEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventTableRequest> {
        if let UnknownInteractionsProtocolEvent::StrictEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_err(self) -> Option<UnknownInteractionsProtocolStrictEventErrResult> {
        if let UnknownInteractionsProtocolEvent::StrictEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventFieldsErrResult> {
        if let UnknownInteractionsProtocolEvent::StrictEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union_err(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventUnionErrResult> {
        if let UnknownInteractionsProtocolEvent::StrictEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table_err(
        self,
    ) -> Option<UnknownInteractionsProtocolStrictEventTableErrResult> {
        if let UnknownInteractionsProtocolEvent::StrictEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event(self) -> Option<()> {
        if let UnknownInteractionsProtocolEvent::FlexibleEvent {} = self {
            Some(())
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields(self) -> Option<i32> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventUnionRequest> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventTableRequest> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_err(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventErrResult> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields_err(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventFieldsErrResult> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union_err(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventUnionErrResult> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }
    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table_err(
        self,
    ) -> Option<UnknownInteractionsProtocolFlexibleEventTableErrResult> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`UnknownInteractionsProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<UnknownInteractionsProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x9842669255c4fc1 => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEvent {
                    }
                ))
            }
            0x7b75ae46520ee732 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolStrictEventFieldsRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsProtocolStrictEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x3663b5197598cbda => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolStrictEventUnionRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsProtocolStrictEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventUnion {payload: out,
                    }
                ))
            }
            0x25a10039a9f96910 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolStrictEventTableRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsProtocolStrictEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventTable {payload: out,
                    }
                ))
            }
            0x3d956048f723bc6d => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0x72c0566865e53c8b => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventFieldsErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0x40f96851e6f82abb => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventUnionErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x6ca24cbed7b2784a => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventTableErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsProtocolStrictEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            0x61bb1fab7d767866 => {
                let mut out = fidl::new_empty!(fidl::encoding::EmptyPayload);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEvent {
                    }
                ))
            }
            0x3226dff9b0c1d801 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolFlexibleEventFieldsRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsProtocolFlexibleEventFieldsRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventFields {some_field: out.some_field,

                    }
                ))
            }
            0x22afd161ca71e467 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolFlexibleEventUnionRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsProtocolFlexibleEventUnionRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventUnion {payload: out,
                    }
                ))
            }
            0x4f72dd46888b89e0 => {
                let mut out = fidl::new_empty!(UnknownInteractionsProtocolFlexibleEventTableRequest);
                fidl::encoding::Decoder::decode_into::<UnknownInteractionsProtocolFlexibleEventTableRequest>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventTable {payload: out,
                    }
                ))
            }
            0x4bda3e6fb22bb5a9 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventErr {result: out.map(|x| x),
                    }
                ))
            }
            0xf370ade2f7c7a4a => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventFieldsErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventFieldsErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventFieldsErr {result: out.map(|x| x.some_field),
                    }
                ))
            }
            0xc94989e5f6707ec => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventUnionErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventUnionErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventUnionErr {result: out.map(|x| x),
                    }
                ))
            }
            0x4dca02085aeb2d43 => {
                let mut out = fidl::new_empty!(fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventTableErrResponse, i32>);
                fidl::encoding::Decoder::decode_into::<fidl::encoding::ResultType<UnknownInteractionsProtocolFlexibleEventTableErrResponse, i32>>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventTableErr {result: out.map(|x| x),
                    }
                ))
            }
            _ if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                Ok(UnknownInteractionsProtocolEvent::_UnknownEvent {
                    ordinal: tx_header.ordinal(),
                })
                // MessageBufEtc will close handles on drop, before the
                // application can handle the _UnknownEvent variant, so this
                // satisfies the RFC-0138 requirement to close handles first.
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for UnknownInteractionsProtocol
pub struct UnknownInteractionsProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for UnknownInteractionsProtocolRequestStream {}

impl futures::stream::FusedStream for UnknownInteractionsProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for UnknownInteractionsProtocolRequestStream {
    type Protocol = UnknownInteractionsProtocolMarker;
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        UnknownInteractionsProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for UnknownInteractionsProtocolRequestStream {
    type Item = Result<UnknownInteractionsProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled UnknownInteractionsProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x4e7273b964d117a6 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictOneWay {
                            control_handle,
                    })
                }
                0x818bb3a7a910446 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleOneWay {
                            control_handle,
                    })
                }
                0x734c996b0f37b942 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWay {
                            responder:UnknownInteractionsProtocolStrictTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x334f4e7fff460ae3 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayFields {
                            responder:UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x2212805eca592cad => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayUnion {
                            responder:UnknownInteractionsProtocolStrictTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x746ebf8659ff23b7 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayTable {
                            responder:UnknownInteractionsProtocolStrictTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x6d1c6002c51bb967 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayErr {
                            responder:UnknownInteractionsProtocolStrictTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x2182a49480e5bd2b => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayFieldsErr {
                            responder:UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x453af745d38b20ca => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayUnionErr {
                            responder:UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x4c26c7ab89cb68d8 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayTableErr {
                            responder:UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x4a5bb3397008b7c => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWay {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x3b13f82f44813a32 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayFields {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x44301e4e8d514fb6 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayUnion {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x7f492934b6c76187 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayTable {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x61240f878cc37c07 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayErr {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0xf2b9611a9089b05 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayFieldsErr {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x2172940a75f107d7 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayUnionErr {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                0x6d8aab48e1693bf2 => {
                    let mut req = fidl::new_empty!(fidl::encoding::EmptyPayload);
                    fidl::encoding::Decoder::decode_into::<fidl::encoding::EmptyPayload>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayTableErr {
                            responder:UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },
                    })
                }
                _ if header.tx_id() == 0 && header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };
                    Ok(UnknownInteractionsProtocolRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                        unknown_method_type: fidl::endpoints::UnknownMethodType::OneWay,
                    })
                    // with_tls_decode_buf will clear the handles when we return
                    // before the application can handle the _UnknownMethod, so
                    // we don't need to clear it explicitly to meet the RFC
                    // requirement to close handles before calling an unknown
                    // interaction handler.
                }
                _ if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    let msg = fidl::encoding::TransactionMessage {
                        header: fidl::encoding::TransactionHeader::new(
                            header.tx_id(), header.ordinal(), header.dynamic_flags(),
                        ),
                        body: fidl::encoding::Flexible::<()>::FrameworkErr(
                            fidl::encoding::FrameworkErr::UnknownMethod
                        ),
                    };

                    // RFC-0138 requires us to close handles in the incoming
                    // message before replying, so we can't wait for
                    // with_tls_decode_buf to auto-clear handles when we return.
                    handles.clear();

                    // We are inside of with_tls_decode_buf, so we can't use
                    // with_tls_encode_buf. However, we know that the unknown
                    // interaction reply will not contain any handles, so
                    // creating a new Vec here does not cause an allocation.
                    let mut handles = Vec::new();
                    fidl::encoding::Encoder::encode::<
                        fidl::encoding::TransactionMessageType<fidl::encoding::FlexibleType<fidl::encoding::EmptyStruct>>
                    >(bytes, &mut handles, msg)?;
                    control_handle.inner.send_raw_msg(&*bytes, &mut handles)?;

                    Ok(UnknownInteractionsProtocolRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                        unknown_method_type: fidl::endpoints::UnknownMethodType::TwoWay,
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsProtocolRequest {
    StrictOneWay {
        control_handle: UnknownInteractionsProtocolControlHandle,
    },
    FlexibleOneWay {
        control_handle: UnknownInteractionsProtocolControlHandle,
    },
    StrictTwoWay {
        responder: UnknownInteractionsProtocolStrictTwoWayResponder,
    },
    StrictTwoWayFields {
        responder: UnknownInteractionsProtocolStrictTwoWayFieldsResponder,
    },
    StrictTwoWayUnion {
        responder: UnknownInteractionsProtocolStrictTwoWayUnionResponder,
    },
    StrictTwoWayTable {
        responder: UnknownInteractionsProtocolStrictTwoWayTableResponder,
    },
    StrictTwoWayErr {
        responder: UnknownInteractionsProtocolStrictTwoWayErrResponder,
    },
    StrictTwoWayFieldsErr {
        responder: UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder,
    },
    StrictTwoWayUnionErr {
        responder: UnknownInteractionsProtocolStrictTwoWayUnionErrResponder,
    },
    StrictTwoWayTableErr {
        responder: UnknownInteractionsProtocolStrictTwoWayTableErrResponder,
    },
    FlexibleTwoWay {
        responder: UnknownInteractionsProtocolFlexibleTwoWayResponder,
    },
    FlexibleTwoWayFields {
        responder: UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder,
    },
    FlexibleTwoWayUnion {
        responder: UnknownInteractionsProtocolFlexibleTwoWayUnionResponder,
    },
    FlexibleTwoWayTable {
        responder: UnknownInteractionsProtocolFlexibleTwoWayTableResponder,
    },
    FlexibleTwoWayErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayErrResponder,
    },
    FlexibleTwoWayFieldsErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder,
    },
    FlexibleTwoWayUnionErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder,
    },
    FlexibleTwoWayTableErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder,
    },
    /// An interaction was received which does not match any known method.
    #[non_exhaustive]
    _UnknownMethod {
        /// Ordinal of the method that was called.
        ordinal: u64,
        control_handle: UnknownInteractionsProtocolControlHandle,
        unknown_method_type: fidl::endpoints::UnknownMethodType,
    },
}

impl UnknownInteractionsProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_one_way(self) -> Option<(UnknownInteractionsProtocolControlHandle)> {
        if let UnknownInteractionsProtocolRequest::StrictOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_one_way(self) -> Option<(UnknownInteractionsProtocolControlHandle)> {
        if let UnknownInteractionsProtocolRequest::FlexibleOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way(self) -> Option<(UnknownInteractionsProtocolStrictTwoWayResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayFieldsResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayUnionResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayTableResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayFieldsErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayUnionErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayTableErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayUnionResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayTableResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayFieldsErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            UnknownInteractionsProtocolRequest::StrictOneWay { .. } => "strict_one_way",
            UnknownInteractionsProtocolRequest::FlexibleOneWay { .. } => "flexible_one_way",
            UnknownInteractionsProtocolRequest::StrictTwoWay { .. } => "strict_two_way",
            UnknownInteractionsProtocolRequest::StrictTwoWayFields { .. } => {
                "strict_two_way_fields"
            }
            UnknownInteractionsProtocolRequest::StrictTwoWayUnion { .. } => "strict_two_way_union",
            UnknownInteractionsProtocolRequest::StrictTwoWayTable { .. } => "strict_two_way_table",
            UnknownInteractionsProtocolRequest::StrictTwoWayErr { .. } => "strict_two_way_err",
            UnknownInteractionsProtocolRequest::StrictTwoWayFieldsErr { .. } => {
                "strict_two_way_fields_err"
            }
            UnknownInteractionsProtocolRequest::StrictTwoWayUnionErr { .. } => {
                "strict_two_way_union_err"
            }
            UnknownInteractionsProtocolRequest::StrictTwoWayTableErr { .. } => {
                "strict_two_way_table_err"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWay { .. } => "flexible_two_way",
            UnknownInteractionsProtocolRequest::FlexibleTwoWayFields { .. } => {
                "flexible_two_way_fields"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayUnion { .. } => {
                "flexible_two_way_union"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayTable { .. } => {
                "flexible_two_way_table"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayErr { .. } => "flexible_two_way_err",
            UnknownInteractionsProtocolRequest::FlexibleTwoWayFieldsErr { .. } => {
                "flexible_two_way_fields_err"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayUnionErr { .. } => {
                "flexible_two_way_union_err"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayTableErr { .. } => {
                "flexible_two_way_table_err"
            }
            UnknownInteractionsProtocolRequest::_UnknownMethod {
                unknown_method_type: fidl::endpoints::UnknownMethodType::OneWay,
                ..
            } => "unknown one-way method",
            UnknownInteractionsProtocolRequest::_UnknownMethod {
                unknown_method_type: fidl::endpoints::UnknownMethodType::TwoWay,
                ..
            } => "unknown two-way method",
        }
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for UnknownInteractionsProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> fidl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl UnknownInteractionsProtocolControlHandle {
    pub fn send_strict_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload>(
            (),
            0,
            0x9842669255c4fc1,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolStrictEventFieldsRequest>(
            (some_field,),
            0,
            0x7b75ae46520ee732,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_union(
        &self,
        mut payload: &UnknownInteractionsProtocolStrictEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolStrictEventUnionRequest>(
            payload,
            0,
            0x3663b5197598cbda,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_table(
        &self,
        mut payload: &UnknownInteractionsProtocolStrictEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolStrictEventTableRequest>(
            payload,
            0,
            0x25a10039a9f96910,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_err(&self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(
            result,
            0,
            0x3d956048f723bc6d,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_fields_err(
        &self,
        mut result: Result<i32, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolStrictEventFieldsErrResponse,
            i32,
        >>(
            result.map(|some_field| (some_field,)),
            0,
            0x72c0566865e53c8b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }

    pub fn send_strict_event_union_err(
        &self,
        mut result: Result<&UnknownInteractionsProtocolStrictEventUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolStrictEventUnionErrResponse,
            i32,
        >>(result, 0, 0x40f96851e6f82abb, fidl::encoding::DynamicFlags::empty())
    }

    pub fn send_strict_event_table_err(
        &self,
        mut result: Result<&UnknownInteractionsProtocolStrictEventTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolStrictEventTableErrResponse,
            i32,
        >>(result, 0, 0x6ca24cbed7b2784a, fidl::encoding::DynamicFlags::empty())
    }

    pub fn send_flexible_event(&self) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::EmptyPayload>(
            (),
            0,
            0x61bb1fab7d767866,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolFlexibleEventFieldsRequest>(
            (some_field,),
            0,
            0x3226dff9b0c1d801,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_union(
        &self,
        mut payload: &UnknownInteractionsProtocolFlexibleEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolFlexibleEventUnionRequest>(
            payload,
            0,
            0x22afd161ca71e467,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_table(
        &self,
        mut payload: &UnknownInteractionsProtocolFlexibleEventTableRequest,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<UnknownInteractionsProtocolFlexibleEventTableRequest>(
            payload,
            0,
            0x4f72dd46888b89e0,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_err(&self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>>(
            result,
            0,
            0x4bda3e6fb22bb5a9,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_fields_err(
        &self,
        mut result: Result<i32, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolFlexibleEventFieldsErrResponse,
            i32,
        >>(
            result.map(|some_field| (some_field,)),
            0,
            0xf370ade2f7c7a4a,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }

    pub fn send_flexible_event_union_err(
        &self,
        mut result: Result<&UnknownInteractionsProtocolFlexibleEventUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolFlexibleEventUnionErrResponse,
            i32,
        >>(result, 0, 0xc94989e5f6707ec, fidl::encoding::DynamicFlags::FLEXIBLE)
    }

    pub fn send_flexible_event_table_err(
        &self,
        mut result: Result<&UnknownInteractionsProtocolFlexibleEventTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        self.inner.send::<fidl::encoding::ResultType<
            UnknownInteractionsProtocolFlexibleEventTableErrResponse,
            i32,
        >>(result, 0, 0x4dca02085aeb2d43, fidl::encoding::DynamicFlags::FLEXIBLE)
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<fidl::encoding::EmptyPayload>,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: (some_field,),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsProtocolStrictTwoWayFieldsResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsProtocolStrictTwoWayUnionResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: payload,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    UnknownInteractionsProtocolStrictTwoWayTableResponse,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<fidl::encoding::EmptyStruct, i32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result.map(|some_field| (some_field,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&UnknownInteractionsProtocolStrictTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&UnknownInteractionsProtocolStrictTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&UnknownInteractionsProtocolStrictTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsProtocolStrictTwoWayUnionErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&UnknownInteractionsProtocolStrictTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&UnknownInteractionsProtocolStrictTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&UnknownInteractionsProtocolStrictTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: result,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::ResultType<
                        UnknownInteractionsProtocolStrictTwoWayTableErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::Flexible::new(()),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleType<fidl::encoding::EmptyStruct>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::Flexible::new((some_field,)),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleType<
                        UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::Flexible::new(payload),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleType<
                        UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::Flexible::new(payload),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleType<
                        UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<(), i32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::FlexibleResult::new(result),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleResultType<fidl::encoding::EmptyStruct, i32>,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut result: Result<i32, i32>) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::FlexibleResult::new(result.map(|some_field| (some_field,))),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleResultType<
                        UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::FlexibleResult::new(result),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleResultType<
                        UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: Result<&UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: Result<&UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut result: Result<&UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse, i32>,
    ) -> Result<(), fidl::Error> {
        let msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: fidl::encoding::FlexibleResult::new(result),
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::encoding::Encoder::encode::<
                fidl::encoding::TransactionMessageType<
                    fidl::encoding::FlexibleResultType<
                        UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,
                        i32,
                    >,
                >,
            >(bytes, handles, msg)?;
            self.control_handle.inner.send_raw_msg(&*bytes, &mut *handles)
        })
    }
}

mod internal {
    use super::*;

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest>
        for &UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest>(
                    offset,
                );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest)
                    .write_unaligned(
                        (self as *const UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest>(
                    offset,
                );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsAjarProtocolStrictEventFieldsRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsAjarProtocolStrictEventFieldsRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictEventFieldsRequest>
        for &UnknownInteractionsAjarProtocolStrictEventFieldsRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolStrictEventFieldsRequest>(
                offset,
            );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsAjarProtocolStrictEventFieldsRequest)
                    .write_unaligned(
                        (self as *const UnknownInteractionsAjarProtocolStrictEventFieldsRequest)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictEventFieldsRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolStrictEventFieldsRequest>(
                offset,
            );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictEventFieldsRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse>
        for &UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse>(
                    offset,
                );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse)
                    .write_unaligned(
                        (self as *const UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse>(
                    offset,
                );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl
        fidl::encoding::Encode<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse>
        for &UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse>(offset);
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse)
                    .write_unaligned(
                    (self as *const UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse)
                        .read(),
                );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse>
        for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self>
        for UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse
    {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse>
        for &UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse>(
                    offset,
                );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse)
                    .write_unaligned(
                        (self
                            as *const UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse>
        for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse>(
                    offset,
                );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse>
        for &UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse>(
                    offset,
                );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse)
                    .write_unaligned(
                        (self
                            as *const UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse>
        for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse>(
                    offset,
                );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictEventFieldsRequest
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsClosedProtocolStrictEventFieldsRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictEventFieldsRequest>
        for &UnknownInteractionsClosedProtocolStrictEventFieldsRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsClosedProtocolStrictEventFieldsRequest>(
                    offset,
                );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsClosedProtocolStrictEventFieldsRequest)
                    .write_unaligned(
                        (self as *const UnknownInteractionsClosedProtocolStrictEventFieldsRequest)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictEventFieldsRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsClosedProtocolStrictEventFieldsRequest>(
                    offset,
                );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsClosedProtocolStrictEventFieldsRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse>
        for &UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse>(
                    offset,
                );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse)
                    .write_unaligned(
                        (self
                            as *const UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse>
        for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse>(
                    offset,
                );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl
        fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse>
        for &UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse>(offset);
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse)
                    .write_unaligned(
                    (self as *const UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse)
                        .read(),
                );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse>
        for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self>
        for UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse
    {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl
        fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse>
        for &UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse>(offset);
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse)
                    .write_unaligned(
                    (self as *const UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse)
                        .read(),
                );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse>
        for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self>
        for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse
    {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolFlexibleEventFieldsRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleEventFieldsRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleEventFieldsRequest>
        for &UnknownInteractionsProtocolFlexibleEventFieldsRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolFlexibleEventFieldsRequest>(
                offset,
            );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsProtocolFlexibleEventFieldsRequest)
                    .write_unaligned(
                        (self as *const UnknownInteractionsProtocolFlexibleEventFieldsRequest)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleEventFieldsRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolFlexibleEventFieldsRequest>(
                offset,
            );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleEventFieldsRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictEventFieldsRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictEventFieldsRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictEventFieldsRequest>
        for &UnknownInteractionsProtocolStrictEventFieldsRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolStrictEventFieldsRequest>(offset);
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsProtocolStrictEventFieldsRequest)
                    .write_unaligned(
                        (self as *const UnknownInteractionsProtocolStrictEventFieldsRequest).read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsProtocolStrictEventFieldsRequest> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolStrictEventFieldsRequest>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictEventFieldsRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictTwoWayFieldsResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictTwoWayFieldsResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictTwoWayFieldsResponse>
        for &UnknownInteractionsProtocolStrictTwoWayFieldsResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictTwoWayFieldsResponse>(
                offset,
            );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsProtocolStrictTwoWayFieldsResponse)
                    .write_unaligned(
                        (self as *const UnknownInteractionsProtocolStrictTwoWayFieldsResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsProtocolStrictTwoWayFieldsResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictTwoWayFieldsResponse>(
                offset,
            );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictTwoWayFieldsResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsProtocolFlexibleEventFieldsErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleEventFieldsErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleEventFieldsErrResponse>
        for &UnknownInteractionsProtocolFlexibleEventFieldsErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolFlexibleEventFieldsErrResponse>(
                    offset,
                );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsProtocolFlexibleEventFieldsErrResponse)
                    .write_unaligned(
                        (self as *const UnknownInteractionsProtocolFlexibleEventFieldsErrResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleEventFieldsErrResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolFlexibleEventFieldsErrResponse>(
                    offset,
                );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleEventFieldsErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse>
        for &UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse>(
                    offset,
                );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse)
                    .write_unaligned(
                        (self as *const UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse>
        for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse>(
                    offset,
                );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse>
        for &UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse>(
                offset,
            );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse)
                    .write_unaligned(
                        (self as *const UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse>(
                offset,
            );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictEventFieldsErrResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictEventFieldsErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictEventFieldsErrResponse>
        for &UnknownInteractionsProtocolStrictEventFieldsErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictEventFieldsErrResponse>(
                offset,
            );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsProtocolStrictEventFieldsErrResponse)
                    .write_unaligned(
                        (self as *const UnknownInteractionsProtocolStrictEventFieldsErrResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsProtocolStrictEventFieldsErrResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictEventFieldsErrResponse>(
                offset,
            );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictEventFieldsErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 4,
                fidl::encoding::WireFormatVersion::V2 => 4,
            }
        }
        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            true
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse>
        for &UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse>(
                offset,
            );
            unsafe {
                // Copy the object into the buffer.
                let buf_ptr = encoder.buf.as_mut_ptr().add(offset);
                (buf_ptr as *mut UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse)
                    .write_unaligned(
                        (self as *const UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse)
                            .read(),
                    );
                // Zero out padding regions. Unlike `fidl_struct_impl_noncopy!`, this must be
                // done second because the memcpy will write garbage to these bytes.
            }
            Ok(())
        }
    }
    unsafe impl<T0: fidl::encoding::Encode<i32>>
        fidl::encoding::Encode<UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse> for (T0,)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse>(
                offset,
            );
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => {}
                fidl::encoding::WireFormatVersion::V2 => {}
            };
            // Write the fields.
            let member_offset = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 0,
                fidl::encoding::WireFormatVersion::V2 => 0,
            };
            self.0.encode(encoder, offset + member_offset, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self { some_field: fidl::new_empty!(i32) }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let buf_ptr = unsafe { decoder.buf.as_ptr().add(offset) };
            // Verify that padding bytes are zero.
            // Copy from the buffer into the object.
            unsafe {
                std::ptr::copy_nonoverlapping(buf_ptr, self as *mut Self as *mut u8, 4);
            }
            Ok(())
        }
    }

    impl UnknownInteractionsAjarProtocolFlexibleEventTableRequest {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolFlexibleEventTableRequest
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsAjarProtocolFlexibleEventTableRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolFlexibleEventTableRequest>
        for &UnknownInteractionsAjarProtocolFlexibleEventTableRequest
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolFlexibleEventTableRequest>(
                offset,
            );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolFlexibleEventTableRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsAjarProtocolStrictEventTableRequest {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsAjarProtocolStrictEventTableRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsAjarProtocolStrictEventTableRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictEventTableRequest>
        for &UnknownInteractionsAjarProtocolStrictEventTableRequest
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolStrictEventTableRequest>(
                offset,
            );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictEventTableRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolStrictTwoWayTableResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse>
        for &UnknownInteractionsAjarProtocolStrictTwoWayTableResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolStrictTwoWayTableResponse>(
                offset,
            );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse>
        for &UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse>(
                    offset,
                );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsAjarProtocolStrictEventTableErrResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolStrictEventTableErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsAjarProtocolStrictEventTableErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictEventTableErrResponse>
        for &UnknownInteractionsAjarProtocolStrictEventTableErrResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictEventTableErrResponse>(
                    offset,
                );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictEventTableErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse>
        for &UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse>(
                    offset,
                );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsClosedProtocolStrictEventTableRequest {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictEventTableRequest
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsClosedProtocolStrictEventTableRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictEventTableRequest>
        for &UnknownInteractionsClosedProtocolStrictEventTableRequest
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsClosedProtocolStrictEventTableRequest>(
                offset,
            );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsClosedProtocolStrictEventTableRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayTableResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayTableResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse>
        for &UnknownInteractionsClosedProtocolStrictTwoWayTableResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsClosedProtocolStrictTwoWayTableResponse>(
                    offset,
                );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsClosedProtocolStrictEventTableErrResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictEventTableErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsClosedProtocolStrictEventTableErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictEventTableErrResponse>
        for &UnknownInteractionsClosedProtocolStrictEventTableErrResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsClosedProtocolStrictEventTableErrResponse>(
                    offset,
                );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsClosedProtocolStrictEventTableErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl
        fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse>
        for &UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self>
        for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse
    {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsProtocolFlexibleEventTableRequest {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolFlexibleEventTableRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleEventTableRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleEventTableRequest>
        for &UnknownInteractionsProtocolFlexibleEventTableRequest
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolFlexibleEventTableRequest>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleEventTableRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsProtocolStrictEventTableRequest {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictEventTableRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictEventTableRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictEventTableRequest>
        for &UnknownInteractionsProtocolStrictEventTableRequest
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolStrictEventTableRequest>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictEventTableRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsProtocolStrictTwoWayTableResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictTwoWayTableResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictTwoWayTableResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictTwoWayTableResponse>
        for &UnknownInteractionsProtocolStrictTwoWayTableResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolStrictTwoWayTableResponse>(offset);
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictTwoWayTableResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsProtocolFlexibleEventTableErrResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsProtocolFlexibleEventTableErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleEventTableErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleEventTableErrResponse>
        for &UnknownInteractionsProtocolFlexibleEventTableErrResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolFlexibleEventTableErrResponse>(
                offset,
            );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleEventTableErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse>
        for &UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse>(
                    offset,
                );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsProtocolFlexibleTwoWayTableResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolFlexibleTwoWayTableResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleTwoWayTableResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleTwoWayTableResponse>
        for &UnknownInteractionsProtocolFlexibleTwoWayTableResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolFlexibleTwoWayTableResponse>(
                offset,
            );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleTwoWayTableResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsProtocolStrictEventTableErrResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictEventTableErrResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictEventTableErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictEventTableErrResponse>
        for &UnknownInteractionsProtocolStrictEventTableErrResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictEventTableErrResponse>(
                offset,
            );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictEventTableErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    impl UnknownInteractionsProtocolStrictTwoWayTableErrResponse {
        #[inline(always)]
        fn max_ordinal_present(&self) -> u64 {
            if let Some(_) = self.some_field {
                return 1;
            }
            0
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictTwoWayTableErrResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            16
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictTwoWayTableErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictTwoWayTableErrResponse>
        for &UnknownInteractionsProtocolStrictTwoWayTableErrResponse
    {
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictTwoWayTableErrResponse>(
                offset,
            );
            // Vector header
            let max_ordinal: u64 = self.max_ordinal_present();
            encoder.write_num(max_ordinal, offset);
            encoder.write_num(fidl::encoding::ALLOC_PRESENT_U64, offset + 8);
            // write_out_of_line must not be called with a zero-sized out-of-line block.
            if max_ordinal == 0 {
                return Ok(());
            }
            depth.increment()?;
            let envelope_size = match encoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = (max_ordinal as usize) * envelope_size;
            #[allow(unused_variables)]
            let offset = encoder.out_of_line_offset(bytes_len);
            let mut _prev_end_offset: usize = 0;
            if 1 > max_ordinal {
                return Ok(());
            }

            // Write at offset+(ordinal-1)*envelope_size, since ordinals are one-based and envelopes
            // are envelope_size bytes.
            let cur_offset: usize = (1 - 1) * envelope_size;

            // Zero reserved fields.
            encoder.padding(offset + _prev_end_offset, cur_offset - _prev_end_offset);

            // Safety:
            // - bytes_len is calculated to fit envelope_size*max(member.ordinal).
            // - Since cur_offset is envelope_size*(member.ordinal - 1) and the envelope takes
            //   envelope_size bytes, there is always sufficient room.
            fidl::encoding::encode_in_envelope_optional::<i32>(
                self.some_field.as_ref().map(<i32 as fidl::encoding::ValueTypeMarker>::borrow),
                encoder,
                offset + cur_offset,
                depth,
            )?;

            _prev_end_offset = cur_offset + envelope_size;

            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictTwoWayTableErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::default()
        }

        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let len = match fidl::encoding::decode_vector_header(decoder, offset)? {
                None => return Err(fidl::Error::NotNullable),
                Some(len) => len,
            };
            depth.increment()?;
            let envelope_size = match decoder.context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 16,
                fidl::encoding::WireFormatVersion::V2 => 8,
            };
            let bytes_len = len * envelope_size;
            let offset = decoder.out_of_line_offset(bytes_len)?;
            // Decode the envelope for each type.
            let mut _next_ordinal_to_read = 0;
            let mut next_offset = offset;
            let end_offset = offset + bytes_len;
            _next_ordinal_to_read += 1;
            if next_offset >= end_offset {
                return Ok(());
            }

            // Decode unknown envelopes for gaps in ordinals.
            while _next_ordinal_to_read < 1 {
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                _next_ordinal_to_read += 1;
                next_offset += envelope_size;
            }

            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            if let Some((inlined, num_bytes, num_handles)) =
                fidl::encoding::decode_envelope_header(decoder, next_offset)?
            {
                let member_inline_size =
                    <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context);
                if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                    if inlined != (member_inline_size <= 4) {
                        return Err(fidl::Error::InvalidInlineBitInEnvelope);
                    }
                }
                let inner_offset;
                let mut inner_depth = depth.clone();
                if inlined {
                    decoder.check_inline_envelope_padding(next_offset, member_inline_size)?;
                    inner_offset = next_offset;
                } else {
                    inner_offset = decoder.out_of_line_offset(member_inline_size)?;
                    inner_depth.increment()?;
                }
                let val_ref = self.some_field.get_or_insert_with(|| fidl::new_empty!(i32));
                fidl::decode!(i32, val_ref, decoder, inner_offset, inner_depth)?;
                if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize)
                {
                    return Err(fidl::Error::InvalidNumBytesInEnvelope);
                }
                if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                    return Err(fidl::Error::InvalidNumHandlesInEnvelope);
                }
            }

            next_offset += envelope_size;

            // Decode the remaining unknown envelopes.
            while next_offset < end_offset {
                _next_ordinal_to_read += 1;
                fidl::encoding::decode_unknown_envelope(decoder, next_offset, depth)?;
                next_offset += envelope_size;
            }

            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolFlexibleEventUnionRequest
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolFlexibleEventUnionRequest>
        for &UnknownInteractionsAjarProtocolFlexibleEventUnionRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolFlexibleEventUnionRequest>(
                offset,
            );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::SomeField(_) =
                        self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsAjarProtocolStrictEventUnionRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsAjarProtocolStrictEventUnionRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictEventUnionRequest>
        for &UnknownInteractionsAjarProtocolStrictEventUnionRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolStrictEventUnionRequest>(
                offset,
            );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsAjarProtocolStrictEventUnionRequest::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsAjarProtocolStrictEventUnionRequest::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictEventUnionRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolStrictEventUnionRequest::SomeField(_) =
                        self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsAjarProtocolStrictEventUnionRequest::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolStrictEventUnionRequest::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsAjarProtocolStrictEventUnionRequest::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse>
        for &UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse>(
                offset,
            );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::SomeField(_) =
                        self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse>
        for &UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse>(
                    offset,
                );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse::SomeField(
                    ref val,
                ) => fidl::encoding::encode_in_envelope::<i32>(
                    <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                    encoder,
                    offset + 8,
                    _depth,
                ),
                #[allow(deprecated)]
                UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse::__Unknown {
                    ..
                } => Err(fidl::Error::UnknownUnionTag),
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse::SomeField(
                        _,
                    ) = self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self =
                            UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse::SomeField(
                                fidl::new_empty!(i32),
                            );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self =
                        UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse::__Unknown {
                            ordinal,
                        };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolStrictEventUnionErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsAjarProtocolStrictEventUnionErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictEventUnionErrResponse>
        for &UnknownInteractionsAjarProtocolStrictEventUnionErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictEventUnionErrResponse>(
                    offset,
                );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsAjarProtocolStrictEventUnionErrResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsAjarProtocolStrictEventUnionErrResponse::__Unknown {
                    ..
                } => Err(fidl::Error::UnknownUnionTag),
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolStrictEventUnionErrResponse::SomeField(
                        _,
                    ) = self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self =
                            UnknownInteractionsAjarProtocolStrictEventUnionErrResponse::SomeField(
                                fidl::new_empty!(i32),
                            );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolStrictEventUnionErrResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsAjarProtocolStrictEventUnionErrResponse::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse>
        for &UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse>(
                    offset,
                );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse::__Unknown {
                    ..
                } => Err(fidl::Error::UnknownUnionTag),
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse::SomeField(
                        _,
                    ) = self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self =
                            UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse::SomeField(
                                fidl::new_empty!(i32),
                            );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self =
                        UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse::__Unknown {
                            ordinal,
                        };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictEventUnionRequest
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsClosedProtocolStrictEventUnionRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictEventUnionRequest>
        for &UnknownInteractionsClosedProtocolStrictEventUnionRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsClosedProtocolStrictEventUnionRequest>(
                offset,
            );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsClosedProtocolStrictEventUnionRequest::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsClosedProtocolStrictEventUnionRequest::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsClosedProtocolStrictEventUnionRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsClosedProtocolStrictEventUnionRequest::SomeField(_) =
                        self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsClosedProtocolStrictEventUnionRequest::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsClosedProtocolStrictEventUnionRequest::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsClosedProtocolStrictEventUnionRequest::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse>
        for &UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse>(
                    offset,
                );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::__Unknown {
                    ..
                } => Err(fidl::Error::UnknownUnionTag),
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::SomeField(
                        _,
                    ) = self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self =
                            UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::SomeField(
                                fidl::new_empty!(i32),
                            );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictEventUnionErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsClosedProtocolStrictEventUnionErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictEventUnionErrResponse>
        for &UnknownInteractionsClosedProtocolStrictEventUnionErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsClosedProtocolStrictEventUnionErrResponse>(
                    offset,
                );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsClosedProtocolStrictEventUnionErrResponse::SomeField(
                    ref val,
                ) => fidl::encoding::encode_in_envelope::<i32>(
                    <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                    encoder,
                    offset + 8,
                    _depth,
                ),
                #[allow(deprecated)]
                UnknownInteractionsClosedProtocolStrictEventUnionErrResponse::__Unknown {
                    ..
                } => Err(fidl::Error::UnknownUnionTag),
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsClosedProtocolStrictEventUnionErrResponse::SomeField(
                        _,
                    ) = self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self =
                            UnknownInteractionsClosedProtocolStrictEventUnionErrResponse::SomeField(
                                fidl::new_empty!(i32),
                            );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsClosedProtocolStrictEventUnionErrResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self =
                        UnknownInteractionsClosedProtocolStrictEventUnionErrResponse::__Unknown {
                            ordinal,
                        };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker
        for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse
    {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl
        fidl::encoding::Encode<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse>
        for &UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse>(offset);
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse::SomeField(
                    ref val,
                ) => fidl::encoding::encode_in_envelope::<i32>(
                    <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                    encoder,
                    offset + 8,
                    _depth,
                ),
                #[allow(deprecated)]
                UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse::__Unknown {
                    ..
                } => Err(fidl::Error::UnknownUnionTag),
            }
        }
    }

    impl fidl::encoding::Decode<Self>
        for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse
    {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                if let UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse::SomeField(_) = self {
                    // Do nothing, read the value into the object
                } else {
                    // Initialize `self` to the right variant
                    *self =UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse::SomeField(fidl::new_empty!(i32));
                }
                    #[allow(irrefutable_let_patterns)]
                if let UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse::SomeField(ref mut val) = self {
                    fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                } else {
                    unreachable!()
                }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self =
                        UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse::__Unknown {
                            ordinal,
                        };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolFlexibleEventUnionRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleEventUnionRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleEventUnionRequest>
        for &UnknownInteractionsProtocolFlexibleEventUnionRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolFlexibleEventUnionRequest>(offset);
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsProtocolFlexibleEventUnionRequest::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsProtocolFlexibleEventUnionRequest::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleEventUnionRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolFlexibleEventUnionRequest::SomeField(_) = self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsProtocolFlexibleEventUnionRequest::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolFlexibleEventUnionRequest::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self =
                        UnknownInteractionsProtocolFlexibleEventUnionRequest::__Unknown { ordinal };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictEventUnionRequest {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictEventUnionRequest {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictEventUnionRequest>
        for &UnknownInteractionsProtocolStrictEventUnionRequest
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolStrictEventUnionRequest>(offset);
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsProtocolStrictEventUnionRequest::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsProtocolStrictEventUnionRequest::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictEventUnionRequest {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolStrictEventUnionRequest::SomeField(_) = self {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsProtocolStrictEventUnionRequest::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolStrictEventUnionRequest::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self =
                        UnknownInteractionsProtocolStrictEventUnionRequest::__Unknown { ordinal };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictTwoWayUnionResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictTwoWayUnionResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictTwoWayUnionResponse>
        for &UnknownInteractionsProtocolStrictTwoWayUnionResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolStrictTwoWayUnionResponse>(offset);
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsProtocolStrictTwoWayUnionResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsProtocolStrictTwoWayUnionResponse::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictTwoWayUnionResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolStrictTwoWayUnionResponse::SomeField(_) = self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsProtocolStrictTwoWayUnionResponse::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolStrictTwoWayUnionResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self =
                        UnknownInteractionsProtocolStrictTwoWayUnionResponse::__Unknown { ordinal };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsProtocolFlexibleEventUnionErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleEventUnionErrResponse>
        for &UnknownInteractionsProtocolFlexibleEventUnionErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolFlexibleEventUnionErrResponse>(
                offset,
            );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsProtocolFlexibleEventUnionErrResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsProtocolFlexibleEventUnionErrResponse::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolFlexibleEventUnionErrResponse::SomeField(_) =
                        self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsProtocolFlexibleEventUnionErrResponse::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolFlexibleEventUnionErrResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsProtocolFlexibleEventUnionErrResponse::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker
        for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse
    {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse>
        for &UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder
                .debug_check_bounds::<UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse>(
                    offset,
                );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse::SomeField(_) =
                        self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self =
                            UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse::SomeField(
                                fidl::new_empty!(i32),
                            );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse>
        for &UnknownInteractionsProtocolFlexibleTwoWayUnionResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolFlexibleTwoWayUnionResponse>(
                offset,
            );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::SomeField(_) =
                        self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictEventUnionErrResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictEventUnionErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictEventUnionErrResponse>
        for &UnknownInteractionsProtocolStrictEventUnionErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictEventUnionErrResponse>(
                offset,
            );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsProtocolStrictEventUnionErrResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsProtocolStrictEventUnionErrResponse::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictEventUnionErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolStrictEventUnionErrResponse::SomeField(_) =
                        self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsProtocolStrictEventUnionErrResponse::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolStrictEventUnionErrResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsProtocolStrictEventUnionErrResponse::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(context: fidl::encoding::Context) -> usize {
            match context.wire_format_version {
                fidl::encoding::WireFormatVersion::V1 => 24,
                fidl::encoding::WireFormatVersion::V2 => 16,
            }
        }
    }
    impl fidl::encoding::ValueTypeMarker for UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<UnknownInteractionsProtocolStrictTwoWayUnionErrResponse>
        for &UnknownInteractionsProtocolStrictTwoWayUnionErrResponse
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<UnknownInteractionsProtocolStrictTwoWayUnionErrResponse>(
                offset,
            );
            encoder.write_num::<u64>(self.ordinal(), offset);
            match self {
                UnknownInteractionsProtocolStrictTwoWayUnionErrResponse::SomeField(ref val) => {
                    fidl::encoding::encode_in_envelope::<i32>(
                        <i32 as fidl::encoding::ValueTypeMarker>::borrow(val),
                        encoder,
                        offset + 8,
                        _depth,
                    )
                }
                #[allow(deprecated)]
                UnknownInteractionsProtocolStrictTwoWayUnionErrResponse::__Unknown { .. } => {
                    Err(fidl::Error::UnknownUnionTag)
                }
            }
        }
    }

    impl fidl::encoding::Decode<Self> for UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
        #[inline(always)]
        fn new_empty() -> Self {
            #[allow(deprecated)]
            Self::__Unknown { ordinal: 0 }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            mut depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            #[allow(unused_variables)]
            let next_out_of_line = decoder.next_out_of_line();
            let handles_before = decoder.remaining_handles();
            let (ordinal, inlined, num_bytes, num_handles) =
                fidl::encoding::decode_union_inline_portion(decoder, offset)?;

            let member_inline_size = match ordinal {
                1 => <i32 as fidl::encoding::TypeMarker>::inline_size(decoder.context),
                0 => return Err(fidl::Error::UnknownUnionTag),
                _ => num_bytes as usize,
            };

            if let fidl::encoding::WireFormatVersion::V2 = decoder.context.wire_format_version {
                if inlined != (member_inline_size <= 4) {
                    return Err(fidl::Error::InvalidInlineBitInEnvelope);
                }
            }
            let _inner_offset;
            if inlined {
                decoder.check_inline_envelope_padding(offset + 8, member_inline_size)?;
                _inner_offset = offset + 8;
            } else {
                depth.increment()?;
                _inner_offset = decoder.out_of_line_offset(member_inline_size)?;
            }
            match ordinal {
                1 => {
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolStrictTwoWayUnionErrResponse::SomeField(_) =
                        self
                    {
                        // Do nothing, read the value into the object
                    } else {
                        // Initialize `self` to the right variant
                        *self = UnknownInteractionsProtocolStrictTwoWayUnionErrResponse::SomeField(
                            fidl::new_empty!(i32),
                        );
                    }
                    #[allow(irrefutable_let_patterns)]
                    if let UnknownInteractionsProtocolStrictTwoWayUnionErrResponse::SomeField(
                        ref mut val,
                    ) = self
                    {
                        fidl::decode!(i32, val, decoder, _inner_offset, depth)?;
                    } else {
                        unreachable!()
                    }
                }
                #[allow(deprecated)]
                ordinal => {
                    for _ in 0..num_handles {
                        decoder.drop_next_handle()?;
                    }
                    *self = UnknownInteractionsProtocolStrictTwoWayUnionErrResponse::__Unknown {
                        ordinal,
                    };
                }
            }
            if !inlined && decoder.next_out_of_line() != next_out_of_line + (num_bytes as usize) {
                return Err(fidl::Error::InvalidNumBytesInEnvelope);
            }
            if handles_before != decoder.remaining_handles() + (num_handles as usize) {
                return Err(fidl::Error::InvalidNumHandlesInEnvelope);
            }
            Ok(())
        }
    }
}
