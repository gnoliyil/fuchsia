// WARNING: This file is machine generated by fidlgen.

// experiment = no_optional_structs
// experiment = output_index_json
// experiment = simple_empty_response_syntax
// experiment = unknown_interactions
// experiment = unknown_interactions_new_defaults

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::{decode_transaction_body_fut, QueryResponseFut},
        encoding::{zerocopy, Decodable as _, Encodable as _},
        endpoints::{ControlHandle as _, Responder as _},
        fidl_bits, fidl_empty_struct, fidl_enum, fidl_struct, fidl_struct_copy, fidl_table,
        fidl_union, wrap_handle_metadata,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

const _FIDL_TRACE_BINDINGS_RUST: u32 = 6;

pub type UnknownInteractionsAjarDriverProtocolStrictTwoWayErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarDriverProtocolStrictTwoWayErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarDriverProtocolStrictTwoWayErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsAjarDriverProtocolStrictTwoWayFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarDriverProtocolStrictTwoWayFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarDriverProtocolStrictTwoWayFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

pub type UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResult =
    Result<(UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponse,), i32>;

pub type UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResult =
    Result<(UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResultHandleWrapper =
    Result<(UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResponse,), i32>;

pub type UnknownInteractionsAjarProtocolStrictTwoWayErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolStrictTwoWayErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolStrictTwoWayErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

pub type UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult =
    Result<(UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse,), i32>;

pub type UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult =
    Result<(UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolStrictTwoWayTableErrResultHandleWrapper =
    Result<(UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse,), i32>;

pub type UnknownInteractionsAjarProtocolStrictEventErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolStrictEventErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolStrictEventErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsAjarProtocolStrictEventFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolStrictEventFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolStrictEventFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

pub type UnknownInteractionsAjarProtocolStrictEventUnionErrResult =
    Result<(UnknownInteractionsAjarProtocolStrictEventUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolStrictEventUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolStrictEventUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsAjarProtocolStrictEventUnionErrResponse,), i32>;

pub type UnknownInteractionsAjarProtocolStrictEventTableErrResult =
    Result<(UnknownInteractionsAjarProtocolStrictEventTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolStrictEventTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolStrictEventTableErrResultHandleWrapper =
    Result<(UnknownInteractionsAjarProtocolStrictEventTableErrResponse,), i32>;

pub type UnknownInteractionsAjarProtocolFlexibleEventErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolFlexibleEventErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolFlexibleEventErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

pub type UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult =
    Result<(UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolFlexibleEventUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse,), i32>;

pub type UnknownInteractionsAjarProtocolFlexibleEventTableErrResult =
    Result<(UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsAjarProtocolFlexibleEventTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsAjarProtocolFlexibleEventTableErrResultHandleWrapper =
    Result<(UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse,), i32>;

pub type UnknownInteractionsClosedDriverProtocolStrictTwoWayErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedDriverProtocolStrictTwoWayErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedDriverProtocolStrictTwoWayErrResultHandleWrapper =
    Result<(), i32>;

pub type UnknownInteractionsClosedDriverProtocolStrictTwoWayFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedDriverProtocolStrictTwoWayFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedDriverProtocolStrictTwoWayFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

pub type UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResult =
    Result<(UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponse,), i32>;

pub type UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResult =
    Result<(UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResultHandleWrapper =
    Result<(UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResponse,), i32>;

pub type UnknownInteractionsClosedProtocolStrictTwoWayErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedProtocolStrictTwoWayErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedProtocolStrictTwoWayErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

pub type UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult =
    Result<(UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse,), i32>;

pub type UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult =
    Result<(UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedProtocolStrictTwoWayTableErrResultHandleWrapper =
    Result<(UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse,), i32>;

pub type UnknownInteractionsClosedProtocolStrictEventErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedProtocolStrictEventErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedProtocolStrictEventErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsClosedProtocolStrictEventFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedProtocolStrictEventFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedProtocolStrictEventFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

pub type UnknownInteractionsClosedProtocolStrictEventUnionErrResult =
    Result<(UnknownInteractionsClosedProtocolStrictEventUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedProtocolStrictEventUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedProtocolStrictEventUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsClosedProtocolStrictEventUnionErrResponse,), i32>;

pub type UnknownInteractionsClosedProtocolStrictEventTableErrResult =
    Result<(UnknownInteractionsClosedProtocolStrictEventTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsClosedProtocolStrictEventTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsClosedProtocolStrictEventTableErrResultHandleWrapper =
    Result<(UnknownInteractionsClosedProtocolStrictEventTableErrResponse,), i32>;

pub type UnknownInteractionsDriverProtocolStrictTwoWayErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsDriverProtocolStrictTwoWayErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolStrictTwoWayErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsDriverProtocolStrictTwoWayFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsDriverProtocolStrictTwoWayFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolStrictTwoWayFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

pub type UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResult =
    Result<(UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponse,), i32>;

pub type UnknownInteractionsDriverProtocolStrictTwoWayTableErrResult =
    Result<(UnknownInteractionsDriverProtocolStrictTwoWayTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsDriverProtocolStrictTwoWayTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolStrictTwoWayTableErrResultHandleWrapper =
    Result<(UnknownInteractionsDriverProtocolStrictTwoWayTableErrResponse,), i32>;

/// Request message decoding format for UnknownInteractionsDriverProtocolFlexibleTwoWayResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayResultWireHandleWrapper =
    fidl::encoding::OpenResult<(), ()>;

/// Request message decoding format for UnknownInteractionsDriverProtocolFlexibleTwoWayFieldsResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayFieldsResultWireHandleWrapper =
    fidl::encoding::OpenResult<(i32,), ()>;

/// Request message decoding format for UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResultWireHandleWrapper =
    fidl::encoding::OpenResult<(UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponse,), ()>;

/// Request message decoding format for UnknownInteractionsDriverProtocolFlexibleTwoWayTableResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayTableResultWireHandleWrapper =
    fidl::encoding::OpenResult<(UnknownInteractionsDriverProtocolFlexibleTwoWayTableResponse,), ()>;

pub type UnknownInteractionsDriverProtocolFlexibleTwoWayErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsDriverProtocolFlexibleTwoWayErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayErrResultHandleWrapper = Result<(), i32>;

/// Request message decoding format for UnknownInteractionsDriverProtocolFlexibleTwoWayErrResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayErrResultWireHandleWrapper =
    fidl::encoding::OpenResult<(), i32>;

pub type UnknownInteractionsDriverProtocolFlexibleTwoWayFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsDriverProtocolFlexibleTwoWayFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

/// Request message decoding format for UnknownInteractionsDriverProtocolFlexibleTwoWayFieldsErrResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayFieldsErrResultWireHandleWrapper =
    fidl::encoding::OpenResult<(i32,), i32>;

pub type UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResult =
    Result<(UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse,), i32>;

/// Request message decoding format for UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResultWireHandleWrapper =
    fidl::encoding::OpenResult<
        (UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse,),
        i32,
    >;

pub type UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResult =
    Result<(UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResultHandleWrapper =
    Result<(UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResponse,), i32>;

/// Request message decoding format for UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResultWireHandleWrapper =
    fidl::encoding::OpenResult<
        (UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResponse,),
        i32,
    >;

pub type UnknownInteractionsProtocolStrictTwoWayErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolStrictTwoWayErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolStrictTwoWayErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsProtocolStrictTwoWayFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolStrictTwoWayFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolStrictTwoWayFieldsErrResultHandleWrapper = Result<(i32,), i32>;

pub type UnknownInteractionsProtocolStrictTwoWayUnionErrResult =
    Result<(UnknownInteractionsProtocolStrictTwoWayUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolStrictTwoWayUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolStrictTwoWayUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsProtocolStrictTwoWayUnionErrResponse,), i32>;

pub type UnknownInteractionsProtocolStrictTwoWayTableErrResult =
    Result<(UnknownInteractionsProtocolStrictTwoWayTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolStrictTwoWayTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolStrictTwoWayTableErrResultHandleWrapper =
    Result<(UnknownInteractionsProtocolStrictTwoWayTableErrResponse,), i32>;

/// Request message decoding format for UnknownInteractionsProtocolFlexibleTwoWayResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayResultWireHandleWrapper =
    fidl::encoding::OpenResult<(), ()>;

/// Request message decoding format for UnknownInteractionsProtocolFlexibleTwoWayFieldsResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayFieldsResultWireHandleWrapper =
    fidl::encoding::OpenResult<(i32,), ()>;

/// Request message decoding format for UnknownInteractionsProtocolFlexibleTwoWayUnionResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayUnionResultWireHandleWrapper =
    fidl::encoding::OpenResult<(UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,), ()>;

/// Request message decoding format for UnknownInteractionsProtocolFlexibleTwoWayTableResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayTableResultWireHandleWrapper =
    fidl::encoding::OpenResult<(UnknownInteractionsProtocolFlexibleTwoWayTableResponse,), ()>;

pub type UnknownInteractionsProtocolFlexibleTwoWayErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolFlexibleTwoWayErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayErrResultHandleWrapper = Result<(), i32>;

/// Request message decoding format for UnknownInteractionsProtocolFlexibleTwoWayErrResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayErrResultWireHandleWrapper =
    fidl::encoding::OpenResult<(), i32>;

pub type UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResultHandleWrapper =
    Result<(i32,), i32>;

/// Request message decoding format for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResultWireHandleWrapper =
    fidl::encoding::OpenResult<(i32,), i32>;

pub type UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult =
    Result<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,), i32>;

/// Request message decoding format for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayUnionErrResultWireHandleWrapper =
    fidl::encoding::OpenResult<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,), i32>;

pub type UnknownInteractionsProtocolFlexibleTwoWayTableErrResult =
    Result<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolFlexibleTwoWayTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayTableErrResultHandleWrapper =
    Result<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,), i32>;

/// Request message decoding format for UnknownInteractionsProtocolFlexibleTwoWayTableErrResult responses, used internally
/// by FIDL bindings to decode flexible method results. This should only be used
/// by generated APIs, API users should never need to use this type. It is
/// public because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleTwoWayTableErrResultWireHandleWrapper =
    fidl::encoding::OpenResult<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,), i32>;

pub type UnknownInteractionsProtocolStrictEventErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolStrictEventErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolStrictEventErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsProtocolStrictEventFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolStrictEventFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolStrictEventFieldsErrResultHandleWrapper = Result<(i32,), i32>;

pub type UnknownInteractionsProtocolStrictEventUnionErrResult =
    Result<(UnknownInteractionsProtocolStrictEventUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolStrictEventUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolStrictEventUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsProtocolStrictEventUnionErrResponse,), i32>;

pub type UnknownInteractionsProtocolStrictEventTableErrResult =
    Result<(UnknownInteractionsProtocolStrictEventTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolStrictEventTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolStrictEventTableErrResultHandleWrapper =
    Result<(UnknownInteractionsProtocolStrictEventTableErrResponse,), i32>;

pub type UnknownInteractionsProtocolFlexibleEventErrResult = Result<(), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolFlexibleEventErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleEventErrResultHandleWrapper = Result<(), i32>;

pub type UnknownInteractionsProtocolFlexibleEventFieldsErrResult = Result<(i32), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolFlexibleEventFieldsErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleEventFieldsErrResultHandleWrapper = Result<(i32,), i32>;

pub type UnknownInteractionsProtocolFlexibleEventUnionErrResult =
    Result<(UnknownInteractionsProtocolFlexibleEventUnionErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolFlexibleEventUnionErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleEventUnionErrResultHandleWrapper =
    Result<(UnknownInteractionsProtocolFlexibleEventUnionErrResponse,), i32>;

pub type UnknownInteractionsProtocolFlexibleEventTableErrResult =
    Result<(UnknownInteractionsProtocolFlexibleEventTableErrResponse), i32>;

/// Handle-type validating wrapper for UnknownInteractionsProtocolFlexibleEventTableErrResult responses, used internally by
/// FIDL bindings to decode method results. This should only be used by
/// generated APIs, API users should never need to use this type. It is public
/// because it is shared with composed protocols.
#[doc(hidden)]
pub type UnknownInteractionsProtocolFlexibleEventTableErrResultHandleWrapper =
    Result<(UnknownInteractionsProtocolFlexibleEventTableErrResponse,), i32>;

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionResponse {}

impl fidl::encoding::Persistable
    for UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionResponse
{
}

fidl_union! {
    name: UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel
    for UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponse
{
}

impl fidl::encoding::Persistable
    for UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponse
{
}

fidl_union! {
    name: UnknownInteractionsAjarDriverProtocolStrictTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::unknown()` to construct and `UnknownInteractionsAjarProtocolFlexibleEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolFlexibleEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolFlexibleEventUnionRequestUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolFlexibleEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolFlexibleEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsAjarProtocolStrictEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictEventUnionRequest::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictEventUnionRequestUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsAjarProtocolStrictEventUnionRequest {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolStrictEventUnionRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolStrictEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolStrictEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictEventUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolStrictEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolStrictEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionResponse {}

impl fidl::encoding::Persistable
    for UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionResponse
{
}

fidl_union! {
    name: UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel
    for UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponse
{
}

impl fidl::encoding::Persistable
    for UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponse
{
}

fidl_union! {
    name: UnknownInteractionsClosedDriverProtocolStrictTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsClosedProtocolStrictEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictEventUnionRequest::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictEventUnionRequestUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsClosedProtocolStrictEventUnionRequest {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedProtocolStrictEventUnionRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsClosedProtocolStrictEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsClosedProtocolStrictEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictEventUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsClosedProtocolStrictEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsClosedProtocolStrictEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsDriverProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsDriverProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsDriverProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsDriverProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsDriverProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsDriverProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsDriverProtocolStrictTwoWayUnionResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsDriverProtocolStrictTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsDriverProtocolStrictTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse {}

impl fidl::encoding::Persistable
    for UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse
{
}

fidl_union! {
    name: UnknownInteractionsDriverProtocolFlexibleTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsDriverProtocolFlexibleTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsDriverProtocolStrictTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsProtocolFlexibleEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleEventUnionRequest::unknown()` to construct and `UnknownInteractionsProtocolFlexibleEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleEventUnionRequestUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsProtocolFlexibleEventUnionRequest {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolFlexibleEventUnionRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolFlexibleEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsProtocolFlexibleEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsProtocolStrictEventUnionRequest {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictEventUnionRequest::unknown()` to construct and `UnknownInteractionsProtocolStrictEventUnionRequestUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictEventUnionRequest` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictEventUnionRequestUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsProtocolStrictEventUnionRequest {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolStrictEventUnionRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolStrictEventUnionRequest {}

fidl_union! {
    name: UnknownInteractionsProtocolStrictEventUnionRequest,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsProtocolStrictTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsProtocolStrictTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsProtocolStrictTwoWayUnionResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolStrictTwoWayUnionResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolStrictTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolFlexibleEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleEventUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsProtocolFlexibleEventUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolFlexibleEventUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolFlexibleEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolFlexibleEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::unknown()` to construct and `UnknownInteractionsProtocolFlexibleTwoWayUnionResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolFlexibleTwoWayUnionResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolFlexibleTwoWayUnionResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolFlexibleTwoWayUnionResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsProtocolStrictEventUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictEventUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolStrictEventUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictEventUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictEventUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsProtocolStrictEventUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolStrictEventUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolStrictEventUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolStrictEventUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub enum UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
    SomeField(i32),
    #[deprecated = "Use `UnknownInteractionsProtocolStrictTwoWayUnionErrResponse::unknown()` to construct and `UnknownInteractionsProtocolStrictTwoWayUnionErrResponseUnknown!()` to exhaustively match."]
    #[doc(hidden)]
    #[non_exhaustive]
    __Unknown {
        ordinal: u64,
    },
}
/// Pattern that matches an unknown `UnknownInteractionsProtocolStrictTwoWayUnionErrResponse` member.
#[macro_export]
macro_rules! UnknownInteractionsProtocolStrictTwoWayUnionErrResponseUnknown {
    () => {
        _
    };
}

impl UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {
    #[inline]
    pub fn unknown_variant_for_testing() -> Self {
        #[allow(deprecated)]
        Self::__Unknown { ordinal: 0 }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            #[allow(deprecated)]
            Self::__Unknown { .. } => true,
            _ => false,
        }
    }
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolStrictTwoWayUnionErrResponse {}

fidl_union! {
    name: UnknownInteractionsProtocolStrictTwoWayUnionErrResponse,
    members: [
        SomeField {
            ty: i32,
            ordinal: 1,
        },
    ],
    unknown_member: __Unknown,
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsAjarDriverProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsAjarDriverProtocolStrictTwoWayTableResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsAjarDriverProtocolStrictTwoWayTableResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarDriverProtocolStrictTwoWayTableResponse {}

impl fidl::encoding::Persistable
    for UnknownInteractionsAjarDriverProtocolStrictTwoWayTableResponse
{
}

fidl_table! {
    name: UnknownInteractionsAjarDriverProtocolStrictTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel
    for UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResponse
{
}

impl fidl::encoding::Persistable
    for UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResponse
{
}

fidl_table! {
    name: UnknownInteractionsAjarDriverProtocolStrictTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsAjarProtocolFlexibleEventTableRequest::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsAjarProtocolFlexibleEventTableRequest {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolFlexibleEventTableRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolFlexibleEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolFlexibleEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsAjarProtocolStrictEventTableRequest::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsAjarProtocolStrictEventTableRequest {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolStrictEventTableRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolStrictEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolStrictEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsAjarProtocolStrictTwoWayTableResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsAjarProtocolStrictEventTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsAjarProtocolStrictEventTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolStrictEventTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolStrictEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolStrictEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsClosedDriverProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsClosedDriverProtocolStrictTwoWayTableResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsClosedDriverProtocolStrictTwoWayTableResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedDriverProtocolStrictTwoWayTableResponse {}

impl fidl::encoding::Persistable
    for UnknownInteractionsClosedDriverProtocolStrictTwoWayTableResponse
{
}

fidl_table! {
    name: UnknownInteractionsClosedDriverProtocolStrictTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel
    for UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResponse
{
}

impl fidl::encoding::Persistable
    for UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResponse
{
}

fidl_table! {
    name: UnknownInteractionsClosedDriverProtocolStrictTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsClosedProtocolStrictEventTableRequest::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsClosedProtocolStrictEventTableRequest {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedProtocolStrictEventTableRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsClosedProtocolStrictEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsClosedProtocolStrictEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsClosedProtocolStrictTwoWayTableResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsClosedProtocolStrictEventTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsClosedProtocolStrictEventTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedProtocolStrictEventTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsClosedProtocolStrictEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsClosedProtocolStrictEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsDriverProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsDriverProtocolStrictTwoWayTableResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsDriverProtocolStrictTwoWayTableResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsDriverProtocolStrictTwoWayTableResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsDriverProtocolStrictTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsDriverProtocolStrictTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResponse {}

impl fidl::encoding::Persistable
    for UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResponse
{
}

fidl_table! {
    name: UnknownInteractionsDriverProtocolFlexibleTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsDriverProtocolFlexibleTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsDriverProtocolFlexibleTwoWayTableResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsDriverProtocolFlexibleTwoWayTableResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsDriverProtocolFlexibleTwoWayTableResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsDriverProtocolFlexibleTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsDriverProtocolFlexibleTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsDriverProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsDriverProtocolStrictTwoWayTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsDriverProtocolStrictTwoWayTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsDriverProtocolStrictTwoWayTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsDriverProtocolStrictTwoWayTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsDriverProtocolStrictTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsProtocolFlexibleEventTableRequest::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsProtocolFlexibleEventTableRequest {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolFlexibleEventTableRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolFlexibleEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsProtocolFlexibleEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsProtocolStrictEventTableRequest {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsProtocolStrictEventTableRequest::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsProtocolStrictEventTableRequest {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolStrictEventTableRequest {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolStrictEventTableRequest {}

fidl_table! {
    name: UnknownInteractionsProtocolStrictEventTableRequest,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsProtocolStrictTwoWayTableResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsProtocolStrictTwoWayTableResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolStrictTwoWayTableResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolStrictTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolStrictTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsProtocolFlexibleEventTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsProtocolFlexibleEventTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolFlexibleEventTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolFlexibleEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolFlexibleEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsProtocolFlexibleTwoWayTableResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsProtocolFlexibleTwoWayTableResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolFlexibleTwoWayTableResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolFlexibleTwoWayTableResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsProtocolStrictEventTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsProtocolStrictEventTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsProtocolStrictEventTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolStrictEventTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolStrictEventTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolStrictEventTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Clone, PartialEq)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableErrResponse {
    pub some_field: Option<i32>,
    #[deprecated = "Use `..UnknownInteractionsProtocolStrictTwoWayTableErrResponse::EMPTY` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

impl UnknownInteractionsProtocolStrictTwoWayTableErrResponse {
    /// An empty table with every field set to `None`.
    #[allow(deprecated)]
    pub const EMPTY: Self = Self { some_field: None, __non_exhaustive: () };
}

impl fidl::encoding::TopLevel for UnknownInteractionsProtocolStrictTwoWayTableErrResponse {}

impl fidl::encoding::Persistable for UnknownInteractionsProtocolStrictTwoWayTableErrResponse {}

fidl_table! {
    name: UnknownInteractionsProtocolStrictTwoWayTableErrResponse,
    members: [
        some_field {
            ty: i32,
            ordinal: 1,
        },
    ],
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnknownInteractionsAjarProtocolMarker;

impl fidl::endpoints::ProtocolMarker for UnknownInteractionsAjarProtocolMarker {
    type Proxy = UnknownInteractionsAjarProtocolProxy;
    type RequestStream = UnknownInteractionsAjarProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) UnknownInteractionsAjarProtocol";
}

pub trait UnknownInteractionsAjarProtocolProxyInterface: Send + Sync {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error>;
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error>;
    type StrictTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut;
    type StrictTwoWayFieldsResponseFut: std::future::Future<Output = Result<(i32), fidl::Error>>
        + Send;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut;
    type StrictTwoWayUnionResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut;
    type StrictTwoWayTableResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsAjarProtocolStrictTwoWayTableResponse),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut;
    type StrictTwoWayErrResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsAjarProtocolStrictTwoWayErrResult), fidl::Error>,
        > + Send;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut;
    type StrictTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut;
    type StrictTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut;
    type StrictTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct UnknownInteractionsAjarProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl UnknownInteractionsAjarProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<UnknownInteractionsAjarProtocolEvent, fidl::Error> {
        UnknownInteractionsAjarProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0xd4663d6b2b5048b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0x2275b8171ae4834f,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn r#strict_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _value: () = self.client.send_query::<_, _, false, false>(
            &mut (),
            0x50e66d328336038,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(())
    }
    pub fn r#strict_two_way_fields(&self, ___deadline: zx::Time) -> Result<(i32), fidl::Error> {
        let _value: (i32,) = self.client.send_query::<_, _, false, false>(
            &mut (),
            0x1947e36d61e4493a,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_value.0)
    }
    pub fn r#strict_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse), fidl::Error> {
        let _value: (UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,) =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x5177371967e0e6d1,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.0)
    }
    pub fn r#strict_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayTableResponse), fidl::Error> {
        let _value: (UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,) =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x6f8f9343b34e2ed4,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.0)
    }
    pub fn r#strict_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayErrResult), fidl::Error> {
        let _value: UnknownInteractionsAjarProtocolStrictTwoWayErrResultHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0x5b47637577c69006,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| ()))
    }
    pub fn r#strict_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult), fidl::Error> {
        let _value: UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResultHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0x844ff7bb3f186d9,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| _value.0))
    }
    pub fn r#strict_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult), fidl::Error> {
        let _value: UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResultHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x2cbfd5a859d4ac95,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| _value.0))
    }
    pub fn r#strict_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult), fidl::Error> {
        let _value: UnknownInteractionsAjarProtocolStrictTwoWayTableErrResultHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x30c9e1b3da57dc37,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| _value.0))
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsAjarProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for UnknownInteractionsAjarProtocolProxy {
    type Protocol = UnknownInteractionsAjarProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl UnknownInteractionsAjarProtocolProxy {
    /// Create a new Proxy for UnknownInteractionsAjarProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the UnknownInteractionsAjarProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> UnknownInteractionsAjarProtocolEventStream {
        UnknownInteractionsAjarProtocolEventStream {
            event_receiver: self.client.take_event_receiver(),
        }
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_one_way(self)
    }
    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsAjarProtocolProxyInterface::r#flexible_one_way(self)
    }
    pub fn r#strict_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way(self)
    }
    pub fn r#strict_two_way_fields(&self) -> fidl::client::QueryResponseFut<(i32)> {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_fields(self)
    }
    pub fn r#strict_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse)>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_union(self)
    }
    pub fn r#strict_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayTableResponse)>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_table(self)
    }
    pub fn r#strict_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayErrResult)>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_err(self)
    }
    pub fn r#strict_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult)>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_fields_err(self)
    }
    pub fn r#strict_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult)>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_union_err(self)
    }
    pub fn r#strict_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult)>
    {
        UnknownInteractionsAjarProtocolProxyInterface::r#strict_two_way_table_err(self)
    }
}

impl UnknownInteractionsAjarProtocolProxyInterface for UnknownInteractionsAjarProtocolProxy {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0xd4663d6b2b5048b,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0x2275b8171ae4834f,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    type StrictTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut {
        fn transform(result: Result<(), fidl::Error>) -> Result<(), fidl::Error> {
            result.map(|_value| ())
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x50e66d328336038,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<(i32)>;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut {
        fn transform(result: Result<(i32,), fidl::Error>) -> Result<(i32), fidl::Error> {
            result.map(|_value| _value.0)
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x1947e36d61e4493a,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse)>;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut {
        fn transform(
            result: Result<
                (UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,),
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse), fidl::Error>
        {
            result.map(|_value| _value.0)
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x5177371967e0e6d1,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayTableResponse)>;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut {
        fn transform(
            result: Result<
                (UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,),
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayTableResponse), fidl::Error>
        {
            result.map(|_value| _value.0)
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x6f8f9343b34e2ed4,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayErrResult)>;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsAjarProtocolStrictTwoWayErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayErrResult), fidl::Error> {
            result.map(|_value| _value.map(|_value| ()))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x5b47637577c69006,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayFieldsErrResponseFut = fidl::client::QueryResponseFut<
        (UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult),
    >;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult), fidl::Error>
        {
            result.map(|_value| _value.map(|_value| _value.0))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x844ff7bb3f186d9,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult)>;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult), fidl::Error>
        {
            result.map(|_value| _value.map(|_value| _value.0))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x2cbfd5a859d4ac95,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult)>;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsAjarProtocolStrictTwoWayTableErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult), fidl::Error>
        {
            result.map(|_value| _value.map(|_value| _value.0))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x30c9e1b3da57dc37,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
}

pub struct UnknownInteractionsAjarProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for UnknownInteractionsAjarProtocolEventStream {}

impl futures::stream::FusedStream for UnknownInteractionsAjarProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for UnknownInteractionsAjarProtocolEventStream {
    type Item = Result<UnknownInteractionsAjarProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(UnknownInteractionsAjarProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsAjarProtocolEvent {
    StrictEvent {},

    StrictEventFields {
        some_field: i32,
    },

    StrictEventUnion {
        payload: UnknownInteractionsAjarProtocolStrictEventUnionRequest,
    },

    StrictEventTable {
        payload: UnknownInteractionsAjarProtocolStrictEventTableRequest,
    },

    StrictEventErr {
        result: UnknownInteractionsAjarProtocolStrictEventErrResult,
    },

    StrictEventFieldsErr {
        result: UnknownInteractionsAjarProtocolStrictEventFieldsErrResult,
    },

    StrictEventUnionErr {
        result: UnknownInteractionsAjarProtocolStrictEventUnionErrResult,
    },

    StrictEventTableErr {
        result: UnknownInteractionsAjarProtocolStrictEventTableErrResult,
    },

    FlexibleEvent {},

    FlexibleEventFields {
        some_field: i32,
    },

    FlexibleEventUnion {
        payload: UnknownInteractionsAjarProtocolFlexibleEventUnionRequest,
    },

    FlexibleEventTable {
        payload: UnknownInteractionsAjarProtocolFlexibleEventTableRequest,
    },

    FlexibleEventErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventErrResult,
    },

    FlexibleEventFieldsErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult,
    },

    FlexibleEventUnionErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult,
    },

    FlexibleEventTableErr {
        result: UnknownInteractionsAjarProtocolFlexibleEventTableErrResult,
    },
    #[non_exhaustive]
    _UnknownEvent {
        /// Ordinal of the event that was sent.
        ordinal: u64,
    },
}

impl UnknownInteractionsAjarProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event(self) -> Option<()> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEvent {} = self {
            Some(())
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields(self) -> Option<(i32)> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictEventUnionRequest)> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictEventTableRequest)> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictEventErrResult)> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictEventFieldsErrResult)> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictEventUnionErrResult)> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictEventTableErrResult)> {
        if let UnknownInteractionsAjarProtocolEvent::StrictEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event(self) -> Option<()> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEvent {} = self {
            Some(())
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields(self) -> Option<(i32)> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolFlexibleEventUnionRequest)> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolFlexibleEventTableRequest)> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolFlexibleEventErrResult)> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult)> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult)> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolFlexibleEventTableErrResult)> {
        if let UnknownInteractionsAjarProtocolEvent::FlexibleEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`UnknownInteractionsAjarProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<UnknownInteractionsAjarProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x6022ae999e9dc2b0 => {
                let mut out_tuple: () = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEvent {}
                ))
            }
            0x510586752445c769 => {
                let mut out_tuple: (i32,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventFields {some_field: out_tuple.0,}
                ))
            }
            0x57794b4cc91f816f => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolStrictEventUnionRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventUnion {payload: out_tuple.0,}
                ))
            }
            0x92639249201f89d => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolStrictEventTableRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventTable {payload: out_tuple.0,}
                ))
            }
            0x715bfcab27f735ed => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolStrictEventErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventErr {result: out_tuple.0,}
                ))
            }
            0x3ae22659224effb9 => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolStrictEventFieldsErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventFieldsErr {result: out_tuple.0,}
                ))
            }
            0xab5b2d1199942b => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolStrictEventUnionErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventUnionErr {result: out_tuple.0,}
                ))
            }
            0x6c6abc426c7c8406 => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolStrictEventTableErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::StrictEventTableErr {result: out_tuple.0,}
                ))
            }
            0x11c9ba570ce71df3 => {
                let mut out_tuple: () = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEvent {}
                ))
            }
            0x3ba8fd32bf87d862 => {
                let mut out_tuple: (i32,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventFields {some_field: out_tuple.0,}
                ))
            }
            0x7c3823f47ce0fcad => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolFlexibleEventUnionRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventUnion {payload: out_tuple.0,}
                ))
            }
            0x9ca944d1d6436b0 => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolFlexibleEventTableRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventTable {payload: out_tuple.0,}
                ))
            }
            0x4fbe0d51e074e5bc => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolFlexibleEventErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventErr {result: out_tuple.0,}
                ))
            }
            0x22a3e45e944031c4 => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventFieldsErr {result: out_tuple.0,}
                ))
            }
            0xc1637e7694d6680 => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventUnionErr {result: out_tuple.0,}
                ))
            }
            0x6e69d4c524bf3a27 => {
                let mut out_tuple: (UnknownInteractionsAjarProtocolFlexibleEventTableErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsAjarProtocolEvent::FlexibleEventTableErr {result: out_tuple.0,}
                ))
            }
            _ if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                Ok(UnknownInteractionsAjarProtocolEvent::_UnknownEvent {
                    ordinal: tx_header.ordinal(),
                })
                // MessageBufEtc will close handles on drop, before the
                // application can handle the _UnknownEvent variant, so this
                // satisfies the RFC-0138 requirement to close handles first.
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for UnknownInteractionsAjarProtocol
pub struct UnknownInteractionsAjarProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for UnknownInteractionsAjarProtocolRequestStream {}

impl futures::stream::FusedStream for UnknownInteractionsAjarProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for UnknownInteractionsAjarProtocolRequestStream {
    type Protocol = UnknownInteractionsAjarProtocolMarker;
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        UnknownInteractionsAjarProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for UnknownInteractionsAjarProtocolRequestStream {
    type Item = Result<UnknownInteractionsAjarProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled UnknownInteractionsAjarProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0xd4663d6b2b5048b => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictOneWay {control_handle,})
                }
                0x2275b8171ae4834f => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolFlexibleOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::FlexibleOneWay {control_handle,})
                }
                0x50e66d328336038 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWay {responder:UnknownInteractionsAjarProtocolStrictTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x1947e36d61e4493a => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayFieldsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayFields {responder:UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x5177371967e0e6d1 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayUnionRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnion {responder:UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x6f8f9343b34e2ed4 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayTableRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayTable {responder:UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x5b47637577c69006 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayErr {responder:UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x844ff7bb3f186d9 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayFieldsErr {responder:UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x2cbfd5a859d4ac95 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayUnionErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnionErr {responder:UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x30c9e1b3da57dc37 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayTableErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsAjarProtocolRequest::StrictTwoWayTableErr {responder:UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                _ if header.tx_id() == 0 && header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = UnknownInteractionsAjarProtocolControlHandle {
                        inner: this.inner.clone(),
                    };
                    Ok(UnknownInteractionsAjarProtocolRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                    })
                    // with_tls_decode_buf will clear the handles when we return
                    // before the application can handle the _UnknownMethod, so
                    // we don't need to clear it explicitly to meet the RFC
                    // requirement to close handles before calling an unknown
                    // interaction handler.
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <UnknownInteractionsAjarProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum UnknownInteractionsAjarProtocolRequest {
    StrictOneWay {
        control_handle: UnknownInteractionsAjarProtocolControlHandle,
    },
    FlexibleOneWay {
        control_handle: UnknownInteractionsAjarProtocolControlHandle,
    },
    StrictTwoWay {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayResponder,
    },
    StrictTwoWayFields {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder,
    },
    StrictTwoWayUnion {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder,
    },
    StrictTwoWayTable {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayTableResponder,
    },
    StrictTwoWayErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayErrResponder,
    },
    StrictTwoWayFieldsErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder,
    },
    StrictTwoWayUnionErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder,
    },
    StrictTwoWayTableErr {
        responder: UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder,
    },
    /// An interaction was received which does not match any known method.
    #[non_exhaustive]
    _UnknownMethod {
        /// Ordinal of the method that was called.
        ordinal: u64,
        control_handle: UnknownInteractionsAjarProtocolControlHandle,
    },
}

impl UnknownInteractionsAjarProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_one_way(self) -> Option<(UnknownInteractionsAjarProtocolControlHandle)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_one_way(self) -> Option<(UnknownInteractionsAjarProtocolControlHandle)> {
        if let UnknownInteractionsAjarProtocolRequest::FlexibleOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayTableResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayFieldsErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder)> {
        if let UnknownInteractionsAjarProtocolRequest::StrictTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            UnknownInteractionsAjarProtocolRequest::StrictOneWay { .. } => "strict_one_way",
            UnknownInteractionsAjarProtocolRequest::FlexibleOneWay { .. } => "flexible_one_way",
            UnknownInteractionsAjarProtocolRequest::StrictTwoWay { .. } => "strict_two_way",
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayFields { .. } => {
                "strict_two_way_fields"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnion { .. } => {
                "strict_two_way_union"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayTable { .. } => {
                "strict_two_way_table"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayErr { .. } => "strict_two_way_err",
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayFieldsErr { .. } => {
                "strict_two_way_fields_err"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayUnionErr { .. } => {
                "strict_two_way_union_err"
            }
            UnknownInteractionsAjarProtocolRequest::StrictTwoWayTableErr { .. } => {
                "strict_two_way_table_err"
            }
            UnknownInteractionsAjarProtocolRequest::_UnknownMethod { .. } => {
                "unknown one-way method"
            }
        }
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsAjarProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for UnknownInteractionsAjarProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }
}

impl UnknownInteractionsAjarProtocolControlHandle {
    pub fn send_strict_event(&self) -> Result<(), fidl::Error> {
        let mut response = ();

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x6022ae999e9dc2b0,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let mut response = (some_field);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x510586752445c769,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_union(
        &self,
        mut payload: &mut UnknownInteractionsAjarProtocolStrictEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x57794b4cc91f816f,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_table(
        &self,
        mut payload: UnknownInteractionsAjarProtocolStrictEventTableRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x92639249201f89d,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictEventErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x715bfcab27f735ed,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x3ae22659224effb9,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0xab5b2d1199942b,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x6c6abc426c7c8406,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event(&self) -> Result<(), fidl::Error> {
        let mut response = ();

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x11c9ba570ce71df3,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let mut response = (some_field);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x3ba8fd32bf87d862,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_union(
        &self,
        mut payload: &mut UnknownInteractionsAjarProtocolFlexibleEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x7c3823f47ce0fcad,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_table(
        &self,
        mut payload: UnknownInteractionsAjarProtocolFlexibleEventTableRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x9ca944d1d6436b0,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolFlexibleEventErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x4fbe0d51e074e5bc,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x22a3e45e944031c4,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0xc1637e7694d6680,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsAjarProtocolFlexibleEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x6e69d4c524bf3a27,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let mut response = (());

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let mut response = (some_field);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &mut UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &mut UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &mut UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: UnknownInteractionsAjarProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayTableResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsAjarProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsAjarProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsAjarProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsAjarProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsAjarProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnknownInteractionsClosedProtocolMarker;

impl fidl::endpoints::ProtocolMarker for UnknownInteractionsClosedProtocolMarker {
    type Proxy = UnknownInteractionsClosedProtocolProxy;
    type RequestStream = UnknownInteractionsClosedProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) UnknownInteractionsClosedProtocol";
}

pub trait UnknownInteractionsClosedProtocolProxyInterface: Send + Sync {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error>;
    type StrictTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut;
    type StrictTwoWayFieldsResponseFut: std::future::Future<Output = Result<(i32), fidl::Error>>
        + Send;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut;
    type StrictTwoWayUnionResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut;
    type StrictTwoWayTableResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsClosedProtocolStrictTwoWayTableResponse),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut;
    type StrictTwoWayErrResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsClosedProtocolStrictTwoWayErrResult), fidl::Error>,
        > + Send;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut;
    type StrictTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut;
    type StrictTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut;
    type StrictTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult),
                fidl::Error,
            >,
        > + Send;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct UnknownInteractionsClosedProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl UnknownInteractionsClosedProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<UnknownInteractionsClosedProtocolEvent, fidl::Error> {
        UnknownInteractionsClosedProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0x59282385962da24,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#strict_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _value: () = self.client.send_query::<_, _, false, false>(
            &mut (),
            0x5eda305d6b22f1f7,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(())
    }
    pub fn r#strict_two_way_fields(&self, ___deadline: zx::Time) -> Result<(i32), fidl::Error> {
        let _value: (i32,) = self.client.send_query::<_, _, false, false>(
            &mut (),
            0x1323afa3e0541253,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_value.0)
    }
    pub fn r#strict_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse), fidl::Error> {
        let _value: (UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,) =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x68b32554eb0f6fa7,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.0)
    }
    pub fn r#strict_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayTableResponse), fidl::Error> {
        let _value: (UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,) =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x6e4a94d44b69e785,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.0)
    }
    pub fn r#strict_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayErrResult), fidl::Error> {
        let _value: UnknownInteractionsClosedProtocolStrictTwoWayErrResultHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0x4fa35d5433db4d3a,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| ()))
    }
    pub fn r#strict_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult), fidl::Error> {
        let _value: UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResultHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0xb22aebf23bb58fd,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| _value.0))
    }
    pub fn r#strict_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult), fidl::Error> {
        let _value: UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResultHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0xcd65d4d29a43c80,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| _value.0))
    }
    pub fn r#strict_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult), fidl::Error> {
        let _value: UnknownInteractionsClosedProtocolStrictTwoWayTableErrResultHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x117dde20b92f7b90,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| _value.0))
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsClosedProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for UnknownInteractionsClosedProtocolProxy {
    type Protocol = UnknownInteractionsClosedProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl UnknownInteractionsClosedProtocolProxy {
    /// Create a new Proxy for UnknownInteractionsClosedProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name = <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the UnknownInteractionsClosedProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> UnknownInteractionsClosedProtocolEventStream {
        UnknownInteractionsClosedProtocolEventStream {
            event_receiver: self.client.take_event_receiver(),
        }
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_one_way(self)
    }
    pub fn r#strict_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way(self)
    }
    pub fn r#strict_two_way_fields(&self) -> fidl::client::QueryResponseFut<(i32)> {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_fields(self)
    }
    pub fn r#strict_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse)>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_union(self)
    }
    pub fn r#strict_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsClosedProtocolStrictTwoWayTableResponse)>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_table(self)
    }
    pub fn r#strict_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsClosedProtocolStrictTwoWayErrResult)>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_err(self)
    }
    pub fn r#strict_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<
        (UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult),
    > {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_fields_err(self)
    }
    pub fn r#strict_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult)>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_union_err(self)
    }
    pub fn r#strict_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult)>
    {
        UnknownInteractionsClosedProtocolProxyInterface::r#strict_two_way_table_err(self)
    }
}

impl UnknownInteractionsClosedProtocolProxyInterface for UnknownInteractionsClosedProtocolProxy {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0x59282385962da24,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    type StrictTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut {
        fn transform(result: Result<(), fidl::Error>) -> Result<(), fidl::Error> {
            result.map(|_value| ())
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x5eda305d6b22f1f7,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<(i32)>;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut {
        fn transform(result: Result<(i32,), fidl::Error>) -> Result<(i32), fidl::Error> {
            result.map(|_value| _value.0)
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x1323afa3e0541253,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayUnionResponseFut = fidl::client::QueryResponseFut<
        (UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse),
    >;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut {
        fn transform(
            result: Result<
                (UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,),
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse), fidl::Error>
        {
            result.map(|_value| _value.0)
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x68b32554eb0f6fa7,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayTableResponseFut = fidl::client::QueryResponseFut<
        (UnknownInteractionsClosedProtocolStrictTwoWayTableResponse),
    >;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut {
        fn transform(
            result: Result<
                (UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,),
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayTableResponse), fidl::Error>
        {
            result.map(|_value| _value.0)
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x6e4a94d44b69e785,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsClosedProtocolStrictTwoWayErrResult)>;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsClosedProtocolStrictTwoWayErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayErrResult), fidl::Error> {
            result.map(|_value| _value.map(|_value| ()))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x4fa35d5433db4d3a,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayFieldsErrResponseFut = fidl::client::QueryResponseFut<
        (UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult),
    >;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult), fidl::Error>
        {
            result.map(|_value| _value.map(|_value| _value.0))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0xb22aebf23bb58fd,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayUnionErrResponseFut = fidl::client::QueryResponseFut<
        (UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult),
    >;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult), fidl::Error>
        {
            result.map(|_value| _value.map(|_value| _value.0))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0xcd65d4d29a43c80,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayTableErrResponseFut = fidl::client::QueryResponseFut<
        (UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult),
    >;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsClosedProtocolStrictTwoWayTableErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult), fidl::Error>
        {
            result.map(|_value| _value.map(|_value| _value.0))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x117dde20b92f7b90,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
}

pub struct UnknownInteractionsClosedProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for UnknownInteractionsClosedProtocolEventStream {}

impl futures::stream::FusedStream for UnknownInteractionsClosedProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for UnknownInteractionsClosedProtocolEventStream {
    type Item = Result<UnknownInteractionsClosedProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(UnknownInteractionsClosedProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsClosedProtocolEvent {
    StrictEvent {},

    StrictEventFields { some_field: i32 },

    StrictEventUnion { payload: UnknownInteractionsClosedProtocolStrictEventUnionRequest },

    StrictEventTable { payload: UnknownInteractionsClosedProtocolStrictEventTableRequest },

    StrictEventErr { result: UnknownInteractionsClosedProtocolStrictEventErrResult },

    StrictEventFieldsErr { result: UnknownInteractionsClosedProtocolStrictEventFieldsErrResult },

    StrictEventUnionErr { result: UnknownInteractionsClosedProtocolStrictEventUnionErrResult },

    StrictEventTableErr { result: UnknownInteractionsClosedProtocolStrictEventTableErrResult },
}

impl UnknownInteractionsClosedProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event(self) -> Option<()> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEvent {} = self {
            Some(())
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields(self) -> Option<(i32)> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictEventUnionRequest)> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictEventTableRequest)> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictEventErrResult)> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictEventFieldsErrResult)> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictEventUnionErrResult)> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictEventTableErrResult)> {
        if let UnknownInteractionsClosedProtocolEvent::StrictEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`UnknownInteractionsClosedProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<UnknownInteractionsClosedProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0xa8ee6ee302f693b => {
                let mut out_tuple: () = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEvent {}
                ))
            }
            0x5d7c57b62e9c3a74 => {
                let mut out_tuple: (i32,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventFields {some_field: out_tuple.0,}
                ))
            }
            0x3b8475deeb4a9d64 => {
                let mut out_tuple: (UnknownInteractionsClosedProtocolStrictEventUnionRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventUnion {payload: out_tuple.0,}
                ))
            }
            0x27da43fc85a7f5be => {
                let mut out_tuple: (UnknownInteractionsClosedProtocolStrictEventTableRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventTable {payload: out_tuple.0,}
                ))
            }
            0x12b105b1430a1201 => {
                let mut out_tuple: (UnknownInteractionsClosedProtocolStrictEventErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventErr {result: out_tuple.0,}
                ))
            }
            0x2d16399d2e8a5c96 => {
                let mut out_tuple: (UnknownInteractionsClosedProtocolStrictEventFieldsErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventFieldsErr {result: out_tuple.0,}
                ))
            }
            0x6dcf67f2a1d16034 => {
                let mut out_tuple: (UnknownInteractionsClosedProtocolStrictEventUnionErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventUnionErr {result: out_tuple.0,}
                ))
            }
            0x4e90e92eafa9eefa => {
                let mut out_tuple: (UnknownInteractionsClosedProtocolStrictEventTableErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsClosedProtocolEvent::StrictEventTableErr {result: out_tuple.0,}
                ))
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for UnknownInteractionsClosedProtocol
pub struct UnknownInteractionsClosedProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for UnknownInteractionsClosedProtocolRequestStream {}

impl futures::stream::FusedStream for UnknownInteractionsClosedProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for UnknownInteractionsClosedProtocolRequestStream {
    type Protocol = UnknownInteractionsClosedProtocolMarker;
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        UnknownInteractionsClosedProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for UnknownInteractionsClosedProtocolRequestStream {
    type Item = Result<UnknownInteractionsClosedProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled UnknownInteractionsClosedProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x59282385962da24 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictOneWay {control_handle,})
                }
                0x5eda305d6b22f1f7 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWay {responder:UnknownInteractionsClosedProtocolStrictTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x1323afa3e0541253 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayFieldsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayFields {responder:UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x68b32554eb0f6fa7 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayUnionRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnion {responder:UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x6e4a94d44b69e785 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayTableRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayTable {responder:UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x4fa35d5433db4d3a => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayErr {responder:UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0xb22aebf23bb58fd => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayFieldsErr {responder:UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0xcd65d4d29a43c80 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayUnionErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnionErr {responder:UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x117dde20b92f7b90 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayTableErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsClosedProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsClosedProtocolRequest::StrictTwoWayTableErr {responder:UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <UnknownInteractionsClosedProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum UnknownInteractionsClosedProtocolRequest {
    StrictOneWay {
        control_handle: UnknownInteractionsClosedProtocolControlHandle,
    },
    StrictTwoWay {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayResponder,
    },
    StrictTwoWayFields {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder,
    },
    StrictTwoWayUnion {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder,
    },
    StrictTwoWayTable {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayTableResponder,
    },
    StrictTwoWayErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayErrResponder,
    },
    StrictTwoWayFieldsErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder,
    },
    StrictTwoWayUnionErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder,
    },
    StrictTwoWayTableErr {
        responder: UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder,
    },
}

impl UnknownInteractionsClosedProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_one_way(self) -> Option<(UnknownInteractionsClosedProtocolControlHandle)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayTableResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayFieldsErr { responder } = self
        {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder)> {
        if let UnknownInteractionsClosedProtocolRequest::StrictTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            UnknownInteractionsClosedProtocolRequest::StrictOneWay { .. } => "strict_one_way",
            UnknownInteractionsClosedProtocolRequest::StrictTwoWay { .. } => "strict_two_way",
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayFields { .. } => {
                "strict_two_way_fields"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnion { .. } => {
                "strict_two_way_union"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayTable { .. } => {
                "strict_two_way_table"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayErr { .. } => {
                "strict_two_way_err"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayFieldsErr { .. } => {
                "strict_two_way_fields_err"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayUnionErr { .. } => {
                "strict_two_way_union_err"
            }
            UnknownInteractionsClosedProtocolRequest::StrictTwoWayTableErr { .. } => {
                "strict_two_way_table_err"
            }
        }
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsClosedProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for UnknownInteractionsClosedProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }
}

impl UnknownInteractionsClosedProtocolControlHandle {
    pub fn send_strict_event(&self) -> Result<(), fidl::Error> {
        let mut response = ();

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0xa8ee6ee302f693b,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let mut response = (some_field);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x5d7c57b62e9c3a74,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_union(
        &self,
        mut payload: &mut UnknownInteractionsClosedProtocolStrictEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x3b8475deeb4a9d64,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_table(
        &self,
        mut payload: UnknownInteractionsClosedProtocolStrictEventTableRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x27da43fc85a7f5be,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_err(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictEventErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x12b105b1430a1201,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x2d16399d2e8a5c96,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x6dcf67f2a1d16034,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x4e90e92eafa9eefa,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let mut response = (());

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let mut response = (some_field);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &mut UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &mut UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &mut UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: UnknownInteractionsClosedProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayTableResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsClosedProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder
    for UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder
{
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsClosedProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsClosedProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsClosedProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsClosedProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct UnknownInteractionsProtocolMarker;

impl fidl::endpoints::ProtocolMarker for UnknownInteractionsProtocolMarker {
    type Proxy = UnknownInteractionsProtocolProxy;
    type RequestStream = UnknownInteractionsProtocolRequestStream;
    const DEBUG_NAME: &'static str = "(anonymous) UnknownInteractionsProtocol";
}

pub trait UnknownInteractionsProtocolProxyInterface: Send + Sync {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error>;
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error>;
    type StrictTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut;
    type StrictTwoWayFieldsResponseFut: std::future::Future<Output = Result<(i32), fidl::Error>>
        + Send;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut;
    type StrictTwoWayUnionResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolStrictTwoWayUnionResponse), fidl::Error>,
        > + Send;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut;
    type StrictTwoWayTableResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolStrictTwoWayTableResponse), fidl::Error>,
        > + Send;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut;
    type StrictTwoWayErrResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolStrictTwoWayErrResult), fidl::Error>,
        > + Send;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut;
    type StrictTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolStrictTwoWayFieldsErrResult), fidl::Error>,
        > + Send;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut;
    type StrictTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolStrictTwoWayUnionErrResult), fidl::Error>,
        > + Send;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut;
    type StrictTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolStrictTwoWayTableErrResult), fidl::Error>,
        > + Send;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut;
    type FlexibleTwoWayResponseFut: std::future::Future<Output = Result<(), fidl::Error>> + Send;
    fn r#flexible_two_way(&self) -> Self::FlexibleTwoWayResponseFut;
    type FlexibleTwoWayFieldsResponseFut: std::future::Future<Output = Result<(i32), fidl::Error>>
        + Send;
    fn r#flexible_two_way_fields(&self) -> Self::FlexibleTwoWayFieldsResponseFut;
    type FlexibleTwoWayUnionResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolFlexibleTwoWayUnionResponse), fidl::Error>,
        > + Send;
    fn r#flexible_two_way_union(&self) -> Self::FlexibleTwoWayUnionResponseFut;
    type FlexibleTwoWayTableResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolFlexibleTwoWayTableResponse), fidl::Error>,
        > + Send;
    fn r#flexible_two_way_table(&self) -> Self::FlexibleTwoWayTableResponseFut;
    type FlexibleTwoWayErrResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolFlexibleTwoWayErrResult), fidl::Error>,
        > + Send;
    fn r#flexible_two_way_err(&self) -> Self::FlexibleTwoWayErrResponseFut;
    type FlexibleTwoWayFieldsErrResponseFut: std::future::Future<
            Output = Result<
                (UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult),
                fidl::Error,
            >,
        > + Send;
    fn r#flexible_two_way_fields_err(&self) -> Self::FlexibleTwoWayFieldsErrResponseFut;
    type FlexibleTwoWayUnionErrResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult), fidl::Error>,
        > + Send;
    fn r#flexible_two_way_union_err(&self) -> Self::FlexibleTwoWayUnionErrResponseFut;
    type FlexibleTwoWayTableErrResponseFut: std::future::Future<
            Output = Result<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResult), fidl::Error>,
        > + Send;
    fn r#flexible_two_way_table_err(&self) -> Self::FlexibleTwoWayTableErrResponseFut;
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct UnknownInteractionsProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl UnknownInteractionsProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::Time,
    ) -> Result<UnknownInteractionsProtocolEvent, fidl::Error> {
        UnknownInteractionsProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0x4e7273b964d117a6,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0x818bb3a7a910446,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    pub fn r#strict_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _value: () = self.client.send_query::<_, _, false, false>(
            &mut (),
            0x734c996b0f37b942,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(())
    }
    pub fn r#strict_two_way_fields(&self, ___deadline: zx::Time) -> Result<(i32), fidl::Error> {
        let _value: (i32,) = self.client.send_query::<_, _, false, false>(
            &mut (),
            0x334f4e7fff460ae3,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_value.0)
    }
    pub fn r#strict_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolStrictTwoWayUnionResponse), fidl::Error> {
        let _value: (UnknownInteractionsProtocolStrictTwoWayUnionResponse,) =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x2212805eca592cad,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.0)
    }
    pub fn r#strict_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolStrictTwoWayTableResponse), fidl::Error> {
        let _value: (UnknownInteractionsProtocolStrictTwoWayTableResponse,) =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x746ebf8659ff23b7,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.0)
    }
    pub fn r#strict_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolStrictTwoWayErrResult), fidl::Error> {
        let _value: UnknownInteractionsProtocolStrictTwoWayErrResultHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0x6d1c6002c51bb967,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| ()))
    }
    pub fn r#strict_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolStrictTwoWayFieldsErrResult), fidl::Error> {
        let _value: UnknownInteractionsProtocolStrictTwoWayFieldsErrResultHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0x2182a49480e5bd2b,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| _value.0))
    }
    pub fn r#strict_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolStrictTwoWayUnionErrResult), fidl::Error> {
        let _value: UnknownInteractionsProtocolStrictTwoWayUnionErrResultHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x453af745d38b20ca,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| _value.0))
    }
    pub fn r#strict_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolStrictTwoWayTableErrResult), fidl::Error> {
        let _value: UnknownInteractionsProtocolStrictTwoWayTableErrResultHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x4c26c7ab89cb68d8,
                fidl::encoding::DynamicFlags::empty(),
                ___deadline,
            )?;
        Ok(_value.map(|_value| _value.0))
    }
    pub fn r#flexible_two_way(&self, ___deadline: zx::Time) -> Result<(), fidl::Error> {
        let _value: UnknownInteractionsProtocolFlexibleTwoWayResultWireHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0x4a5bb3397008b7c,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?;
        let _value = _value.into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way")?;
        Ok(())
    }
    pub fn r#flexible_two_way_fields(&self, ___deadline: zx::Time) -> Result<(i32), fidl::Error> {
        let _value: UnknownInteractionsProtocolFlexibleTwoWayFieldsResultWireHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0x3b13f82f44813a32,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?;
        let _value =
            _value.into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields")?;
        Ok(_value.0)
    }
    pub fn r#flexible_two_way_union(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayUnionResponse), fidl::Error> {
        let _value: UnknownInteractionsProtocolFlexibleTwoWayUnionResultWireHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x44301e4e8d514fb6,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?;
        let _value =
            _value.into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union")?;
        Ok(_value.0)
    }
    pub fn r#flexible_two_way_table(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayTableResponse), fidl::Error> {
        let _value: UnknownInteractionsProtocolFlexibleTwoWayTableResultWireHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x7f492934b6c76187,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?;
        let _value =
            _value.into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table")?;
        Ok(_value.0)
    }
    pub fn r#flexible_two_way_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayErrResult), fidl::Error> {
        let _value: UnknownInteractionsProtocolFlexibleTwoWayErrResultWireHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0x61240f878cc37c07,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?;
        let _value = _value
            .into_nested_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_err")?;
        Ok(_value.map(|_value| ()))
    }
    pub fn r#flexible_two_way_fields_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult), fidl::Error> {
        let _value: UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResultWireHandleWrapper =
            self.client.send_query::<_, _, false, false>(
                &mut (),
                0xf2b9611a9089b05,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?;
        let _value = _value.into_nested_result::<UnknownInteractionsProtocolMarker>(
            "flexible_two_way_fields_err",
        )?;
        Ok(_value.map(|_value| _value.0))
    }
    pub fn r#flexible_two_way_union_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult), fidl::Error> {
        let _value: UnknownInteractionsProtocolFlexibleTwoWayUnionErrResultWireHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x2172940a75f107d7,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?;
        let _value = _value.into_nested_result::<UnknownInteractionsProtocolMarker>(
            "flexible_two_way_union_err",
        )?;
        Ok(_value.map(|_value| _value.0))
    }
    pub fn r#flexible_two_way_table_err(
        &self,
        ___deadline: zx::Time,
    ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResult), fidl::Error> {
        let _value: UnknownInteractionsProtocolFlexibleTwoWayTableErrResultWireHandleWrapper =
            self.client.send_query::<_, _, false, true>(
                &mut (),
                0x6d8aab48e1693bf2,
                fidl::encoding::DynamicFlags::FLEXIBLE,
                ___deadline,
            )?;
        let _value = _value.into_nested_result::<UnknownInteractionsProtocolMarker>(
            "flexible_two_way_table_err",
        )?;
        Ok(_value.map(|_value| _value.0))
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsProtocolProxy {
    client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for UnknownInteractionsProtocolProxy {
    type Protocol = UnknownInteractionsProtocolMarker;

    fn from_channel(inner: fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl UnknownInteractionsProtocolProxy {
    /// Create a new Proxy for UnknownInteractionsProtocol
    pub fn new(channel: fidl::AsyncChannel) -> Self {
        let protocol_name =
            <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the UnknownInteractionsProtocol protocol
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> UnknownInteractionsProtocolEventStream {
        UnknownInteractionsProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }
    pub fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsProtocolProxyInterface::r#strict_one_way(self)
    }
    pub fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_one_way(self)
    }
    pub fn r#strict_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way(self)
    }
    pub fn r#strict_two_way_fields(&self) -> fidl::client::QueryResponseFut<(i32)> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_fields(self)
    }
    pub fn r#strict_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayUnionResponse)>
    {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_union(self)
    }
    pub fn r#strict_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayTableResponse)>
    {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_table(self)
    }
    pub fn r#strict_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayErrResult)> {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_err(self)
    }
    pub fn r#strict_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayFieldsErrResult)>
    {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_fields_err(self)
    }
    pub fn r#strict_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayUnionErrResult)>
    {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_union_err(self)
    }
    pub fn r#strict_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayTableErrResult)>
    {
        UnknownInteractionsProtocolProxyInterface::r#strict_two_way_table_err(self)
    }
    pub fn r#flexible_two_way(&self) -> fidl::client::QueryResponseFut<()> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way(self)
    }
    pub fn r#flexible_two_way_fields(&self) -> fidl::client::QueryResponseFut<(i32)> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_fields(self)
    }
    pub fn r#flexible_two_way_union(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayUnionResponse)>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_union(self)
    }
    pub fn r#flexible_two_way_table(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayTableResponse)>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_table(self)
    }
    pub fn r#flexible_two_way_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayErrResult)> {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_err(self)
    }
    pub fn r#flexible_two_way_fields_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult)>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_fields_err(self)
    }
    pub fn r#flexible_two_way_union_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult)>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_union_err(self)
    }
    pub fn r#flexible_two_way_table_err(
        &self,
    ) -> fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResult)>
    {
        UnknownInteractionsProtocolProxyInterface::r#flexible_two_way_table_err(self)
    }
}

impl UnknownInteractionsProtocolProxyInterface for UnknownInteractionsProtocolProxy {
    fn r#strict_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0x4e7273b964d117a6,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
    fn r#flexible_one_way(&self) -> Result<(), fidl::Error> {
        self.client.send::<_, false>(
            &mut (),
            0x818bb3a7a910446,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        )
    }
    type StrictTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#strict_two_way(&self) -> Self::StrictTwoWayResponseFut {
        fn transform(result: Result<(), fidl::Error>) -> Result<(), fidl::Error> {
            result.map(|_value| ())
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x734c996b0f37b942,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<(i32)>;
    fn r#strict_two_way_fields(&self) -> Self::StrictTwoWayFieldsResponseFut {
        fn transform(result: Result<(i32,), fidl::Error>) -> Result<(i32), fidl::Error> {
            result.map(|_value| _value.0)
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x334f4e7fff460ae3,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayUnionResponse)>;
    fn r#strict_two_way_union(&self) -> Self::StrictTwoWayUnionResponseFut {
        fn transform(
            result: Result<(UnknownInteractionsProtocolStrictTwoWayUnionResponse,), fidl::Error>,
        ) -> Result<(UnknownInteractionsProtocolStrictTwoWayUnionResponse), fidl::Error> {
            result.map(|_value| _value.0)
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x2212805eca592cad,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayTableResponse)>;
    fn r#strict_two_way_table(&self) -> Self::StrictTwoWayTableResponseFut {
        fn transform(
            result: Result<(UnknownInteractionsProtocolStrictTwoWayTableResponse,), fidl::Error>,
        ) -> Result<(UnknownInteractionsProtocolStrictTwoWayTableResponse), fidl::Error> {
            result.map(|_value| _value.0)
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x746ebf8659ff23b7,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayErrResult)>;
    fn r#strict_two_way_err(&self) -> Self::StrictTwoWayErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolStrictTwoWayErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolStrictTwoWayErrResult), fidl::Error> {
            result.map(|_value| _value.map(|_value| ()))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x6d1c6002c51bb967,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayFieldsErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayFieldsErrResult)>;
    fn r#strict_two_way_fields_err(&self) -> Self::StrictTwoWayFieldsErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolStrictTwoWayFieldsErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolStrictTwoWayFieldsErrResult), fidl::Error> {
            result.map(|_value| _value.map(|_value| _value.0))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x2182a49480e5bd2b,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayUnionErrResult)>;
    fn r#strict_two_way_union_err(&self) -> Self::StrictTwoWayUnionErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolStrictTwoWayUnionErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolStrictTwoWayUnionErrResult), fidl::Error> {
            result.map(|_value| _value.map(|_value| _value.0))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x453af745d38b20ca,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type StrictTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolStrictTwoWayTableErrResult)>;
    fn r#strict_two_way_table_err(&self) -> Self::StrictTwoWayTableErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolStrictTwoWayTableErrResultHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolStrictTwoWayTableErrResult), fidl::Error> {
            result.map(|_value| _value.map(|_value| _value.0))
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x4c26c7ab89cb68d8,
            fidl::encoding::DynamicFlags::empty(),
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type FlexibleTwoWayResponseFut = fidl::client::QueryResponseFut<()>;
    fn r#flexible_two_way(&self) -> Self::FlexibleTwoWayResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolFlexibleTwoWayResultWireHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(), fidl::Error> {
            result.and_then(|_value| {
                let _value =
                    _value.into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way")?;
                Ok(())
            })
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x4a5bb3397008b7c,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type FlexibleTwoWayFieldsResponseFut = fidl::client::QueryResponseFut<(i32)>;
    fn r#flexible_two_way_fields(&self) -> Self::FlexibleTwoWayFieldsResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolFlexibleTwoWayFieldsResultWireHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(i32), fidl::Error> {
            result.and_then(|_value| {
                let _value = _value
                    .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_fields")?;
                Ok(_value.0)
            })
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x3b13f82f44813a32,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type FlexibleTwoWayUnionResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayUnionResponse)>;
    fn r#flexible_two_way_union(&self) -> Self::FlexibleTwoWayUnionResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolFlexibleTwoWayUnionResultWireHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayUnionResponse), fidl::Error> {
            result.and_then(|_value| {
                let _value = _value
                    .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_union")?;
                Ok(_value.0)
            })
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x44301e4e8d514fb6,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type FlexibleTwoWayTableResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayTableResponse)>;
    fn r#flexible_two_way_table(&self) -> Self::FlexibleTwoWayTableResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolFlexibleTwoWayTableResultWireHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayTableResponse), fidl::Error> {
            result.and_then(|_value| {
                let _value = _value
                    .into_result::<UnknownInteractionsProtocolMarker>("flexible_two_way_table")?;
                Ok(_value.0)
            })
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x7f492934b6c76187,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type FlexibleTwoWayErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayErrResult)>;
    fn r#flexible_two_way_err(&self) -> Self::FlexibleTwoWayErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolFlexibleTwoWayErrResultWireHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayErrResult), fidl::Error> {
            result.and_then(|_value| {
                let _value = _value.into_nested_result::<UnknownInteractionsProtocolMarker>(
                    "flexible_two_way_err",
                )?;
                Ok(_value.map(|_value| ()))
            })
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x61240f878cc37c07,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type FlexibleTwoWayFieldsErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult)>;
    fn r#flexible_two_way_fields_err(&self) -> Self::FlexibleTwoWayFieldsErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResultWireHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult), fidl::Error>
        {
            result.and_then(|_value| {
                let _value = _value.into_nested_result::<UnknownInteractionsProtocolMarker>(
                    "flexible_two_way_fields_err",
                )?;
                Ok(_value.map(|_value| _value.0))
            })
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0xf2b9611a9089b05,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, false>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type FlexibleTwoWayUnionErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult)>;
    fn r#flexible_two_way_union_err(&self) -> Self::FlexibleTwoWayUnionErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolFlexibleTwoWayUnionErrResultWireHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult), fidl::Error>
        {
            result.and_then(|_value| {
                let _value = _value.into_nested_result::<UnknownInteractionsProtocolMarker>(
                    "flexible_two_way_union_err",
                )?;
                Ok(_value.map(|_value| _value.0))
            })
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x2172940a75f107d7,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
    type FlexibleTwoWayTableErrResponseFut =
        fidl::client::QueryResponseFut<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResult)>;
    fn r#flexible_two_way_table_err(&self) -> Self::FlexibleTwoWayTableErrResponseFut {
        fn transform(
            result: Result<
                UnknownInteractionsProtocolFlexibleTwoWayTableErrResultWireHandleWrapper,
                fidl::Error,
            >,
        ) -> Result<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResult), fidl::Error>
        {
            result.and_then(|_value| {
                let _value = _value.into_nested_result::<UnknownInteractionsProtocolMarker>(
                    "flexible_two_way_table_err",
                )?;
                Ok(_value.map(|_value| _value.0))
            })
        }
        let send_result = self.client.call_send_raw_query::<_, false>(
            &mut (),
            0x6d8aab48e1693bf2,
            fidl::encoding::DynamicFlags::FLEXIBLE,
        );
        QueryResponseFut(match send_result {
            Ok(res_fut) => future::maybe_done(
                res_fut.and_then(|buf| decode_transaction_body_fut::<_, _, true>(buf, transform)),
            ),
            Err(e) => MaybeDone::Done(Err(e)),
        })
    }
}

pub struct UnknownInteractionsProtocolEventStream {
    event_receiver: fidl::client::EventReceiver,
}

impl std::marker::Unpin for UnknownInteractionsProtocolEventStream {}

impl futures::stream::FusedStream for UnknownInteractionsProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for UnknownInteractionsProtocolEventStream {
    type Item = Result<UnknownInteractionsProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let buf = match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => buf,
            None => return std::task::Poll::Ready(None),
        };

        std::task::Poll::Ready(Some(UnknownInteractionsProtocolEvent::decode(buf)))
    }
}

#[derive(Debug)]
pub enum UnknownInteractionsProtocolEvent {
    StrictEvent {},

    StrictEventFields {
        some_field: i32,
    },

    StrictEventUnion {
        payload: UnknownInteractionsProtocolStrictEventUnionRequest,
    },

    StrictEventTable {
        payload: UnknownInteractionsProtocolStrictEventTableRequest,
    },

    StrictEventErr {
        result: UnknownInteractionsProtocolStrictEventErrResult,
    },

    StrictEventFieldsErr {
        result: UnknownInteractionsProtocolStrictEventFieldsErrResult,
    },

    StrictEventUnionErr {
        result: UnknownInteractionsProtocolStrictEventUnionErrResult,
    },

    StrictEventTableErr {
        result: UnknownInteractionsProtocolStrictEventTableErrResult,
    },

    FlexibleEvent {},

    FlexibleEventFields {
        some_field: i32,
    },

    FlexibleEventUnion {
        payload: UnknownInteractionsProtocolFlexibleEventUnionRequest,
    },

    FlexibleEventTable {
        payload: UnknownInteractionsProtocolFlexibleEventTableRequest,
    },

    FlexibleEventErr {
        result: UnknownInteractionsProtocolFlexibleEventErrResult,
    },

    FlexibleEventFieldsErr {
        result: UnknownInteractionsProtocolFlexibleEventFieldsErrResult,
    },

    FlexibleEventUnionErr {
        result: UnknownInteractionsProtocolFlexibleEventUnionErrResult,
    },

    FlexibleEventTableErr {
        result: UnknownInteractionsProtocolFlexibleEventTableErrResult,
    },
    #[non_exhaustive]
    _UnknownEvent {
        /// Ordinal of the event that was sent.
        ordinal: u64,
    },
}

impl UnknownInteractionsProtocolEvent {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event(self) -> Option<()> {
        if let UnknownInteractionsProtocolEvent::StrictEvent {} = self {
            Some(())
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields(self) -> Option<(i32)> {
        if let UnknownInteractionsProtocolEvent::StrictEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictEventUnionRequest)> {
        if let UnknownInteractionsProtocolEvent::StrictEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictEventTableRequest)> {
        if let UnknownInteractionsProtocolEvent::StrictEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictEventErrResult)> {
        if let UnknownInteractionsProtocolEvent::StrictEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_fields_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictEventFieldsErrResult)> {
        if let UnknownInteractionsProtocolEvent::StrictEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_union_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictEventUnionErrResult)> {
        if let UnknownInteractionsProtocolEvent::StrictEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_event_table_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictEventTableErrResult)> {
        if let UnknownInteractionsProtocolEvent::StrictEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event(self) -> Option<()> {
        if let UnknownInteractionsProtocolEvent::FlexibleEvent {} = self {
            Some(())
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields(self) -> Option<(i32)> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventFields { some_field } = self {
            Some((some_field))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleEventUnionRequest)> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventUnion { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleEventTableRequest)> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventTable { payload } = self {
            Some((payload))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleEventErrResult)> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_fields_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleEventFieldsErrResult)> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventFieldsErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_union_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleEventUnionErrResult)> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventUnionErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_event_table_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleEventTableErrResult)> {
        if let UnknownInteractionsProtocolEvent::FlexibleEventTableErr { result } = self {
            Some((result))
        } else {
            None
        }
    }

    /// Decodes a message buffer as a [`UnknownInteractionsProtocolEvent`]. Transaction
    /// ID in the message must be zero; this method does not check TXID.
    fn decode(
        mut buf: fidl::MessageBufEtc,
    ) -> Result<UnknownInteractionsProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

        match tx_header.ordinal() {
            0x9842669255c4fc1 => {
                let mut out_tuple: () = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEvent {}
                ))
            }
            0x7b75ae46520ee732 => {
                let mut out_tuple: (i32,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventFields {some_field: out_tuple.0,}
                ))
            }
            0x3663b5197598cbda => {
                let mut out_tuple: (UnknownInteractionsProtocolStrictEventUnionRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventUnion {payload: out_tuple.0,}
                ))
            }
            0x25a10039a9f96910 => {
                let mut out_tuple: (UnknownInteractionsProtocolStrictEventTableRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventTable {payload: out_tuple.0,}
                ))
            }
            0x3d956048f723bc6d => {
                let mut out_tuple: (UnknownInteractionsProtocolStrictEventErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventErr {result: out_tuple.0,}
                ))
            }
            0x72c0566865e53c8b => {
                let mut out_tuple: (UnknownInteractionsProtocolStrictEventFieldsErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventFieldsErr {result: out_tuple.0,}
                ))
            }
            0x40f96851e6f82abb => {
                let mut out_tuple: (UnknownInteractionsProtocolStrictEventUnionErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventUnionErr {result: out_tuple.0,}
                ))
            }
            0x6ca24cbed7b2784a => {
                let mut out_tuple: (UnknownInteractionsProtocolStrictEventTableErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::StrictEventTableErr {result: out_tuple.0,}
                ))
            }
            0x61bb1fab7d767866 => {
                let mut out_tuple: () = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEvent {}
                ))
            }
            0x3226dff9b0c1d801 => {
                let mut out_tuple: (i32,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventFieldsEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventFields {some_field: out_tuple.0,}
                ))
            }
            0x22afd161ca71e467 => {
                let mut out_tuple: (UnknownInteractionsProtocolFlexibleEventUnionRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventUnionEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventUnion {payload: out_tuple.0,}
                ))
            }
            0x4f72dd46888b89e0 => {
                let mut out_tuple: (UnknownInteractionsProtocolFlexibleEventTableRequest,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventTableEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventTable {payload: out_tuple.0,}
                ))
            }
            0x4bda3e6fb22bb5a9 => {
                let mut out_tuple: (UnknownInteractionsProtocolFlexibleEventErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventErr {result: out_tuple.0,}
                ))
            }
            0xf370ade2f7c7a4a => {
                let mut out_tuple: (UnknownInteractionsProtocolFlexibleEventFieldsErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventFieldsErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::Decoder::decode_into(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventFieldsErr {result: out_tuple.0,}
                ))
            }
            0xc94989e5f6707ec => {
                let mut out_tuple: (UnknownInteractionsProtocolFlexibleEventUnionErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventUnionErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventUnionErr {result: out_tuple.0,}
                ))
            }
            0x4dca02085aeb2d43 => {
                let mut out_tuple: (UnknownInteractionsProtocolFlexibleEventTableErrResult,) = fidl::encoding::Decodable::new_empty();
                fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleEventTableErrEvent");
                fidl::trace_blob!("fidl:blob", "decode", bytes);
                fidl::encoding::maybe_overflowing_decode(&tx_header, _body_bytes, _handles, &mut out_tuple)?;
                fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => _handles.len() as u32);
                Ok((
                    UnknownInteractionsProtocolEvent::FlexibleEventTableErr {result: out_tuple.0,}
                ))
            }
            _ if tx_header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                Ok(UnknownInteractionsProtocolEvent::_UnknownEvent {
                    ordinal: tx_header.ordinal(),
                })
                // MessageBufEtc will close handles on drop, before the
                // application can handle the _UnknownEvent variant, so this
                // satisfies the RFC-0138 requirement to close handles first.
            }
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal(),
                protocol_name: <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for UnknownInteractionsProtocol
pub struct UnknownInteractionsProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for UnknownInteractionsProtocolRequestStream {}

impl futures::stream::FusedStream for UnknownInteractionsProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for UnknownInteractionsProtocolRequestStream {
    type Protocol = UnknownInteractionsProtocolMarker;
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn from_channel(channel: fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        UnknownInteractionsProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<fidl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for UnknownInteractionsProtocolRequestStream {
    type Item = Result<UnknownInteractionsProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.poll_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled UnknownInteractionsProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {}
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => {
                    return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e))))
                }
            }

            // A message has been received from the channel
            let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
            if !header.is_compatible() {
                return std::task::Poll::Ready(Some(Err(fidl::Error::IncompatibleMagicNumber(
                    header.magic_number(),
                ))));
            }

            std::task::Poll::Ready(Some(match header.ordinal() {
                0x4e7273b964d117a6 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictOneWay {control_handle,})
                }
                0x818bb3a7a910446 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleOneWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleOneWay {control_handle,})
                }
                0x734c996b0f37b942 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWay {responder:UnknownInteractionsProtocolStrictTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x334f4e7fff460ae3 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayFieldsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayFields {responder:UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x2212805eca592cad => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayUnionRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayUnion {responder:UnknownInteractionsProtocolStrictTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x746ebf8659ff23b7 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayTableRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayTable {responder:UnknownInteractionsProtocolStrictTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x6d1c6002c51bb967 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayErr {responder:UnknownInteractionsProtocolStrictTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x2182a49480e5bd2b => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayFieldsErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayFieldsErr {responder:UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x453af745d38b20ca => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayUnionErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayUnionErr {responder:UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x4c26c7ab89cb68d8 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayTableErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::StrictTwoWayTableErr {responder:UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x4a5bb3397008b7c => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWay {responder:UnknownInteractionsProtocolFlexibleTwoWayResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x3b13f82f44813a32 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayFieldsRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayFields {responder:UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x44301e4e8d514fb6 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayUnionRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayUnion {responder:UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x7f492934b6c76187 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayTableRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayTable {responder:UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x61240f878cc37c07 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayErr {responder:UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0xf2b9611a9089b05 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayFieldsErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayFieldsErr {responder:UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x2172940a75f107d7 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayUnionErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayUnionErr {responder:UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                0x6d8aab48e1693bf2 => {
                    let mut req: () = fidl::encoding::Decodable::new_empty();
                    fidl::duration_begin!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayTableErrRequest");
                    fidl::trace_blob!("fidl:blob", "decode", bytes);
                    fidl::encoding::Decoder::decode_into(&header, _body_bytes, handles, &mut req)?;
                    fidl::duration_end!("fidl", "decode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    Ok(UnknownInteractionsProtocolRequest::FlexibleTwoWayTableErr {responder:UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id(),
                                ordinal: header.ordinal(),
                            },})
                }
                _ if header.tx_id() == 0 && header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };
                    Ok(UnknownInteractionsProtocolRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                        unknown_method_type: fidl::endpoints::UnknownMethodType::OneWay,
                    })
                    // with_tls_decode_buf will clear the handles when we return
                    // before the application can handle the _UnknownMethod, so
                    // we don't need to clear it explicitly to meet the RFC
                    // requirement to close handles before calling an unknown
                    // interaction handler.
                }
                _ if header.dynamic_flags().contains(fidl::encoding::DynamicFlags::FLEXIBLE) => {
                    let control_handle = UnknownInteractionsProtocolControlHandle {
                        inner: this.inner.clone(),
                    };

                    let mut response = fidl::encoding::OpenResult::<(), ()>::TransportErr(fidl::encoding::TransportErr::UnknownMethod);

                    let mut msg = fidl::encoding::TransactionMessage {
                        header: fidl::encoding::TransactionHeader::new(
                            header.tx_id(), header.ordinal(), header.dynamic_flags(),
                        ),
                        body: &mut response,
                    };

                    // RFC-0138 requires us to close handles in the incoming
                    // message before replying, so we can't wait for
                    // with_tls_decode_buf to auto-clear handles when we return.
                    handles.clear();

                    // We are inside of with_tls_decode_buf, so we can't use
                    // with_tls_encode_buf. However, we know that the unknown
                    // interaction reply will not contain any handles, so
                    // creating a new Vec here does not cause an allocation.
                    let mut handles = Vec::new();
                    fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocol_UnknownMethodResponse");
                    fidl::encoding::Encoder::encode(bytes, &mut handles, &mut msg)?;
                    fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
                    fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

                    control_handle
                        .inner
                        .channel()
                        .write_etc(&*bytes, &mut handles)
                        .map_err(fidl::Error::ServerResponseWrite)?;

                    Ok(UnknownInteractionsProtocolRequest::_UnknownMethod {
                        ordinal: header.ordinal(),
                        control_handle,
                        unknown_method_type: fidl::endpoints::UnknownMethodType::TwoWay,
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal(),
                    protocol_name: <UnknownInteractionsProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}
#[derive(Debug)]
pub enum UnknownInteractionsProtocolRequest {
    StrictOneWay {
        control_handle: UnknownInteractionsProtocolControlHandle,
    },
    FlexibleOneWay {
        control_handle: UnknownInteractionsProtocolControlHandle,
    },
    StrictTwoWay {
        responder: UnknownInteractionsProtocolStrictTwoWayResponder,
    },
    StrictTwoWayFields {
        responder: UnknownInteractionsProtocolStrictTwoWayFieldsResponder,
    },
    StrictTwoWayUnion {
        responder: UnknownInteractionsProtocolStrictTwoWayUnionResponder,
    },
    StrictTwoWayTable {
        responder: UnknownInteractionsProtocolStrictTwoWayTableResponder,
    },
    StrictTwoWayErr {
        responder: UnknownInteractionsProtocolStrictTwoWayErrResponder,
    },
    StrictTwoWayFieldsErr {
        responder: UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder,
    },
    StrictTwoWayUnionErr {
        responder: UnknownInteractionsProtocolStrictTwoWayUnionErrResponder,
    },
    StrictTwoWayTableErr {
        responder: UnknownInteractionsProtocolStrictTwoWayTableErrResponder,
    },
    FlexibleTwoWay {
        responder: UnknownInteractionsProtocolFlexibleTwoWayResponder,
    },
    FlexibleTwoWayFields {
        responder: UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder,
    },
    FlexibleTwoWayUnion {
        responder: UnknownInteractionsProtocolFlexibleTwoWayUnionResponder,
    },
    FlexibleTwoWayTable {
        responder: UnknownInteractionsProtocolFlexibleTwoWayTableResponder,
    },
    FlexibleTwoWayErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayErrResponder,
    },
    FlexibleTwoWayFieldsErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder,
    },
    FlexibleTwoWayUnionErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder,
    },
    FlexibleTwoWayTableErr {
        responder: UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder,
    },
    /// An interaction was received which does not match any known method.
    #[non_exhaustive]
    _UnknownMethod {
        /// Ordinal of the method that was called.
        ordinal: u64,
        control_handle: UnknownInteractionsProtocolControlHandle,
        unknown_method_type: fidl::endpoints::UnknownMethodType,
    },
}

impl UnknownInteractionsProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_one_way(self) -> Option<(UnknownInteractionsProtocolControlHandle)> {
        if let UnknownInteractionsProtocolRequest::StrictOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_one_way(self) -> Option<(UnknownInteractionsProtocolControlHandle)> {
        if let UnknownInteractionsProtocolRequest::FlexibleOneWay { control_handle } = self {
            Some((control_handle))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way(self) -> Option<(UnknownInteractionsProtocolStrictTwoWayResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayFieldsResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayUnionResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayTableResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayFieldsErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayUnionErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_strict_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolStrictTwoWayTableErrResponder)> {
        if let UnknownInteractionsProtocolRequest::StrictTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWay { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_fields(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayFields { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_union(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayUnionResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayUnion { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_table(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayTableResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayTable { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_fields_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayFieldsErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_union_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayUnionErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_flexible_two_way_table_err(
        self,
    ) -> Option<(UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder)> {
        if let UnknownInteractionsProtocolRequest::FlexibleTwoWayTableErr { responder } = self {
            Some((responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            UnknownInteractionsProtocolRequest::StrictOneWay { .. } => "strict_one_way",
            UnknownInteractionsProtocolRequest::FlexibleOneWay { .. } => "flexible_one_way",
            UnknownInteractionsProtocolRequest::StrictTwoWay { .. } => "strict_two_way",
            UnknownInteractionsProtocolRequest::StrictTwoWayFields { .. } => {
                "strict_two_way_fields"
            }
            UnknownInteractionsProtocolRequest::StrictTwoWayUnion { .. } => "strict_two_way_union",
            UnknownInteractionsProtocolRequest::StrictTwoWayTable { .. } => "strict_two_way_table",
            UnknownInteractionsProtocolRequest::StrictTwoWayErr { .. } => "strict_two_way_err",
            UnknownInteractionsProtocolRequest::StrictTwoWayFieldsErr { .. } => {
                "strict_two_way_fields_err"
            }
            UnknownInteractionsProtocolRequest::StrictTwoWayUnionErr { .. } => {
                "strict_two_way_union_err"
            }
            UnknownInteractionsProtocolRequest::StrictTwoWayTableErr { .. } => {
                "strict_two_way_table_err"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWay { .. } => "flexible_two_way",
            UnknownInteractionsProtocolRequest::FlexibleTwoWayFields { .. } => {
                "flexible_two_way_fields"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayUnion { .. } => {
                "flexible_two_way_union"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayTable { .. } => {
                "flexible_two_way_table"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayErr { .. } => "flexible_two_way_err",
            UnknownInteractionsProtocolRequest::FlexibleTwoWayFieldsErr { .. } => {
                "flexible_two_way_fields_err"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayUnionErr { .. } => {
                "flexible_two_way_union_err"
            }
            UnknownInteractionsProtocolRequest::FlexibleTwoWayTableErr { .. } => {
                "flexible_two_way_table_err"
            }
            UnknownInteractionsProtocolRequest::_UnknownMethod {
                unknown_method_type: fidl::endpoints::UnknownMethodType::OneWay,
                ..
            } => "unknown one-way method",
            UnknownInteractionsProtocolRequest::_UnknownMethod {
                unknown_method_type: fidl::endpoints::UnknownMethodType::TwoWay,
                ..
            } => "unknown two-way method",
        }
    }
}

#[derive(Debug, Clone)]
pub struct UnknownInteractionsProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner>,
}

impl fidl::endpoints::ControlHandle for UnknownInteractionsProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }
}

impl UnknownInteractionsProtocolControlHandle {
    pub fn send_strict_event(&self) -> Result<(), fidl::Error> {
        let mut response = ();

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x9842669255c4fc1,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let mut response = (some_field);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x7b75ae46520ee732,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_union(
        &self,
        mut payload: &mut UnknownInteractionsProtocolStrictEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x3663b5197598cbda,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_table(
        &self,
        mut payload: UnknownInteractionsProtocolStrictEventTableRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x25a10039a9f96910,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictEventErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x3d956048f723bc6d,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x72c0566865e53c8b,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x40f96851e6f82abb,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_strict_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolStrictEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x6ca24cbed7b2784a,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event(&self) -> Result<(), fidl::Error> {
        let mut response = ();

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x61bb1fab7d767866,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_fields(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let mut response = (some_field);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x3226dff9b0c1d801,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_union(
        &self,
        mut payload: &mut UnknownInteractionsProtocolFlexibleEventUnionRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x22afd161ca71e467,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_table(
        &self,
        mut payload: UnknownInteractionsProtocolFlexibleEventTableRequest,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x4f72dd46888b89e0,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleEventErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x4bda3e6fb22bb5a9,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_fields_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleEventFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0xf370ade2f7c7a4a,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_union_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleEventUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0xc94989e5f6707ec,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }

    pub fn send_flexible_event_table_err(
        &self,
        mut result: &mut UnknownInteractionsProtocolFlexibleEventTableErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                0,
                0x4dca02085aeb2d43,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encoded::<_, _, false>(&mut msg, |bytes, handles| {
            self.inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)
        })?;

        Ok(())
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let mut response = (());

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let mut response = (some_field);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayFieldsResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &mut UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &mut UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &mut UnknownInteractionsProtocolStrictTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayUnionResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: UnknownInteractionsProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: UnknownInteractionsProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: UnknownInteractionsProtocolStrictTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let mut response = (payload);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayTableResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsProtocolStrictTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsProtocolStrictTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsProtocolStrictTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayUnionErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolStrictTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsProtocolStrictTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (_result);

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::empty(),
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolStrictTwoWayTableErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self) -> Result<(), fidl::Error> {
        let r = self.send_raw();
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self) -> Result<(), fidl::Error> {
        let mut response = (fidl::encoding::OpenResult::<_, ()>::Ok(()));

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayFieldsResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(self, mut some_field: i32) -> Result<(), fidl::Error> {
        let r = self.send_raw(some_field);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(&self, mut some_field: i32) -> Result<(), fidl::Error> {
        let mut response = (fidl::encoding::OpenResult::<_, ()>::Ok((some_field)));

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: &mut UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: &mut UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: &mut UnknownInteractionsProtocolFlexibleTwoWayUnionResponse,
    ) -> Result<(), fidl::Error> {
        let mut response = (fidl::encoding::OpenResult::<_, ()>::Ok((payload)));

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayUnionResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayTableResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut payload: UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut payload: UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(payload);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut payload: UnknownInteractionsProtocolFlexibleTwoWayTableResponse,
    ) -> Result<(), fidl::Error> {
        let mut response = (fidl::encoding::OpenResult::<_, ()>::Ok((payload)));

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayTableResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsProtocolFlexibleTwoWayErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (fidl::encoding::OpenResult::from(_result));

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (fidl::encoding::OpenResult::from(_result));

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (fidl::encoding::OpenResult::from(_result));

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    control_handle: std::mem::ManuallyDrop<UnknownInteractionsProtocolControlHandle>,
    tx_id: u32,
    ordinal: u64,
}

/// Set the the channel to be shutdown (see [`UnknownInteractionsProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    type ControlHandle = UnknownInteractionsProtocolControlHandle;

    fn control_handle(&self) -> &UnknownInteractionsProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl UnknownInteractionsProtocolFlexibleTwoWayTableErrResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        if r.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        r
    }

    /// Similar to "send" but does not shutdown the channel if
    /// an error occurs.
    pub fn send_no_shutdown_on_err(
        self,
        mut result: &mut UnknownInteractionsProtocolFlexibleTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let r = self.send_raw(result);
        self.drop_without_shutdown();
        r
    }

    fn send_raw(
        &self,
        mut _result: &mut UnknownInteractionsProtocolFlexibleTwoWayTableErrResult,
    ) -> Result<(), fidl::Error> {
        let mut response = (fidl::encoding::OpenResult::from(_result));

        let mut msg = fidl::encoding::TransactionMessage {
            header: fidl::encoding::TransactionHeader::new(
                self.tx_id,
                self.ordinal,
                fidl::encoding::DynamicFlags::FLEXIBLE,
            ),
            body: &mut response,
        };

        fidl::encoding::with_tls_encode_buf(|bytes, handles| {
            fidl::duration_begin!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "name" => "test.unknowninteractions/UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse");
            fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
            fidl::trace_blob!("fidl:blob", "encode", bytes.as_slice());
            fidl::duration_end!("fidl", "encode", "bindings" => _FIDL_TRACE_BINDINGS_RUST, "size" => bytes.len() as u32, "handle_count" => handles.len() as u32);

            self.control_handle
                .inner
                .channel()
                .write_etc(&*bytes, &mut *handles)
                .map_err(fidl::Error::ServerResponseWrite)?;
            Ok(())
        })
    }
}
