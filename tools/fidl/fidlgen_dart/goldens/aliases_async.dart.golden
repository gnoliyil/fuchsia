// WARNING: This file is machine generated by fidlgen.
// @dart = 2.12

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

library fidl_test_aliases_async;

import 'dart:async' as $async;
import 'dart:core' hide Set;
import 'dart:developer';
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zircon;

import 'package:fidl_test_someotherlibrary/fidl_async.dart'
    as lib$test_someotherlibrary;
// ignore_for_file: always_specify_types
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: avoid_returning_null
// ignore_for_file: cascade_invocations
// ignore_for_file: constant_identifier_names
// ignore_for_file: directives_ordering
// ignore_for_file: one_member_abstracts
// ignore_for_file: prefer_constructors_over_static_methods
// ignore_for_file: prefer_single_quotes
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: library_prefixes
// ignore_for_file: prefer_typing_uninitialized_variables
// ignore_for_file: avoid_js_rounded_ints
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: prefer_generic_function_type_aliases
// ignore_for_file: prefer_equal_for_default_values
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: unused_shown_name
// ignore_for_file: unnecessary_lambdas
// ignore_for_file: comment_references
// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: prefer_interpolation_to_compose_strings
// ignore_for_file: override_on_non_overriding_member

class ObjType extends $fidl.Enum {
  static const Map<int, ObjType> _values = {
    0x0: none,
    0x4: channel,
  };
  factory ObjType(int _v) {
    if (!_values.containsKey(_v)) {
      throw $fidl.FidlError('Invalid strict enum value: $_v',
          $fidl.FidlErrorCode.fidlInvalidEnumValue);
    }
    return _values[_v]!;
  }
  static const ObjType none = ObjType._(0x0);
  static const ObjType channel = ObjType._(0x4);

  const ObjType._(this.$value);

  @override
  final int $value;

  static const Map<String, ObjType> $valuesMap = {
    r'none': none,
    r'channel': channel,
  };

  static const List<ObjType> $values = [
    none,
    channel,
  ];

  static ObjType? $valueOf(String name) => $valuesMap[name];

  @override
  bool isUnknown() {
    return false;
  }

  static ObjType _ctor(int v) => ObjType(v);
}

const $fidl.EnumType<ObjType> kobj_type_Type = $fidl.EnumType<ObjType>(
    type: $fidl.Uint32Type(),
    values: {0x0: null, 0x4: null},
    ctor: ObjType._ctor);

class ExampleOfUseOfAliases extends $fidl.Struct {
  const ExampleOfUseOfAliases({
    required this.fieldOfU32,
    required this.fieldOfVecOfStrings,
    required this.fieldOfVecOfStringsAtMostNine,
    required this.fieldOfVecOfStringsAtMost5,
    required this.fieldOfVecOfRefMeAtMost5,
    required this.fieldOfChannel,
    required this.fieldOfClientEnd,
    this.fieldOfNullableClientEnd,
  });
  ExampleOfUseOfAliases.clone(
    ExampleOfUseOfAliases $orig, {
    int? fieldOfU32,
    List<String>? fieldOfVecOfStrings,
    List<String>? fieldOfVecOfStringsAtMostNine,
    List<String>? fieldOfVecOfStringsAtMost5,
    List<lib$test_someotherlibrary.ReferenceMe>? fieldOfVecOfRefMeAtMost5,
    $zircon.Channel? fieldOfChannel,
    $zircon.Channel? fieldOfClientEnd,
    $zircon.Channel? fieldOfNullableClientEnd,
  }) : this(
          fieldOfU32: fieldOfU32 ?? $orig.fieldOfU32,
          fieldOfVecOfStrings: fieldOfVecOfStrings ?? $orig.fieldOfVecOfStrings,
          fieldOfVecOfStringsAtMostNine: fieldOfVecOfStringsAtMostNine ??
              $orig.fieldOfVecOfStringsAtMostNine,
          fieldOfVecOfStringsAtMost5:
              fieldOfVecOfStringsAtMost5 ?? $orig.fieldOfVecOfStringsAtMost5,
          fieldOfVecOfRefMeAtMost5:
              fieldOfVecOfRefMeAtMost5 ?? $orig.fieldOfVecOfRefMeAtMost5,
          fieldOfChannel: fieldOfChannel ?? $orig.fieldOfChannel,
          fieldOfClientEnd: fieldOfClientEnd ?? $orig.fieldOfClientEnd,
          fieldOfNullableClientEnd:
              fieldOfNullableClientEnd ?? $orig.fieldOfNullableClientEnd,
        );

  ExampleOfUseOfAliases.cloneWithout(
    ExampleOfUseOfAliases $orig, {
    bool fieldOfNullableClientEnd = false,
  }) : this(
          fieldOfU32: $orig.fieldOfU32,
          fieldOfVecOfStrings: $orig.fieldOfVecOfStrings,
          fieldOfVecOfStringsAtMostNine: $orig.fieldOfVecOfStringsAtMostNine,
          fieldOfVecOfStringsAtMost5: $orig.fieldOfVecOfStringsAtMost5,
          fieldOfVecOfRefMeAtMost5: $orig.fieldOfVecOfRefMeAtMost5,
          fieldOfChannel: $orig.fieldOfChannel,
          fieldOfClientEnd: $orig.fieldOfClientEnd,
          fieldOfNullableClientEnd:
              fieldOfNullableClientEnd ? null : $orig.fieldOfNullableClientEnd,
        );

  ExampleOfUseOfAliases $cloneWith({
    int? fieldOfU32,
    List<String>? fieldOfVecOfStrings,
    List<String>? fieldOfVecOfStringsAtMostNine,
    List<String>? fieldOfVecOfStringsAtMost5,
    List<lib$test_someotherlibrary.ReferenceMe>? fieldOfVecOfRefMeAtMost5,
    $zircon.Channel? fieldOfChannel,
    $zircon.Channel? fieldOfClientEnd,
    $fidl.OptionalNullable<$zircon.Channel?> fieldOfNullableClientEnd =
        const $fidl.OptionalNullable.undefined(),
  }) {
    return ExampleOfUseOfAliases(
      fieldOfU32: fieldOfU32 ?? this.fieldOfU32,
      fieldOfVecOfStrings: fieldOfVecOfStrings ?? this.fieldOfVecOfStrings,
      fieldOfVecOfStringsAtMostNine:
          fieldOfVecOfStringsAtMostNine ?? this.fieldOfVecOfStringsAtMostNine,
      fieldOfVecOfStringsAtMost5:
          fieldOfVecOfStringsAtMost5 ?? this.fieldOfVecOfStringsAtMost5,
      fieldOfVecOfRefMeAtMost5:
          fieldOfVecOfRefMeAtMost5 ?? this.fieldOfVecOfRefMeAtMost5,
      fieldOfChannel: fieldOfChannel ?? this.fieldOfChannel,
      fieldOfClientEnd: fieldOfClientEnd ?? this.fieldOfClientEnd,
      fieldOfNullableClientEnd:
          fieldOfNullableClientEnd.or(this.fieldOfNullableClientEnd),
    );
  }

  final int fieldOfU32;
  final List<String> fieldOfVecOfStrings;
  final List<String> fieldOfVecOfStringsAtMostNine;
  final List<String> fieldOfVecOfStringsAtMost5;
  final List<lib$test_someotherlibrary.ReferenceMe> fieldOfVecOfRefMeAtMost5;
  final $zircon.Channel fieldOfChannel;
  final $zircon.Channel fieldOfClientEnd;
  final $zircon.Channel? fieldOfNullableClientEnd;

  @override
  List<Object?> get $fields {
    return <Object?>[
      fieldOfU32,
      fieldOfVecOfStrings,
      fieldOfVecOfStringsAtMostNine,
      fieldOfVecOfStringsAtMost5,
      fieldOfVecOfRefMeAtMost5,
      fieldOfChannel,
      fieldOfClientEnd,
      fieldOfNullableClientEnd,
    ];
  }

  static const $fieldType0 = $fidl.Uint32Type();
  static const $fieldType1 = $fidl.VectorType<String, List<String>>(
      element: $fidl.StringType(maybeElementCount: null),
      maybeElementCount: null);
  static const $fieldType2 = $fidl.VectorType<String, List<String>>(
      element: $fidl.StringType(maybeElementCount: null), maybeElementCount: 9);
  static const $fieldType3 = $fidl.VectorType<String, List<String>>(
      element: $fidl.StringType(maybeElementCount: null), maybeElementCount: 5);
  static const $fieldType4 = $fidl.VectorType<
          lib$test_someotherlibrary.ReferenceMe,
          List<lib$test_someotherlibrary.ReferenceMe>>(
      element: lib$test_someotherlibrary.kReferenceMe_Type,
      maybeElementCount: 5);
  static const $fieldType5 =
      $fidl.ChannelType(objectType: 4, rights: 2147483648);
  static const $fieldType6 =
      $fidl.ChannelType(objectType: 4, rights: 2147483648);
  static const $fieldType7 = $fidl.NullableHandleType(
      $fidl.ChannelType(objectType: 4, rights: 2147483648));

  @override
  void $encode($fidl.Encoder $encoder, int $offset, int $depth) {
    $fieldType0.encode($encoder, fieldOfU32, $offset + 0, $depth);
    $fieldType1.encode($encoder, fieldOfVecOfStrings, $offset + 8, $depth);
    $fieldType2.encode(
        $encoder, fieldOfVecOfStringsAtMostNine, $offset + 24, $depth);
    $fieldType3.encode(
        $encoder, fieldOfVecOfStringsAtMost5, $offset + 40, $depth);
    $fieldType4.encode(
        $encoder, fieldOfVecOfRefMeAtMost5, $offset + 56, $depth);
    $fieldType5.encode($encoder, fieldOfChannel, $offset + 72, $depth);
    $fieldType6.encode($encoder, fieldOfClientEnd, $offset + 76, $depth);
    $fieldType7.encode(
        $encoder, fieldOfNullableClientEnd, $offset + 80, $depth);
  }

  static ExampleOfUseOfAliases _structDecode(
      $fidl.Decoder $decoder, int $offset, int $depth) {
    switch ($decoder.wireFormat) {
      case $fidl.WireFormat.v2:
        $decoder.checkPadding($offset + 4, 4);

        $decoder.checkPadding($offset + 84, 4);
        return ExampleOfUseOfAliases(
            fieldOfU32: $fieldType0.decode($decoder, $offset + 0, $depth),
            fieldOfVecOfStrings:
                $fieldType1.decode($decoder, $offset + 8, $depth),
            fieldOfVecOfStringsAtMostNine:
                $fieldType2.decode($decoder, $offset + 24, $depth),
            fieldOfVecOfStringsAtMost5:
                $fieldType3.decode($decoder, $offset + 40, $depth),
            fieldOfVecOfRefMeAtMost5:
                $fieldType4.decode($decoder, $offset + 56, $depth),
            fieldOfChannel: $fieldType5.decode($decoder, $offset + 72, $depth),
            fieldOfClientEnd:
                $fieldType6.decode($decoder, $offset + 76, $depth),
            fieldOfNullableClientEnd:
                $fieldType7.decode($decoder, $offset + 80, $depth));
    }
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.StructType<ExampleOfUseOfAliases> kExampleOfUseOfAliases_Type =
    $fidl.StructType<ExampleOfUseOfAliases>(
        inlineSize: 88, structDecode: ExampleOfUseOfAliases._structDecode);
