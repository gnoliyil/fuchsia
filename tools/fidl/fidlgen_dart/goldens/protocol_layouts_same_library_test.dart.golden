// WARNING: This file is machine generated by fidlgen_dart.
// @dart = 2.12

library fidl_test_protocollayoutssamelibrary_test;

import 'dart:async' as $async;
import 'dart:core' hide Error, Future, Match, Set, Stream, Type;
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zircon;

import './fidl_async.dart';

// ignore_for_file: always_specify_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: directives_ordering
// ignore_for_file: one_member_abstracts
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: library_prefixes
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides

class ComposedProtocol$TestBase extends ComposedProtocol {
  @override
  $async.Future<void> oneWayAnonComposed(
      ComposedProtocolOneWayAnonComposedRequest payload) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayAnonComposed not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<ComposedProtocolTwoWayAnonComposedResponse> twoWayAnonComposed(
      ComposedProtocolTwoWayAnonComposedRequest payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayAnonComposed not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<ComposedProtocolTwoWayAnonComposedWithErrorResponse>
      twoWayAnonComposedWithError(
          ComposedProtocolTwoWayAnonComposedWithErrorRequest payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayAnonComposedWithError not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<ComposedProtocolOnAnonComposedRequest> get onAnonComposed {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onAnonComposed not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<ComposedProtocolOnAnonComposedWithErrorResponse>
      get onAnonComposedWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onAnonComposedWithError not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayNamedComposed(TablePayload payload) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayNamedComposed not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<TablePayload> twoWayNamedComposed(UnionPayload payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayNamedComposed not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<UnionPayload> twoWayNamedComposedWithError(
      TablePayload payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayNamedComposedWithError not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<UnionPayload> get onNamedComposed {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onNamedComposed not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<TablePayload> get onNamedComposedWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onNamedComposedWithError not implemented on ComposedProtocol test base. Please implement.'),
        StackTrace.current));
  }
}

class MainProtocol$TestBase extends MainProtocol {
  @override
  $async.Future<void> oneWayAnonComposed(
      ComposedProtocolOneWayAnonComposedRequest payload) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayAnonComposed not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<ComposedProtocolTwoWayAnonComposedResponse> twoWayAnonComposed(
      ComposedProtocolTwoWayAnonComposedRequest payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayAnonComposed not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<ComposedProtocolTwoWayAnonComposedWithErrorResponse>
      twoWayAnonComposedWithError(
          ComposedProtocolTwoWayAnonComposedWithErrorRequest payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayAnonComposedWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<ComposedProtocolOnAnonComposedRequest> get onAnonComposed {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onAnonComposed not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<ComposedProtocolOnAnonComposedWithErrorResponse>
      get onAnonComposedWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onAnonComposedWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayNamedComposed(TablePayload payload) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayNamedComposed not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<TablePayload> twoWayNamedComposed(UnionPayload payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayNamedComposed not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<UnionPayload> twoWayNamedComposedWithError(
      TablePayload payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayNamedComposedWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<UnionPayload> get onNamedComposed {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onNamedComposed not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<TablePayload> get onNamedComposedWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onNamedComposedWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayLocal(TablePayload payload) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayLocal not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<TablePayload> twoWayLocal(UnionPayload payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayLocal not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<UnionPayload> twoWayLocalWithError(TablePayload payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayLocalWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<UnionPayload> get onLocal {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onLocal not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<TablePayload> get onLocalWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onLocalWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayAnon(MainProtocolOneWayAnonRequest payload) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayAnon not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<MainProtocolTwoWayAnonResponse> twoWayAnon(
      MainProtocolTwoWayAnonRequest payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayAnon not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<MainProtocolTwoWayAnonWithErrorResponse> twoWayAnonWithError(
      MainProtocolTwoWayAnonWithErrorRequest payload) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayAnonWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<MainProtocolOnAnonRequest> get onAnon {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onAnon not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<MainProtocolOnAnonWithErrorResponse> get onAnonWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onAnonWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }
}
