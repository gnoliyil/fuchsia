// WARNING: This file is machine generated by fidlgen.
// @dart = 2.12

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

library fidl_test_largemessages_async;

import 'dart:async' as $async;
import 'dart:core' hide Set;
import 'dart:developer';
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zircon;

import 'package:fidl_zx/fidl_async.dart' as lib$zx;
// ignore_for_file: always_specify_types
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: avoid_returning_null
// ignore_for_file: cascade_invocations
// ignore_for_file: constant_identifier_names
// ignore_for_file: directives_ordering
// ignore_for_file: one_member_abstracts
// ignore_for_file: prefer_constructors_over_static_methods
// ignore_for_file: prefer_single_quotes
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: library_prefixes
// ignore_for_file: prefer_typing_uninitialized_variables
// ignore_for_file: avoid_js_rounded_ints
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: prefer_generic_function_type_aliases
// ignore_for_file: prefer_equal_for_default_values
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: unused_shown_name
// ignore_for_file: unnecessary_lambdas
// ignore_for_file: comment_references
// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: prefer_interpolation_to_compose_strings
// ignore_for_file: override_on_non_overriding_member

const int first63ElementsByteVectorSize = 0x3e8;

const int handleCarryingElementsCount = 0x40;

const int largeLastElementByteVectorSize = 0x3d9;

const int largeStructByteVectorSize = 0xffe1;

const int largeUnionByteVectorSize = 0xffd1;

const int smallLastElementByteVectorSize = 0x3d0;

const int smallStructByteVectorSize = 0xffe0;

const int smallUnionByteVectorSize = 0xffd0;

enum SemiBoundedBelievedToBeSmallTag {
  $unknown,
  bytes, // 0x1
}

const Map<int, SemiBoundedBelievedToBeSmallTag>
    _SemiBoundedBelievedToBeSmallTag_map = {
  1: SemiBoundedBelievedToBeSmallTag.bytes,
};

class SemiBoundedBelievedToBeSmall extends $fidl.Union {
  const SemiBoundedBelievedToBeSmall.withBytes(Uint8List value)
      : _ordinal = 1,
        _data = value;
  const SemiBoundedBelievedToBeSmall.with$UnknownData(
      this._ordinal, $fidl.UnknownRawData data)
      : _data = data;

  SemiBoundedBelievedToBeSmall._(int ordinal, Object data)
      : _ordinal = ordinal,
        _data = data;

  final int _ordinal;
  final _data;

  SemiBoundedBelievedToBeSmallTag get $tag =>
      _SemiBoundedBelievedToBeSmallTag_map[_ordinal] ??
      SemiBoundedBelievedToBeSmallTag.$unknown;

  Uint8List? get bytes {
    if (_ordinal != 1) {
      return null;
    }
    return _data;
  }

  $fidl.UnknownRawData? get $unknownData {
    switch (_ordinal) {
      case 1:
        return null;
      default:
        return _data;
    }
  }

  @override
  int get $ordinal => _ordinal;

  @override
  Object get $data => _data;

  static SemiBoundedBelievedToBeSmall _ctor(int ordinal, Object data) {
    return SemiBoundedBelievedToBeSmall._(ordinal, data);
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.UnionType<SemiBoundedBelievedToBeSmall>
    kSemiBoundedBelievedToBeSmall_Type =
    $fidl.UnionType<SemiBoundedBelievedToBeSmall>(
  members: <int, $fidl.FidlType>{
    1: $fidl.VectorType<int, Uint8List>(
        element: $fidl.Uint8Type(), maybeElementCount: 65488),
  },
  ctor: SemiBoundedBelievedToBeSmall._ctor,
  flexible: true,
  resource: false,
);
// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.NullableUnionType<SemiBoundedBelievedToBeSmall>
    kSemiBoundedBelievedToBeSmall_OptType =
    $fidl.NullableUnionType<SemiBoundedBelievedToBeSmall>(
  members: <int, $fidl.FidlType>{
    1: $fidl.VectorType<int, Uint8List>(
        element: $fidl.Uint8Type(), maybeElementCount: 65488),
  },
  ctor: SemiBoundedBelievedToBeSmall._ctor,
  flexible: true,
  resource: false,
);

enum SemiBoundedMaybeLargeTag {
  $unknown,
  bytes, // 0x1
}

const Map<int, SemiBoundedMaybeLargeTag> _SemiBoundedMaybeLargeTag_map = {
  1: SemiBoundedMaybeLargeTag.bytes,
};

class SemiBoundedMaybeLarge extends $fidl.Union {
  const SemiBoundedMaybeLarge.withBytes(Uint8List value)
      : _ordinal = 1,
        _data = value;
  const SemiBoundedMaybeLarge.with$UnknownData(
      this._ordinal, $fidl.UnknownRawData data)
      : _data = data;

  SemiBoundedMaybeLarge._(int ordinal, Object data)
      : _ordinal = ordinal,
        _data = data;

  final int _ordinal;
  final _data;

  SemiBoundedMaybeLargeTag get $tag =>
      _SemiBoundedMaybeLargeTag_map[_ordinal] ??
      SemiBoundedMaybeLargeTag.$unknown;

  Uint8List? get bytes {
    if (_ordinal != 1) {
      return null;
    }
    return _data;
  }

  $fidl.UnknownRawData? get $unknownData {
    switch (_ordinal) {
      case 1:
        return null;
      default:
        return _data;
    }
  }

  @override
  int get $ordinal => _ordinal;

  @override
  Object get $data => _data;

  static SemiBoundedMaybeLarge _ctor(int ordinal, Object data) {
    return SemiBoundedMaybeLarge._(ordinal, data);
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.UnionType<SemiBoundedMaybeLarge> kSemiBoundedMaybeLarge_Type =
    $fidl.UnionType<SemiBoundedMaybeLarge>(
  members: <int, $fidl.FidlType>{
    1: $fidl.VectorType<int, Uint8List>(
        element: $fidl.Uint8Type(), maybeElementCount: 65489),
  },
  ctor: SemiBoundedMaybeLarge._ctor,
  flexible: true,
  resource: false,
);
// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.NullableUnionType<SemiBoundedMaybeLarge>
    kSemiBoundedMaybeLarge_OptType =
    $fidl.NullableUnionType<SemiBoundedMaybeLarge>(
  members: <int, $fidl.FidlType>{
    1: $fidl.VectorType<int, Uint8List>(
        element: $fidl.Uint8Type(), maybeElementCount: 65489),
  },
  ctor: SemiBoundedMaybeLarge._ctor,
  flexible: true,
  resource: false,
);

class BoundedKnownToBeSmall extends $fidl.Struct {
  const BoundedKnownToBeSmall({
    required this.bytes,
  });
  BoundedKnownToBeSmall.clone(
    BoundedKnownToBeSmall $orig, {
    Uint8List? bytes,
  }) : this(
          bytes: bytes ?? $orig.bytes,
        );

  BoundedKnownToBeSmall $cloneWith({
    Uint8List? bytes,
  }) {
    return BoundedKnownToBeSmall(
      bytes: bytes ?? this.bytes,
    );
  }

  final Uint8List bytes;

  @override
  List<Object?> get $fields {
    return <Object?>[
      bytes,
    ];
  }

  static const $fieldType0 = $fidl.VectorType<int, Uint8List>(
      element: $fidl.Uint8Type(), maybeElementCount: 65504);

  @override
  void $encode($fidl.Encoder $encoder, int $offset, int $depth) {
    $fieldType0.encode($encoder, bytes, $offset + 0, $depth);
  }

  static BoundedKnownToBeSmall _structDecode(
      $fidl.Decoder $decoder, int $offset, int $depth) {
    switch ($decoder.wireFormat) {
      case $fidl.WireFormat.v2:
        return BoundedKnownToBeSmall(
            bytes: $fieldType0.decode($decoder, $offset + 0, $depth));
    }
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.StructType<BoundedKnownToBeSmall> kBoundedKnownToBeSmall_Type =
    $fidl.StructType<BoundedKnownToBeSmall>(
        inlineSize: 16, structDecode: BoundedKnownToBeSmall._structDecode);

class BoundedMaybeLarge extends $fidl.Struct {
  const BoundedMaybeLarge({
    required this.bytes,
  });
  BoundedMaybeLarge.clone(
    BoundedMaybeLarge $orig, {
    Uint8List? bytes,
  }) : this(
          bytes: bytes ?? $orig.bytes,
        );

  BoundedMaybeLarge $cloneWith({
    Uint8List? bytes,
  }) {
    return BoundedMaybeLarge(
      bytes: bytes ?? this.bytes,
    );
  }

  final Uint8List bytes;

  @override
  List<Object?> get $fields {
    return <Object?>[
      bytes,
    ];
  }

  static const $fieldType0 = $fidl.VectorType<int, Uint8List>(
      element: $fidl.Uint8Type(), maybeElementCount: 65505);

  @override
  void $encode($fidl.Encoder $encoder, int $offset, int $depth) {
    $fieldType0.encode($encoder, bytes, $offset + 0, $depth);
  }

  static BoundedMaybeLarge _structDecode(
      $fidl.Decoder $decoder, int $offset, int $depth) {
    switch ($decoder.wireFormat) {
      case $fidl.WireFormat.v2:
        return BoundedMaybeLarge(
            bytes: $fieldType0.decode($decoder, $offset + 0, $depth));
    }
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.StructType<BoundedMaybeLarge> kBoundedMaybeLarge_Type =
    $fidl.StructType<BoundedMaybeLarge>(
        inlineSize: 16, structDecode: BoundedMaybeLarge._structDecode);

class Elements extends $fidl.Struct {
  const Elements({
    this.handle,
    required this.bytes,
  });
  Elements.clone(
    Elements $orig, {
    $zircon.Handle? handle,
    Uint8List? bytes,
  }) : this(
          handle: handle ?? $orig.handle,
          bytes: bytes ?? $orig.bytes,
        );

  Elements.cloneWithout(
    Elements $orig, {
    bool handle = false,
  }) : this(
          handle: handle ? null : $orig.handle,
          bytes: $orig.bytes,
        );

  Elements $cloneWith({
    $fidl.OptionalNullable<$zircon.Handle?> handle =
        const $fidl.OptionalNullable.undefined(),
    Uint8List? bytes,
  }) {
    return Elements(
      handle: handle.or(this.handle),
      bytes: bytes ?? this.bytes,
    );
  }

  final $zircon.Handle? handle;
  final Uint8List bytes;

  @override
  List<Object?> get $fields {
    return <Object?>[
      handle,
      bytes,
    ];
  }

  static const $fieldType0 = $fidl.NullableHandleType(
      $fidl.HandleType(objectType: 0, rights: 2147483648));
  static const $fieldType1 = $fidl.VectorType<int, Uint8List>(
      element: $fidl.Uint8Type(), maybeElementCount: 1000);

  @override
  void $encode($fidl.Encoder $encoder, int $offset, int $depth) {
    $fieldType0.encode($encoder, handle, $offset + 0, $depth);
    $fieldType1.encode($encoder, bytes, $offset + 8, $depth);
  }

  static Elements _structDecode(
      $fidl.Decoder $decoder, int $offset, int $depth) {
    switch ($decoder.wireFormat) {
      case $fidl.WireFormat.v2:
        $decoder.checkPadding($offset + 4, 4);
        return Elements(
            handle: $fieldType0.decode($decoder, $offset + 0, $depth),
            bytes: $fieldType1.decode($decoder, $offset + 8, $depth));
    }
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.StructType<Elements> kElements_Type = $fidl.StructType<Elements>(
    inlineSize: 24, structDecode: Elements._structDecode);

class UnboundedMaybeLargeResource extends $fidl.Struct {
  const UnboundedMaybeLargeResource({
    required this.elements,
  });
  UnboundedMaybeLargeResource.clone(
    UnboundedMaybeLargeResource $orig, {
    List<Elements>? elements,
  }) : this(
          elements: elements ?? $orig.elements,
        );

  UnboundedMaybeLargeResource $cloneWith({
    List<Elements>? elements,
  }) {
    return UnboundedMaybeLargeResource(
      elements: elements ?? this.elements,
    );
  }

  final List<Elements> elements;

  @override
  List<Object?> get $fields {
    return <Object?>[
      elements,
    ];
  }

  static const $fieldType0 = $fidl.ArrayType<Elements, List<Elements>>(
      element: kElements_Type, elementCount: 64);

  @override
  void $encode($fidl.Encoder $encoder, int $offset, int $depth) {
    $fieldType0.encode($encoder, elements, $offset + 0, $depth);
  }

  static UnboundedMaybeLargeResource _structDecode(
      $fidl.Decoder $decoder, int $offset, int $depth) {
    switch ($decoder.wireFormat) {
      case $fidl.WireFormat.v2:
        return UnboundedMaybeLargeResource(
            elements: $fieldType0.decode($decoder, $offset + 0, $depth));
    }
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.StructType<UnboundedMaybeLargeResource>
    kUnboundedMaybeLargeResource_Type =
    $fidl.StructType<UnboundedMaybeLargeResource>(
        inlineSize: 1536,
        structDecode: UnboundedMaybeLargeResource._structDecode);

class UnboundedMaybeLargeValue extends $fidl.Struct {
  const UnboundedMaybeLargeValue({
    required this.bytes,
  });
  UnboundedMaybeLargeValue.clone(
    UnboundedMaybeLargeValue $orig, {
    Uint8List? bytes,
  }) : this(
          bytes: bytes ?? $orig.bytes,
        );

  UnboundedMaybeLargeValue $cloneWith({
    Uint8List? bytes,
  }) {
    return UnboundedMaybeLargeValue(
      bytes: bytes ?? this.bytes,
    );
  }

  final Uint8List bytes;

  @override
  List<Object?> get $fields {
    return <Object?>[
      bytes,
    ];
  }

  static const $fieldType0 = $fidl.VectorType<int, Uint8List>(
      element: $fidl.Uint8Type(), maybeElementCount: null);

  @override
  void $encode($fidl.Encoder $encoder, int $offset, int $depth) {
    $fieldType0.encode($encoder, bytes, $offset + 0, $depth);
  }

  static UnboundedMaybeLargeValue _structDecode(
      $fidl.Decoder $decoder, int $offset, int $depth) {
    switch ($decoder.wireFormat) {
      case $fidl.WireFormat.v2:
        return UnboundedMaybeLargeValue(
            bytes: $fieldType0.decode($decoder, $offset + 0, $depth));
    }
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.StructType<UnboundedMaybeLargeValue>
    kUnboundedMaybeLargeValue_Type = $fidl.StructType<UnboundedMaybeLargeValue>(
        inlineSize: 16, structDecode: UnboundedMaybeLargeValue._structDecode);

// decodeBoundedKnownToBeSmall: (Uint8List bytes)
const int _kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal =
    0x529aace1a3b3bce4;
const $fidl.MethodType _kOverflowing_DecodeBoundedKnownToBeSmall_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<int, Uint8List>(
            element: $fidl.Uint8Type(), maybeElementCount: 65504),
        offset: 0),
  ],
  response: [],
  name: r"Overflowing.DecodeBoundedKnownToBeSmall",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 0,
);
// decodeBoundedMaybeLarge: (Uint8List bytes)
const int _kOverflowing_DecodeBoundedMaybeLarge_Ordinal = 0x433acc9b9610b5fa;
const $fidl.MethodType _kOverflowing_DecodeBoundedMaybeLarge_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<int, Uint8List>(
            element: $fidl.Uint8Type(), maybeElementCount: 65505),
        offset: 0),
  ],
  response: [],
  name: r"Overflowing.DecodeBoundedMaybeLarge",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 0,
);
// decodeSemiBoundedBelievedToBeSmall: (SemiBoundedBelievedToBeSmall payload)
const int _kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal =
    0x7d5d85c6a0ddd4d0;
const $fidl.MethodType _kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<SemiBoundedBelievedToBeSmall>(
        type: kSemiBoundedBelievedToBeSmall_Type, offset: 0),
  ],
  response: [],
  name: r"Overflowing.DecodeSemiBoundedBelievedToBeSmall",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 0,
);
// decodeSemiBoundedMaybeLarge: (SemiBoundedMaybeLarge payload)
const int _kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal =
    0x28bb2002323ecc60;
const $fidl.MethodType _kOverflowing_DecodeSemiBoundedMaybeLarge_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<SemiBoundedMaybeLarge>(
        type: kSemiBoundedMaybeLarge_Type, offset: 0),
  ],
  response: [],
  name: r"Overflowing.DecodeSemiBoundedMaybeLarge",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 0,
);
// decodeUnboundedMaybeLargeValue: (Uint8List bytes)
const int _kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal =
    0x5bde5404c4e18e2f;
const $fidl.MethodType _kOverflowing_DecodeUnboundedMaybeLargeValue_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<int, Uint8List>(
            element: $fidl.Uint8Type(), maybeElementCount: null),
        offset: 0),
  ],
  response: [],
  name: r"Overflowing.DecodeUnboundedMaybeLargeValue",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 0,
);
// decodeUnboundedMaybeLargeResource: (List<Elements> elements)
const int _kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal =
    0x3f50d644d96b6394;
const $fidl.MethodType _kOverflowing_DecodeUnboundedMaybeLargeResource_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<List<Elements>>(
        type: $fidl.ArrayType<Elements, List<Elements>>(
            element: kElements_Type, elementCount: 64),
        offset: 0),
  ],
  response: [],
  name: r"Overflowing.DecodeUnboundedMaybeLargeResource",
  requestInlineSizeV2: 1536,
  responseInlineSizeV2: 0,
);
// encodeBoundedKnownToBeSmall: (Uint8List bytes) -> (Uint8List bytes)
const int _kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal =
    0x5adf4f83d06a28d3;
const $fidl.MethodType _kOverflowing_EncodeBoundedKnownToBeSmall_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<int, Uint8List>(
            element: $fidl.Uint8Type(), maybeElementCount: 65504),
        offset: 0),
  ],
  response: <$fidl.MemberType>[
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<int, Uint8List>(
            element: $fidl.Uint8Type(), maybeElementCount: 65504),
        offset: 0),
  ],
  name: r"Overflowing.EncodeBoundedKnownToBeSmall",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 16,
);
// encodeBoundedMaybeLarge: (Uint8List bytes) -> (Uint8List bytes)
const int _kOverflowing_EncodeBoundedMaybeLarge_Ordinal = 0x36c5f106da9a80e0;
const $fidl.MethodType _kOverflowing_EncodeBoundedMaybeLarge_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<int, Uint8List>(
            element: $fidl.Uint8Type(), maybeElementCount: 65505),
        offset: 0),
  ],
  response: <$fidl.MemberType>[
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<int, Uint8List>(
            element: $fidl.Uint8Type(), maybeElementCount: 65505),
        offset: 0),
  ],
  name: r"Overflowing.EncodeBoundedMaybeLarge",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 16,
);
// encodeSemiBoundedBelievedToBeSmall: (SemiBoundedBelievedToBeSmall payload) -> (SemiBoundedBelievedToBeSmall payload)
const int _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal =
    0x3b1167d912bf6bf1;
const $fidl.MethodType _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<SemiBoundedBelievedToBeSmall>(
        type: kSemiBoundedBelievedToBeSmall_Type, offset: 0),
  ],
  response: <$fidl.MemberType>[
    $fidl.MemberType<SemiBoundedBelievedToBeSmall>(
        type: kSemiBoundedBelievedToBeSmall_Type, offset: 0),
  ],
  name: r"Overflowing.EncodeSemiBoundedBelievedToBeSmall",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 16,
);
// encodeSemiBoundedMaybeLarge: (SemiBoundedMaybeLarge payload) -> (SemiBoundedMaybeLarge payload)
const int _kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal =
    0x1f7994e5062e246f;
const $fidl.MethodType _kOverflowing_EncodeSemiBoundedMaybeLarge_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<SemiBoundedMaybeLarge>(
        type: kSemiBoundedMaybeLarge_Type, offset: 0),
  ],
  response: <$fidl.MemberType>[
    $fidl.MemberType<SemiBoundedMaybeLarge>(
        type: kSemiBoundedMaybeLarge_Type, offset: 0),
  ],
  name: r"Overflowing.EncodeSemiBoundedMaybeLarge",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 16,
);
// encodeUnboundedMaybeLargeValue: (Uint8List bytes) -> (Uint8List bytes)
const int _kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal =
    0x2f6e3f3a9bf3e39a;
const $fidl.MethodType _kOverflowing_EncodeUnboundedMaybeLargeValue_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<int, Uint8List>(
            element: $fidl.Uint8Type(), maybeElementCount: null),
        offset: 0),
  ],
  response: <$fidl.MemberType>[
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<int, Uint8List>(
            element: $fidl.Uint8Type(), maybeElementCount: null),
        offset: 0),
  ],
  name: r"Overflowing.EncodeUnboundedMaybeLargeValue",
  requestInlineSizeV2: 16,
  responseInlineSizeV2: 16,
);
// encodeUnboundedMaybeLargeResource: (List<Elements> elements) -> (List<Elements> elements)
const int _kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal =
    0x4c5431cc3af0a62;
const $fidl.MethodType _kOverflowing_EncodeUnboundedMaybeLargeResource_Type =
    $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<List<Elements>>(
        type: $fidl.ArrayType<Elements, List<Elements>>(
            element: kElements_Type, elementCount: 64),
        offset: 0),
  ],
  response: <$fidl.MemberType>[
    $fidl.MemberType<List<Elements>>(
        type: $fidl.ArrayType<Elements, List<Elements>>(
            element: kElements_Type, elementCount: 64),
        offset: 0),
  ],
  name: r"Overflowing.EncodeUnboundedMaybeLargeResource",
  requestInlineSizeV2: 1536,
  responseInlineSizeV2: 1536,
);

abstract class Overflowing {
  $fidl.ServiceData? get $serviceData => OverflowingData();
  $async.Future<void> decodeBoundedKnownToBeSmall(Uint8List bytes);
  $async.Future<void> decodeBoundedMaybeLarge(Uint8List bytes);
  $async.Future<void> decodeSemiBoundedBelievedToBeSmall(
      SemiBoundedBelievedToBeSmall payload);
  $async.Future<void> decodeSemiBoundedMaybeLarge(
      SemiBoundedMaybeLarge payload);
  $async.Future<void> decodeUnboundedMaybeLargeValue(Uint8List bytes);
  $async.Future<void> decodeUnboundedMaybeLargeResource(
      List<Elements> elements);
  $async.Future<Uint8List> encodeBoundedKnownToBeSmall(Uint8List bytes);
  $async.Future<Uint8List> encodeBoundedMaybeLarge(Uint8List bytes);
  $async.Future<SemiBoundedBelievedToBeSmall>
      encodeSemiBoundedBelievedToBeSmall(SemiBoundedBelievedToBeSmall payload);
  $async.Future<SemiBoundedMaybeLarge> encodeSemiBoundedMaybeLarge(
      SemiBoundedMaybeLarge payload);
  $async.Future<Uint8List> encodeUnboundedMaybeLargeValue(Uint8List bytes);
  $async.Future<List<Elements>> encodeUnboundedMaybeLargeResource(
      List<Elements> elements);
}

abstract class OverflowingServer extends Overflowing {
  $async.Future<void> $unknownMethod($fidl.UnknownMethodMetadata metadata);
}

// TODO: Remove ServiceData for non-service
class OverflowingData implements $fidl.ServiceData<Overflowing> {
  const OverflowingData();

  @override
  String getName() {
    return "";
  }

  @override
  $fidl.AsyncBinding getBinding() {
    return OverflowingBinding();
  }
}

class OverflowingProxy extends $fidl.AsyncProxy<Overflowing>
    implements Overflowing {
  OverflowingProxy()
      : super($fidl.AsyncProxyController<Overflowing>(
            $interfaceName: r'Overflowing')) {
    ctrl.onResponse = _handleResponse;
    ctrl.whenClosed.then((_) {
      _$unknownEventStreamController.close();
    }, onError: (_) {});
  }
  @override
  Null get $serviceData => null;

  void _handleEvent($fidl.IncomingMessage $message) {
    switch ($message.ordinal) {
      default:
        $message.closeHandles();
        switch ($message.strictness) {
          case $fidl.CallStrictness.flexible:
            const String _name = "Overflowing [UnknownEvent]";
            $fidl.performCtrlWithExceptionHandling(
                _name, ctrl, 'event', _$unknownEventStreamController.addError,
                () {
              _$unknownEventStreamController
                  .add($fidl.UnknownEvent($message.ordinal));
            });
            break;
          case $fidl.CallStrictness.strict:
            ctrl.proxyError($fidl.FidlError(
                'Unexpected message ordinal: ${$message.ordinal}'));
            break;
        }
        break;
    }
  }

  void _handleResponse($fidl.IncomingMessage $message) {
    final int $txid = $message.txid;
    if ($txid == 0) {
      _handleEvent($message);
      return;
    }
    final $async.Completer? $completer = ctrl.getCompleter($txid);
    if ($completer == null) {
      $message.closeHandles();
      return;
    }
    switch ($message.ordinal) {
      case _kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal:
        final String _name =
            _kOverflowing_EncodeBoundedKnownToBeSmall_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'method response', $completer.completeError, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeBoundedKnownToBeSmall_Type.response!;
          final $wireFormat = $message.parseWireFormat();
          // ignore: prefer_const_declarations

          if ($message.overflowing == $fidl.CallOverflowing.large) {
            throw $fidl.FidlError(
                r'Unexpected byte overflow for _kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal',
                $fidl.FidlErrorCode.fidlLargeMessageImpossible);
          }
          final $response = $fidl.decodeMessage(
              $message,
              _kOverflowing_EncodeBoundedKnownToBeSmall_Type
                  .responseInlineSize($wireFormat),
              $types[0]);
          $completer.complete($response);
        });
        break;
      case _kOverflowing_EncodeBoundedMaybeLarge_Ordinal:
        final String _name = _kOverflowing_EncodeBoundedMaybeLarge_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'method response', $completer.completeError, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeBoundedMaybeLarge_Type.response!;
          final $wireFormat = $message.parseWireFormat();
          // ignore: prefer_const_declarations

          final $response = $fidl.decodeMaybeLargeMessage(
              $message,
              _kOverflowing_EncodeBoundedMaybeLarge_Type
                  .responseInlineSize($wireFormat),
              $types[0]);
          $completer.complete($response);
        });
        break;
      case _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal:
        final String _name =
            _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'method response', $completer.completeError, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type.response!;
          final $wireFormat = $message.parseWireFormat();
          // ignore: prefer_const_declarations

          final $response = $fidl.decodeMaybeLargeMessage(
              $message,
              _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type
                  .responseInlineSize($wireFormat),
              $types[0]);
          $completer.complete($response);
        });
        break;
      case _kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal:
        final String _name =
            _kOverflowing_EncodeSemiBoundedMaybeLarge_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'method response', $completer.completeError, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeSemiBoundedMaybeLarge_Type.response!;
          final $wireFormat = $message.parseWireFormat();
          // ignore: prefer_const_declarations

          final $response = $fidl.decodeMaybeLargeMessage(
              $message,
              _kOverflowing_EncodeSemiBoundedMaybeLarge_Type
                  .responseInlineSize($wireFormat),
              $types[0]);
          $completer.complete($response);
        });
        break;
      case _kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal:
        final String _name =
            _kOverflowing_EncodeUnboundedMaybeLargeValue_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'method response', $completer.completeError, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeUnboundedMaybeLargeValue_Type.response!;
          final $wireFormat = $message.parseWireFormat();
          // ignore: prefer_const_declarations

          final $response = $fidl.decodeMaybeLargeMessage(
              $message,
              _kOverflowing_EncodeUnboundedMaybeLargeValue_Type
                  .responseInlineSize($wireFormat),
              $types[0]);
          $completer.complete($response);
        });
        break;
      case _kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal:
        final String _name =
            _kOverflowing_EncodeUnboundedMaybeLargeResource_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'method response', $completer.completeError, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeUnboundedMaybeLargeResource_Type.response!;
          final $wireFormat = $message.parseWireFormat();
          // ignore: prefer_const_declarations

          final $response = $fidl.decodeMaybeLargeMessage(
              $message,
              _kOverflowing_EncodeUnboundedMaybeLargeResource_Type
                  .responseInlineSize($wireFormat),
              $types[0]);
          $completer.complete($response);
        });
        break;
      default:
        ctrl.proxyError(
            $fidl.FidlError('Unexpected message ordinal: ${$message.ordinal}'));
        break;
    }
  }

  @override
  $async.Future<void> decodeBoundedKnownToBeSmall(Uint8List bytes) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_DecodeBoundedKnownToBeSmall_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_DecodeBoundedKnownToBeSmall_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, bytes, $fidl.kMessageHeaderSize, 1);
    });
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }

  @override
  $async.Future<void> decodeBoundedMaybeLarge(Uint8List bytes) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(_kOverflowing_DecodeBoundedMaybeLarge_Ordinal,
        0, $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_DecodeBoundedMaybeLarge_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_DecodeBoundedMaybeLarge_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, bytes, $fidl.kMessageHeaderSize, 1);
    });
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }

  @override
  $async.Future<void> decodeSemiBoundedBelievedToBeSmall(
      SemiBoundedBelievedToBeSmall payload) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, payload, $fidl.kMessageHeaderSize, 1);
    });
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }

  @override
  $async.Future<void> decodeSemiBoundedMaybeLarge(
      SemiBoundedMaybeLarge payload) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_DecodeSemiBoundedMaybeLarge_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_DecodeSemiBoundedMaybeLarge_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, payload, $fidl.kMessageHeaderSize, 1);
    });
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }

  @override
  $async.Future<void> decodeUnboundedMaybeLargeValue(Uint8List bytes) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_DecodeUnboundedMaybeLargeValue_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_DecodeUnboundedMaybeLargeValue_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, bytes, $fidl.kMessageHeaderSize, 1);
    });
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }

  @override
  $async.Future<void> decodeUnboundedMaybeLargeResource(
      List<Elements> elements) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_DecodeUnboundedMaybeLargeResource_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_DecodeUnboundedMaybeLargeResource_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, elements, $fidl.kMessageHeaderSize, 1);
    });
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }

  @override
  $async.Future<Uint8List> encodeBoundedKnownToBeSmall(Uint8List bytes) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_EncodeBoundedKnownToBeSmall_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_EncodeBoundedKnownToBeSmall_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, bytes, $fidl.kMessageHeaderSize, 1);
    });
    final $completer = $async.Completer<Uint8List>();
    ctrl.sendMessageWithResponse($encoder.message, $completer);
    return $completer.future;
  }

  @override
  $async.Future<Uint8List> encodeBoundedMaybeLarge(Uint8List bytes) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(_kOverflowing_EncodeBoundedMaybeLarge_Ordinal,
        0, $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_EncodeBoundedMaybeLarge_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_EncodeBoundedMaybeLarge_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, bytes, $fidl.kMessageHeaderSize, 1);
    });
    final $completer = $async.Completer<Uint8List>();
    ctrl.sendMessageWithResponse($encoder.message, $completer);
    return $completer.future;
  }

  @override
  $async.Future<SemiBoundedBelievedToBeSmall>
      encodeSemiBoundedBelievedToBeSmall(SemiBoundedBelievedToBeSmall payload) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, payload, $fidl.kMessageHeaderSize, 1);
    });
    final $completer = $async.Completer<SemiBoundedBelievedToBeSmall>();
    ctrl.sendMessageWithResponse($encoder.message, $completer);
    return $completer.future;
  }

  @override
  $async.Future<SemiBoundedMaybeLarge> encodeSemiBoundedMaybeLarge(
      SemiBoundedMaybeLarge payload) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_EncodeSemiBoundedMaybeLarge_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_EncodeSemiBoundedMaybeLarge_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, payload, $fidl.kMessageHeaderSize, 1);
    });
    final $completer = $async.Completer<SemiBoundedMaybeLarge>();
    ctrl.sendMessageWithResponse($encoder.message, $completer);
    return $completer.future;
  }

  @override
  $async.Future<Uint8List> encodeUnboundedMaybeLargeValue(Uint8List bytes) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_EncodeUnboundedMaybeLargeValue_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_EncodeUnboundedMaybeLargeValue_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, bytes, $fidl.kMessageHeaderSize, 1);
    });
    final $completer = $async.Completer<Uint8List>();
    ctrl.sendMessageWithResponse($encoder.message, $completer);
    return $completer.future;
  }

  @override
  $async.Future<List<Elements>> encodeUnboundedMaybeLargeResource(
      List<Elements> elements) {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal,
        0,
        $fidl.CallStrictness.strict);
    final List<$fidl.MemberType> $types =
        _kOverflowing_EncodeUnboundedMaybeLargeResource_Type.request!;
    $fidl.encodeMessageWithCallback(
        $encoder,
        _kOverflowing_EncodeUnboundedMaybeLargeResource_Type
            .requestInlineSize($encoder.wireFormat), () {
      $types[0].encode($encoder, elements, $fidl.kMessageHeaderSize, 1);
    });
    final $completer = $async.Completer<List<Elements>>();
    ctrl.sendMessageWithResponse($encoder.message, $completer);
    return $completer.future;
  }

  final _$unknownEventStreamController =
      $async.StreamController<$fidl.UnknownEvent>.broadcast();
  @override
  $async.Stream<$fidl.UnknownEvent> get $unknownEvents =>
      _$unknownEventStreamController.stream;
}

class OverflowingBinding extends $fidl.AsyncBinding<OverflowingServer> {
  OverflowingBinding() : super(r"Overflowing");

  @override
  void handleMessage(
      $fidl.IncomingMessage $message, $fidl.OutgoingMessageSink $respond) {
    final $wireFormat = $message.parseWireFormat();
    switch ($message.ordinal) {
      case _kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal:
        final String _name =
            _kOverflowing_DecodeBoundedKnownToBeSmall_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_DecodeBoundedKnownToBeSmall_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          if ($message.overflowing == $fidl.CallOverflowing.large) {
            throw $fidl.FidlError(
                r'Unexpected byte overflow for _kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal',
                $fidl.FidlErrorCode.fidlLargeMessageImpossible);
          }
          final $async.Future<void> $future = $fidl
              .decodeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kOverflowing_DecodeBoundedKnownToBeSmall_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.decodeBoundedKnownToBeSmall(
              $types[0].decode($decoder, $offset, 1),
            );
          });
        }, close);
        break;
      case _kOverflowing_DecodeBoundedMaybeLarge_Ordinal:
        final String _name = _kOverflowing_DecodeBoundedMaybeLarge_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_DecodeBoundedMaybeLarge_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<void> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kOverflowing_DecodeBoundedMaybeLarge_Type.requestInlineSize(
                      $wireFormat), ($fidl.Decoder $decoder, int $offset) {
            return _impl.decodeBoundedMaybeLarge(
              $types[0].decode($decoder, $offset, 1),
            );
          });
        }, close);
        break;
      case _kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal:
        final String _name =
            _kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<void> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.decodeSemiBoundedBelievedToBeSmall(
              $types[0].decode($decoder, $offset, 1),
            );
          });
        }, close);
        break;
      case _kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal:
        final String _name =
            _kOverflowing_DecodeSemiBoundedMaybeLarge_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_DecodeSemiBoundedMaybeLarge_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<void> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kOverflowing_DecodeSemiBoundedMaybeLarge_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.decodeSemiBoundedMaybeLarge(
              $types[0].decode($decoder, $offset, 1),
            );
          });
        }, close);
        break;
      case _kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal:
        final String _name =
            _kOverflowing_DecodeUnboundedMaybeLargeValue_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_DecodeUnboundedMaybeLargeValue_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<void> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kOverflowing_DecodeUnboundedMaybeLargeValue_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.decodeUnboundedMaybeLargeValue(
              $types[0].decode($decoder, $offset, 1),
            );
          });
        }, close);
        break;
      case _kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal:
        final String _name =
            _kOverflowing_DecodeUnboundedMaybeLargeResource_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_DecodeUnboundedMaybeLargeResource_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<void> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kOverflowing_DecodeUnboundedMaybeLargeResource_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.decodeUnboundedMaybeLargeResource(
              $types[0].decode($decoder, $offset, 1),
            );
          });
        }, close);
        break;
      case _kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal:
        final String _name =
            _kOverflowing_EncodeBoundedKnownToBeSmall_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeBoundedKnownToBeSmall_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          if ($message.overflowing == $fidl.CallOverflowing.large) {
            throw $fidl.FidlError(
                r'Unexpected byte overflow for _kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal',
                $fidl.FidlErrorCode.fidlLargeMessageImpossible);
          }
          final $async.Future<Uint8List> $future = $fidl
              .decodeMessageWithCallback<$async.Future<Uint8List>>(
                  $message,
                  _kOverflowing_EncodeBoundedKnownToBeSmall_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.encodeBoundedKnownToBeSmall(
              $types[0].decode($decoder, $offset, 1),
            );
          });
          $future.then(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(
                _kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal,
                $message.txid,
                $fidl.CallStrictness.strict);
            final List<$fidl.MemberType> $types =
                _kOverflowing_EncodeBoundedKnownToBeSmall_Type.response!;
            $fidl.encodeMessage(
                $encoder,
                _kOverflowing_EncodeBoundedKnownToBeSmall_Type
                    .responseInlineSize($encoder.wireFormat),
                $types[0],
                $response);
            $respond($encoder.message);
          }, onError: (_e) {
            $fidl.handleException(_name, _e, close);
          });
        }, close);
        break;
      case _kOverflowing_EncodeBoundedMaybeLarge_Ordinal:
        final String _name = _kOverflowing_EncodeBoundedMaybeLarge_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeBoundedMaybeLarge_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<Uint8List> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<$async.Future<Uint8List>>(
                  $message,
                  _kOverflowing_EncodeBoundedMaybeLarge_Type.requestInlineSize(
                      $wireFormat), ($fidl.Decoder $decoder, int $offset) {
            return _impl.encodeBoundedMaybeLarge(
              $types[0].decode($decoder, $offset, 1),
            );
          });
          $future.then(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(
                _kOverflowing_EncodeBoundedMaybeLarge_Ordinal,
                $message.txid,
                $fidl.CallStrictness.strict);
            final List<$fidl.MemberType> $types =
                _kOverflowing_EncodeBoundedMaybeLarge_Type.response!;
            $fidl.encodeMessage(
                $encoder,
                _kOverflowing_EncodeBoundedMaybeLarge_Type
                    .responseInlineSize($encoder.wireFormat),
                $types[0],
                $response);
            $respond($encoder.message);
          }, onError: (_e) {
            $fidl.handleException(_name, _e, close);
          });
        }, close);
        break;
      case _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal:
        final String _name =
            _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<SemiBoundedBelievedToBeSmall> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<
                      $async.Future<SemiBoundedBelievedToBeSmall>>(
                  $message,
                  _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.encodeSemiBoundedBelievedToBeSmall(
              $types[0].decode($decoder, $offset, 1),
            );
          });
          $future.then(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(
                _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal,
                $message.txid,
                $fidl.CallStrictness.strict);
            final List<$fidl.MemberType> $types =
                _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type.response!;
            $fidl.encodeMessage(
                $encoder,
                _kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Type
                    .responseInlineSize($encoder.wireFormat),
                $types[0],
                $response);
            $respond($encoder.message);
          }, onError: (_e) {
            $fidl.handleException(_name, _e, close);
          });
        }, close);
        break;
      case _kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal:
        final String _name =
            _kOverflowing_EncodeSemiBoundedMaybeLarge_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeSemiBoundedMaybeLarge_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<SemiBoundedMaybeLarge> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<
                      $async.Future<SemiBoundedMaybeLarge>>(
                  $message,
                  _kOverflowing_EncodeSemiBoundedMaybeLarge_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.encodeSemiBoundedMaybeLarge(
              $types[0].decode($decoder, $offset, 1),
            );
          });
          $future.then(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(
                _kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal,
                $message.txid,
                $fidl.CallStrictness.strict);
            final List<$fidl.MemberType> $types =
                _kOverflowing_EncodeSemiBoundedMaybeLarge_Type.response!;
            $fidl.encodeMessage(
                $encoder,
                _kOverflowing_EncodeSemiBoundedMaybeLarge_Type
                    .responseInlineSize($encoder.wireFormat),
                $types[0],
                $response);
            $respond($encoder.message);
          }, onError: (_e) {
            $fidl.handleException(_name, _e, close);
          });
        }, close);
        break;
      case _kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal:
        final String _name =
            _kOverflowing_EncodeUnboundedMaybeLargeValue_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeUnboundedMaybeLargeValue_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<Uint8List> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<$async.Future<Uint8List>>(
                  $message,
                  _kOverflowing_EncodeUnboundedMaybeLargeValue_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.encodeUnboundedMaybeLargeValue(
              $types[0].decode($decoder, $offset, 1),
            );
          });
          $future.then(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(
                _kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal,
                $message.txid,
                $fidl.CallStrictness.strict);
            final List<$fidl.MemberType> $types =
                _kOverflowing_EncodeUnboundedMaybeLargeValue_Type.response!;
            $fidl.encodeMessage(
                $encoder,
                _kOverflowing_EncodeUnboundedMaybeLargeValue_Type
                    .responseInlineSize($encoder.wireFormat),
                $types[0],
                $response);
            $respond($encoder.message);
          }, onError: (_e) {
            $fidl.handleException(_name, _e, close);
          });
        }, close);
        break;
      case _kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal:
        final String _name =
            _kOverflowing_EncodeUnboundedMaybeLargeResource_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kOverflowing_EncodeUnboundedMaybeLargeResource_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<List<Elements>> $future = $fidl
              .decodeMaybeLargeMessageWithCallback<
                      $async.Future<List<Elements>>>(
                  $message,
                  _kOverflowing_EncodeUnboundedMaybeLargeResource_Type
                      .requestInlineSize($wireFormat),
                  ($fidl.Decoder $decoder, int $offset) {
            return _impl.encodeUnboundedMaybeLargeResource(
              $types[0].decode($decoder, $offset, 1),
            );
          });
          $future.then(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(
                _kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal,
                $message.txid,
                $fidl.CallStrictness.strict);
            final List<$fidl.MemberType> $types =
                _kOverflowing_EncodeUnboundedMaybeLargeResource_Type.response!;
            $fidl.encodeMessage(
                $encoder,
                _kOverflowing_EncodeUnboundedMaybeLargeResource_Type
                    .responseInlineSize($encoder.wireFormat),
                $types[0],
                $response);
            $respond($encoder.message);
          }, onError: (_e) {
            $fidl.handleException(_name, _e, close);
          });
        }, close);
        break;
      default:
        $message.closeHandles();
        switch ($message.strictness) {
          case $fidl.CallStrictness.flexible:
            if ($message.txid == 0) {
              final $fidl.UnknownMethodMetadata $metadata =
                  $fidl.UnknownMethodMetadata(
                      $message.ordinal, $fidl.UnknownMethodType.oneWay);
              impl!.$unknownMethod($metadata).catchError((_e) {
                $fidl.handleException("unknown one-way", _e, close);
              });
            } else {
              final $fidl.Encoder $encoder =
                  $fidl.Encoder($fidl.kWireFormatDefault);
              $encoder.encodeUnknownMethodResponse(
                  $message.ordinal, $message.txid);
              $respond($encoder.message);
              final $fidl.UnknownMethodMetadata $metadata =
                  $fidl.UnknownMethodMetadata(
                      $message.ordinal, $fidl.UnknownMethodType.twoWay);
              impl!.$unknownMethod($metadata).catchError((_e) {
                $fidl.handleException("unknown one-way", _e, close);
              });
            }
            break;
          case $fidl.CallStrictness.strict:
            throw $fidl.FidlError(
                r'Unexpected message name for OverflowingBinding');
        }
        break;
    }
  }
}
