// WARNING: This file is machine generated by fidlgen.
// @dart = 2.12

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

library fidl_test_protocolpayloads_test;

import 'dart:async' as $async;
import 'dart:core' hide Error, Future, Match, Set, Stream, Type;
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zircon;

import 'package:fidl_test_protocolpayloads_imported/fidl_async.dart'
    as lib$test_protocolpayloads_imported;
import './fidl_async.dart';

// ignore_for_file: always_specify_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: directives_ordering
// ignore_for_file: one_member_abstracts
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: library_prefixes
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides

class MainProtocol$TestBase extends MainProtocol {
  @override
  $async.Future<void> oneWayComposed(int a) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayComposed not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<int> twoWayComposed(int a) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayComposed not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<int> twoWayComposedWithError(int a) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayComposedWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<int> get onComposed {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onComposed not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<int> get onComposedWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onComposedWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayLocal(int a, int b) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayLocal not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<MainProtocol$TwoWayLocal$Response> twoWayLocal(int a, int b) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayLocal not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<MainProtocol$TwoWayLocalWithError$Response>
      twoWayLocalWithError(int a, int b) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayLocalWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<MainProtocol$OnLocal$Response> get onLocal {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onLocal not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<MainProtocol$OnLocalWithError$Response> get onLocalWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onLocalWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayImport(int a) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayImport not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<int> twoWayImport(int a) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayImport not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<int> twoWayImportWithError(int a) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayImportWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<int> get onImport {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onImport not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<int> get onImportWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onImportWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayAnon(int a, int b) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayAnon not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<MainProtocol$TwoWayAnon$Response> twoWayAnon(int a, int b) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayAnon not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<MainProtocol$TwoWayAnonWithError$Response> twoWayAnonWithError(
      int a, int b) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayAnonWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<MainProtocol$OnAnon$Response> get onAnon {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onAnon not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<MainProtocol$OnAnonWithError$Response> get onAnonWithError {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'onAnonWithError not implemented on MainProtocol test base. Please implement.'),
        StackTrace.current));
  }
}
