// WARNING: This file is machine generated by fidlgen.
// @dart = 2.12

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

library fidl_test_largemessages_test;

import 'dart:async' as $async;
import 'dart:core' hide Error, Future, Match, Set, Stream, Type;
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zircon;

import 'package:fidl_zx/fidl_async.dart' as lib$zx;
import './fidl_async.dart';

// ignore_for_file: always_specify_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: directives_ordering
// ignore_for_file: one_member_abstracts
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: library_prefixes
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides

class Overflowing$TestBase extends OverflowingServer {
  @override
  $async.Future<void> decodeBoundedKnownToBeSmall(Uint8List bytes) {
    return $async.Future.error(
        UnimplementedError(
            r'decodeBoundedKnownToBeSmall not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> decodeBoundedMaybeLarge(Uint8List bytes) {
    return $async.Future.error(
        UnimplementedError(
            r'decodeBoundedMaybeLarge not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> decodeSemiBoundedBelievedToBeSmall(
      SemiBoundedBelievedToBeSmall payload) {
    return $async.Future.error(
        UnimplementedError(
            r'decodeSemiBoundedBelievedToBeSmall not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> decodeSemiBoundedMaybeLarge(
      SemiBoundedMaybeLarge payload) {
    return $async.Future.error(
        UnimplementedError(
            r'decodeSemiBoundedMaybeLarge not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> decodeUnboundedMaybeLargeValue(Uint8List bytes) {
    return $async.Future.error(
        UnimplementedError(
            r'decodeUnboundedMaybeLargeValue not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> decodeUnboundedMaybeLargeResource(
      List<Elements> elements) {
    return $async.Future.error(
        UnimplementedError(
            r'decodeUnboundedMaybeLargeResource not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Uint8List> encodeBoundedKnownToBeSmall(Uint8List bytes) {
    return $async.Future.error(
        UnimplementedError(
            r'encodeBoundedKnownToBeSmall not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Uint8List> encodeBoundedMaybeLarge(Uint8List bytes) {
    return $async.Future.error(
        UnimplementedError(
            r'encodeBoundedMaybeLarge not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<SemiBoundedBelievedToBeSmall>
      encodeSemiBoundedBelievedToBeSmall(SemiBoundedBelievedToBeSmall payload) {
    return $async.Future.error(
        UnimplementedError(
            r'encodeSemiBoundedBelievedToBeSmall not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<SemiBoundedMaybeLarge> encodeSemiBoundedMaybeLarge(
      SemiBoundedMaybeLarge payload) {
    return $async.Future.error(
        UnimplementedError(
            r'encodeSemiBoundedMaybeLarge not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Uint8List> encodeUnboundedMaybeLargeValue(Uint8List bytes) {
    return $async.Future.error(
        UnimplementedError(
            r'encodeUnboundedMaybeLargeValue not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<List<Elements>> encodeUnboundedMaybeLargeResource(
      List<Elements> elements) {
    return $async.Future.error(
        UnimplementedError(
            r'encodeUnboundedMaybeLargeResource not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }

  $async.Future<void> $unknownMethod($fidl.UnknownMethodMetadata metadata) {
    return $async.Future.error(
        UnimplementedError(
            r'$unknownMethod not implemented on Overflowing test base. Please implement.'),
        StackTrace.current);
  }
}
