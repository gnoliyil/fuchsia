// WARNING: This file is machine generated by fidlgen.
// @dart = 2.12

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

library fidl_test_typesinprotocols_test;

import 'dart:async' as $async;
import 'dart:core' hide Error, Future, Match, Set, Stream, Type;
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zircon;

import 'package:fidl_zx/fidl_async.dart' as lib$zx;
import './fidl_async.dart';

// ignore_for_file: always_specify_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: directives_ordering
// ignore_for_file: one_member_abstracts
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: library_prefixes
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides

class Protocol$TestBase extends Protocol {
  @override
  $async.Future<void> oneWayBasic(
      int uint8,
      int uint16,
      int uint32,
      int uint64,
      int int8,
      int int16,
      int int32,
      int int64,
      double float32,
      double float64,
      String string,
      String? optString) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayBasic not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Protocol$TwoWayBasic$Response> twoWayBasic(
      int uint8,
      int uint16,
      int uint32,
      int uint64,
      int int8,
      int int16,
      int int32,
      int int64,
      double float32,
      double float64,
      String string,
      String? optString) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayBasic not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<Protocol$EventBasic$Response> get eventBasic {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'eventBasic not implemented on Protocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayCompound(Bits bits, Enum enum$, Struct struct,
      Table table, Union union, Struct? optStruct, Union? optUnion) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayCompound not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Protocol$TwoWayCompound$Response> twoWayCompound(
      Bits bits,
      Enum enum$,
      Struct struct,
      Table table,
      Union union,
      Struct? optStruct,
      Union? optUnion) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayCompound not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<Protocol$EventCompound$Response> get eventCompound {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'eventCompound not implemented on Protocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayArrayBasic(
      Uint8List arrayUint8,
      Uint16List arrayUint16,
      Uint32List arrayUint32,
      Uint64List arrayUint64,
      Int8List arrayInt8,
      Int16List arrayInt16,
      Int32List arrayInt32,
      Int64List arrayInt64,
      Float32List arrayFloat32,
      Float64List arrayFloat64,
      List<String> arrayString,
      List<String?> arrayOptString) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayArrayBasic not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Protocol$TwoWayArrayBasic$Response> twoWayArrayBasic(
      Uint8List arrayUint8,
      Uint16List arrayUint16,
      Uint32List arrayUint32,
      Uint64List arrayUint64,
      Int8List arrayInt8,
      Int16List arrayInt16,
      Int32List arrayInt32,
      Int64List arrayInt64,
      Float32List arrayFloat32,
      Float64List arrayFloat64,
      List<String> arrayString,
      List<String?> arrayOptString) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayArrayBasic not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<Protocol$EventArrayBasic$Response> get eventArrayBasic {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'eventArrayBasic not implemented on Protocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayArrayCompound(
      List<Bits> arrayBits,
      List<Enum> arrayEnum,
      List<Struct> arrayStruct,
      List<Table> arrayTable,
      List<Union> arrayUnion,
      List<Struct?> arrayOptStruct,
      List<Union?> arrayOptUnion) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayArrayCompound not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Protocol$TwoWayArrayCompound$Response> twoWayArrayCompound(
      List<Bits> arrayBits,
      List<Enum> arrayEnum,
      List<Struct> arrayStruct,
      List<Table> arrayTable,
      List<Union> arrayUnion,
      List<Struct?> arrayOptStruct,
      List<Union?> arrayOptUnion) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayArrayCompound not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<Protocol$EventArrayCompound$Response> get eventArrayCompound {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'eventArrayCompound not implemented on Protocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayVectorBasic(
      Uint8List vectorUint8,
      Uint16List vectorUint16,
      Uint32List vectorUint32,
      Uint64List vectorUint64,
      Int8List vectorInt8,
      Int16List vectorInt16,
      Int32List vectorInt32,
      Int64List vectorInt64,
      Float32List vectorFloat32,
      Float64List vectorFloat64,
      List<String> vectorString,
      List<String?> vectorOptString) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayVectorBasic not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Protocol$TwoWayVectorBasic$Response> twoWayVectorBasic(
      Uint8List vectorUint8,
      Uint16List vectorUint16,
      Uint32List vectorUint32,
      Uint64List vectorUint64,
      Int8List vectorInt8,
      Int16List vectorInt16,
      Int32List vectorInt32,
      Int64List vectorInt64,
      Float32List vectorFloat32,
      Float64List vectorFloat64,
      List<String> vectorString,
      List<String?> vectorOptString) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayVectorBasic not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<Protocol$EventVectorBasic$Response> get eventVectorBasic {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'eventVectorBasic not implemented on Protocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayVectorCompound(
      List<Bits> vectorBits,
      List<Enum> vectorEnum,
      List<Struct> vectorStruct,
      List<Table> vectorTable,
      List<Union> vectorUnion,
      List<Struct?> vectorOptStruct,
      List<Union?> vectorOptUnion) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayVectorCompound not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Protocol$TwoWayVectorCompound$Response> twoWayVectorCompound(
      List<Bits> vectorBits,
      List<Enum> vectorEnum,
      List<Struct> vectorStruct,
      List<Table> vectorTable,
      List<Union> vectorUnion,
      List<Struct?> vectorOptStruct,
      List<Union?> vectorOptUnion) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayVectorCompound not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<Protocol$EventVectorCompound$Response> get eventVectorCompound {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'eventVectorCompound not implemented on Protocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayVectorOptional(
      Uint8List? optVectorUint8,
      List<String>? optVectorString,
      List<Struct>? optVectorStruct,
      List<Struct?>? optVectorOptStruct) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayVectorOptional not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Protocol$TwoWayVectorOptional$Response> twoWayVectorOptional(
      Uint8List? optVectorUint8,
      List<String>? optVectorString,
      List<Struct>? optVectorStruct,
      List<Struct?>? optVectorOptStruct) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayVectorOptional not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<Protocol$EventVectorOptional$Response> get eventVectorOptional {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'eventVectorOptional not implemented on Protocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayArrayVectorNested(
      List<Uint8List> arrayArrayUint8,
      List<Uint8List> arrayVectorUint8,
      List<Uint8List> vectorArrayUint8,
      List<Uint8List> vectorVectorUint8) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayArrayVectorNested not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Protocol$TwoWayArrayVectorNested$Response>
      twoWayArrayVectorNested(
          List<Uint8List> arrayArrayUint8,
          List<Uint8List> arrayVectorUint8,
          List<Uint8List> vectorArrayUint8,
          List<Uint8List> vectorVectorUint8) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayArrayVectorNested not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<Protocol$EventArrayVectorNested$Response>
      get eventArrayVectorNested {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'eventArrayVectorNested not implemented on Protocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Future<void> oneWayResource(
      $zircon.Handle handle,
      $zircon.Vmo vmo,
      $fidl.InterfaceHandle<Protocol> clientEnd,
      $fidl.InterfaceRequest<Protocol> serverEnd,
      ResourceStruct struct,
      ResourceTable table,
      ResourceUnion union,
      $zircon.Handle? optHandle,
      $zircon.Vmo? optVmo,
      $fidl.InterfaceHandle<Protocol>? optClientEnd,
      $fidl.InterfaceRequest<Protocol>? optServerEnd,
      ResourceStruct? optStruct,
      ResourceUnion? optUnion,
      List<$zircon.Handle> arrayHandle,
      List<$zircon.Vmo> arrayVmo,
      List<$fidl.InterfaceHandle<Protocol>> arrayClientEnd,
      List<$fidl.InterfaceRequest<Protocol>> arrayServerEnd,
      List<ResourceStruct> arrayStruct,
      List<ResourceTable> arrayTable,
      List<ResourceUnion> arrayUnion,
      List<$zircon.Handle> vectorHandle,
      List<$zircon.Vmo> vectorVmo,
      List<$fidl.InterfaceHandle<Protocol>> vectorClientEnd,
      List<$fidl.InterfaceRequest<Protocol>> vectorServerEnd,
      List<ResourceStruct> vectorStruct,
      List<ResourceTable> vectorTable,
      List<ResourceUnion> vectorUnion) {
    return $async.Future.error(
        UnimplementedError(
            r'oneWayResource not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<Protocol$TwoWayResource$Response> twoWayResource(
      $zircon.Handle handle,
      $zircon.Vmo vmo,
      $fidl.InterfaceHandle<Protocol> clientEnd,
      $fidl.InterfaceRequest<Protocol> serverEnd,
      ResourceStruct struct,
      ResourceTable table,
      ResourceUnion union,
      $zircon.Handle? optHandle,
      $zircon.Vmo? optVmo,
      $fidl.InterfaceHandle<Protocol>? optClientEnd,
      $fidl.InterfaceRequest<Protocol>? optServerEnd,
      ResourceStruct? optStruct,
      ResourceUnion? optUnion,
      List<$zircon.Handle> arrayHandle,
      List<$zircon.Vmo> arrayVmo,
      List<$fidl.InterfaceHandle<Protocol>> arrayClientEnd,
      List<$fidl.InterfaceRequest<Protocol>> arrayServerEnd,
      List<ResourceStruct> arrayStruct,
      List<ResourceTable> arrayTable,
      List<ResourceUnion> arrayUnion,
      List<$zircon.Handle> vectorHandle,
      List<$zircon.Vmo> vectorVmo,
      List<$fidl.InterfaceHandle<Protocol>> vectorClientEnd,
      List<$fidl.InterfaceRequest<Protocol>> vectorServerEnd,
      List<ResourceStruct> vectorStruct,
      List<ResourceTable> vectorTable,
      List<ResourceUnion> vectorUnion) {
    return $async.Future.error(
        UnimplementedError(
            r'twoWayResource not implemented on Protocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<Protocol$EventResource$Response> get eventResource {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'eventResource not implemented on Protocol test base. Please implement.'),
        StackTrace.current));
  }
}
