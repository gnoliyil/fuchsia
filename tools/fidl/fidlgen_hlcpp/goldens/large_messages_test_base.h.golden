// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <test/largemessages/cpp/fidl.h>
namespace test {
namespace largemessages {
namespace testing {

class Overflowing_TestBase : public ::test::largemessages::Overflowing {
 public:
  virtual ~Overflowing_TestBase() {}
  virtual void NotImplemented_(const std::string& name) = 0;
  void DecodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes) override {
    NotImplemented_("DecodeBoundedKnownToBeSmall");
  }
  void DecodeBoundedMaybeLarge(::std::vector<uint8_t> bytes) override {
    NotImplemented_("DecodeBoundedMaybeLarge");
  }
  void DecodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) override {
    NotImplemented_("DecodeSemiBoundedBelievedToBeSmall");
  }
  void DecodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) override {
    NotImplemented_("DecodeSemiBoundedMaybeLarge");
  }
  void DecodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes) override {
    NotImplemented_("DecodeUnboundedMaybeLargeValue");
  }
  void DecodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements) override {
    NotImplemented_("DecodeUnboundedMaybeLargeResource");
  }
  void EncodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes, EncodeBoundedKnownToBeSmallCallback callback) override {
    NotImplemented_("EncodeBoundedKnownToBeSmall");
  }
  void EncodeBoundedMaybeLarge(::std::vector<uint8_t> bytes, EncodeBoundedMaybeLargeCallback callback) override {
    NotImplemented_("EncodeBoundedMaybeLarge");
  }
  void EncodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall, EncodeSemiBoundedBelievedToBeSmallCallback callback) override {
    NotImplemented_("EncodeSemiBoundedBelievedToBeSmall");
  }
  void EncodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge, EncodeSemiBoundedMaybeLargeCallback callback) override {
    NotImplemented_("EncodeSemiBoundedMaybeLarge");
  }
  void EncodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes, EncodeUnboundedMaybeLargeValueCallback callback) override {
    NotImplemented_("EncodeUnboundedMaybeLargeValue");
  }
  void EncodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements, EncodeUnboundedMaybeLargeResourceCallback callback) override {
    NotImplemented_("EncodeUnboundedMaybeLargeResource");
  }
  void handle_unknown_method(uint64_t ordinal, bool method_has_response) override {
    NotImplemented_("handle_unknown_method");
  }
};
}  // namespace testing
}  // namespace largemessages
}  // namespace test
