// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#pragma once

#include "lib/fidl/cpp/internal/header.h"

namespace test {
namespace largemessages {

//
// Domain objects declarations
//

class BoundedKnownToBeSmall;

class BoundedMaybeLarge;

class SemiBoundedBelievedToBeSmall;

class SemiBoundedMaybeLarge;

class UnboundedMaybeLargeValue;

class Elements;

class UnboundedMaybeLargeResource;

#ifdef __Fuchsia__

class Overflowing;
using OverflowingHandle = ::fidl::InterfaceHandle<Overflowing>;

#endif  // __Fuchsia__

class BoundedKnownToBeSmall final {
 public:
  static const fidl_type_t* FidlType;

  ::std::vector<uint8_t> bytes;

  static inline ::std::unique_ptr<BoundedKnownToBeSmall> New() { return ::std::make_unique<BoundedKnownToBeSmall>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, BoundedKnownToBeSmall* value, size_t _offset);
  zx_status_t Clone(BoundedKnownToBeSmall* result) const;
};

inline zx_status_t Clone(const ::test::largemessages::BoundedKnownToBeSmall& _value,
                         ::test::largemessages::BoundedKnownToBeSmall* _result) {
  return _value.Clone(_result);
}

using BoundedKnownToBeSmallPtr = ::std::unique_ptr<BoundedKnownToBeSmall>;

constexpr uint32_t SMALL_STRUCT_BYTE_VECTOR_SIZE = 65504u;

class BoundedMaybeLarge final {
 public:
  static const fidl_type_t* FidlType;

  ::std::vector<uint8_t> bytes;

  static inline ::std::unique_ptr<BoundedMaybeLarge> New() { return ::std::make_unique<BoundedMaybeLarge>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, BoundedMaybeLarge* value, size_t _offset);
  zx_status_t Clone(BoundedMaybeLarge* result) const;
};

inline zx_status_t Clone(const ::test::largemessages::BoundedMaybeLarge& _value,
                         ::test::largemessages::BoundedMaybeLarge* _result) {
  return _value.Clone(_result);
}

using BoundedMaybeLargePtr = ::std::unique_ptr<BoundedMaybeLarge>;

constexpr uint32_t LARGE_STRUCT_BYTE_VECTOR_SIZE = 65505u;

class SemiBoundedBelievedToBeSmall final {
 public:
  static const fidl_type_t* FidlType;

  SemiBoundedBelievedToBeSmall();
  ~SemiBoundedBelievedToBeSmall();

  SemiBoundedBelievedToBeSmall(SemiBoundedBelievedToBeSmall&&);
  SemiBoundedBelievedToBeSmall& operator=(SemiBoundedBelievedToBeSmall&&);

  static SemiBoundedBelievedToBeSmall WithBytes(::std::vector<uint8_t>&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
    kUnknown = 0,

    kBytes = 1,  // 0x1
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<SemiBoundedBelievedToBeSmall> New() { return ::std::make_unique<SemiBoundedBelievedToBeSmall>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, SemiBoundedBelievedToBeSmall* value, size_t offset);
  zx_status_t Clone(SemiBoundedBelievedToBeSmall* result) const;

  bool has_invalid_tag() const {
    return tag_ == Invalid;
  }

  bool is_bytes() const { return tag_ == ::test::largemessages::SemiBoundedBelievedToBeSmall::Tag::kBytes; }

  ::std::vector<uint8_t>& bytes() {
    EnsureStorageInitialized(::test::largemessages::SemiBoundedBelievedToBeSmall::Tag::kBytes);
    return bytes_;
  }

  const ::std::vector<uint8_t>& bytes() const {
    ZX_ASSERT(is_bytes());
    return bytes_;
  }
  SemiBoundedBelievedToBeSmall& set_bytes(::std::vector<uint8_t> value);
  SemiBoundedBelievedToBeSmall& SetUnknownData(fidl_xunion_tag_t ordinal, std::vector<uint8_t> bytes);

  ::test::largemessages::SemiBoundedBelievedToBeSmall::Tag Which() const {
    switch (tag_) {
      case ::test::largemessages::SemiBoundedBelievedToBeSmall::Tag::Invalid:
      case ::test::largemessages::SemiBoundedBelievedToBeSmall::Tag::kBytes:
        return ::test::largemessages::SemiBoundedBelievedToBeSmall::Tag(tag_);
      default:
        return ::test::largemessages::SemiBoundedBelievedToBeSmall::Tag::kUnknown;
    }
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }
  const std::vector<uint8_t>* UnknownBytes() const {
    if (Which() != ::test::largemessages::SemiBoundedBelievedToBeSmall::Tag::kUnknown) {
      return nullptr;
    }
    return &unknown_data_;
  }

  friend ::fidl::Equality<::test::largemessages::SemiBoundedBelievedToBeSmall>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(::test::largemessages::SemiBoundedBelievedToBeSmall::Tag::Invalid);
  union {
    ::std::vector<uint8_t> bytes_;
    std::vector<uint8_t> unknown_data_;
  };
};

inline zx_status_t Clone(const ::test::largemessages::SemiBoundedBelievedToBeSmall& value,
                         ::test::largemessages::SemiBoundedBelievedToBeSmall* result) {
  return value.Clone(result);
}

using SemiBoundedBelievedToBeSmallPtr = ::std::unique_ptr<SemiBoundedBelievedToBeSmall>;

constexpr uint32_t SMALL_UNION_BYTE_VECTOR_SIZE = 65488u;

class SemiBoundedMaybeLarge final {
 public:
  static const fidl_type_t* FidlType;

  SemiBoundedMaybeLarge();
  ~SemiBoundedMaybeLarge();

  SemiBoundedMaybeLarge(SemiBoundedMaybeLarge&&);
  SemiBoundedMaybeLarge& operator=(SemiBoundedMaybeLarge&&);

  static SemiBoundedMaybeLarge WithBytes(::std::vector<uint8_t>&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
    kUnknown = 0,

    kBytes = 1,  // 0x1
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<SemiBoundedMaybeLarge> New() { return ::std::make_unique<SemiBoundedMaybeLarge>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, SemiBoundedMaybeLarge* value, size_t offset);
  zx_status_t Clone(SemiBoundedMaybeLarge* result) const;

  bool has_invalid_tag() const {
    return tag_ == Invalid;
  }

  bool is_bytes() const { return tag_ == ::test::largemessages::SemiBoundedMaybeLarge::Tag::kBytes; }

  ::std::vector<uint8_t>& bytes() {
    EnsureStorageInitialized(::test::largemessages::SemiBoundedMaybeLarge::Tag::kBytes);
    return bytes_;
  }

  const ::std::vector<uint8_t>& bytes() const {
    ZX_ASSERT(is_bytes());
    return bytes_;
  }
  SemiBoundedMaybeLarge& set_bytes(::std::vector<uint8_t> value);
  SemiBoundedMaybeLarge& SetUnknownData(fidl_xunion_tag_t ordinal, std::vector<uint8_t> bytes);

  ::test::largemessages::SemiBoundedMaybeLarge::Tag Which() const {
    switch (tag_) {
      case ::test::largemessages::SemiBoundedMaybeLarge::Tag::Invalid:
      case ::test::largemessages::SemiBoundedMaybeLarge::Tag::kBytes:
        return ::test::largemessages::SemiBoundedMaybeLarge::Tag(tag_);
      default:
        return ::test::largemessages::SemiBoundedMaybeLarge::Tag::kUnknown;
    }
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }
  const std::vector<uint8_t>* UnknownBytes() const {
    if (Which() != ::test::largemessages::SemiBoundedMaybeLarge::Tag::kUnknown) {
      return nullptr;
    }
    return &unknown_data_;
  }

  friend ::fidl::Equality<::test::largemessages::SemiBoundedMaybeLarge>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(::test::largemessages::SemiBoundedMaybeLarge::Tag::Invalid);
  union {
    ::std::vector<uint8_t> bytes_;
    std::vector<uint8_t> unknown_data_;
  };
};

inline zx_status_t Clone(const ::test::largemessages::SemiBoundedMaybeLarge& value,
                         ::test::largemessages::SemiBoundedMaybeLarge* result) {
  return value.Clone(result);
}

using SemiBoundedMaybeLargePtr = ::std::unique_ptr<SemiBoundedMaybeLarge>;

constexpr uint32_t LARGE_UNION_BYTE_VECTOR_SIZE = 65489u;

class UnboundedMaybeLargeValue final {
 public:
  static const fidl_type_t* FidlType;

  ::std::vector<uint8_t> bytes;

  static inline ::std::unique_ptr<UnboundedMaybeLargeValue> New() { return ::std::make_unique<UnboundedMaybeLargeValue>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, UnboundedMaybeLargeValue* value, size_t _offset);
  zx_status_t Clone(UnboundedMaybeLargeValue* result) const;
};

inline zx_status_t Clone(const ::test::largemessages::UnboundedMaybeLargeValue& _value,
                         ::test::largemessages::UnboundedMaybeLargeValue* _result) {
  return _value.Clone(_result);
}

using UnboundedMaybeLargeValuePtr = ::std::unique_ptr<UnboundedMaybeLargeValue>;

#ifdef __Fuchsia__

class Elements final {
 public:
  static const fidl_type_t* FidlType;

  ::zx::handle handle;

  ::std::vector<uint8_t> bytes;

  static inline ::std::unique_ptr<Elements> New() { return ::std::make_unique<Elements>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, Elements* value, size_t _offset);
  zx_status_t Clone(Elements* result) const;
};

inline zx_status_t Clone(const ::test::largemessages::Elements& _value,
                         ::test::largemessages::Elements* _result) {
  return _value.Clone(_result);
}

using ElementsPtr = ::std::unique_ptr<Elements>;

#endif  // __Fuchsia__

#ifdef __Fuchsia__

class UnboundedMaybeLargeResource final {
 public:
  static const fidl_type_t* FidlType;

  ::std::array<::test::largemessages::Elements, 64> elements{};

  static inline ::std::unique_ptr<UnboundedMaybeLargeResource> New() { return ::std::make_unique<UnboundedMaybeLargeResource>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, UnboundedMaybeLargeResource* value, size_t _offset);
  zx_status_t Clone(UnboundedMaybeLargeResource* result) const;
};

inline zx_status_t Clone(const ::test::largemessages::UnboundedMaybeLargeResource& _value,
                         ::test::largemessages::UnboundedMaybeLargeResource* _result) {
  return _value.Clone(_result);
}

using UnboundedMaybeLargeResourcePtr = ::std::unique_ptr<UnboundedMaybeLargeResource>;

#endif  // __Fuchsia__

constexpr uint32_t HANDLE_CARRYING_ELEMENTS_COUNT = 64u;

constexpr uint32_t FIRST_63_ELEMENTS_BYTE_VECTOR_SIZE = 1000u;

constexpr uint32_t SMALL_LAST_ELEMENT_BYTE_VECTOR_SIZE = 976u;

constexpr uint32_t LARGE_LAST_ELEMENT_BYTE_VECTOR_SIZE = 985u;

#ifdef __Fuchsia__

namespace _internal {
__LOCAL extern "C" const fidl_type_t test_largemessages_BoundedKnownToBeSmallTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_BoundedMaybeLargeTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_SemiBoundedBelievedToBeSmallTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_SemiBoundedMaybeLargeTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeValueTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeResourceTable;

}  // namespace _internal

class Overflowing_RequestEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage DecodeBoundedKnownToBeSmall(::fidl::MessageEncoder* _encoder, ::std::vector<uint8_t>* bytes) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, bytes, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_BoundedKnownToBeSmallTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage DecodeBoundedMaybeLarge(::fidl::MessageEncoder* _encoder, ::std::vector<uint8_t>* bytes) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, bytes, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_BoundedMaybeLargeTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage DecodeSemiBoundedBelievedToBeSmall(::fidl::MessageEncoder* _encoder, ::test::largemessages::SemiBoundedBelievedToBeSmall* SemiBoundedBelievedToBeSmall) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, SemiBoundedBelievedToBeSmall, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_SemiBoundedBelievedToBeSmallTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage DecodeSemiBoundedMaybeLarge(::fidl::MessageEncoder* _encoder, ::test::largemessages::SemiBoundedMaybeLarge* SemiBoundedMaybeLarge) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, SemiBoundedMaybeLarge, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_SemiBoundedMaybeLargeTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage DecodeUnboundedMaybeLargeValue(::fidl::MessageEncoder* _encoder, ::std::vector<uint8_t>* bytes) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, bytes, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_UnboundedMaybeLargeValueTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage DecodeUnboundedMaybeLargeResource(::fidl::MessageEncoder* _encoder, ::std::array<::test::largemessages::Elements, 64>* elements) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(1536);
    ::fidl::Encode(_encoder, elements, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_UnboundedMaybeLargeResourceTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeBoundedKnownToBeSmall(::fidl::MessageEncoder* _encoder, ::std::vector<uint8_t>* bytes) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, bytes, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_BoundedKnownToBeSmallTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeBoundedMaybeLarge(::fidl::MessageEncoder* _encoder, ::std::vector<uint8_t>* bytes) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, bytes, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_BoundedMaybeLargeTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeSemiBoundedBelievedToBeSmall(::fidl::MessageEncoder* _encoder, ::test::largemessages::SemiBoundedBelievedToBeSmall* SemiBoundedBelievedToBeSmall) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, SemiBoundedBelievedToBeSmall, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_SemiBoundedBelievedToBeSmallTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeSemiBoundedMaybeLarge(::fidl::MessageEncoder* _encoder, ::test::largemessages::SemiBoundedMaybeLarge* SemiBoundedMaybeLarge) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, SemiBoundedMaybeLarge, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_SemiBoundedMaybeLargeTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeUnboundedMaybeLargeValue(::fidl::MessageEncoder* _encoder, ::std::vector<uint8_t>* bytes) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, bytes, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_UnboundedMaybeLargeValueTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeUnboundedMaybeLargeResource(::fidl::MessageEncoder* _encoder, ::std::array<::test::largemessages::Elements, 64>* elements) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(1536);
    ::fidl::Encode(_encoder, elements, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_UnboundedMaybeLargeResourceTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};

class Overflowing_ResponseEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage EncodeBoundedKnownToBeSmall(::fidl::MessageEncoder* _encoder, ::std::vector<uint8_t>* bytes) {
    fidl_trace(WillHLCPPEncode);

    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, bytes, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_BoundedKnownToBeSmallTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeBoundedMaybeLarge(::fidl::MessageEncoder* _encoder, ::std::vector<uint8_t>* bytes) {
    fidl_trace(WillHLCPPEncode);

    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, bytes, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_BoundedMaybeLargeTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeSemiBoundedBelievedToBeSmall(::fidl::MessageEncoder* _encoder, ::test::largemessages::SemiBoundedBelievedToBeSmall* SemiBoundedBelievedToBeSmall) {
    fidl_trace(WillHLCPPEncode);

    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, SemiBoundedBelievedToBeSmall, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_SemiBoundedBelievedToBeSmallTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeSemiBoundedMaybeLarge(::fidl::MessageEncoder* _encoder, ::test::largemessages::SemiBoundedMaybeLarge* SemiBoundedMaybeLarge) {
    fidl_trace(WillHLCPPEncode);

    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, SemiBoundedMaybeLarge, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_SemiBoundedMaybeLargeTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeUnboundedMaybeLargeValue(::fidl::MessageEncoder* _encoder, ::std::vector<uint8_t>* bytes) {
    fidl_trace(WillHLCPPEncode);

    _encoder->Alloc(16);
    ::fidl::Encode(_encoder, bytes, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_UnboundedMaybeLargeValueTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage EncodeUnboundedMaybeLargeResource(::fidl::MessageEncoder* _encoder, ::std::array<::test::largemessages::Elements, 64>* elements) {
    fidl_trace(WillHLCPPEncode);

    _encoder->Alloc(1536);
    ::fidl::Encode(_encoder, elements, 0 + sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &::test::largemessages::_internal::test_largemessages_UnboundedMaybeLargeResourceTable, _encoder->GetPtr<const char>(0), _encoder->CurrentLength(), _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};

#endif  // __Fuchsia__

}  // namespace largemessages
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::largemessages::BoundedKnownToBeSmall>
    : public EncodableCodingTraits<::test::largemessages::BoundedKnownToBeSmall, 16> {};

template <>
struct HasPadding<::test::largemessages::BoundedKnownToBeSmall> : public std::true_type {};

template <>
struct IsMemcpyCompatible<::test::largemessages::BoundedKnownToBeSmall> : public internal::BoolConstant<
                                                                              !HasPadding<::test::largemessages::BoundedKnownToBeSmall>::value && IsMemcpyCompatible<::std::vector<uint8_t>>::value> {};

inline zx_status_t Clone(const ::test::largemessages::BoundedKnownToBeSmall& value,
                         ::test::largemessages::BoundedKnownToBeSmall* result) {
  return ::test::largemessages::Clone(value, result);
}

template <>
struct Equality<::test::largemessages::BoundedKnownToBeSmall> {
  bool operator()(const ::test::largemessages::BoundedKnownToBeSmall& _lhs, const ::test::largemessages::BoundedKnownToBeSmall& _rhs) const {
    if (!::fidl::Equals(_lhs.bytes, _rhs.bytes)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::largemessages::BoundedMaybeLarge>
    : public EncodableCodingTraits<::test::largemessages::BoundedMaybeLarge, 16> {};

template <>
struct HasPadding<::test::largemessages::BoundedMaybeLarge> : public std::true_type {};

template <>
struct IsMemcpyCompatible<::test::largemessages::BoundedMaybeLarge> : public internal::BoolConstant<
                                                                          !HasPadding<::test::largemessages::BoundedMaybeLarge>::value && IsMemcpyCompatible<::std::vector<uint8_t>>::value> {};

inline zx_status_t Clone(const ::test::largemessages::BoundedMaybeLarge& value,
                         ::test::largemessages::BoundedMaybeLarge* result) {
  return ::test::largemessages::Clone(value, result);
}

template <>
struct Equality<::test::largemessages::BoundedMaybeLarge> {
  bool operator()(const ::test::largemessages::BoundedMaybeLarge& _lhs, const ::test::largemessages::BoundedMaybeLarge& _rhs) const {
    if (!::fidl::Equals(_lhs.bytes, _rhs.bytes)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<::test::largemessages::SemiBoundedBelievedToBeSmall> : public std::true_type {};

template <>
struct CodingTraits<::test::largemessages::SemiBoundedBelievedToBeSmall>
    : public EncodableCodingTraits<::test::largemessages::SemiBoundedBelievedToBeSmall, 16> {};

template <>
struct CodingTraits<std::unique_ptr<::test::largemessages::SemiBoundedBelievedToBeSmall>> {
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::largemessages::SemiBoundedBelievedToBeSmall>* value, size_t offset,
                     cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* _decoder, std::unique_ptr<::test::largemessages::SemiBoundedBelievedToBeSmall>* value, size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::largemessages::SemiBoundedBelievedToBeSmall);

    ::test::largemessages::SemiBoundedBelievedToBeSmall::Decode(_decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::largemessages::SemiBoundedBelievedToBeSmall& value,
                         ::test::largemessages::SemiBoundedBelievedToBeSmall* result) {
  return ::test::largemessages::Clone(value, result);
}

template <>
struct Equality<::test::largemessages::SemiBoundedBelievedToBeSmall> {
  bool operator()(const ::test::largemessages::SemiBoundedBelievedToBeSmall& _lhs, const ::test::largemessages::SemiBoundedBelievedToBeSmall& _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(::test::largemessages::SemiBoundedBelievedToBeSmall::Tag::Invalid):
        return true;
      case ::test::largemessages::SemiBoundedBelievedToBeSmall::Tag::kBytes:
        return ::fidl::Equals(_lhs.bytes_, _rhs.bytes_);
      default:
        return ::fidl::Equals(_lhs.unknown_data_, _rhs.unknown_data_);
    }
  }
};
template <>
struct IsFidlXUnion<::test::largemessages::SemiBoundedMaybeLarge> : public std::true_type {};

template <>
struct CodingTraits<::test::largemessages::SemiBoundedMaybeLarge>
    : public EncodableCodingTraits<::test::largemessages::SemiBoundedMaybeLarge, 16> {};

template <>
struct CodingTraits<std::unique_ptr<::test::largemessages::SemiBoundedMaybeLarge>> {
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::largemessages::SemiBoundedMaybeLarge>* value, size_t offset,
                     cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* _decoder, std::unique_ptr<::test::largemessages::SemiBoundedMaybeLarge>* value, size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::largemessages::SemiBoundedMaybeLarge);

    ::test::largemessages::SemiBoundedMaybeLarge::Decode(_decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::largemessages::SemiBoundedMaybeLarge& value,
                         ::test::largemessages::SemiBoundedMaybeLarge* result) {
  return ::test::largemessages::Clone(value, result);
}

template <>
struct Equality<::test::largemessages::SemiBoundedMaybeLarge> {
  bool operator()(const ::test::largemessages::SemiBoundedMaybeLarge& _lhs, const ::test::largemessages::SemiBoundedMaybeLarge& _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(::test::largemessages::SemiBoundedMaybeLarge::Tag::Invalid):
        return true;
      case ::test::largemessages::SemiBoundedMaybeLarge::Tag::kBytes:
        return ::fidl::Equals(_lhs.bytes_, _rhs.bytes_);
      default:
        return ::fidl::Equals(_lhs.unknown_data_, _rhs.unknown_data_);
    }
  }
};
template <>
struct CodingTraits<::test::largemessages::UnboundedMaybeLargeValue>
    : public EncodableCodingTraits<::test::largemessages::UnboundedMaybeLargeValue, 16> {};

template <>
struct HasPadding<::test::largemessages::UnboundedMaybeLargeValue> : public std::true_type {};

template <>
struct IsMemcpyCompatible<::test::largemessages::UnboundedMaybeLargeValue> : public internal::BoolConstant<
                                                                                 !HasPadding<::test::largemessages::UnboundedMaybeLargeValue>::value && IsMemcpyCompatible<::std::vector<uint8_t>>::value> {};

inline zx_status_t Clone(const ::test::largemessages::UnboundedMaybeLargeValue& value,
                         ::test::largemessages::UnboundedMaybeLargeValue* result) {
  return ::test::largemessages::Clone(value, result);
}

template <>
struct Equality<::test::largemessages::UnboundedMaybeLargeValue> {
  bool operator()(const ::test::largemessages::UnboundedMaybeLargeValue& _lhs, const ::test::largemessages::UnboundedMaybeLargeValue& _rhs) const {
    if (!::fidl::Equals(_lhs.bytes, _rhs.bytes)) {
      return false;
    }
    return true;
  }
};
#ifdef __Fuchsia__

template <>
struct CodingTraits<::test::largemessages::Elements>
    : public EncodableCodingTraits<::test::largemessages::Elements, 24> {};

template <>
struct HasPadding<::test::largemessages::Elements> : public std::true_type {};

template <>
struct IsMemcpyCompatible<::test::largemessages::Elements> : public internal::BoolConstant<
                                                                 !HasPadding<::test::largemessages::Elements>::value && IsMemcpyCompatible<::zx::handle>::value && IsMemcpyCompatible<::std::vector<uint8_t>>::value> {};

inline zx_status_t Clone(const ::test::largemessages::Elements& value,
                         ::test::largemessages::Elements* result) {
  return ::test::largemessages::Clone(value, result);
}

template <>
struct Equality<::test::largemessages::Elements> {
  bool operator()(const ::test::largemessages::Elements& _lhs, const ::test::largemessages::Elements& _rhs) const {
    if (!::fidl::Equals(_lhs.handle, _rhs.handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.bytes, _rhs.bytes)) {
      return false;
    }
    return true;
  }
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct CodingTraits<::test::largemessages::UnboundedMaybeLargeResource>
    : public EncodableCodingTraits<::test::largemessages::UnboundedMaybeLargeResource, 1536> {};

template <>
struct HasPadding<::test::largemessages::UnboundedMaybeLargeResource> : public std::true_type {};

template <>
struct IsMemcpyCompatible<::test::largemessages::UnboundedMaybeLargeResource> : public internal::BoolConstant<
                                                                                    !HasPadding<::test::largemessages::UnboundedMaybeLargeResource>::value && IsMemcpyCompatible<::std::array<::test::largemessages::Elements, 64>>::value> {};

inline zx_status_t Clone(const ::test::largemessages::UnboundedMaybeLargeResource& value,
                         ::test::largemessages::UnboundedMaybeLargeResource* result) {
  return ::test::largemessages::Clone(value, result);
}

template <>
struct Equality<::test::largemessages::UnboundedMaybeLargeResource> {
  bool operator()(const ::test::largemessages::UnboundedMaybeLargeResource& _lhs, const ::test::largemessages::UnboundedMaybeLargeResource& _rhs) const {
    if (!::fidl::Equals(_lhs.elements, _rhs.elements)) {
      return false;
    }
    return true;
  }
};

#endif  // __Fuchsia__

//
// Proxies and stubs declarations
//
}  // namespace fidl
namespace test {
namespace largemessages {

#ifdef __Fuchsia__

using OverflowingPtr = ::fidl::InterfacePtr<Overflowing>;
class Overflowing_Proxy;
class Overflowing_Stub;
class Overflowing_EventSender;
class Overflowing_Sync;
using OverflowingSyncPtr = ::fidl::SynchronousInterfacePtr<Overflowing>;
class Overflowing_SyncProxy;

namespace internal {

constexpr uint64_t kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal = 0x529aace1a3b3bce4lu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeBoundedKnownToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_DecodeBoundedMaybeLarge_Ordinal = 0x433acc9b9610b5falu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal = 0x7d5d85c6a0ddd4d0lu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeSemiBoundedBelievedToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal = 0x28bb2002323ecc60lu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeSemiBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal = 0x5bde5404c4e18e2flu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeUnboundedMaybeLargeValue_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal = 0x3f50d644d96b6394lu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeUnboundedMaybeLargeResource_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal = 0x5adf4f83d06a28d3lu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeBoundedKnownToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_EncodeBoundedMaybeLarge_Ordinal = 0x36c5f106da9a80e0lu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal = 0x3b1167d912bf6bf1lu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeSemiBoundedBelievedToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal = 0x1f7994e5062e246flu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeSemiBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal = 0x2f6e3f3a9bf3e39alu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeUnboundedMaybeLargeValue_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

constexpr uint64_t kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal = 0x4c5431cc3af0a62lu;

constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeUnboundedMaybeLargeResource_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
}  // namespace internal

#endif  // __Fuchsia__

#ifdef __Fuchsia__

class Overflowing {
 public:
  using Proxy_ = ::test::largemessages::Overflowing_Proxy;
  using Stub_ = ::test::largemessages::Overflowing_Stub;
  using EventSender_ = ::test::largemessages::Overflowing_EventSender;
  using Sync_ = ::test::largemessages::Overflowing_Sync;
  virtual ~Overflowing();

  virtual void DecodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes) = 0;

  virtual void DecodeBoundedMaybeLarge(::std::vector<uint8_t> bytes) = 0;

  virtual void DecodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) = 0;

  virtual void DecodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) = 0;

  virtual void DecodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes) = 0;

  virtual void DecodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements) = 0;
  using EncodeBoundedKnownToBeSmallCallback =
      fit::function<void(::std::vector<uint8_t>)>;

  virtual void EncodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes, EncodeBoundedKnownToBeSmallCallback callback) = 0;
  using EncodeBoundedMaybeLargeCallback =
      fit::function<void(::std::vector<uint8_t>)>;

  virtual void EncodeBoundedMaybeLarge(::std::vector<uint8_t> bytes, EncodeBoundedMaybeLargeCallback callback) = 0;
  using EncodeSemiBoundedBelievedToBeSmallCallback =
      fit::function<void(::test::largemessages::SemiBoundedBelievedToBeSmall)>;

  virtual void EncodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall, EncodeSemiBoundedBelievedToBeSmallCallback callback) = 0;
  using EncodeSemiBoundedMaybeLargeCallback =
      fit::function<void(::test::largemessages::SemiBoundedMaybeLarge)>;

  virtual void EncodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge, EncodeSemiBoundedMaybeLargeCallback callback) = 0;
  using EncodeUnboundedMaybeLargeValueCallback =
      fit::function<void(::std::vector<uint8_t>)>;

  virtual void EncodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes, EncodeUnboundedMaybeLargeValueCallback callback) = 0;
  using EncodeUnboundedMaybeLargeResourceCallback =
      fit::function<void(::std::array<::test::largemessages::Elements, 64>)>;

  virtual void EncodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements, EncodeUnboundedMaybeLargeResourceCallback callback) = 0;

 protected:
  // Allow the stub to access the handle_unknown_method method.
  friend class Overflowing_Stub;

  virtual void handle_unknown_method(uint64_t ordinal, bool method_has_response) = 0;
};

class Overflowing_RequestDecoder {
 public:
  Overflowing_RequestDecoder() = default;
  virtual ~Overflowing_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response, bool* is_known);
  virtual void DecodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes) = 0;
  virtual void DecodeBoundedMaybeLarge(::std::vector<uint8_t> bytes) = 0;
  virtual void DecodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) = 0;
  virtual void DecodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) = 0;
  virtual void DecodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes) = 0;
  virtual void DecodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements) = 0;
  virtual void EncodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes) = 0;
  virtual void EncodeBoundedMaybeLarge(::std::vector<uint8_t> bytes) = 0;
  virtual void EncodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) = 0;
  virtual void EncodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) = 0;
  virtual void EncodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes) = 0;
  virtual void EncodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements) = 0;
};

class Overflowing_ResponseDecoder {
 public:
  Overflowing_ResponseDecoder() = default;
  virtual ~Overflowing_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
  virtual void EncodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes) = 0;
  virtual void EncodeBoundedMaybeLarge(::std::vector<uint8_t> bytes) = 0;
  virtual void EncodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) = 0;
  virtual void EncodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) = 0;
  virtual void EncodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes) = 0;
  virtual void EncodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements) = 0;
};

class Overflowing_EventSender {
 public:
  virtual ~Overflowing_EventSender();
};

class Overflowing_Sync {
 public:
  using Proxy_ = ::test::largemessages::Overflowing_SyncProxy;
  virtual ~Overflowing_Sync();
  virtual zx_status_t DecodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes) = 0;
  virtual zx_status_t DecodeBoundedMaybeLarge(::std::vector<uint8_t> bytes) = 0;
  virtual zx_status_t DecodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) = 0;
  virtual zx_status_t DecodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) = 0;
  virtual zx_status_t DecodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes) = 0;
  virtual zx_status_t DecodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements) = 0;
  virtual zx_status_t EncodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes, ::std::vector<uint8_t>* out_bytes) = 0;
  virtual zx_status_t EncodeBoundedMaybeLarge(::std::vector<uint8_t> bytes, ::std::vector<uint8_t>* out_bytes) = 0;
  virtual zx_status_t EncodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall, ::test::largemessages::SemiBoundedBelievedToBeSmall* out_SemiBoundedBelievedToBeSmall) = 0;
  virtual zx_status_t EncodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge, ::test::largemessages::SemiBoundedMaybeLarge* out_SemiBoundedMaybeLarge) = 0;
  virtual zx_status_t EncodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes, ::std::vector<uint8_t>* out_bytes) = 0;
  virtual zx_status_t EncodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements, ::std::array<::test::largemessages::Elements, 64>* out_elements) = 0;
};

class Overflowing_Proxy final : public ::fidl::internal::Proxy, public Overflowing {
 public:
  explicit Overflowing_Proxy(::fidl::internal::ProxyController* controller);
  ~Overflowing_Proxy() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeBoundedKnownToBeSmall
  void DecodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeBoundedMaybeLarge
  void DecodeBoundedMaybeLarge(::std::vector<uint8_t> bytes) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeSemiBoundedBelievedToBeSmall
  void DecodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeSemiBoundedMaybeLarge
  void DecodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeUnboundedMaybeLargeValue
  void DecodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeUnboundedMaybeLargeResource
  void DecodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeBoundedKnownToBeSmall
  void EncodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes, EncodeBoundedKnownToBeSmallCallback callback) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeBoundedMaybeLarge
  void EncodeBoundedMaybeLarge(::std::vector<uint8_t> bytes, EncodeBoundedMaybeLargeCallback callback) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeSemiBoundedBelievedToBeSmall
  void EncodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall, EncodeSemiBoundedBelievedToBeSmallCallback callback) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeSemiBoundedMaybeLarge
  void EncodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge, EncodeSemiBoundedMaybeLargeCallback callback) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeUnboundedMaybeLargeValue
  void EncodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes, EncodeUnboundedMaybeLargeValueCallback callback) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeUnboundedMaybeLargeResource
  void EncodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements, EncodeUnboundedMaybeLargeResourceCallback callback) override;

  fit::function<void(uint64_t)> handle_unknown_event;

 protected:
  void handle_unknown_method(uint64_t ordinal, bool method_has_response) override {
    // This method is only provided to satisfy the base interface. It's
    // protected and should never be called by generated code on the client
    // side, so it should never be called.
    ZX_PANIC("Unreachable: Overflowing_Proxy::handle_unknown_method should not be callable");
  }

 private:
  Overflowing_Proxy(const ::test::largemessages::Overflowing_Proxy&) = delete;
  Overflowing_Proxy& operator=(const ::test::largemessages::Overflowing_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class Overflowing_Stub final : public ::fidl::internal::Stub, public ::test::largemessages::Overflowing_EventSender {
 public:
  typedef class ::test::largemessages::Overflowing Overflowing_clazz;
  explicit Overflowing_Stub(::test::largemessages::Overflowing_Stub::Overflowing_clazz* impl);
  ~Overflowing_Stub() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message,
                        ::fidl::internal::PendingResponse response) override;

 private:
  ::test::largemessages::Overflowing_Stub::Overflowing_clazz* impl_;
};

class Overflowing_SyncProxy : public ::test::largemessages::Overflowing_Sync {
 public:
  explicit Overflowing_SyncProxy(::zx::channel channel);
  ~Overflowing_SyncProxy() override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeBoundedKnownToBeSmall
  zx_status_t DecodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeBoundedMaybeLarge
  zx_status_t DecodeBoundedMaybeLarge(::std::vector<uint8_t> bytes) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeSemiBoundedBelievedToBeSmall
  zx_status_t DecodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeSemiBoundedMaybeLarge
  zx_status_t DecodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeUnboundedMaybeLargeValue
  zx_status_t DecodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.DecodeUnboundedMaybeLargeResource
  zx_status_t DecodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeBoundedKnownToBeSmall
  zx_status_t EncodeBoundedKnownToBeSmall(::std::vector<uint8_t> bytes, ::std::vector<uint8_t>* out_bytes) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeBoundedMaybeLarge
  zx_status_t EncodeBoundedMaybeLarge(::std::vector<uint8_t> bytes, ::std::vector<uint8_t>* out_bytes) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeSemiBoundedBelievedToBeSmall
  zx_status_t EncodeSemiBoundedBelievedToBeSmall(::test::largemessages::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall, ::test::largemessages::SemiBoundedBelievedToBeSmall* out_SemiBoundedBelievedToBeSmall) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeSemiBoundedMaybeLarge
  zx_status_t EncodeSemiBoundedMaybeLarge(::test::largemessages::SemiBoundedMaybeLarge SemiBoundedMaybeLarge, ::test::largemessages::SemiBoundedMaybeLarge* out_SemiBoundedMaybeLarge) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeUnboundedMaybeLargeValue
  zx_status_t EncodeUnboundedMaybeLargeValue(::std::vector<uint8_t> bytes, ::std::vector<uint8_t>* out_bytes) override;
  // cts-coverage-fidl-name:test.largemessages/Overflowing.EncodeUnboundedMaybeLargeResource
  zx_status_t EncodeUnboundedMaybeLargeResource(::std::array<::test::largemessages::Elements, 64> elements, ::std::array<::test::largemessages::Elements, 64>* out_elements) override;

 private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<Overflowing>;
};

#endif  // __Fuchsia__

}  // namespace largemessages
}  // namespace test
