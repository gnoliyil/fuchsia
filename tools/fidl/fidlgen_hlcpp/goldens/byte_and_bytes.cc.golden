// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#include <test/byteandbytes/cpp/fidl.h>

#include "lib/fidl/cpp/internal/implementation.h"

//
// Domain objects definitions
//
namespace test {
namespace byteandbytes {

extern "C" const fidl_type_t test_byteandbytes_ByteAndBytesTable;
const fidl_type_t* ByteAndBytes::FidlType = &test_byteandbytes_ByteAndBytesTable;

void ByteAndBytes::Encode(::fidl::Encoder* _encoder, size_t _offset,
                          cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  if (::fidl::IsMemcpyCompatible<ByteAndBytes>::value) {
    memcpy(_encoder->template GetPtr<ByteAndBytes>(_offset), this, sizeof(ByteAndBytes));
  } else {
    ::fidl::Encode(_encoder, &single_byte, _offset + 0);
  }
}

void ByteAndBytes::Decode(::fidl::Decoder* _decoder, ByteAndBytes* _value, size_t _offset) {
  if (::fidl::IsMemcpyCompatible<ByteAndBytes>::value) {
    memcpy(_value, _decoder->template GetPtr<ByteAndBytes>(_offset), sizeof(ByteAndBytes));
  } else {
    ::fidl::Decode(_decoder, &_value->single_byte, _offset + 0);
  }
}

zx_status_t ByteAndBytes::Clone(ByteAndBytes* _result) const {
  zx_status_t _status = ::fidl::Clone(single_byte, &_result->single_byte);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}

//
// Proxies and stubs definitions
//

}  // namespace byteandbytes
}  // namespace test
