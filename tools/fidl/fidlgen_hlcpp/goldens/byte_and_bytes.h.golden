// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include "lib/fidl/cpp/internal/header.h"

namespace test {
namespace byteandbytes {

//
// Domain objects declarations
//

class ByteAndBytes;

class ByteAndBytes final {
 public:
  static const fidl_type_t* FidlType;

  uint8_t single_byte{};

  static inline ::std::unique_ptr<ByteAndBytes> New() { return ::std::make_unique<ByteAndBytes>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info = cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, ByteAndBytes* value, size_t _offset);
  zx_status_t Clone(ByteAndBytes* result) const;
};

inline zx_status_t Clone(const ::test::byteandbytes::ByteAndBytes& _value,
                         ::test::byteandbytes::ByteAndBytes* _result) {
  return _value.Clone(_result);
}

using ByteAndBytesPtr = ::std::unique_ptr<ByteAndBytes>;

}  // namespace byteandbytes
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::byteandbytes::ByteAndBytes>
    : public EncodableCodingTraits<::test::byteandbytes::ByteAndBytes, 1> {};

template <>
struct IsMemcpyCompatible<::test::byteandbytes::ByteAndBytes> : public internal::BoolConstant<
                                                                    !HasPadding<::test::byteandbytes::ByteAndBytes>::value && IsMemcpyCompatible<uint8_t>::value> {};

inline zx_status_t Clone(const ::test::byteandbytes::ByteAndBytes& value,
                         ::test::byteandbytes::ByteAndBytes* result) {
  return ::test::byteandbytes::Clone(value, result);
}

template <>
struct Equality<::test::byteandbytes::ByteAndBytes> {
  bool operator()(const ::test::byteandbytes::ByteAndBytes& _lhs, const ::test::byteandbytes::ByteAndBytes& _rhs) const {
    if (!::fidl::Equals(_lhs.single_byte, _rhs.single_byte)) {
      return false;
    }
    return true;
  }
};

//
// Proxies and stubs declarations
//
}  // namespace fidl
