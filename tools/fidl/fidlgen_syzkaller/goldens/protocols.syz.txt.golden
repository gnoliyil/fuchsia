# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

# fidl_experiment = no_optional_structs
# fidl_experiment = output_index_json
# fidl_experiment = simple_empty_response_syntax
# fidl_experiment = unknown_interactions
# fidl_experiment = unknown_interactions_mandate

include <test/protocols/c/fidl.h>
test_protocols_ErrorEnum = test_protocols_ErrorEnum_ERR_FOO, test_protocols_ErrorEnum_ERR_BAR
test_protocols_ProtocolEndsInLine {
    client flags[fidl_handle_presence, int32]
    server flags[fidl_handle_presence, int32]
    client_opt flags[fidl_handle_presence, int32]
    server_opt flags[fidl_handle_presence, int32]
} [packed]
test_protocols_ProtocolEndsOutOfLine {
    void void
} [packed]
test_protocols_ProtocolEndsHandles {
    client zx_chan_test_protocols_DiscoverableProtocol_client
    server zx_chan_test_protocols_DiscoverableProtocol_server
    client_opt zx_chan_test_protocols_DiscoverableProtocol_client
    server_opt zx_chan_test_protocols_DiscoverableProtocol_server
} [packed]
test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseInLine {
    padding int8
} [packed]
test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseOutOfLine {
    void void
} [packed]
test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseHandles {
    void void
} [packed]
test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseInLine {
    padding int8
} [packed]
test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseOutOfLine {
    void void
} [packed]
test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseHandles {
    void void
} [packed]
test_protocols_WithErrorSyntax_HandleInResult_ResponseInLine {
    h flags[fidl_handle_presence, int32]
} [packed]
test_protocols_WithErrorSyntax_HandleInResult_ResponseOutOfLine {
    void void
} [packed]
test_protocols_WithErrorSyntax_HandleInResult_ResponseHandles {
    h zx_handle
} [packed]
test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseInLine {
    a int64
    b int64
    c int64
} [packed]
test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseOutOfLine {
    void void
} [packed]
test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseHandles {
    void void
} [packed]
test_protocols_TheUnionInLine [
    v fidl_union_member[1, int32]
]
test_protocols_TheUnionOutOfLine [
    void void
][varlen]
test_protocols_TheUnionHandles [
    void void
][varlen]
test_protocols_WithErrorSyntax_ErrorAsEnum_ResultInLine [
    responseInLine fidl_union_member[1, test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseInLine]
    err fidl_union_member[2, flags[test_protocols_ErrorEnum, int32]]
]
test_protocols_WithErrorSyntax_ErrorAsEnum_ResultOutOfLine [
    responseOutOfLine test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseOutOfLine
][varlen]
test_protocols_WithErrorSyntax_ErrorAsEnum_ResultHandles [
    response test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseHandles
][varlen]
test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultInLine [
    responseInLine fidl_union_member[1, test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseInLine]
    err fidl_union_member[2, int32]
]
test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultOutOfLine [
    responseOutOfLine test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseOutOfLine
][varlen]
test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultHandles [
    response test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseHandles
][varlen]
test_protocols_WithErrorSyntax_HandleInResult_ResultInLine [
    responseInLine fidl_union_member[1, test_protocols_WithErrorSyntax_HandleInResult_ResponseInLine]
    err fidl_union_member[2, int32]
]
test_protocols_WithErrorSyntax_HandleInResult_ResultOutOfLine [
    responseOutOfLine test_protocols_WithErrorSyntax_HandleInResult_ResponseOutOfLine
][varlen]
test_protocols_WithErrorSyntax_HandleInResult_ResultHandles [
    response test_protocols_WithErrorSyntax_HandleInResult_ResponseHandles
][varlen]
test_protocols_WithErrorSyntax_ResponseAsStruct_ResultInLine [
    responseInLine fidl_union_member[1, test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseInLine]
    err fidl_union_member[2, int32]
]
test_protocols_WithErrorSyntax_ResponseAsStruct_ResultOutOfLine [
    responseOutOfLine test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseOutOfLine
][varlen]
test_protocols_WithErrorSyntax_ResponseAsStruct_ResultHandles [
    response test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseHandles
][varlen]



resource zx_chan_test_protocols_AnotherDiscoverableProtocol_client[zx_chan]
resource zx_chan_test_protocols_AnotherDiscoverableProtocol_server[zx_chan]

zx_channel_create$test_protocols_AnotherDiscoverableProtocol(options const[0], out0 ptr[out, zx_chan_test_protocols_AnotherDiscoverableProtocol_client], out1 ptr[out, zx_chan_test_protocols_AnotherDiscoverableProtocol_server])
fdio_service_connect$test_protocols_AnotherDiscoverableProtocol(path ptr[in, string["/svc/fake.library.FakeProtocol"]], handle zx_chan_test_protocols_AnotherDiscoverableProtocol_server)


test_protocols_ChannelProtocolMethodARequest {
    hdr fidl_message_header[3155008840945527714]
    a int64
    b int64
} [packed]
test_protocols_ChannelProtocolMethodARequestHandles {
    void void
} [packed]
test_protocols_ChannelProtocolEventAEvent {
    hdr fidl_message_header[2220452875311597006]
    a int64
    b int64
} [packed]
test_protocols_ChannelProtocolEventAEventHandles {
    void void
} [packed]
test_protocols_ChannelProtocolMethodBRequest {
    hdr fidl_message_header[8903004957800778182]
    a int64
    b int64
} [packed]
test_protocols_ChannelProtocolMethodBRequestHandles {
    void void
} [packed]
test_protocols_ChannelProtocolMethodBResponse {
    hdr fidl_message_header[8903004957800778182]
    result int64
} [packed]
test_protocols_ChannelProtocolMethodBResponseHandles {
    void void
} [packed]
test_protocols_ChannelProtocolTakeHandleRequest {
    hdr fidl_message_header[591935489944717925]
    h flags[fidl_handle_presence, int32]
} [packed]
test_protocols_ChannelProtocolTakeHandleRequestHandles {
    h zx_handle
} [packed]
test_protocols_ChannelProtocolTakeHandleResponse {
    hdr fidl_message_header[591935489944717925]
} [packed]
test_protocols_ChannelProtocolTakeHandleResponseHandles {
    void void
} [packed]
test_protocols_ChannelProtocolMutateSocketRequest {
    hdr fidl_message_header[7411742788430590287]
    a flags[fidl_handle_presence, int32]
} [packed]
test_protocols_ChannelProtocolMutateSocketRequestHandles {
    a zx_socket
} [packed]
test_protocols_ChannelProtocolMutateSocketResponse {
    hdr fidl_message_header[7411742788430590287]
    b flags[fidl_handle_presence, int32]
} [packed]
test_protocols_ChannelProtocolMutateSocketResponseHandles {
    b zx_socket
} [packed]

resource zx_chan_test_protocols_ChannelProtocol_client[zx_chan]
resource zx_chan_test_protocols_ChannelProtocol_server[zx_chan]

zx_channel_create$test_protocols_ChannelProtocol(options const[0], out0 ptr[out, zx_chan_test_protocols_ChannelProtocol_client], out1 ptr[out, zx_chan_test_protocols_ChannelProtocol_server])
fdio_service_connect$test_protocols_ChannelProtocol(path ptr[in, string["/svc/"]], handle zx_chan_test_protocols_ChannelProtocol_server)
zx_channel_write$test_protocols_ChannelProtocolMethodA(handle zx_chan_test_protocols_ChannelProtocol_client, options const[0], bytes ptr[in, test_protocols_ChannelProtocolMethodARequest], num_bytes bytesize[bytes], handles ptr[in, test_protocols_ChannelProtocolMethodARequestHandles], num_handles bytesize[handles])
zx_channel_read$test_protocols_ChannelProtocolEventA(handle zx_chan_test_protocols_ChannelProtocol_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_protocols_ChannelProtocolEventAEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_ChannelProtocolMethodB(handle zx_chan_test_protocols_ChannelProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_ChannelProtocolMethodBRequest, test_protocols_ChannelProtocolMethodBRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_ChannelProtocolMethodBResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_ChannelProtocolTakeHandle(handle zx_chan_test_protocols_ChannelProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_ChannelProtocolTakeHandleRequest, test_protocols_ChannelProtocolTakeHandleRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_ChannelProtocolTakeHandleResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_ChannelProtocolMutateSocket(handle zx_chan_test_protocols_ChannelProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_ChannelProtocolMutateSocketRequest, test_protocols_ChannelProtocolMutateSocketRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_ChannelProtocolMutateSocketResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])


test_protocols_DiscoverableProtocolMethodRequest {
    hdr fidl_message_header[3455873048082739435]
} [packed]
test_protocols_DiscoverableProtocolMethodRequestHandles {
    void void
} [packed]

resource zx_chan_test_protocols_DiscoverableProtocol_client[zx_chan]
resource zx_chan_test_protocols_DiscoverableProtocol_server[zx_chan]

zx_channel_create$test_protocols_DiscoverableProtocol(options const[0], out0 ptr[out, zx_chan_test_protocols_DiscoverableProtocol_client], out1 ptr[out, zx_chan_test_protocols_DiscoverableProtocol_server])
fdio_service_connect$test_protocols_DiscoverableProtocol(path ptr[in, string["/svc/test.protocols.DiscoverableProtocol"]], handle zx_chan_test_protocols_DiscoverableProtocol_server)
zx_channel_write$test_protocols_DiscoverableProtocolMethod(handle zx_chan_test_protocols_DiscoverableProtocol_client, options const[0], bytes ptr[in, test_protocols_DiscoverableProtocolMethodRequest], num_bytes bytesize[bytes], handles ptr[in, test_protocols_DiscoverableProtocolMethodRequestHandles], num_handles bytesize[handles])


test_protocols_HandleRightsProtocolNoResponseMethodRequest {
    hdr fidl_message_header[1155044649514904573]
    h flags[fidl_handle_presence, int32]
} [packed]
test_protocols_HandleRightsProtocolNoResponseMethodRequestHandles {
    h zx_socket
} [packed]
test_protocols_HandleRightsProtocolResponseMethodRequest {
    hdr fidl_message_header[5956276128041940295]
    h flags[fidl_handle_presence, int32]
} [packed]
test_protocols_HandleRightsProtocolResponseMethodRequestHandles {
    h zx_socket
} [packed]
test_protocols_HandleRightsProtocolResponseMethodResponse {
    hdr fidl_message_header[5956276128041940295]
    h flags[fidl_handle_presence, int32]
} [packed]
test_protocols_HandleRightsProtocolResponseMethodResponseHandles {
    h zx_socket
} [packed]
test_protocols_HandleRightsProtocolAnEventEvent {
    hdr fidl_message_header[476727631355490611]
    h flags[fidl_handle_presence, int32]
} [packed]
test_protocols_HandleRightsProtocolAnEventEventHandles {
    h zx_socket
} [packed]

resource zx_chan_test_protocols_HandleRightsProtocol_client[zx_chan]
resource zx_chan_test_protocols_HandleRightsProtocol_server[zx_chan]

zx_channel_create$test_protocols_HandleRightsProtocol(options const[0], out0 ptr[out, zx_chan_test_protocols_HandleRightsProtocol_client], out1 ptr[out, zx_chan_test_protocols_HandleRightsProtocol_server])
fdio_service_connect$test_protocols_HandleRightsProtocol(path ptr[in, string["/svc/"]], handle zx_chan_test_protocols_HandleRightsProtocol_server)
zx_channel_write$test_protocols_HandleRightsProtocolNoResponseMethod(handle zx_chan_test_protocols_HandleRightsProtocol_client, options const[0], bytes ptr[in, test_protocols_HandleRightsProtocolNoResponseMethodRequest], num_bytes bytesize[bytes], handles ptr[in, test_protocols_HandleRightsProtocolNoResponseMethodRequestHandles], num_handles bytesize[handles])
zx_channel_call$test_protocols_HandleRightsProtocolResponseMethod(handle zx_chan_test_protocols_HandleRightsProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_HandleRightsProtocolResponseMethodRequest, test_protocols_HandleRightsProtocolResponseMethodRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_HandleRightsProtocolResponseMethodResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_read$test_protocols_HandleRightsProtocolAnEvent(handle zx_chan_test_protocols_HandleRightsProtocol_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_protocols_HandleRightsProtocolAnEventEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])


test_protocols_ManyParametersFifteenRequest {
    hdr fidl_message_header[6423043252952467815]
    p1 int8
    p2 int8
    p3 int8
    p4 int8
    p5 int8
    p6 int8
    p7 int8
    p8 int8
    p9 int8
    p10 int8
    p11 int8
    p12 int8
    p13 int8
    p14 int8
    p15 int8
} [packed]
test_protocols_ManyParametersFifteenRequestHandles {
    void void
} [packed]

resource zx_chan_test_protocols_ManyParameters_client[zx_chan]
resource zx_chan_test_protocols_ManyParameters_server[zx_chan]

zx_channel_create$test_protocols_ManyParameters(options const[0], out0 ptr[out, zx_chan_test_protocols_ManyParameters_client], out1 ptr[out, zx_chan_test_protocols_ManyParameters_server])
fdio_service_connect$test_protocols_ManyParameters(path ptr[in, string["/svc/"]], handle zx_chan_test_protocols_ManyParameters_server)
zx_channel_write$test_protocols_ManyParametersFifteen(handle zx_chan_test_protocols_ManyParameters_client, options const[0], bytes ptr[in, test_protocols_ManyParametersFifteenRequest], num_bytes bytesize[bytes], handles ptr[in, test_protocols_ManyParametersFifteenRequestHandles], num_handles bytesize[handles])


test_protocols_MethodWithUnionUnionMethodRequest {
    hdr fidl_message_header[4124874338266649112]
    uInLine test_protocols_TheUnionInLine
} [packed]
test_protocols_MethodWithUnionUnionMethodRequestHandles {
    void void
} [packed]
test_protocols_MethodWithUnionUnionMethodResponse {
    hdr fidl_message_header[4124874338266649112]
    uInLine test_protocols_TheUnionInLine
} [packed]
test_protocols_MethodWithUnionUnionMethodResponseHandles {
    void void
} [packed]

resource zx_chan_test_protocols_MethodWithUnion_client[zx_chan]
resource zx_chan_test_protocols_MethodWithUnion_server[zx_chan]

zx_channel_create$test_protocols_MethodWithUnion(options const[0], out0 ptr[out, zx_chan_test_protocols_MethodWithUnion_client], out1 ptr[out, zx_chan_test_protocols_MethodWithUnion_server])
fdio_service_connect$test_protocols_MethodWithUnion(path ptr[in, string["/svc/"]], handle zx_chan_test_protocols_MethodWithUnion_server)
zx_channel_call$test_protocols_MethodWithUnionUnionMethod(handle zx_chan_test_protocols_MethodWithUnion_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_MethodWithUnionUnionMethodRequest, test_protocols_MethodWithUnionUnionMethodRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_MethodWithUnionUnionMethodResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])


test_protocols_SyscallProtocolMethodCRequest {
    hdr fidl_message_header[1468025868259603279]
    a int64
    b int64
} [packed]
test_protocols_SyscallProtocolMethodCRequestHandles {
    void void
} [packed]

resource zx_chan_test_protocols_SyscallProtocol_client[zx_chan]
resource zx_chan_test_protocols_SyscallProtocol_server[zx_chan]

zx_channel_create$test_protocols_SyscallProtocol(options const[0], out0 ptr[out, zx_chan_test_protocols_SyscallProtocol_client], out1 ptr[out, zx_chan_test_protocols_SyscallProtocol_server])
fdio_service_connect$test_protocols_SyscallProtocol(path ptr[in, string["/svc/"]], handle zx_chan_test_protocols_SyscallProtocol_server)
zx_channel_write$test_protocols_SyscallProtocolMethodC(handle zx_chan_test_protocols_SyscallProtocol_client, options const[0], bytes ptr[in, test_protocols_SyscallProtocolMethodCRequest], num_bytes bytesize[bytes], handles ptr[in, test_protocols_SyscallProtocolMethodCRequestHandles], num_handles bytesize[handles])


test_protocols_TransitionalRequestRequest {
    hdr fidl_message_header[5849263021838298888]
    x int64
} [packed]
test_protocols_TransitionalRequestRequestHandles {
    void void
} [packed]
test_protocols_TransitionalRequestResponse {
    hdr fidl_message_header[5849263021838298888]
    y int64
} [packed]
test_protocols_TransitionalRequestResponseHandles {
    void void
} [packed]
test_protocols_TransitionalOneWayRequest {
    hdr fidl_message_header[4336658926562441191]
    x int64
} [packed]
test_protocols_TransitionalOneWayRequestHandles {
    void void
} [packed]
test_protocols_TransitionalEventEvent {
    hdr fidl_message_header[8507647465196374081]
    x int64
} [packed]
test_protocols_TransitionalEventEventHandles {
    void void
} [packed]

resource zx_chan_test_protocols_Transitional_client[zx_chan]
resource zx_chan_test_protocols_Transitional_server[zx_chan]

zx_channel_create$test_protocols_Transitional(options const[0], out0 ptr[out, zx_chan_test_protocols_Transitional_client], out1 ptr[out, zx_chan_test_protocols_Transitional_server])
fdio_service_connect$test_protocols_Transitional(path ptr[in, string["/svc/"]], handle zx_chan_test_protocols_Transitional_server)
zx_channel_call$test_protocols_TransitionalRequest(handle zx_chan_test_protocols_Transitional_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_TransitionalRequestRequest, test_protocols_TransitionalRequestRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_TransitionalRequestResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$test_protocols_TransitionalOneWay(handle zx_chan_test_protocols_Transitional_client, options const[0], bytes ptr[in, test_protocols_TransitionalOneWayRequest], num_bytes bytesize[bytes], handles ptr[in, test_protocols_TransitionalOneWayRequestHandles], num_handles bytesize[handles])
zx_channel_read$test_protocols_TransitionalEvent(handle zx_chan_test_protocols_Transitional_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_protocols_TransitionalEventEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])


test_protocols_WithAndWithoutRequestResponseNoRequestNoResponseRequest {
    hdr fidl_message_header[5413654872775949227]
} [packed]
test_protocols_WithAndWithoutRequestResponseNoRequestNoResponseRequestHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponseRequest {
    hdr fidl_message_header[1631193469798418024]
} [packed]
test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponseRequestHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponseResponse {
    hdr fidl_message_header[1631193469798418024]
} [packed]
test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponseResponseHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseRequest {
    hdr fidl_message_header[9037369643591427517]
} [packed]
test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseRequestHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseResponse {
    hdr fidl_message_header[9037369643591427517]
    retInLine fidl_string
    retOutOfLine fidl_aligned[stringnoz]
} [packed]
test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseResponseHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestNoResponseRequest {
    hdr fidl_message_header[7326057319832554103]
    argInLine fidl_string
    argOutOfLine fidl_aligned[stringnoz]
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestNoResponseRequestHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseRequest {
    hdr fidl_message_header[2877322062572412767]
    argInLine fidl_string
    argOutOfLine fidl_aligned[stringnoz]
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseResponse {
    hdr fidl_message_header[2877322062572412767]
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseResponseHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseRequest {
    hdr fidl_message_header[6417226585456833969]
    argInLine fidl_string
    argOutOfLine fidl_aligned[stringnoz]
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseRequestHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseResponse {
    hdr fidl_message_header[6417226585456833969]
    retInLine fidl_string
    retOutOfLine fidl_aligned[stringnoz]
} [packed]
test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseResponseHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseOnEmptyResponseEvent {
    hdr fidl_message_header[5397663296507358806]
} [packed]
test_protocols_WithAndWithoutRequestResponseOnEmptyResponseEventHandles {
    void void
} [packed]
test_protocols_WithAndWithoutRequestResponseOnWithResponseEvent {
    hdr fidl_message_header[5811598563493228968]
    retInLine fidl_string
    retOutOfLine fidl_aligned[stringnoz]
} [packed]
test_protocols_WithAndWithoutRequestResponseOnWithResponseEventHandles {
    void void
} [packed]

resource zx_chan_test_protocols_WithAndWithoutRequestResponse_client[zx_chan]
resource zx_chan_test_protocols_WithAndWithoutRequestResponse_server[zx_chan]

zx_channel_create$test_protocols_WithAndWithoutRequestResponse(options const[0], out0 ptr[out, zx_chan_test_protocols_WithAndWithoutRequestResponse_client], out1 ptr[out, zx_chan_test_protocols_WithAndWithoutRequestResponse_server])
fdio_service_connect$test_protocols_WithAndWithoutRequestResponse(path ptr[in, string["/svc/"]], handle zx_chan_test_protocols_WithAndWithoutRequestResponse_server)
zx_channel_write$test_protocols_WithAndWithoutRequestResponseNoRequestNoResponse(handle zx_chan_test_protocols_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[in, test_protocols_WithAndWithoutRequestResponseNoRequestNoResponseRequest], num_bytes bytesize[bytes], handles ptr[in, test_protocols_WithAndWithoutRequestResponseNoRequestNoResponseRequestHandles], num_handles bytesize[handles])
zx_channel_call$test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponse(handle zx_chan_test_protocols_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponseRequest, test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_WithAndWithoutRequestResponseNoRequestWithResponse(handle zx_chan_test_protocols_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseRequest, test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$test_protocols_WithAndWithoutRequestResponseWithRequestNoResponse(handle zx_chan_test_protocols_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[in, test_protocols_WithAndWithoutRequestResponseWithRequestNoResponseRequest], num_bytes bytesize[bytes], handles ptr[in, test_protocols_WithAndWithoutRequestResponseWithRequestNoResponseRequestHandles], num_handles bytesize[handles])
zx_channel_call$test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponse(handle zx_chan_test_protocols_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseRequest, test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_WithAndWithoutRequestResponseWithRequestWithResponse(handle zx_chan_test_protocols_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseRequest, test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_read$test_protocols_WithAndWithoutRequestResponseOnEmptyResponse(handle zx_chan_test_protocols_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_protocols_WithAndWithoutRequestResponseOnEmptyResponseEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_read$test_protocols_WithAndWithoutRequestResponseOnWithResponse(handle zx_chan_test_protocols_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_protocols_WithAndWithoutRequestResponseOnWithResponseEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])


test_protocols_WithErrorSyntaxResponseAsStructRequest {
    hdr fidl_message_header[268248568430741139]
} [packed]
test_protocols_WithErrorSyntaxResponseAsStructRequestHandles {
    void void
} [packed]
test_protocols_WithErrorSyntaxResponseAsStructResponse {
    hdr fidl_message_header[268248568430741139]
    resultInLine test_protocols_WithErrorSyntax_ResponseAsStruct_ResultInLine
    resultOutOfLine test_protocols_WithErrorSyntax_ResponseAsStruct_ResultOutOfLine
} [packed]
test_protocols_WithErrorSyntaxResponseAsStructResponseHandles {
    result test_protocols_WithErrorSyntax_ResponseAsStruct_ResultHandles
} [packed]
test_protocols_WithErrorSyntaxErrorAsPrimitiveRequest {
    hdr fidl_message_header[6930994461233198567]
} [packed]
test_protocols_WithErrorSyntaxErrorAsPrimitiveRequestHandles {
    void void
} [packed]
test_protocols_WithErrorSyntaxErrorAsPrimitiveResponse {
    hdr fidl_message_header[6930994461233198567]
    resultInLine test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultInLine
    resultOutOfLine test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultOutOfLine
} [packed]
test_protocols_WithErrorSyntaxErrorAsPrimitiveResponseHandles {
    result test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultHandles
} [packed]
test_protocols_WithErrorSyntaxErrorAsEnumRequest {
    hdr fidl_message_header[5491891352371277635]
} [packed]
test_protocols_WithErrorSyntaxErrorAsEnumRequestHandles {
    void void
} [packed]
test_protocols_WithErrorSyntaxErrorAsEnumResponse {
    hdr fidl_message_header[5491891352371277635]
    resultInLine test_protocols_WithErrorSyntax_ErrorAsEnum_ResultInLine
    resultOutOfLine test_protocols_WithErrorSyntax_ErrorAsEnum_ResultOutOfLine
} [packed]
test_protocols_WithErrorSyntaxErrorAsEnumResponseHandles {
    result test_protocols_WithErrorSyntax_ErrorAsEnum_ResultHandles
} [packed]
test_protocols_WithErrorSyntaxHandleInResultRequest {
    hdr fidl_message_header[1371676333068455103]
} [packed]
test_protocols_WithErrorSyntaxHandleInResultRequestHandles {
    void void
} [packed]
test_protocols_WithErrorSyntaxHandleInResultResponse {
    hdr fidl_message_header[1371676333068455103]
    resultInLine test_protocols_WithErrorSyntax_HandleInResult_ResultInLine
    resultOutOfLine test_protocols_WithErrorSyntax_HandleInResult_ResultOutOfLine
} [packed]
test_protocols_WithErrorSyntaxHandleInResultResponseHandles {
    result test_protocols_WithErrorSyntax_HandleInResult_ResultHandles
} [packed]

resource zx_chan_test_protocols_WithErrorSyntax_client[zx_chan]
resource zx_chan_test_protocols_WithErrorSyntax_server[zx_chan]

zx_channel_create$test_protocols_WithErrorSyntax(options const[0], out0 ptr[out, zx_chan_test_protocols_WithErrorSyntax_client], out1 ptr[out, zx_chan_test_protocols_WithErrorSyntax_server])
fdio_service_connect$test_protocols_WithErrorSyntax(path ptr[in, string["/svc/"]], handle zx_chan_test_protocols_WithErrorSyntax_server)
zx_channel_call$test_protocols_WithErrorSyntaxResponseAsStruct(handle zx_chan_test_protocols_WithErrorSyntax_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithErrorSyntaxResponseAsStructRequest, test_protocols_WithErrorSyntaxResponseAsStructRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithErrorSyntaxResponseAsStructResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_WithErrorSyntaxErrorAsPrimitive(handle zx_chan_test_protocols_WithErrorSyntax_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithErrorSyntaxErrorAsPrimitiveRequest, test_protocols_WithErrorSyntaxErrorAsPrimitiveRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithErrorSyntaxErrorAsPrimitiveResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_WithErrorSyntaxErrorAsEnum(handle zx_chan_test_protocols_WithErrorSyntax_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithErrorSyntaxErrorAsEnumRequest, test_protocols_WithErrorSyntaxErrorAsEnumRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithErrorSyntaxErrorAsEnumResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_WithErrorSyntaxHandleInResult(handle zx_chan_test_protocols_WithErrorSyntax_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithErrorSyntaxHandleInResultRequest, test_protocols_WithErrorSyntaxHandleInResultRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithErrorSyntaxHandleInResultResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])


test_protocols_WithProtocolEndsClientEndsRequest {
    hdr fidl_message_header[5870448041025163330]
    in_ flags[fidl_handle_presence, int32]
} [packed]
test_protocols_WithProtocolEndsClientEndsRequestHandles {
    in_ zx_chan_test_protocols_DiscoverableProtocol_client
} [packed]
test_protocols_WithProtocolEndsClientEndsResponse {
    hdr fidl_message_header[5870448041025163330]
    out_ flags[fidl_handle_presence, int32]
} [packed]
test_protocols_WithProtocolEndsClientEndsResponseHandles {
    out_ zx_chan_test_protocols_DiscoverableProtocol_client
} [packed]
test_protocols_WithProtocolEndsServerEndsRequest {
    hdr fidl_message_header[8115535094437022259]
    in_ flags[fidl_handle_presence, int32]
} [packed]
test_protocols_WithProtocolEndsServerEndsRequestHandles {
    in_ zx_chan_test_protocols_DiscoverableProtocol_server
} [packed]
test_protocols_WithProtocolEndsServerEndsResponse {
    hdr fidl_message_header[8115535094437022259]
    out_ flags[fidl_handle_presence, int32]
} [packed]
test_protocols_WithProtocolEndsServerEndsResponseHandles {
    out_ zx_chan_test_protocols_DiscoverableProtocol_server
} [packed]
test_protocols_WithProtocolEndsStructContainingEndsRequest {
    hdr fidl_message_header[4076866772260025813]
    inInLine test_protocols_ProtocolEndsInLine
    inOutOfLine test_protocols_ProtocolEndsOutOfLine
} [packed]
test_protocols_WithProtocolEndsStructContainingEndsRequestHandles {
    in_ test_protocols_ProtocolEndsHandles
} [packed]
test_protocols_WithProtocolEndsStructContainingEndsResponse {
    hdr fidl_message_header[4076866772260025813]
    outInLine test_protocols_ProtocolEndsInLine
    outOutOfLine test_protocols_ProtocolEndsOutOfLine
} [packed]
test_protocols_WithProtocolEndsStructContainingEndsResponseHandles {
    out_ test_protocols_ProtocolEndsHandles
} [packed]

resource zx_chan_test_protocols_WithProtocolEnds_client[zx_chan]
resource zx_chan_test_protocols_WithProtocolEnds_server[zx_chan]

zx_channel_create$test_protocols_WithProtocolEnds(options const[0], out0 ptr[out, zx_chan_test_protocols_WithProtocolEnds_client], out1 ptr[out, zx_chan_test_protocols_WithProtocolEnds_server])
fdio_service_connect$test_protocols_WithProtocolEnds(path ptr[in, string["/svc/"]], handle zx_chan_test_protocols_WithProtocolEnds_server)
zx_channel_call$test_protocols_WithProtocolEndsClientEnds(handle zx_chan_test_protocols_WithProtocolEnds_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithProtocolEndsClientEndsRequest, test_protocols_WithProtocolEndsClientEndsRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithProtocolEndsClientEndsResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_WithProtocolEndsServerEnds(handle zx_chan_test_protocols_WithProtocolEnds_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithProtocolEndsServerEndsRequest, test_protocols_WithProtocolEndsServerEndsRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithProtocolEndsServerEndsResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_protocols_WithProtocolEndsStructContainingEnds(handle zx_chan_test_protocols_WithProtocolEnds_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_protocols_WithProtocolEndsStructContainingEndsRequest, test_protocols_WithProtocolEndsStructContainingEndsRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_protocols_WithProtocolEndsStructContainingEndsResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

