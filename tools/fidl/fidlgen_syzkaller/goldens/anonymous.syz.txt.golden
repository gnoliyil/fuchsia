# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

# fidl_experiment = no_optional_structs
# fidl_experiment = output_index_json
# fidl_experiment = simple_empty_response_syntax
# fidl_experiment = unknown_interactions

include <test/anonymous/c/fidl.h>
test_anonymous_Op = test_anonymous_Op_ADD, test_anonymous_Op_MUL, test_anonymous_Op_DIV, test_anonymous_Op__UNKNOWN
test_anonymous_SomeProtocol_SomeMethod_Error = test_anonymous_SomeProtocol_SomeMethod_Error_ERROR_ONE, test_anonymous_SomeProtocol_SomeMethod_Error_ERROR_TWO, test_anonymous_SomeProtocol_SomeMethod_Error__UNKNOWN
test_anonymous_BitsMember = test_anonymous_BitsMember_BIT_ONE, test_anonymous_BitsMember_BIT_TWO, test_anonymous_BitsMember__UNKNOWN
test_anonymous_Flags = test_anonymous_Flags_INLINE, test_anonymous_Flags__UNKNOWN
test_anonymous_OverrideTestInLine {
    op flags[test_anonymous_Op, int32]
    leftInLine test_anonymous_ExpressionInLine
    rightInLine test_anonymous_ExpressionInLine
} [packed]
test_anonymous_OverrideTestOutOfLine {
    void void
} [packed]
test_anonymous_OverrideTestHandles {
    void void
} [packed]
test_anonymous_SomeProtocol_SomeMethod_ResponseInLine {
    bits_member flags[test_anonymous_BitsMember, int32]
} [packed]
test_anonymous_SomeProtocol_SomeMethod_ResponseOutOfLine {
    void void
} [packed]
test_anonymous_SomeProtocol_SomeMethod_ResponseHandles {
    void void
} [packed]
test_anonymous_TableDataInLine {
    data int8
} [packed]
test_anonymous_TableDataOutOfLine {
    void void
} [packed]
test_anonymous_TableDataHandles {
    void void
} [packed]
test_anonymous_ExpressionInLine [
    value fidl_union_member[1, int64]
    bin_opInLine fidl_union_member[2, test_anonymous_OverrideTestInLine]
     fidl_union_member[3, ]
]
test_anonymous_ExpressionOutOfLine [
    bin_opOutOfLine test_anonymous_OverrideTestOutOfLine
][varlen]
test_anonymous_ExpressionHandles [
    bin_op test_anonymous_OverrideTestHandles
][varlen]
test_anonymous_SomeProtocol_SomeMethod_ResultInLine [
    responseInLine fidl_union_member[1, test_anonymous_SomeProtocol_SomeMethod_ResponseInLine]
    err fidl_union_member[2, flags[test_anonymous_SomeProtocol_SomeMethod_Error, int32]]
]
test_anonymous_SomeProtocol_SomeMethod_ResultOutOfLine [
    responseOutOfLine test_anonymous_SomeProtocol_SomeMethod_ResponseOutOfLine
][varlen]
test_anonymous_SomeProtocol_SomeMethod_ResultHandles [
    response test_anonymous_SomeProtocol_SomeMethod_ResponseHandles
][varlen]
test_anonymous_UnionMemberInLine [
    union_data fidl_union_member[2, int8]
]
test_anonymous_UnionMemberOutOfLine [
    void void
][varlen]
test_anonymous_UnionMemberHandles [
    void void
][varlen]


test_anonymous_SomeProtocolSomeMethodRequest {
    hdr fidl_message_header[2515914517457749720]
    union_memberInLine test_anonymous_UnionMemberInLine
     
} [packed]
test_anonymous_SomeProtocolSomeMethodRequestHandles {
    void void
} [packed]
test_anonymous_SomeProtocolSomeMethodResponse {
    hdr fidl_message_header[2515914517457749720]
    resultInLine test_anonymous_SomeProtocol_SomeMethod_ResultInLine
    resultOutOfLine test_anonymous_SomeProtocol_SomeMethod_ResultOutOfLine
} [packed]
test_anonymous_SomeProtocolSomeMethodResponseHandles {
    result test_anonymous_SomeProtocol_SomeMethod_ResultHandles
} [packed]

resource zx_chan_test_anonymous_SomeProtocol_client[zx_chan]
resource zx_chan_test_anonymous_SomeProtocol_server[zx_chan]

zx_channel_create$test_anonymous_SomeProtocol(options const[0], out0 ptr[out, zx_chan_test_anonymous_SomeProtocol_client], out1 ptr[out, zx_chan_test_anonymous_SomeProtocol_server])
fdio_service_connect$test_anonymous_SomeProtocol(path ptr[in, string["/svc/"]], handle zx_chan_test_anonymous_SomeProtocol_server)
zx_channel_call$test_anonymous_SomeProtocolSomeMethod(handle zx_chan_test_anonymous_SomeProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_anonymous_SomeProtocolSomeMethodRequest, test_anonymous_SomeProtocolSomeMethodRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_anonymous_SomeProtocolSomeMethodResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

