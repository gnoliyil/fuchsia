# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

# fidl_experiment = no_optional_structs
# fidl_experiment = output_index_json
# fidl_experiment = simple_empty_response_syntax
# fidl_experiment = unknown_interactions
# fidl_experiment = unknown_interactions_mandate

include <test/nullable/c/fidl.h>
test_nullable_Int32WrapperInLine {
    val int32
} [packed]
test_nullable_Int32WrapperOutOfLine {
    void void
} [packed]
test_nullable_Int32WrapperHandles {
    void void
} [packed]
test_nullable_StructWithNullableHandleInLine {
    val flags[fidl_handle_presence, int32]
} [packed]
test_nullable_StructWithNullableHandleOutOfLine {
    void void
} [packed]
test_nullable_StructWithNullableHandleHandles {
    val zx_vmo
} [packed]
test_nullable_StructWithNullableProtocolInLine {
    val flags[fidl_handle_presence, int32]
} [packed]
test_nullable_StructWithNullableProtocolOutOfLine {
    void void
} [packed]
test_nullable_StructWithNullableProtocolHandles {
    val zx_chan_test_nullable_SimpleProtocol_client
} [packed]
test_nullable_StructWithNullableRequestInLine {
    val flags[fidl_handle_presence, int32]
} [packed]
test_nullable_StructWithNullableRequestOutOfLine {
    void void
} [packed]
test_nullable_StructWithNullableRequestHandles {
    val zx_chan_test_nullable_SimpleProtocol_server
} [packed]
test_nullable_StructWithNullableStringInLine {
    valInLine fidl_string
} [packed]
test_nullable_StructWithNullableStringOutOfLine {
    valOutOfLine fidl_aligned[stringnoz]
} [packed]
test_nullable_StructWithNullableStringHandles {
    void void
} [packed]
test_nullable_StructWithNullableStructInLine {
    valInLine test_nullable_Int32WrapperInLine
} [packed]
test_nullable_StructWithNullableStructOutOfLine {
    valOutOfLine test_nullable_Int32WrapperOutOfLine
} [packed]
test_nullable_StructWithNullableStructHandles {
    val test_nullable_Int32WrapperHandles
} [packed]
test_nullable_StructWithNullableUnionInLine {
    valInLine test_nullable_SimpleUnionInLine
} [packed]
test_nullable_StructWithNullableUnionOutOfLine {
    void void
} [packed]
test_nullable_StructWithNullableUnionHandles {
    void void
} [packed]
test_nullable_StructWithNullableVectorInLine {
    valInLine fidl_vector
} [packed]
test_nullable_StructWithNullableVectorOutOfLine {
    valOutOfLine array[int32]
} [packed]
test_nullable_StructWithNullableVectorHandles {
    void void
} [packed]
test_nullable_SimpleUnionInLine [
    a fidl_union_member[1, int32]
    b fidl_union_member[2, int32]
]
test_nullable_SimpleUnionOutOfLine [
    void void
][varlen]
test_nullable_SimpleUnionHandles [
    void void
][varlen]


test_nullable_SimpleProtocolAddRequest {
    hdr fidl_message_header[9142761280038437494]
    a int32
    b int32
} [packed]
test_nullable_SimpleProtocolAddRequestHandles {
    void void
} [packed]
test_nullable_SimpleProtocolAddResponse {
    hdr fidl_message_header[9142761280038437494]
    sum int32
} [packed]
test_nullable_SimpleProtocolAddResponseHandles {
    void void
} [packed]

resource zx_chan_test_nullable_SimpleProtocol_client[zx_chan]
resource zx_chan_test_nullable_SimpleProtocol_server[zx_chan]

zx_channel_create$test_nullable_SimpleProtocol(options const[0], out0 ptr[out, zx_chan_test_nullable_SimpleProtocol_client], out1 ptr[out, zx_chan_test_nullable_SimpleProtocol_server])
fdio_service_connect$test_nullable_SimpleProtocol(path ptr[in, string["/svc/"]], handle zx_chan_test_nullable_SimpleProtocol_server)
zx_channel_call$test_nullable_SimpleProtocolAdd(handle zx_chan_test_nullable_SimpleProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_nullable_SimpleProtocolAddRequest, test_nullable_SimpleProtocolAddRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_nullable_SimpleProtocolAddResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

