{{/*
// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}



{{- define "Method:WireWeakOnewayClientImpl:driver/WireMessagingHeader" }}
  {{ .Docs }}
  {{- if .DocComments }}
    //
  {{- end }}
  // {{- template "Method:ClientAllocationComment:Helper" . }}
  ::fidl::OneWayStatus {{ .Name }}({{ RenderParams .RequestArgs }});
{{- end }}


{{- define "Method:WireWeakOnewayClientImpl:driver/WireMessagingSource" }}
  ::fidl::OneWayStatus {{ .Protocol.WireWeakOnewayClientImpl.NoLeading }}::{{ .Name }}(
        {{- RenderParams .RequestArgs }}) {
    FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
    {{ .WireTransactionalRequest }} _request_object{ {{ RenderForwardParams .RequestArgs }} };

    constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<{{ .Marker }}>();
    uint8_t* _buffer = static_cast<uint8_t*>(arena_.Allocate(_buffer_size));

    ::fidl::internal::UnownedEncodedMessage<{{ .WireTransactionalRequest }}, {{ .Transport.Type }}> _request_message(
      _buffer, _buffer_size, &_request_object);
    fidl::WriteOptions _options = {};
    _options.outgoing_transport_context =
      ::fidl::internal::OutgoingTransportContext::Create<::fidl::internal::DriverTransport>(
          arena_.get());
    return _client_base()->SendOneWay(_request_message.GetOutgoingMessage(), std::move(_options));
  }
{{- end }}
