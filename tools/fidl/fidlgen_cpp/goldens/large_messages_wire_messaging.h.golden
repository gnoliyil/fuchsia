// WARNING: This file is machine generated by fidlgen.
  
  // fidl_experiment = allow_overflowing
  // fidl_experiment = no_optional_structs
  // fidl_experiment = output_index_json
  // fidl_experiment = simple_empty_response_syntax
  // fidl_experiment = unknown_interactions

  #pragma once

  #include <fidl/test.largemessages/cpp/markers.h>
  #include <fidl/test.largemessages/cpp/wire_types.h>

  #include <lib/fidl/cpp/wire/wire_messaging.h>

  
#ifdef __Fuchsia__

    #include <lib/fidl/cpp/wire/client.h>
    #include <lib/fidl/cpp/wire/connect_service.h>
    #include <lib/fidl/cpp/wire/server.h>
    #include <lib/fidl/cpp/wire/service_handler.h>
    #include <lib/fidl/cpp/wire/sync_call.h>
    #include <lib/fidl/cpp/wire/unknown_interaction_handler.h>
  

#endif  // __Fuchsia__


  
    
  namespace test_largemessages {

  class Overflowing;
    

    
__LOCAL extern "C" const fidl_type_t test_largemessages_BoundedKnownToBeSmallTable;
    
    
__LOCAL extern "C" const fidl_type_t test_largemessages_BoundedMaybeLargeTable;
    
    
__LOCAL extern "C" const fidl_type_t test_largemessages_SemiBoundedBelievedToBeSmallTable;
    
    
__LOCAL extern "C" const fidl_type_t test_largemessages_SemiBoundedMaybeLargeTable;
    
    
__LOCAL extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeValueTable;
    
    
__LOCAL extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeResourceTable;
    
    
    
    
    
    
    
    
    
    
    
    
    
}  // namespace test_largemessages

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> final { static constexpr uint64_t value = 5952259942637616356lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> final { static constexpr uint64_t value = 4844409317800064506lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> final { static constexpr uint64_t value = 9033523515723994320lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> final { static constexpr uint64_t value = 2934974775967009888lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> final { static constexpr uint64_t value = 6619820881740926511lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> final { static constexpr uint64_t value = 4562382013720126356lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> final { static constexpr uint64_t value = 6548039810775918803lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> final { static constexpr uint64_t value = 3946825660199764192lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> final { static constexpr uint64_t value = 4256297304861928433lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> final { static constexpr uint64_t value = 2268007598729864303lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> final { static constexpr uint64_t value = 3417738688177890202lu; };

template<>
struct ::fidl::internal::WireOrdinal<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> final { static constexpr uint64_t value = 343754737384884834lu; };

#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::BoundedKnownToBeSmall;
    
      using Completer = fidl::Completer<>;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::BoundedMaybeLarge;
    
      using Completer = fidl::Completer<>;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::SemiBoundedBelievedToBeSmall;
    
      using Completer = fidl::Completer<>;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::SemiBoundedMaybeLarge;
    
      using Completer = fidl::Completer<>;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::UnboundedMaybeLargeValue;
    
      using Completer = fidl::Completer<>;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::UnboundedMaybeLargeResource;
    
      using Completer = fidl::Completer<>;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::BoundedKnownToBeSmall;
      using Response = ::test_largemessages::wire::BoundedKnownToBeSmall;
    
      using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>>;
  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall,
      ::fidl::internal::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::ChannelTransport
      >
  >;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall,
      ::fidl::internal::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::ChannelTransport
      >
  >;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::BoundedMaybeLarge;
      using Response = ::test_largemessages::wire::BoundedMaybeLarge;
    
      using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>>;
  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeBoundedMaybeLarge,
      ::fidl::internal::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::ChannelTransport
      >
  >;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeBoundedMaybeLarge,
      ::fidl::internal::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::ChannelTransport
      >
  >;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::SemiBoundedBelievedToBeSmall;
      using Response = ::test_largemessages::wire::SemiBoundedBelievedToBeSmall;
    
      using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>>;
  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall,
      ::fidl::internal::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::ChannelTransport
      >
  >;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall,
      ::fidl::internal::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::ChannelTransport
      >
  >;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::SemiBoundedMaybeLarge;
      using Response = ::test_largemessages::wire::SemiBoundedMaybeLarge;
    
      using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>>;
  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge,
      ::fidl::internal::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::ChannelTransport
      >
  >;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge,
      ::fidl::internal::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::ChannelTransport
      >
  >;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::UnboundedMaybeLargeValue;
      using Response = ::test_largemessages::wire::UnboundedMaybeLargeValue;
    
      using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>>;
  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue,
      ::fidl::internal::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::ChannelTransport
      >
  >;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue,
      ::fidl::internal::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::ChannelTransport
      >
  >;
};



#endif  // __Fuchsia__


#ifdef __Fuchsia__




template<>
struct ::fidl::internal::WireMethodTypes<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> {
    static constexpr bool HasRequestPayload = true;
      using Request = ::test_largemessages::wire::UnboundedMaybeLargeResource;
      using Response = ::test_largemessages::wire::UnboundedMaybeLargeResource;
    
      using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>>;
  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource,
      ::fidl::internal::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::ChannelTransport
      >
  >;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource,
      ::fidl::internal::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::ChannelTransport
      >
  >;
};



#endif  // __Fuchsia__


namespace test_largemessages {

}  // namespace test_largemessages

#ifdef __Fuchsia__

template<>
struct ::fidl::internal::ProtocolDetails<::test_largemessages::Overflowing> {
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__


template<>
struct ::fidl::internal::WireServerDispatcher<::test_largemessages::Overflowing> final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(::fidl::WireServer<::test_largemessages::Overflowing>* impl, ::fidl::IncomingHeaderAndMessage& msg,
                                            internal::MessageStorageViewBase* storage_view,
                                            ::fidl::Transaction* txn);
  static void Dispatch(::fidl::WireServer<::test_largemessages::Overflowing>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static const ::fidl::internal::UnknownMethodHandlerEntry unknown_method_handler_entry_;
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::BoundedKnownToBeSmall body;
  explicit TransactionalRequest(::fidl::VectorView<uint8_t> bytes)
  : body(::test_largemessages::wire::BoundedKnownToBeSmall { bytes } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::BoundedKnownToBeSmall, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::BoundedKnownToBeSmall, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::BoundedMaybeLarge body;
  explicit TransactionalRequest(::fidl::VectorView<uint8_t> bytes)
  : body(::test_largemessages::wire::BoundedMaybeLarge { bytes } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::BoundedMaybeLarge, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::BoundedMaybeLarge, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::SemiBoundedBelievedToBeSmall body;
  explicit TransactionalRequest(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall)
  : body(::test_largemessages::wire::SemiBoundedBelievedToBeSmall { SemiBoundedBelievedToBeSmall } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::SemiBoundedMaybeLarge body;
  explicit TransactionalRequest(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge)
  : body(::test_largemessages::wire::SemiBoundedMaybeLarge { SemiBoundedMaybeLarge } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::UnboundedMaybeLargeValue body;
  explicit TransactionalRequest(::fidl::VectorView<uint8_t> bytes)
  : body(::test_largemessages::wire::UnboundedMaybeLargeValue { bytes } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeValue, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeValue, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::UnboundedMaybeLargeResource body;
  explicit TransactionalRequest(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements)
  : body(::test_largemessages::wire::UnboundedMaybeLargeResource { std::move(elements) } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }
  void _CloseHandles() {
    body._CloseHandles();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 1536 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeResource, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeResource, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::BoundedKnownToBeSmall body;
  explicit TransactionalRequest(::fidl::VectorView<uint8_t> bytes)
  : body(::test_largemessages::wire::BoundedKnownToBeSmall { bytes } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }
  using ResponseType = ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>;

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::BoundedKnownToBeSmall, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::BoundedKnownToBeSmall, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


template<>
struct ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> final : public ::test_largemessages::wire::BoundedKnownToBeSmall {

  
  explicit WireResponse(::test_largemessages::wire::BoundedKnownToBeSmall base) : ::test_largemessages::wire::BoundedKnownToBeSmall(std::move(base)) {}
  explicit WireResponse(::fidl::VectorView<uint8_t> bytes) : ::test_largemessages::wire::BoundedKnownToBeSmall{ .bytes = std::move(bytes)}{}
  WireResponse() = default;
};


template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;

  static void Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::BoundedKnownToBeSmall, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::BoundedKnownToBeSmall, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
};

template<>
struct ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> body;
  explicit TransactionalResponse(::fidl::VectorView<uint8_t> bytes)
  : body(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(bytes)) {
    _InitHeader();
  }
  TransactionalResponse() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::BoundedMaybeLarge body;
  explicit TransactionalRequest(::fidl::VectorView<uint8_t> bytes)
  : body(::test_largemessages::wire::BoundedMaybeLarge { bytes } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }
  using ResponseType = ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>;

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::BoundedMaybeLarge, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::BoundedMaybeLarge, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


template<>
struct ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> final : public ::test_largemessages::wire::BoundedMaybeLarge {

  
  explicit WireResponse(::test_largemessages::wire::BoundedMaybeLarge base) : ::test_largemessages::wire::BoundedMaybeLarge(std::move(base)) {}
  explicit WireResponse(::fidl::VectorView<uint8_t> bytes) : ::test_largemessages::wire::BoundedMaybeLarge{ .bytes = std::move(bytes)}{}
  WireResponse() = default;
};


template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;

  static void Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::BoundedMaybeLarge, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::BoundedMaybeLarge, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
};

template<>
struct ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> body;
  explicit TransactionalResponse(::fidl::VectorView<uint8_t> bytes)
  : body(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(bytes)) {
    _InitHeader();
  }
  TransactionalResponse() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::SemiBoundedBelievedToBeSmall body;
  explicit TransactionalRequest(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall)
  : body(::test_largemessages::wire::SemiBoundedBelievedToBeSmall { SemiBoundedBelievedToBeSmall } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }
  using ResponseType = ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>;

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


template<>
struct ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> final : public ::test_largemessages::wire::SemiBoundedBelievedToBeSmall {

  
  explicit WireResponse(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) : ::test_largemessages::wire::SemiBoundedBelievedToBeSmall(SemiBoundedBelievedToBeSmall){}
  WireResponse() = default;
};


template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;

  static void Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
};

template<>
struct ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> body;
  explicit TransactionalResponse(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall)
  : body(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(SemiBoundedBelievedToBeSmall)) {
    _InitHeader();
  }
  TransactionalResponse() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::SemiBoundedMaybeLarge body;
  explicit TransactionalRequest(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge)
  : body(::test_largemessages::wire::SemiBoundedMaybeLarge { SemiBoundedMaybeLarge } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }
  using ResponseType = ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>;

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


template<>
struct ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> final : public ::test_largemessages::wire::SemiBoundedMaybeLarge {

  
  explicit WireResponse(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) : ::test_largemessages::wire::SemiBoundedMaybeLarge(SemiBoundedMaybeLarge){}
  WireResponse() = default;
};


template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;

  static void Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
};

template<>
struct ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> body;
  explicit TransactionalResponse(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge)
  : body(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(SemiBoundedMaybeLarge)) {
    _InitHeader();
  }
  TransactionalResponse() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::UnboundedMaybeLargeValue body;
  explicit TransactionalRequest(::fidl::VectorView<uint8_t> bytes)
  : body(::test_largemessages::wire::UnboundedMaybeLargeValue { bytes } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }
  using ResponseType = ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>;

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeValue, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeValue, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


template<>
struct ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> final : public ::test_largemessages::wire::UnboundedMaybeLargeValue {

  
  explicit WireResponse(::test_largemessages::wire::UnboundedMaybeLargeValue base) : ::test_largemessages::wire::UnboundedMaybeLargeValue(std::move(base)) {}
  explicit WireResponse(::fidl::VectorView<uint8_t> bytes) : ::test_largemessages::wire::UnboundedMaybeLargeValue{ .bytes = std::move(bytes)}{}
  WireResponse() = default;
};


template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;

  static void Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeValue, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeValue, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
};

template<>
struct ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> body;
  explicit TransactionalResponse(::fidl::VectorView<uint8_t> bytes)
  : body(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(bytes)) {
    _InitHeader();
  }
  TransactionalResponse() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#ifdef __Fuchsia__
template<>
struct ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::test_largemessages::wire::UnboundedMaybeLargeResource body;
  explicit TransactionalRequest(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements)
  : body(::test_largemessages::wire::UnboundedMaybeLargeResource { std::move(elements) } ) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }
  using ResponseType = ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>;
  void _CloseHandles() {
    body._CloseHandles();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 1536 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeResource, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeResource, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__

template<>
struct ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> final : public ::test_largemessages::wire::UnboundedMaybeLargeResource {
  using Elements = test_largemessages::wire::Elements;

  
  explicit WireResponse(::test_largemessages::wire::UnboundedMaybeLargeResource base) : ::test_largemessages::wire::UnboundedMaybeLargeResource(std::move(base)) {}
  explicit WireResponse(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) : ::test_largemessages::wire::UnboundedMaybeLargeResource{ .elements = std::move(elements)}{}
  WireResponse() = default;
};


template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 1536;

  static void Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeResource, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeResource, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
};

template<>
struct ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  
  ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> body;
  explicit TransactionalResponse(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements)
  : body(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(std::move(elements))) {
    _InitHeader();
  }
  TransactionalResponse() {
    _InitHeader();
  }
  void _CloseHandles() {
    body._CloseHandles();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 1536 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__


namespace fidl {


#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_BoundedKnownToBeSmallTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::BoundedKnownToBeSmall)
    == TypeTraits<::test_largemessages::wire::BoundedKnownToBeSmall>::kPrimarySize);
static_assert(offsetof(::test_largemessages::wire::BoundedKnownToBeSmall, bytes) == 0);

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_BoundedMaybeLargeTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::BoundedMaybeLarge)
    == TypeTraits<::test_largemessages::wire::BoundedMaybeLarge>::kPrimarySize);
static_assert(offsetof(::test_largemessages::wire::BoundedMaybeLarge, bytes) == 0);

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_SemiBoundedBelievedToBeSmallTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(24 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::SemiBoundedBelievedToBeSmall)
    == TypeTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall>::kPrimarySize);

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_SemiBoundedMaybeLargeTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(24 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::SemiBoundedMaybeLarge)
    == TypeTraits<::test_largemessages::wire::SemiBoundedMaybeLarge>::kPrimarySize);

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_UnboundedMaybeLargeValueTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr uint32_t kMaxOutOfLineV1 = 4294967295;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::UnboundedMaybeLargeValue)
    == TypeTraits<::test_largemessages::wire::UnboundedMaybeLargeValue>::kPrimarySize);
static_assert(offsetof(::test_largemessages::wire::UnboundedMaybeLargeValue, bytes) == 0);

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>> : public std::true_type {};
template <>
struct IsResource<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_UnboundedMaybeLargeResourceTable;
  static constexpr uint32_t kMaxNumHandles = 64;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(1536 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(1536 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 64000;
  static constexpr uint32_t kMaxOutOfLineV1 = 64000;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::UnboundedMaybeLargeResource)
    == TypeTraits<::test_largemessages::wire::UnboundedMaybeLargeResource>::kPrimarySize);
static_assert(offsetof(::test_largemessages::wire::UnboundedMaybeLargeResource, elements) == 0);

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_BoundedKnownToBeSmallTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::BoundedKnownToBeSmall)
    == TypeTraits<::test_largemessages::wire::BoundedKnownToBeSmall>::kPrimarySize);
static_assert(offsetof(::test_largemessages::wire::BoundedKnownToBeSmall, bytes) == 0);

#endif  // __Fuchsia__


template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_BoundedKnownToBeSmallTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>)
    == TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, body) == sizeof(fidl_message_header_t));
template <>
struct TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_BoundedKnownToBeSmallTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 16;
  static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(sizeof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>)
    == TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, bytes) == 0);
#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_BoundedMaybeLargeTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::BoundedMaybeLarge)
    == TypeTraits<::test_largemessages::wire::BoundedMaybeLarge>::kPrimarySize);
static_assert(offsetof(::test_largemessages::wire::BoundedMaybeLarge, bytes) == 0);

#endif  // __Fuchsia__


template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_BoundedMaybeLargeTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>)
    == TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, body) == sizeof(fidl_message_header_t));
template <>
struct TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_BoundedMaybeLargeTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 16;
  static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(sizeof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>)
    == TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, bytes) == 0);
#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_SemiBoundedBelievedToBeSmallTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(24 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::SemiBoundedBelievedToBeSmall)
    == TypeTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall>::kPrimarySize);

#endif  // __Fuchsia__


template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_SemiBoundedBelievedToBeSmallTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(24 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>)
    == TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, body) == sizeof(fidl_message_header_t));
template <>
struct TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_SemiBoundedBelievedToBeSmallTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(sizeof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>)
    == TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>>::kPrimarySize);
#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_SemiBoundedMaybeLargeTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(24 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::SemiBoundedMaybeLarge)
    == TypeTraits<::test_largemessages::wire::SemiBoundedMaybeLarge>::kPrimarySize);

#endif  // __Fuchsia__


template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_SemiBoundedMaybeLargeTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(24 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>)
    == TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, body) == sizeof(fidl_message_header_t));
template <>
struct TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_SemiBoundedMaybeLargeTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(sizeof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>)
    == TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>>::kPrimarySize);
#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_UnboundedMaybeLargeValueTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr uint32_t kMaxOutOfLineV1 = 4294967295;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::UnboundedMaybeLargeValue)
    == TypeTraits<::test_largemessages::wire::UnboundedMaybeLargeValue>::kPrimarySize);
static_assert(offsetof(::test_largemessages::wire::UnboundedMaybeLargeValue, bytes) == 0);

#endif  // __Fuchsia__


template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_UnboundedMaybeLargeValueTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr uint32_t kMaxOutOfLineV1 = 4294967295;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>)
    == TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, body) == sizeof(fidl_message_header_t));
template <>
struct TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_UnboundedMaybeLargeValueTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 16;
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr uint32_t kMaxOutOfLineV1 = 4294967295;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(sizeof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>)
    == TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, bytes) == 0);
#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> : public std::true_type {};
template <>
struct IsResource<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_UnboundedMaybeLargeResourceTable;
  static constexpr uint32_t kMaxNumHandles = 64;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(1536 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(1536 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 64000;
  static constexpr uint32_t kMaxOutOfLineV1 = 64000;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>)
    == TypeTraits<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_largemessages::wire::UnboundedMaybeLargeResource)
    == TypeTraits<::test_largemessages::wire::UnboundedMaybeLargeResource>::kPrimarySize);
static_assert(offsetof(::test_largemessages::wire::UnboundedMaybeLargeResource, elements) == 0);

#endif  // __Fuchsia__


template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> : public std::true_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> : public std::true_type {};
template <>
struct IsResource<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> : public std::true_type {};


template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_UnboundedMaybeLargeResourceTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 64;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(1536 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(1536 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 64000;
  static constexpr uint32_t kMaxOutOfLineV1 = 64000;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>)
    == TypeTraits<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, body) == sizeof(fidl_message_header_t));
template <>
struct TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> {
  static constexpr const fidl_type_t* kType =
    &::test_largemessages::test_largemessages_UnboundedMaybeLargeResourceTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 64;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 1536;
  static constexpr uint32_t kPrimarySizeV1 = 1536;
  static constexpr uint32_t kMaxOutOfLine = 64000;
  static constexpr uint32_t kMaxOutOfLineV1 = 64000;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
    ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(sizeof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>)
    == TypeTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, elements) == 0);

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

    template<>
    struct ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> final
        : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>>> {
      static constexpr uint32_t kNumHandles =
            fidl::internal::ClampedHandleCount<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, fidl::MessageDirection::kReceiving>();

      ::std::array<zx_handle_t, kNumHandles> handles_;
      ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
    };

    template<>
    struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> final
        : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>>> {
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> handles_storage_;
    };
    template<>
    struct ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> final
        : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>>> {
      static constexpr uint32_t kNumHandles =
            fidl::internal::ClampedHandleCount<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, fidl::MessageDirection::kReceiving>();

      ::std::array<zx_handle_t, kNumHandles> handles_;
      ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
    };

    template<>
    struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> final
        : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>>> {
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> handles_storage_;
    };
    template<>
    struct ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> final
        : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>>> {
      static constexpr uint32_t kNumHandles =
            fidl::internal::ClampedHandleCount<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, fidl::MessageDirection::kReceiving>();

      ::std::array<zx_handle_t, kNumHandles> handles_;
      ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
    };

    template<>
    struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> final
        : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>>> {
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> handles_storage_;
    };
    template<>
    struct ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> final
        : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>>> {
      static constexpr uint32_t kNumHandles =
            fidl::internal::ClampedHandleCount<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, fidl::MessageDirection::kReceiving>();

      ::std::array<zx_handle_t, kNumHandles> handles_;
      ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
    };

    template<>
    struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> final
        : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>>> {
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> handles_storage_;
    };
    template<>
    struct ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> final
        : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>>> {
      static constexpr uint32_t kNumHandles =
            fidl::internal::ClampedHandleCount<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, fidl::MessageDirection::kReceiving>();

      ::std::array<zx_handle_t, kNumHandles> handles_;
      ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
    };

    template<>
    struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> final
        : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>>> {
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> handles_storage_;
    };
    template<>
    struct ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> final
        : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>>> {
      static constexpr uint32_t kNumHandles =
            fidl::internal::ClampedHandleCount<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, fidl::MessageDirection::kReceiving>();

      ::std::array<zx_handle_t, kNumHandles> handles_;
      ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
    };

    template<>
    struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> final
        : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>>> {
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> handles_storage_;
    };
  template <>
  struct ::fidl::internal::IncomingEventsHandleStorage<::test_largemessages::Overflowing> final :
      public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingEventsHandleStorage<::test_largemessages::Overflowing>> {
   public:
    static constexpr uint32_t kNumHandles = 0;

    ::std::array<zx_handle_t, kNumHandles> handles_;
    ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
  };

  template <>
  struct ::fidl::internal::IncomingEventsStorage<::test_largemessages::Overflowing> final :
      public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingEventsStorage<::test_largemessages::Overflowing>> {
   public:
    ::fidl::internal::InlineMessageBuffer<16> bytes_;
    ::fidl::internal::IncomingEventsHandleStorage<::test_largemessages::Overflowing> handles_storage_;
  };





template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>* request);
    explicit WireUnownedResult(
        ::fit::result<::fidl::Error>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>(::fidl::internal::StatusFromResult(decoded)) {}

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  
};




template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>* request);
    explicit WireUnownedResult(
        ::fit::result<::fidl::Error>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>(::fidl::internal::StatusFromResult(decoded)) {}

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  
};




template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>* request);
    explicit WireUnownedResult(
        ::fit::result<::fidl::Error>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>(::fidl::internal::StatusFromResult(decoded)) {}

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  
};




template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>* request);
    explicit WireUnownedResult(
        ::fit::result<::fidl::Error>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>(::fidl::internal::StatusFromResult(decoded)) {}

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  
};




template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>* request);
    explicit WireUnownedResult(
        ::fit::result<::fidl::Error>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>(::fidl::internal::StatusFromResult(decoded)) {}

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  
};




template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>* request);
    explicit WireUnownedResult(
        ::fit::result<::fidl::Error>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>(::fidl::internal::StatusFromResult(decoded)) {}

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  
};


template<>
struct ::fidl::internal::WireResultUnwrap<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> {
  using Type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>;
};

template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> decoded_;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>* request);
    explicit WireUnownedResult(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>* response)
        : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    explicit WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  private:
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> decoded_;
};


template<>
struct ::fidl::internal::WireResultUnwrap<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> {
  using Type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>;
};

template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> decoded_;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>* request);
    explicit WireUnownedResult(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>* response)
        : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    explicit WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  private:
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> decoded_;
};


template<>
struct ::fidl::internal::WireResultUnwrap<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> {
  using Type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>;
};

template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> decoded_;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>* request);
    explicit WireUnownedResult(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>* response)
        : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    explicit WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  private:
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> decoded_;
};


template<>
struct ::fidl::internal::WireResultUnwrap<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> {
  using Type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>;
};

template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> decoded_;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>* request);
    explicit WireUnownedResult(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>* response)
        : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    explicit WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  private:
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> decoded_;
};


template<>
struct ::fidl::internal::WireResultUnwrap<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> {
  using Type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>;
};

template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> decoded_;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>* request);
    explicit WireUnownedResult(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>* response)
        : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    explicit WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  private:
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> decoded_;
};


template<>
struct ::fidl::internal::WireResultUnwrap<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> {
  using Type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>;
};

template<>
class [[nodiscard]] ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>* request
  );

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> decoded_;
};


template<>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> final : public ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> {
 public:
    explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>* request);
    explicit WireUnownedResult(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>* response)
        : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    explicit WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  private:
      ::fidl::DecodedValue<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> decoded_;
};

template<>
class ::fidl::internal::WireEventHandlerInterface<::test_largemessages::Overflowing> : public ::fidl::internal::BaseEventHandlerInterface, public ::fidl::UnknownEventHandler<::test_largemessages::Overflowing> {
public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template<>
class ::fidl::WireAsyncEventHandler<::test_largemessages::Overflowing>
    : public ::fidl::internal::WireEventHandlerInterface<::test_largemessages::Overflowing>, public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};


  template<>
  class ::fidl::WireSyncEventHandler<::test_largemessages::Overflowing>
      : public ::fidl::internal::WireEventHandlerInterface<::test_largemessages::Overflowing>, public ::fidl::internal::SyncEventHandler {
   public:
    WireSyncEventHandler() = default;

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding virtual
    // method.
    ::fidl::Status HandleOneEvent(
        ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end);
  };

template <>
class ::fidl::internal::WireEventDispatcher<::test_largemessages::Overflowing> final :
    public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::WireEventHandlerInterface<::test_largemessages::Overflowing>> {
 public:
  explicit WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_largemessages::Overflowing>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
    ::fidl::Status DispatchEvent(
        ::fidl::IncomingHeaderAndMessage& msg,
        ::fidl::internal::MessageStorageViewBase* storage_view) override;
};



// Methods to make a sync FIDL call directly on an unowned handle or a
// const reference to a |::fidl::ClientEnd<::test_largemessages::Overflowing>|,
// avoiding setting up a client.
template<>
class ::fidl::internal::WireSyncClientImpl<::test_largemessages::Overflowing> final :
    public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::WireSyncClientImpl<::test_largemessages::Overflowing>> {
 public:
  
    // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
    ::fidl::OneWayStatus
    DecodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> _request{ bytes };
      return ::fidl::WireResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>(_client_end(), &_request);
    }

    // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
    ::fidl::OneWayStatus
    DecodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> _request{ bytes };
      return ::fidl::WireResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>(_client_end(), &_request);
    }

    // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
    ::fidl::OneWayStatus
    DecodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> _request{ SemiBoundedBelievedToBeSmall };
      return ::fidl::WireResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>(_client_end(), &_request);
    }

    // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
    ::fidl::OneWayStatus
    DecodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> _request{ SemiBoundedMaybeLarge };
      return ::fidl::WireResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>(_client_end(), &_request);
    }

    // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
    ::fidl::OneWayStatus
    DecodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> _request{ bytes };
      return ::fidl::WireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>(_client_end(), &_request);
    }

    // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
    ::fidl::OneWayStatus
    DecodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> _request{ std::move(elements) };
      return ::fidl::WireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>(_client_end(), &_request);
    }

    // Request is heap-allocated. Response is heap-allocated.
    ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>
    EncodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> _request{ bytes };
      return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(_client_end(), &_request);
    }

    // Request is heap-allocated. Response is heap-allocated.
    ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>
    EncodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> _request{ bytes };
      return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(_client_end(), &_request);
    }

    // Request is heap-allocated. Response is heap-allocated.
    ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>
    EncodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> _request{ SemiBoundedBelievedToBeSmall };
      return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(_client_end(), &_request);
    }

    // Request is heap-allocated. Response is heap-allocated.
    ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>
    EncodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> _request{ SemiBoundedMaybeLarge };
      return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(_client_end(), &_request);
    }

    // Request is heap-allocated. Response is heap-allocated.
    ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>
    EncodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> _request{ bytes };
      return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(_client_end(), &_request);
    }

    // Request is heap-allocated. Response is heap-allocated.
    ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>
    EncodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> _request{ std::move(elements) };
      return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(_client_end(), &_request);
    }


 private:
  ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_largemessages::Overflowing>(
      _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_largemessages::Overflowing> final :
    public ::fidl::internal::SyncEndpointBufferVeneer<::fidl::internal::WireSyncBufferClientImpl<::test_largemessages::Overflowing>> {
 public:
  
    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::OneWayStatus
    DecodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> _request{ bytes };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::OneWayStatus
    DecodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> _request{ bytes };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::OneWayStatus
    DecodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> _request{ SemiBoundedBelievedToBeSmall };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::OneWayStatus
    DecodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> _request{ SemiBoundedMaybeLarge };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::OneWayStatus
    DecodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> _request{ bytes };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::OneWayStatus
    DecodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> _request{ std::move(elements) };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>
    EncodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> _request{ bytes };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>
    EncodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> _request{ bytes };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>
    EncodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> _request{ SemiBoundedBelievedToBeSmall };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>
    EncodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> _request{ SemiBoundedMaybeLarge };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>
    EncodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> _request{ bytes };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(_client_end(), _allocator(), &_request);
    }

    // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
    ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>
    EncodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> _request{ std::move(elements) };
      return ::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(_client_end(), _allocator(), &_request);
    }


 private:
  ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_largemessages::Overflowing>(
      _transport().get<::fidl::internal::ChannelTransport>());
  }
};


template<>
class ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> : public ::fidl::internal::CompleterImplBase<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> {
 public:
  using CompleterImplBase::CompleterImplBase;

  void Reply(::fidl::VectorView<uint8_t> bytes);

 private:
  void MakeReply(::fidl::VectorView<uint8_t> bytes);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(::fidl::VectorView<uint8_t> bytes);

 private:
  void MakeReply(::fidl::VectorView<uint8_t> bytes);
};

template<>
class ::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};


template<>
class ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> : public ::fidl::internal::CompleterImplBase<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> {
 public:
  using CompleterImplBase::CompleterImplBase;

  void Reply(::fidl::VectorView<uint8_t> bytes);

 private:
  void MakeReply(::fidl::VectorView<uint8_t> bytes);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(::fidl::VectorView<uint8_t> bytes);

 private:
  void MakeReply(::fidl::VectorView<uint8_t> bytes);
};

template<>
class ::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};


template<>
class ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> : public ::fidl::internal::CompleterImplBase<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> {
 public:
  using CompleterImplBase::CompleterImplBase;

  void Reply(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall);

 private:
  void MakeReply(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall);

 private:
  void MakeReply(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall);
};

template<>
class ::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};


template<>
class ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> : public ::fidl::internal::CompleterImplBase<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> {
 public:
  using CompleterImplBase::CompleterImplBase;

  void Reply(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge);

 private:
  void MakeReply(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge);

 private:
  void MakeReply(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge);
};

template<>
class ::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};


template<>
class ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> : public ::fidl::internal::CompleterImplBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> {
 public:
  using CompleterImplBase::CompleterImplBase;

  void Reply(::fidl::VectorView<uint8_t> bytes);

 private:
  void MakeReply(::fidl::VectorView<uint8_t> bytes);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(::fidl::VectorView<uint8_t> bytes);

 private:
  void MakeReply(::fidl::VectorView<uint8_t> bytes);
};

template<>
class ::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};


template<>
class ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> : public ::fidl::internal::CompleterImplBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> {
 public:
  using CompleterImplBase::CompleterImplBase;

  void Reply(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements);

 private:
  void MakeReply(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements);

 private:
  void MakeReply(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements);
};

template<>
class ::fidl::internal::WireCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |::fidl::ClientEnd<::test_largemessages::Overflowing>|
// and |::fidl::ServerEnd<::test_largemessages::Overflowing>|).
template<>
class ::fidl::WireServer<::test_largemessages::Overflowing> : public ::fidl::internal::IncomingMessageDispatcher, public ::fidl::UnknownMethodHandler<::test_largemessages::Overflowing> {
  public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_largemessages::Overflowing;

  using Handler = fidl::ProtocolHandler<::test_largemessages::Overflowing>;


    using DecodeBoundedKnownToBeSmallCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>;
      using DecodeBoundedKnownToBeSmallRequestView = ::test_largemessages::wire::BoundedKnownToBeSmall*;

  
  virtual void DecodeBoundedKnownToBeSmall(
      ::test_largemessages::wire::BoundedKnownToBeSmall* request,
    DecodeBoundedKnownToBeSmallCompleter::Sync& completer)= 0;

    using DecodeBoundedMaybeLargeCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>;
      using DecodeBoundedMaybeLargeRequestView = ::test_largemessages::wire::BoundedMaybeLarge*;

  
  virtual void DecodeBoundedMaybeLarge(
      ::test_largemessages::wire::BoundedMaybeLarge* request,
    DecodeBoundedMaybeLargeCompleter::Sync& completer)= 0;

    using DecodeSemiBoundedBelievedToBeSmallCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>;
      using DecodeSemiBoundedBelievedToBeSmallRequestView = ::test_largemessages::wire::SemiBoundedBelievedToBeSmall*;

  
  virtual void DecodeSemiBoundedBelievedToBeSmall(
      ::test_largemessages::wire::SemiBoundedBelievedToBeSmall* request,
    DecodeSemiBoundedBelievedToBeSmallCompleter::Sync& completer)= 0;

    using DecodeSemiBoundedMaybeLargeCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>;
      using DecodeSemiBoundedMaybeLargeRequestView = ::test_largemessages::wire::SemiBoundedMaybeLarge*;

  
  virtual void DecodeSemiBoundedMaybeLarge(
      ::test_largemessages::wire::SemiBoundedMaybeLarge* request,
    DecodeSemiBoundedMaybeLargeCompleter::Sync& completer)= 0;

    using DecodeUnboundedMaybeLargeValueCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>;
      using DecodeUnboundedMaybeLargeValueRequestView = ::test_largemessages::wire::UnboundedMaybeLargeValue*;

  
  virtual void DecodeUnboundedMaybeLargeValue(
      ::test_largemessages::wire::UnboundedMaybeLargeValue* request,
    DecodeUnboundedMaybeLargeValueCompleter::Sync& completer)= 0;

    using DecodeUnboundedMaybeLargeResourceCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>;
      using DecodeUnboundedMaybeLargeResourceRequestView = ::test_largemessages::wire::UnboundedMaybeLargeResource*;

  
  virtual void DecodeUnboundedMaybeLargeResource(
      ::test_largemessages::wire::UnboundedMaybeLargeResource* request,
    DecodeUnboundedMaybeLargeResourceCompleter::Sync& completer)= 0;

    using EncodeBoundedKnownToBeSmallCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>;
      using EncodeBoundedKnownToBeSmallRequestView = ::test_largemessages::wire::BoundedKnownToBeSmall*;

  
  virtual void EncodeBoundedKnownToBeSmall(
      ::test_largemessages::wire::BoundedKnownToBeSmall* request,
    EncodeBoundedKnownToBeSmallCompleter::Sync& completer)= 0;

    using EncodeBoundedMaybeLargeCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>;
      using EncodeBoundedMaybeLargeRequestView = ::test_largemessages::wire::BoundedMaybeLarge*;

  
  virtual void EncodeBoundedMaybeLarge(
      ::test_largemessages::wire::BoundedMaybeLarge* request,
    EncodeBoundedMaybeLargeCompleter::Sync& completer)= 0;

    using EncodeSemiBoundedBelievedToBeSmallCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>;
      using EncodeSemiBoundedBelievedToBeSmallRequestView = ::test_largemessages::wire::SemiBoundedBelievedToBeSmall*;

  
  virtual void EncodeSemiBoundedBelievedToBeSmall(
      ::test_largemessages::wire::SemiBoundedBelievedToBeSmall* request,
    EncodeSemiBoundedBelievedToBeSmallCompleter::Sync& completer)= 0;

    using EncodeSemiBoundedMaybeLargeCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>;
      using EncodeSemiBoundedMaybeLargeRequestView = ::test_largemessages::wire::SemiBoundedMaybeLarge*;

  
  virtual void EncodeSemiBoundedMaybeLarge(
      ::test_largemessages::wire::SemiBoundedMaybeLarge* request,
    EncodeSemiBoundedMaybeLargeCompleter::Sync& completer)= 0;

    using EncodeUnboundedMaybeLargeValueCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>;
      using EncodeUnboundedMaybeLargeValueRequestView = ::test_largemessages::wire::UnboundedMaybeLargeValue*;

  
  virtual void EncodeUnboundedMaybeLargeValue(
      ::test_largemessages::wire::UnboundedMaybeLargeValue* request,
    EncodeUnboundedMaybeLargeValueCompleter::Sync& completer)= 0;

    using EncodeUnboundedMaybeLargeResourceCompleter = ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>;
      using EncodeUnboundedMaybeLargeResourceRequestView = ::test_largemessages::wire::UnboundedMaybeLargeResource*;

  
  virtual void EncodeUnboundedMaybeLargeResource(
      ::test_largemessages::wire::UnboundedMaybeLargeResource* request,
    EncodeUnboundedMaybeLargeResourceCompleter::Sync& completer)= 0;


  // |bind_handler| returns a handler that binds incoming connections to this
  // server implementation.
  //
  // The returned handler borrows the server instance.
  // The server must outlive the provided |dispatcher|. Only after
  // the dispatcher is shutdown will it be safe to destroy the servers.
  // The server should not be moved.
  Handler bind_handler(async_dispatcher_t* dispatcher) {
    return [impl=this, dispatcher=dispatcher](::fidl::ServerEnd<::test_largemessages::Overflowing> request) {
        (void) ::fidl::BindServer(dispatcher, std::move(request), impl);
    };
  }

  private:
  void dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) final;
};namespace fidl {

#endif  // __Fuchsia__


  

    
#ifdef __Fuchsia__
}  // namespace fidl

template<>
class ::fidl::internal::WireWeakOnewayClientImpl<::test_largemessages::Overflowing> : public ::fidl::internal::ClientImplBase {
 public:
  using ClientImplBase::ClientImplBase;
  
  // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
  ::fidl::OneWayStatus DecodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes);
  
  // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
  ::fidl::OneWayStatus DecodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes);
  
  // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
  ::fidl::OneWayStatus DecodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall);
  
  // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
  ::fidl::OneWayStatus DecodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge);
  
  // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
  ::fidl::OneWayStatus DecodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes);
  
  // Allocates 16 bytes of response buffer on the stack. Request is heap-allocated.
  ::fidl::OneWayStatus DecodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements);
};

template<>
class ::fidl::internal::WireWeakAsyncClientImpl<::test_largemessages::Overflowing> final : public ::fidl::internal::WireWeakOnewayClientImpl<::test_largemessages::Overflowing> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
    // The request and callback are allocated on the heap.
  ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> EncodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes);
    // The request and callback are allocated on the heap.
  ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> EncodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes);
    // The request and callback are allocated on the heap.
  ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> EncodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall);
    // The request and callback are allocated on the heap.
  ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> EncodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge);
    // The request and callback are allocated on the heap.
  ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> EncodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes);
    // The request and callback are allocated on the heap.
  ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> EncodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements);
};

template<>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_largemessages::Overflowing> : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;

// Caller provides the backing storage for FIDL message.
::fidl::OneWayStatus DecodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes);


// Caller provides the backing storage for FIDL message.
::fidl::OneWayStatus DecodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes);


// Caller provides the backing storage for FIDL message.
::fidl::OneWayStatus DecodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall);


// Caller provides the backing storage for FIDL message.
::fidl::OneWayStatus DecodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge);


// Caller provides the backing storage for FIDL message.
::fidl::OneWayStatus DecodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes);


// Caller provides the backing storage for FIDL message.
::fidl::OneWayStatus DecodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements);

};

template<>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<::test_largemessages::Overflowing> final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_largemessages::Overflowing> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;

// Caller provides the backing storage for FIDL message.
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> EncodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes);


// Caller provides the backing storage for FIDL message.
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> EncodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes);


// Caller provides the backing storage for FIDL message.
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> EncodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall);


// Caller provides the backing storage for FIDL message.
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> EncodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge);


// Caller provides the backing storage for FIDL message.
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> EncodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes);


// Caller provides the backing storage for FIDL message.
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> EncodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements);

};
template<>
class ::fidl::internal::WireWeakSyncClientImpl<::test_largemessages::Overflowing> final : public ::fidl::internal::WireWeakOnewayClientImpl<::test_largemessages::Overflowing> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
  
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> EncodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes);
  
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> EncodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes);
  
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> EncodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall);
  
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> EncodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge);
  
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> EncodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes);
  
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> EncodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements);
};namespace fidl {

#endif  // __Fuchsia__


    
}  // namespace fidl

#ifdef __Fuchsia__
template<>
class ::fidl::internal::WireWeakEventSender<::test_largemessages::Overflowing> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

};

template<>
class ::fidl::internal::WireWeakBufferEventSender<::test_largemessages::Overflowing> : public ::fidl::internal::WeakBufferEventSenderBase {
 public:
  using WeakBufferEventSenderBase::WeakBufferEventSenderBase;

};

template<>
class ::fidl::internal::WireEventSender<::test_largemessages::Overflowing>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::WireEventSender<::test_largemessages::Overflowing>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

};

template<>
class ::fidl::internal::WireBufferEventSender<::test_largemessages::Overflowing>
    : public ::fidl::internal::SyncEndpointBufferVeneer<::fidl::internal::WireBufferEventSender<::test_largemessages::Overflowing>> {
 public:
  using SyncEndpointBufferVeneer::SyncEndpointBufferVeneer;

};

#endif  // __Fuchsia__


  

