// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#include <fidl/test.handles/cpp/natural_ostream.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

std::ostream& fidl::ostream::Formatter<::test_handles::Handles>::Format(std::ostream& os, const ::test_handles::Handles& value) {
  os << "test_handles::Handles";
  os << "{ ";
  os << "plain_handle";
  os << " = " << fidl::ostream::Formatted<::zx::handle>(value.plain_handle()) << ", ";
  os << "bti_handle";
  os << " = " << fidl::ostream::Formatted<::zx::bti>(value.bti_handle()) << ", ";
  os << "channel_handle";
  os << " = " << fidl::ostream::Formatted<::zx::channel>(value.channel_handle()) << ", ";
  os << "clock_handle";
  os << " = " << fidl::ostream::Formatted<::zx::clock>(value.clock_handle()) << ", ";
  os << "debuglog_handle";
  os << " = " << fidl::ostream::Formatted<::zx::debuglog>(value.debuglog_handle()) << ", ";
  os << "event_handle";
  os << " = " << fidl::ostream::Formatted<::zx::event>(value.event_handle()) << ", ";
  os << "eventpair_handle";
  os << " = " << fidl::ostream::Formatted<::zx::eventpair>(value.eventpair_handle()) << ", ";
  os << "exception_handle";
  os << " = " << fidl::ostream::Formatted<::zx::exception>(value.exception_handle()) << ", ";
  os << "fifo_handle";
  os << " = " << fidl::ostream::Formatted<::zx::fifo>(value.fifo_handle()) << ", ";
  os << "guest_handle";
  os << " = " << fidl::ostream::Formatted<::zx::guest>(value.guest_handle()) << ", ";
  os << "interrupt_handle";
  os << " = " << fidl::ostream::Formatted<::zx::interrupt>(value.interrupt_handle()) << ", ";
  os << "iommu_handle";
  os << " = " << fidl::ostream::Formatted<::zx::iommu>(value.iommu_handle()) << ", ";
  os << "job_handle";
  os << " = " << fidl::ostream::Formatted<::zx::job>(value.job_handle()) << ", ";
  os << "msi_handle";
  os << " = " << fidl::ostream::Formatted<::zx::msi>(value.msi_handle()) << ", ";
  os << "pager_handle";
  os << " = " << fidl::ostream::Formatted<::zx::pager>(value.pager_handle()) << ", ";
  os << "pmt_handle";
  os << " = " << fidl::ostream::Formatted<::zx::pmt>(value.pmt_handle()) << ", ";
  os << "port_handle";
  os << " = " << fidl::ostream::Formatted<::zx::port>(value.port_handle()) << ", ";
  os << "process_handle";
  os << " = " << fidl::ostream::Formatted<::zx::process>(value.process_handle()) << ", ";
  os << "profile_handle";
  os << " = " << fidl::ostream::Formatted<::zx::profile>(value.profile_handle()) << ", ";
  os << "resource_handle";
  os << " = " << fidl::ostream::Formatted<::zx::resource>(value.resource_handle()) << ", ";
  os << "socket_handle";
  os << " = " << fidl::ostream::Formatted<::zx::socket>(value.socket_handle()) << ", ";
  os << "stream_handle";
  os << " = " << fidl::ostream::Formatted<::zx::stream>(value.stream_handle()) << ", ";
  os << "suspendtoken_handle";
  os << " = " << fidl::ostream::Formatted<::zx::suspend_token>(value.suspendtoken_handle()) << ", ";
  os << "thread_handle";
  os << " = " << fidl::ostream::Formatted<::zx::thread>(value.thread_handle()) << ", ";
  os << "timer_handle";
  os << " = " << fidl::ostream::Formatted<::zx::timer>(value.timer_handle()) << ", ";
  os << "vcpu_handle";
  os << " = " << fidl::ostream::Formatted<::zx::vcpu>(value.vcpu_handle()) << ", ";
  os << "vmar_handle";
  os << " = " << fidl::ostream::Formatted<::zx::vmar>(value.vmar_handle()) << ", ";
  os << "vmo_handle";
  os << " = " << fidl::ostream::Formatted<::zx::vmo>(value.vmo_handle()) << ", ";
  os << "rights_handle";
  os << " = " << fidl::ostream::Formatted<::zx::vmo>(value.rights_handle()) << ", ";
  os << "aliased_plain_handle_field";
  os << " = " << fidl::ostream::Formatted<::zx::handle>(value.aliased_plain_handle_field()) << ", ";
  os << "aliased_subtype_handle_field";
  os << " = " << fidl::ostream::Formatted<::zx::vmo>(value.aliased_subtype_handle_field()) << ", ";
  os << "aliased_rights_handle_field";
  os << " = " << fidl::ostream::Formatted<::zx::vmo>(value.aliased_rights_handle_field()) << ", ";
  os << "some_protocol";
  os << " = " << fidl::ostream::Formatted<::fidl::ClientEnd<::test_handles::SomeProtocol>>(value.some_protocol()) << ", ";
  os << "request_some_protocol";
  os << " = " << fidl::ostream::Formatted<::fidl::ServerEnd<::test_handles::SomeProtocol>>(value.request_some_protocol()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_handles::FdfHandles>::Format(std::ostream& os, const ::test_handles::FdfHandles& value) {
  os << "test_handles::FdfHandles";
  os << "{ ";
  os << "fdf_channel_handle";
  os << " = " << fidl::ostream::Formatted<::fdf::Channel>(value.fdf_channel_handle()) << ", ";
  os << "client_end_driver";
  os << " = " << fidl::ostream::Formatted<::fdf::ClientEnd<::test_handles::DriverProtocol>>(value.client_end_driver()) << ", ";
  os << "server_end_driver";
  os << " = " << fidl::ostream::Formatted<::fdf::ServerEnd<::test_handles::DriverProtocol>>(value.server_end_driver()) << ", ";
  os << "}";
  return os;
}

namespace test_handles {

std::ostream& operator<<(std::ostream& os, const ::test_handles::Handles& value) {
  return fidl::ostream::Formatter<::test_handles::Handles>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_handles::FdfHandles& value) {
  return fidl::ostream::Formatter<::test_handles::FdfHandles>::Format(os, value);
}

#pragma clang diagnostic pop

}  // namespace test_handles
