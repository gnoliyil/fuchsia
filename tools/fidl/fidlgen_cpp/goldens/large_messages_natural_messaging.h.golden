// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.largemessages/cpp/markers.h>
#include <fidl/test.largemessages/cpp/natural_types.h>
#include <fidl/test.largemessages/cpp/wire_messaging.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/thenable.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <lib/fidl/cpp/wire/unknown_interaction_handler.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {

}  // namespace fidl

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> {
  using Request = ::test_largemessages::BoundedKnownToBeSmall;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> {
  using Request = ::test_largemessages::BoundedMaybeLarge;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> {
  using Request = ::test_largemessages::SemiBoundedBelievedToBeSmall;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> {
  using Request = ::test_largemessages::SemiBoundedMaybeLarge;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> {
  using Request = ::test_largemessages::UnboundedMaybeLargeValue;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> {
  using Request = ::test_largemessages::UnboundedMaybeLargeResource;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> {
  using Request = ::test_largemessages::BoundedKnownToBeSmall;

  using Response = ::test_largemessages::BoundedKnownToBeSmall;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> {
  using Request = ::test_largemessages::BoundedMaybeLarge;

  using Response = ::test_largemessages::BoundedMaybeLarge;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> {
  using Request = ::test_largemessages::SemiBoundedBelievedToBeSmall;

  using Response = ::test_largemessages::SemiBoundedBelievedToBeSmall;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> {
  using Request = ::test_largemessages::SemiBoundedMaybeLarge;

  using Response = ::test_largemessages::SemiBoundedMaybeLarge;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> {
  using Request = ::test_largemessages::UnboundedMaybeLargeValue;

  using Response = ::test_largemessages::UnboundedMaybeLargeValue;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> {
  using Request = ::test_largemessages::UnboundedMaybeLargeResource;

  using Response = ::test_largemessages::UnboundedMaybeLargeResource;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>&)>;
};
namespace test_largemessages {
__LOCAL extern "C" const fidl_type_t test_largemessages_BoundedKnownToBeSmallTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_BoundedMaybeLargeTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_SemiBoundedBelievedToBeSmallTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_SemiBoundedMaybeLargeTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeValueTable;

__LOCAL extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeResourceTable;

#ifdef __Fuchsia__
}  // namespace test_largemessages

template <>
class ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> final : public ::test_largemessages::BoundedKnownToBeSmall {
 public:
  using ::test_largemessages::BoundedKnownToBeSmall::BoundedKnownToBeSmall;
  Response(::test_largemessages::BoundedKnownToBeSmall v) : BoundedKnownToBeSmall(std::move(v)) {}
};
namespace test_largemessages {
}  // namespace test_largemessages

template <>
class ::fidl::Result<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> final : public ::fit::result<::fidl::Error, ::test_largemessages::BoundedKnownToBeSmall> {
 public:
  using ::fit::result<::fidl::Error, ::test_largemessages::BoundedKnownToBeSmall>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> final : public ::test_largemessages::BoundedMaybeLarge {
 public:
  using ::test_largemessages::BoundedMaybeLarge::BoundedMaybeLarge;
  Response(::test_largemessages::BoundedMaybeLarge v) : BoundedMaybeLarge(std::move(v)) {}
};

template <>
class ::fidl::Result<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> final : public ::fit::result<::fidl::Error, ::test_largemessages::BoundedMaybeLarge> {
 public:
  using ::fit::result<::fidl::Error, ::test_largemessages::BoundedMaybeLarge>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> final : public ::test_largemessages::SemiBoundedBelievedToBeSmall {
 public:
  using ::test_largemessages::SemiBoundedBelievedToBeSmall::SemiBoundedBelievedToBeSmall;
  Response(::test_largemessages::SemiBoundedBelievedToBeSmall v) : SemiBoundedBelievedToBeSmall(std::move(v)) {}
};

template <>
class ::fidl::Result<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> final : public ::fit::result<::fidl::Error, ::test_largemessages::SemiBoundedBelievedToBeSmall> {
 public:
  using ::fit::result<::fidl::Error, ::test_largemessages::SemiBoundedBelievedToBeSmall>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> final : public ::test_largemessages::SemiBoundedMaybeLarge {
 public:
  using ::test_largemessages::SemiBoundedMaybeLarge::SemiBoundedMaybeLarge;
  Response(::test_largemessages::SemiBoundedMaybeLarge v) : SemiBoundedMaybeLarge(std::move(v)) {}
};

template <>
class ::fidl::Result<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> final : public ::fit::result<::fidl::Error, ::test_largemessages::SemiBoundedMaybeLarge> {
 public:
  using ::fit::result<::fidl::Error, ::test_largemessages::SemiBoundedMaybeLarge>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> final : public ::test_largemessages::UnboundedMaybeLargeValue {
 public:
  using ::test_largemessages::UnboundedMaybeLargeValue::UnboundedMaybeLargeValue;
  Response(::test_largemessages::UnboundedMaybeLargeValue v) : UnboundedMaybeLargeValue(std::move(v)) {}
};

template <>
class ::fidl::Result<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> final : public ::fit::result<::fidl::Error, ::test_largemessages::UnboundedMaybeLargeValue> {
 public:
  using ::fit::result<::fidl::Error, ::test_largemessages::UnboundedMaybeLargeValue>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> final : public ::test_largemessages::UnboundedMaybeLargeResource {
 public:
  using ::test_largemessages::UnboundedMaybeLargeResource::UnboundedMaybeLargeResource;
  Response(::test_largemessages::UnboundedMaybeLargeResource v) : UnboundedMaybeLargeResource(std::move(v)) {}
};

template <>
class ::fidl::Result<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> final : public ::fit::result<::fidl::Error, ::test_largemessages::UnboundedMaybeLargeResource> {
 public:
  using ::fit::result<::fidl::Error, ::test_largemessages::UnboundedMaybeLargeResource>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing> final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> EncodeBoundedKnownToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>& request) const;

  ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> EncodeBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>& request) const;

  ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> EncodeSemiBoundedBelievedToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>& request) const;

  ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> EncodeSemiBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>& request) const;

  ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> EncodeUnboundedMaybeLargeValue(const ::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>& request) const;

  ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> EncodeUnboundedMaybeLargeResource(::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> request) const;

  ::fit::result<::fidl::OneWayError> DecodeBoundedKnownToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>& request) const;

  ::fit::result<::fidl::OneWayError> DecodeBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>& request) const;

  ::fit::result<::fidl::OneWayError> DecodeSemiBoundedBelievedToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>& request) const;

  ::fit::result<::fidl::OneWayError> DecodeSemiBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>& request) const;

  ::fit::result<::fidl::OneWayError> DecodeUnboundedMaybeLargeValue(const ::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>& request) const;

  ::fit::result<::fidl::OneWayError> DecodeUnboundedMaybeLargeResource(::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> request) const;
};
namespace test_largemessages {

#endif  // __Fuchsia__

}  // namespace test_largemessages

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>> {
 public:
  ::fidl::Result<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> EncodeBoundedKnownToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>& request);

  ::fidl::Result<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> EncodeBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>& request);

  ::fidl::Result<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> EncodeSemiBoundedBelievedToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>& request);

  ::fidl::Result<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> EncodeSemiBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>& request);

  ::fidl::Result<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> EncodeUnboundedMaybeLargeValue(const ::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>& request);

  ::fidl::Result<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> EncodeUnboundedMaybeLargeResource(::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> request);

  ::fit::result<::fidl::OneWayError> DecodeBoundedKnownToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>& request);

  ::fit::result<::fidl::OneWayError> DecodeBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>& request);

  ::fit::result<::fidl::OneWayError> DecodeSemiBoundedBelievedToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>& request);

  ::fit::result<::fidl::OneWayError> DecodeSemiBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>& request);

  ::fit::result<::fidl::OneWayError> DecodeUnboundedMaybeLargeValue(const ::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>& request);

  ::fit::result<::fidl::OneWayError> DecodeUnboundedMaybeLargeResource(::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> request);

 private:
  ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_largemessages::Overflowing>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<::test_largemessages::Overflowing> : public ::fidl::internal::BaseEventHandlerInterface, public ::fidl::UnknownEventHandler<::test_largemessages::Overflowing> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_largemessages::Overflowing>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_largemessages::Overflowing>, public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::SyncEventHandler<::test_largemessages::Overflowing>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_largemessages::Overflowing>, public ::fidl::internal::SyncEventHandler {
 public:
  SyncEventHandler() = default;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method.
  ::fidl::Status HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end);
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_largemessages::Overflowing> final : public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::NaturalEventHandlerInterface<::test_largemessages::Overflowing>> {
 public:
  explicit NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_largemessages::Overflowing>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
  ::fidl::Status DispatchEvent(
      ::fidl::IncomingHeaderAndMessage& msg,
      internal::MessageStorageViewBase* storage_view) override;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<::test_largemessages::Overflowing> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<::test_largemessages::Overflowing>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalEventSender<::test_largemessages::Overflowing>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};

#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> : public ::fidl::CompleterBase {
 public:
  void Reply(::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::Server<::test_largemessages::Overflowing> : public ::fidl::internal::IncomingMessageDispatcher, public ::fidl::UnknownMethodHandler<::test_largemessages::Overflowing> {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_largemessages::Overflowing;

  using Handler = fidl::ProtocolHandler<::test_largemessages::Overflowing>;

  using DecodeBoundedKnownToBeSmallRequest = ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>;
  using DecodeBoundedKnownToBeSmallCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>;

  virtual void DecodeBoundedKnownToBeSmall(DecodeBoundedKnownToBeSmallRequest& request,
                                           DecodeBoundedKnownToBeSmallCompleter::Sync& completer) = 0;

  using DecodeBoundedMaybeLargeRequest = ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>;
  using DecodeBoundedMaybeLargeCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>;

  virtual void DecodeBoundedMaybeLarge(DecodeBoundedMaybeLargeRequest& request,
                                       DecodeBoundedMaybeLargeCompleter::Sync& completer) = 0;

  using DecodeSemiBoundedBelievedToBeSmallRequest = ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>;
  using DecodeSemiBoundedBelievedToBeSmallCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>;

  virtual void DecodeSemiBoundedBelievedToBeSmall(DecodeSemiBoundedBelievedToBeSmallRequest& request,
                                                  DecodeSemiBoundedBelievedToBeSmallCompleter::Sync& completer) = 0;

  using DecodeSemiBoundedMaybeLargeRequest = ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>;
  using DecodeSemiBoundedMaybeLargeCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>;

  virtual void DecodeSemiBoundedMaybeLarge(DecodeSemiBoundedMaybeLargeRequest& request,
                                           DecodeSemiBoundedMaybeLargeCompleter::Sync& completer) = 0;

  using DecodeUnboundedMaybeLargeValueRequest = ::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>;
  using DecodeUnboundedMaybeLargeValueCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>;

  virtual void DecodeUnboundedMaybeLargeValue(DecodeUnboundedMaybeLargeValueRequest& request,
                                              DecodeUnboundedMaybeLargeValueCompleter::Sync& completer) = 0;

  using DecodeUnboundedMaybeLargeResourceRequest = ::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>;
  using DecodeUnboundedMaybeLargeResourceCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>;

  virtual void DecodeUnboundedMaybeLargeResource(DecodeUnboundedMaybeLargeResourceRequest& request,
                                                 DecodeUnboundedMaybeLargeResourceCompleter::Sync& completer) = 0;

  using EncodeBoundedKnownToBeSmallRequest = ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>;
  using EncodeBoundedKnownToBeSmallCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>;

  virtual void EncodeBoundedKnownToBeSmall(EncodeBoundedKnownToBeSmallRequest& request,
                                           EncodeBoundedKnownToBeSmallCompleter::Sync& completer) = 0;

  using EncodeBoundedMaybeLargeRequest = ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>;
  using EncodeBoundedMaybeLargeCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>;

  virtual void EncodeBoundedMaybeLarge(EncodeBoundedMaybeLargeRequest& request,
                                       EncodeBoundedMaybeLargeCompleter::Sync& completer) = 0;

  using EncodeSemiBoundedBelievedToBeSmallRequest = ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>;
  using EncodeSemiBoundedBelievedToBeSmallCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>;

  virtual void EncodeSemiBoundedBelievedToBeSmall(EncodeSemiBoundedBelievedToBeSmallRequest& request,
                                                  EncodeSemiBoundedBelievedToBeSmallCompleter::Sync& completer) = 0;

  using EncodeSemiBoundedMaybeLargeRequest = ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>;
  using EncodeSemiBoundedMaybeLargeCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>;

  virtual void EncodeSemiBoundedMaybeLarge(EncodeSemiBoundedMaybeLargeRequest& request,
                                           EncodeSemiBoundedMaybeLargeCompleter::Sync& completer) = 0;

  using EncodeUnboundedMaybeLargeValueRequest = ::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>;
  using EncodeUnboundedMaybeLargeValueCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>;

  virtual void EncodeUnboundedMaybeLargeValue(EncodeUnboundedMaybeLargeValueRequest& request,
                                              EncodeUnboundedMaybeLargeValueCompleter::Sync& completer) = 0;

  using EncodeUnboundedMaybeLargeResourceRequest = ::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>;
  using EncodeUnboundedMaybeLargeResourceCompleter = ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>;

  virtual void EncodeUnboundedMaybeLargeResource(EncodeUnboundedMaybeLargeResourceRequest& request,
                                                 EncodeUnboundedMaybeLargeResourceCompleter::Sync& completer) = 0;

  // |bind_handler| returns a handler that binds incoming connections to this
  // server implementation.
  //
  // The returned handler borrows the server instance.
  // The server must outlive the provided |dispatcher|. Only after
  // the dispatcher is shutdown will it be safe to destroy the servers.
  // The server should not be moved.
  Handler bind_handler(async_dispatcher_t* dispatcher) {
    return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_largemessages::Overflowing> request) {
      (void)::fidl::BindServer(dispatcher, std::move(request), impl);
    };
  }

 private:
  void dispatch_message(
      ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::MessageStorageViewBase* storage_view) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<::test_largemessages::Overflowing> final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_largemessages::Overflowing>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static const ::fidl::internal::UnknownMethodHandlerEntry unknown_method_handler_entry_;
};

#endif  // __Fuchsia__

#pragma clang diagnostic pop
