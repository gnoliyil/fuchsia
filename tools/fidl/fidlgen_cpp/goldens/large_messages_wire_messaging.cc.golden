// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#include <fidl/test.largemessages/cpp/wire_messaging.h>

#include <memory>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_largemessages {

[[maybe_unused]] constexpr uint64_t kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal = 5952259942637616356lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeBoundedKnownToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_BoundedKnownToBeSmallTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_DecodeBoundedMaybeLarge_Ordinal = 4844409317800064506lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_BoundedMaybeLargeTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal = 9033523515723994320lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeSemiBoundedBelievedToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_SemiBoundedBelievedToBeSmallTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal = 2934974775967009888lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeSemiBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_SemiBoundedMaybeLargeTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal = 6619820881740926511lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeUnboundedMaybeLargeValue_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeValueTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal = 4562382013720126356lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_DecodeUnboundedMaybeLargeResource_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeResourceTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal = 6548039810775918803lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeBoundedKnownToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_BoundedKnownToBeSmallTable;

extern "C" const fidl_type_t test_largemessages_BoundedKnownToBeSmallTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_EncodeBoundedMaybeLarge_Ordinal = 3946825660199764192lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_BoundedMaybeLargeTable;

extern "C" const fidl_type_t test_largemessages_BoundedMaybeLargeTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal = 4256297304861928433lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeSemiBoundedBelievedToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_SemiBoundedBelievedToBeSmallTable;

extern "C" const fidl_type_t test_largemessages_SemiBoundedBelievedToBeSmallTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal = 2268007598729864303lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeSemiBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_SemiBoundedMaybeLargeTable;

extern "C" const fidl_type_t test_largemessages_SemiBoundedMaybeLargeTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal = 3417738688177890202lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeUnboundedMaybeLargeValue_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeValueTable;

extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeValueTable;

[[maybe_unused]] constexpr uint64_t kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal = 343754737384884834lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags kOverflowing_EncodeUnboundedMaybeLargeResource_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeResourceTable;

extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeResourceTable;
#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.handle());
  SetStatus(outgoing);
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::WireResult(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client,
    ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::WireUnownedResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::WireUnownedResult(::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_largemessages {

#endif  // __Fuchsia__

}  // namespace test_largemessages

#ifdef __Fuchsia__

::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_largemessages::Overflowing>::DecodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> _request_object{bytes};
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>, ::fidl::internal::ChannelTransport> _request_message(
      ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_largemessages::Overflowing>::DecodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> _request_object{bytes};
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>, ::fidl::internal::ChannelTransport> _request_message(
      ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_largemessages::Overflowing>::DecodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> _request_object{SemiBoundedBelievedToBeSmall};
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::ChannelTransport> _request_message(
      ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_largemessages::Overflowing>::DecodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> _request_object{SemiBoundedMaybeLarge};
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>, ::fidl::internal::ChannelTransport> _request_message(
      ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_largemessages::Overflowing>::DecodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> _request_object{bytes};
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>, ::fidl::internal::ChannelTransport> _request_message(
      ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_largemessages::Overflowing>::DecodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> _request_object{std::move(elements)};
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>, ::fidl::internal::ChannelTransport> _request_message(
      ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}

::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> fidl::internal::WireWeakAsyncClientImpl<::test_largemessages::Overflowing>::EncodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes) {
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> _request{bytes};
  return ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}

::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> fidl::internal::WireWeakAsyncClientImpl<::test_largemessages::Overflowing>::EncodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes) {
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> _request{bytes};
  return ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}

::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> fidl::internal::WireWeakAsyncClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> _request{SemiBoundedBelievedToBeSmall};
  return ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}

::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> fidl::internal::WireWeakAsyncClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> _request{SemiBoundedMaybeLarge};
  return ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}

::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> fidl::internal::WireWeakAsyncClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes) {
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> _request{bytes};
  return ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}

::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> fidl::internal::WireWeakAsyncClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> _request{std::move(elements)};
  return ::fidl::internal::WireThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_largemessages::Overflowing>::DecodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall> _request{bytes};
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_largemessages::Overflowing>::DecodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge> _request{bytes};
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_largemessages::Overflowing>::DecodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall> _request{SemiBoundedBelievedToBeSmall};
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_largemessages::Overflowing>::DecodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge> _request{SemiBoundedMaybeLarge};
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_largemessages::Overflowing>::DecodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue> _request{bytes};
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_largemessages::Overflowing>::DecodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> _request{std::move(elements)};
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> fidl::internal::WireWeakAsyncBufferClientImpl<::test_largemessages::Overflowing>::EncodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>();
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> _request{bytes};
  return ::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> fidl::internal::WireWeakAsyncBufferClientImpl<::test_largemessages::Overflowing>::EncodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>();
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> _request{bytes};
  return ::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> fidl::internal::WireWeakAsyncBufferClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>();
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> _request{SemiBoundedBelievedToBeSmall};
  return ::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> fidl::internal::WireWeakAsyncBufferClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>();
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> _request{SemiBoundedMaybeLarge};
  return ::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> fidl::internal::WireWeakAsyncBufferClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>();
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> _request{bytes};
  return ::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> fidl::internal::WireWeakAsyncBufferClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>();
  ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> _request{std::move(elements)};
  return ::fidl::internal::WireBufferThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}

::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>
fidl::internal::WireWeakSyncClientImpl<::test_largemessages::Overflowing>::EncodeBoundedKnownToBeSmall(::fidl::VectorView<uint8_t> bytes) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> _request{bytes};
        return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(::fidl::UnownedClientEnd<::test_largemessages::Overflowing>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>
fidl::internal::WireWeakSyncClientImpl<::test_largemessages::Overflowing>::EncodeBoundedMaybeLarge(::fidl::VectorView<uint8_t> bytes) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> _request{bytes};
        return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(::fidl::UnownedClientEnd<::test_largemessages::Overflowing>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>
fidl::internal::WireWeakSyncClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedBelievedToBeSmall(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> _request{SemiBoundedBelievedToBeSmall};
        return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(::fidl::UnownedClientEnd<::test_largemessages::Overflowing>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>
fidl::internal::WireWeakSyncClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedMaybeLarge(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> _request{SemiBoundedMaybeLarge};
        return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(::fidl::UnownedClientEnd<::test_largemessages::Overflowing>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>
fidl::internal::WireWeakSyncClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeValue(::fidl::VectorView<uint8_t> bytes) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> _request{bytes};
        return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(::fidl::UnownedClientEnd<::test_largemessages::Overflowing>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>
fidl::internal::WireWeakSyncClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeResource(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> _request{std::move(elements)};
        return ::fidl::WireResult<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(::fidl::UnownedClientEnd<::test_largemessages::Overflowing>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Status fidl::WireSyncEventHandler<::test_largemessages::Overflowing>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_largemessages::Overflowing> event_storage;
  fidl::internal::WireEventDispatcher<::test_largemessages::Overflowing> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}
::fidl::Status
fidl::internal::WireEventDispatcher<::test_largemessages::Overflowing>::DispatchEvent(
    ::fidl::IncomingHeaderAndMessage& msg,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  switch (msg.header()->ordinal) {
    default:
      auto* hdr = msg.header();
      ::fidl::UnknownMethodType unknown_method_type =
          ::fidl::internal::UnknownMethodTypeFromHeader(hdr);
      bool is_flexible_interaction = ::fidl::IsFlexibleInteraction(hdr);
      auto ordinal = hdr->ordinal;
      std::move(msg).CloseHandles();
      if (is_flexible_interaction &&
          ::fidl::internal::CanHandleEvent(::test_largemessages::Overflowing::kOpenness, unknown_method_type)) {
        if (event_handler()) {
          ::fidl::UnknownEventMetadata<::test_largemessages::Overflowing> metadata{
              .event_ordinal = ordinal,
          };
          event_handler()->handle_unknown_event(metadata);
        }
        return ::fidl::Status::Ok();
      }
      return ::fidl::Status::UnknownOrdinal();
  }
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_largemessages::Overflowing>::entries_[] = {
    {
        ::test_largemessages::kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::BoundedKnownToBeSmall>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->DecodeBoundedKnownToBeSmall(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeBoundedMaybeLarge_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::BoundedMaybeLarge>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->DecodeBoundedMaybeLarge(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::SemiBoundedBelievedToBeSmall>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->DecodeSemiBoundedBelievedToBeSmall(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::SemiBoundedMaybeLarge>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->DecodeSemiBoundedMaybeLarge(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::UnboundedMaybeLargeValue>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->DecodeUnboundedMaybeLargeValue(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::UnboundedMaybeLargeResource>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->DecodeUnboundedMaybeLargeResource(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::BoundedKnownToBeSmall>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->EncodeBoundedKnownToBeSmall(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::BoundedMaybeLarge>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->EncodeBoundedMaybeLarge(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::SemiBoundedBelievedToBeSmall>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->EncodeSemiBoundedBelievedToBeSmall(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::SemiBoundedMaybeLarge>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->EncodeSemiBoundedMaybeLarge(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::UnboundedMaybeLargeValue>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->EncodeUnboundedMaybeLargeValue(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_largemessages::wire::UnboundedMaybeLargeResource>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->EncodeUnboundedMaybeLargeResource(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_largemessages::Overflowing>::entries_end_ =
    &entries_[12];
const ::fidl::internal::UnknownMethodHandlerEntry fidl::internal::WireServerDispatcher<::test_largemessages::Overflowing>::unknown_method_handler_entry_ = {
    .openness = ::fidl::internal::Openness::kOpen,
    .dispatch = [](void* interface, uint64_t method_ordinal,
                   ::fidl::UnknownMethodType unknown_method_type, ::fidl::Transaction* txn) {
      ::fidl::UnknownMethodCompleter::Sync completer(txn);
      static_cast<::fidl::WireServer<::test_largemessages::Overflowing>*>(interface)->handle_unknown_method(
          ::fidl::UnknownMethodMetadata<::test_largemessages::Overflowing>{
              .method_ordinal = method_ordinal,

              .unknown_method_type = unknown_method_type,

          },
          completer);
    },
    .send_reply = ::fidl::internal::SendChannelUnknownMethodReply,
};

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_largemessages::Overflowing>::TryDispatch(
    ::fidl::WireServer<::test_largemessages::Overflowing>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_largemessages::Overflowing>::Dispatch(::fidl::WireServer<::test_largemessages::Overflowing>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                       internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
                             &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_largemessages::Overflowing>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_largemessages::Overflowing>::Dispatch(this, std::move(msg), storage_view, txn);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::Reply(::fidl::VectorView<uint8_t> bytes) {
  return MakeReply(bytes);
}

void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::MakeReply(::fidl::VectorView<uint8_t> bytes) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> _response{bytes};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::Reply(::fidl::VectorView<uint8_t> bytes) {
  return MakeReply(bytes);
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::MakeReply(::fidl::VectorView<uint8_t> bytes) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> _response{bytes};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::Reply(::fidl::VectorView<uint8_t> bytes) {
  return MakeReply(bytes);
}

void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::MakeReply(::fidl::VectorView<uint8_t> bytes) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> _response{bytes};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::Reply(::fidl::VectorView<uint8_t> bytes) {
  return MakeReply(bytes);
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::MakeReply(::fidl::VectorView<uint8_t> bytes) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> _response{bytes};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::Reply(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
  return MakeReply(SemiBoundedBelievedToBeSmall);
}

void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::MakeReply(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> _response{SemiBoundedBelievedToBeSmall};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::Reply(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
  return MakeReply(SemiBoundedBelievedToBeSmall);
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::MakeReply(::test_largemessages::wire::SemiBoundedBelievedToBeSmall SemiBoundedBelievedToBeSmall) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> _response{SemiBoundedBelievedToBeSmall};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::Reply(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
  return MakeReply(SemiBoundedMaybeLarge);
}

void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::MakeReply(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> _response{SemiBoundedMaybeLarge};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::Reply(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
  return MakeReply(SemiBoundedMaybeLarge);
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::MakeReply(::test_largemessages::wire::SemiBoundedMaybeLarge SemiBoundedMaybeLarge) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> _response{SemiBoundedMaybeLarge};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::Reply(::fidl::VectorView<uint8_t> bytes) {
  return MakeReply(bytes);
}

void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::MakeReply(::fidl::VectorView<uint8_t> bytes) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> _response{bytes};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::Reply(::fidl::VectorView<uint8_t> bytes) {
  return MakeReply(bytes);
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::MakeReply(::fidl::VectorView<uint8_t> bytes) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> _response{bytes};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::Reply(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
  return MakeReply(std::move(elements));
}

void fidl::internal::WireCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::MakeReply(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> _response{std::move(elements)};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::Reply(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
  return MakeReply(std::move(elements));
}

void fidl::internal::WireBufferCompleterImpl<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::MakeReply(::fidl::Array<::test_largemessages::wire::Elements, 64>&& elements) {
  ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> _response{std::move(elements)};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal, ::test_largemessages::kOverflowing_DecodeBoundedKnownToBeSmall_DynamicFlags);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_DecodeBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_DecodeBoundedMaybeLarge_DynamicFlags);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal, ::test_largemessages::kOverflowing_DecodeSemiBoundedBelievedToBeSmall_DynamicFlags);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_DecodeSemiBoundedMaybeLarge_DynamicFlags);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeValue_DynamicFlags);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeResource_DynamicFlags);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_DynamicFlags);
}

#endif  // __Fuchsia__

void ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_DynamicFlags);
}

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_DynamicFlags);
}

#endif  // __Fuchsia__

void ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_DynamicFlags);
}

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_DynamicFlags);
}

#endif  // __Fuchsia__

void ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_DynamicFlags);
}

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_DynamicFlags);
}

#endif  // __Fuchsia__

void ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_DynamicFlags);
}

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_DynamicFlags);
}

#endif  // __Fuchsia__

void ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_DynamicFlags);
}

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_DynamicFlags);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_DynamicFlags);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#pragma clang diagnostic pop
