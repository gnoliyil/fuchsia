// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#include <fidl/test.inheritance/cpp/wire_messaging.h>

#include <memory>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_inheritance {

[[maybe_unused]] constexpr uint64_t ksuper_foo_Ordinal = 7540745593380780216lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags ksuper_foo_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_inheritance_SuperFooRequestTable;

extern "C" const fidl_type_t test_inheritance_SuperFooResponseTable;
#ifdef __Fuchsia__
}  // namespace test_inheritance

::fidl::WireResult<::test_inheritance::Super::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::test_inheritance::Super> client,
    ::fidl::internal::TransactionalRequest<::test_inheritance::Super::Foo>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_inheritance::Super::Foo>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_inheritance::Super::Foo>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_inheritance::Super::Foo>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_inheritance {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_inheritance

::fidl::WireUnownedResult<::test_inheritance::Super::Foo>::WireUnownedResult(::fidl::UnownedClientEnd<::test_inheritance::Super> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_inheritance::Super::Foo>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_inheritance::Super::Foo>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_inheritance::Super::Foo>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_inheritance::Super::Foo>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_inheritance::Super::Foo>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_inheritance::Super::Foo>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_inheritance {

#endif  // __Fuchsia__

}  // namespace test_inheritance

#ifdef __Fuchsia__

::fidl::internal::WireThenable<::test_inheritance::Super::Foo> fidl::internal::WireWeakAsyncClientImpl<::test_inheritance::Super>::Foo(::fidl::StringView s) {
  ::fidl::internal::TransactionalRequest<::test_inheritance::Super::Foo> _request{s};
  return ::fidl::internal::WireThenable<::test_inheritance::Super::Foo>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}
::fidl::internal::WireBufferThenable<::test_inheritance::Super::Foo> fidl::internal::WireWeakAsyncBufferClientImpl<::test_inheritance::Super>::Foo(::fidl::StringView s) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_inheritance::Super::Foo>();
  ::fidl::internal::TransactionalRequest<::test_inheritance::Super::Foo> _request{s};
  return ::fidl::internal::WireBufferThenable<::test_inheritance::Super::Foo>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}

::fidl::WireResult<::test_inheritance::Super::Foo>
fidl::internal::WireWeakSyncClientImpl<::test_inheritance::Super>::Foo(::fidl::StringView s) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_inheritance::Super::Foo> _request{s};
        return ::fidl::WireResult<::test_inheritance::Super::Foo>(::fidl::UnownedClientEnd<::test_inheritance::Super>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Status fidl::WireSyncEventHandler<::test_inheritance::Super>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_inheritance::Super> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_inheritance::Super> event_storage;
  fidl::internal::WireEventDispatcher<::test_inheritance::Super> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_inheritance::Super>::entries_[] = {
    {
        ::test_inheritance::ksuper_foo_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_inheritance::wire::SuperFooRequest>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_inheritance::Super::Foo>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_inheritance::Super>*>(interface)->Foo(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_inheritance::Super>::entries_end_ =
    &entries_[1];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_inheritance::Super>::TryDispatch(
    ::fidl::WireServer<::test_inheritance::Super>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_inheritance::Super>::Dispatch(::fidl::WireServer<::test_inheritance::Super>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                               internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
                             &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_inheritance::Super>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_inheritance::Super>::Dispatch(this, std::move(msg), storage_view, txn);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void fidl::internal::WireCompleterImpl<::test_inheritance::Super::Foo>::Reply(int64_t y) {
  return MakeReply(y);
}

void fidl::internal::WireCompleterImpl<::test_inheritance::Super::Foo>::MakeReply(int64_t y) {
  ::fidl::internal::TransactionalResponse<::test_inheritance::Super::Foo> _response{y};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_inheritance::Super::Foo>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_inheritance::Super::Foo>::Reply(int64_t y) {
  return MakeReply(y);
}

void fidl::internal::WireBufferCompleterImpl<::test_inheritance::Super::Foo>::MakeReply(int64_t y) {
  ::fidl::internal::TransactionalResponse<::test_inheritance::Super::Foo> _response{y};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_inheritance::Super::Foo>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_inheritance::Super::Foo>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_inheritance::Super::Foo>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_inheritance::ksuper_foo_Ordinal, ::test_inheritance::ksuper_foo_DynamicFlags);
}

#endif  // __Fuchsia__

void ::fidl::internal::TransactionalResponse<::test_inheritance::Super::Foo>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_inheritance::ksuper_foo_Ordinal, ::test_inheritance::ksuper_foo_DynamicFlags);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_inheritance {

[[maybe_unused]] constexpr uint64_t ksub_foo_Ordinal = 7540745593380780216lu;

[[maybe_unused]] constexpr ::fidl::MessageDynamicFlags ksub_foo_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

extern "C" const fidl_type_t test_inheritance_SuperFooRequestTable;

extern "C" const fidl_type_t test_inheritance_SuperFooResponseTable;
#ifdef __Fuchsia__
}  // namespace test_inheritance

::fidl::WireResult<::test_inheritance::Sub::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::test_inheritance::Sub> client,
    ::fidl::internal::TransactionalRequest<::test_inheritance::Sub::Foo>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_inheritance::Sub::Foo>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_inheritance::Sub::Foo>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_inheritance::Sub::Foo>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_inheritance {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_inheritance

::fidl::WireUnownedResult<::test_inheritance::Sub::Foo>::WireUnownedResult(::fidl::UnownedClientEnd<::test_inheritance::Sub> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_inheritance::Sub::Foo>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_inheritance::Sub::Foo>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_inheritance::Sub::Foo>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_inheritance::Sub::Foo>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_inheritance::Sub::Foo>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_inheritance::Sub::Foo>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
namespace test_inheritance {

#endif  // __Fuchsia__

}  // namespace test_inheritance

#ifdef __Fuchsia__

::fidl::internal::WireThenable<::test_inheritance::Sub::Foo> fidl::internal::WireWeakAsyncClientImpl<::test_inheritance::Sub>::Foo(::fidl::StringView s) {
  ::fidl::internal::TransactionalRequest<::test_inheritance::Sub::Foo> _request{s};
  return ::fidl::internal::WireThenable<::test_inheritance::Sub::Foo>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}
::fidl::internal::WireBufferThenable<::test_inheritance::Sub::Foo> fidl::internal::WireWeakAsyncBufferClientImpl<::test_inheritance::Sub>::Foo(::fidl::StringView s) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_inheritance::Sub::Foo>();
  ::fidl::internal::TransactionalRequest<::test_inheritance::Sub::Foo> _request{s};
  return ::fidl::internal::WireBufferThenable<::test_inheritance::Sub::Foo>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}

::fidl::WireResult<::test_inheritance::Sub::Foo>
fidl::internal::WireWeakSyncClientImpl<::test_inheritance::Sub>::Foo(::fidl::StringView s) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_inheritance::Sub::Foo> _request{s};
        return ::fidl::WireResult<::test_inheritance::Sub::Foo>(::fidl::UnownedClientEnd<::test_inheritance::Sub>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Status fidl::WireSyncEventHandler<::test_inheritance::Sub>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_inheritance::Sub> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_inheritance::Sub> event_storage;
  fidl::internal::WireEventDispatcher<::test_inheritance::Sub> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_inheritance::Sub>::entries_[] = {
    {
        ::test_inheritance::ksub_foo_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_inheritance::wire::SuperFooRequest>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_inheritance::Sub::Foo>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_inheritance::Sub>*>(interface)->Foo(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_inheritance::Sub>::entries_end_ =
    &entries_[1];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_inheritance::Sub>::TryDispatch(
    ::fidl::WireServer<::test_inheritance::Sub>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_inheritance::Sub>::Dispatch(::fidl::WireServer<::test_inheritance::Sub>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                             internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
                             &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_inheritance::Sub>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_inheritance::Sub>::Dispatch(this, std::move(msg), storage_view, txn);
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void fidl::internal::WireCompleterImpl<::test_inheritance::Sub::Foo>::Reply(int64_t y) {
  return MakeReply(y);
}

void fidl::internal::WireCompleterImpl<::test_inheritance::Sub::Foo>::MakeReply(int64_t y) {
  ::fidl::internal::TransactionalResponse<::test_inheritance::Sub::Foo> _response{y};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_inheritance::Sub::Foo>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_inheritance::Sub::Foo>::Reply(int64_t y) {
  return MakeReply(y);
}

void fidl::internal::WireBufferCompleterImpl<::test_inheritance::Sub::Foo>::MakeReply(int64_t y) {
  ::fidl::internal::TransactionalResponse<::test_inheritance::Sub::Foo> _response{y};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_inheritance::Sub::Foo>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_inheritance::Sub::Foo>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
void ::fidl::internal::TransactionalRequest<::test_inheritance::Sub::Foo>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_inheritance::ksub_foo_Ordinal, ::test_inheritance::ksub_foo_DynamicFlags);
}

#endif  // __Fuchsia__

void ::fidl::internal::TransactionalResponse<::test_inheritance::Sub::Foo>::_InitHeader() {
  ::fidl::InitTxnHeader(&header, 0, ::test_inheritance::ksub_foo_Ordinal, ::test_inheritance::ksub_foo_DynamicFlags);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#pragma clang diagnostic pop
