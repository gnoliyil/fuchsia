// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.typesinprotocols/cpp/markers.h>
#include <fidl/test.typesinprotocols/cpp/natural_types.h>
#include <fidl/test.typesinprotocols/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.typesinprotocols/cpp/natural_messaging.h>
#include <fidl/test.typesinprotocols/cpp/wire_messaging.h>

#endif  // __Fuchsia__
#include <lib/fidl/cpp/wire_natural_conversions.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {
namespace internal {

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::Bits> {
  using type = ::test_typesinprotocols::Bits;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::Bits> {
  using type = ::test_typesinprotocols::wire::Bits;
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::Enum> {
  using type = ::test_typesinprotocols::Enum;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::Enum> {
  using type = ::test_typesinprotocols::wire::Enum;
};

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::Struct, ::test_typesinprotocols::Struct> {
  static ::test_typesinprotocols::Struct ToNatural(::test_typesinprotocols::wire::Struct src);
  static ::test_typesinprotocols::wire::Struct ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::Struct src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::Struct> {
  using type = ::test_typesinprotocols::Struct;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::Struct> {
  using type = ::test_typesinprotocols::wire::Struct;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::ResourceStruct, ::test_typesinprotocols::ResourceStruct> {
  static ::test_typesinprotocols::ResourceStruct ToNatural(::test_typesinprotocols::wire::ResourceStruct src);
  static ::test_typesinprotocols::wire::ResourceStruct ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::ResourceStruct src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::ResourceStruct> {
  using type = ::test_typesinprotocols::ResourceStruct;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::ResourceStruct> {
  using type = ::test_typesinprotocols::wire::ResourceStruct;
};

#endif  // __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::Basic, ::test_typesinprotocols::Basic> {
  static ::test_typesinprotocols::Basic ToNatural(::test_typesinprotocols::wire::Basic src);
  static ::test_typesinprotocols::wire::Basic ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::Basic src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::Basic> {
  using type = ::test_typesinprotocols::Basic;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::Basic> {
  using type = ::test_typesinprotocols::wire::Basic;
};

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::Compound, ::test_typesinprotocols::Compound> {
  static ::test_typesinprotocols::Compound ToNatural(::test_typesinprotocols::wire::Compound src);
  static ::test_typesinprotocols::wire::Compound ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::Compound src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::Compound> {
  using type = ::test_typesinprotocols::Compound;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::Compound> {
  using type = ::test_typesinprotocols::wire::Compound;
};

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::ArrayBasic, ::test_typesinprotocols::ArrayBasic> {
  static ::test_typesinprotocols::ArrayBasic ToNatural(::test_typesinprotocols::wire::ArrayBasic src);
  static ::test_typesinprotocols::wire::ArrayBasic ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::ArrayBasic src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::ArrayBasic> {
  using type = ::test_typesinprotocols::ArrayBasic;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::ArrayBasic> {
  using type = ::test_typesinprotocols::wire::ArrayBasic;
};

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::ArrayCompound, ::test_typesinprotocols::ArrayCompound> {
  static ::test_typesinprotocols::ArrayCompound ToNatural(::test_typesinprotocols::wire::ArrayCompound src);
  static ::test_typesinprotocols::wire::ArrayCompound ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::ArrayCompound src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::ArrayCompound> {
  using type = ::test_typesinprotocols::ArrayCompound;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::ArrayCompound> {
  using type = ::test_typesinprotocols::wire::ArrayCompound;
};

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::VectorBasic, ::test_typesinprotocols::VectorBasic> {
  static ::test_typesinprotocols::VectorBasic ToNatural(::test_typesinprotocols::wire::VectorBasic src);
  static ::test_typesinprotocols::wire::VectorBasic ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::VectorBasic src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::VectorBasic> {
  using type = ::test_typesinprotocols::VectorBasic;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::VectorBasic> {
  using type = ::test_typesinprotocols::wire::VectorBasic;
};

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::VectorCompound, ::test_typesinprotocols::VectorCompound> {
  static ::test_typesinprotocols::VectorCompound ToNatural(::test_typesinprotocols::wire::VectorCompound src);
  static ::test_typesinprotocols::wire::VectorCompound ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::VectorCompound src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::VectorCompound> {
  using type = ::test_typesinprotocols::VectorCompound;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::VectorCompound> {
  using type = ::test_typesinprotocols::wire::VectorCompound;
};

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::VectorOptional, ::test_typesinprotocols::VectorOptional> {
  static ::test_typesinprotocols::VectorOptional ToNatural(::test_typesinprotocols::wire::VectorOptional src);
  static ::test_typesinprotocols::wire::VectorOptional ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::VectorOptional src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::VectorOptional> {
  using type = ::test_typesinprotocols::VectorOptional;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::VectorOptional> {
  using type = ::test_typesinprotocols::wire::VectorOptional;
};

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::ArrayVectorNested, ::test_typesinprotocols::ArrayVectorNested> {
  static ::test_typesinprotocols::ArrayVectorNested ToNatural(::test_typesinprotocols::wire::ArrayVectorNested src);
  static ::test_typesinprotocols::wire::ArrayVectorNested ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::ArrayVectorNested src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::ArrayVectorNested> {
  using type = ::test_typesinprotocols::ArrayVectorNested;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::ArrayVectorNested> {
  using type = ::test_typesinprotocols::wire::ArrayVectorNested;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::Resource, ::test_typesinprotocols::Resource> {
  static ::test_typesinprotocols::Resource ToNatural(::test_typesinprotocols::wire::Resource src);
  static ::test_typesinprotocols::wire::Resource ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::Resource src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::Resource> {
  using type = ::test_typesinprotocols::Resource;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::Resource> {
  using type = ::test_typesinprotocols::wire::Resource;
};

#endif  // __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::Table, ::test_typesinprotocols::Table> {
  static ::test_typesinprotocols::Table ToNatural(::test_typesinprotocols::wire::Table src);
  static ::test_typesinprotocols::wire::Table ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::Table src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::Table> {
  using type = ::test_typesinprotocols::Table;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::Table> {
  using type = ::test_typesinprotocols::wire::Table;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::ResourceTable, ::test_typesinprotocols::ResourceTable> {
  static ::test_typesinprotocols::ResourceTable ToNatural(::test_typesinprotocols::wire::ResourceTable src);
  static ::test_typesinprotocols::wire::ResourceTable ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::ResourceTable src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::ResourceTable> {
  using type = ::test_typesinprotocols::ResourceTable;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::ResourceTable> {
  using type = ::test_typesinprotocols::wire::ResourceTable;
};

#endif  // __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::Union, ::test_typesinprotocols::Union> {
  static ::test_typesinprotocols::Union ToNatural(::test_typesinprotocols::wire::Union src);
  static ::test_typesinprotocols::wire::Union ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::Union src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_typesinprotocols::wire::Union>, std::unique_ptr<::test_typesinprotocols::Union>> {
  static std::unique_ptr<::test_typesinprotocols::Union> ToNatural(::fidl::WireOptional<::test_typesinprotocols::wire::Union> src);
  static ::fidl::WireOptional<::test_typesinprotocols::wire::Union> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_typesinprotocols::Union> src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::Union> {
  using type = ::test_typesinprotocols::Union;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::Union> {
  using type = ::test_typesinprotocols::wire::Union;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_typesinprotocols::wire::ResourceUnion, ::test_typesinprotocols::ResourceUnion> {
  static ::test_typesinprotocols::ResourceUnion ToNatural(::test_typesinprotocols::wire::ResourceUnion src);
  static ::test_typesinprotocols::wire::ResourceUnion ToWire(fidl::AnyArena& arena, ::test_typesinprotocols::ResourceUnion src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_typesinprotocols::wire::ResourceUnion>, std::unique_ptr<::test_typesinprotocols::ResourceUnion>> {
  static std::unique_ptr<::test_typesinprotocols::ResourceUnion> ToNatural(::fidl::WireOptional<::test_typesinprotocols::wire::ResourceUnion> src);
  static ::fidl::WireOptional<::test_typesinprotocols::wire::ResourceUnion> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_typesinprotocols::ResourceUnion> src);
};

template <>
struct NaturalTypeForWireType<::test_typesinprotocols::wire::ResourceUnion> {
  using type = ::test_typesinprotocols::ResourceUnion;
};
template <>
struct WireTypeForNaturalType<::test_typesinprotocols::ResourceUnion> {
  using type = ::test_typesinprotocols::wire::ResourceUnion;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayBasic>, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayBasic>> {
  static ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayBasic> ToNatural(::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayBasic> src);
  static ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayBasic> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayBasic> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayBasic>> {
  using type = ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayBasic>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_typesinprotocols::Protocol::TwoWayBasic>> {
  using type = ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayBasic>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayCompound>, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayCompound>> {
  static ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayCompound> ToNatural(::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayCompound> src);
  static ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayCompound> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayCompound> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayCompound>> {
  using type = ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayCompound>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_typesinprotocols::Protocol::TwoWayCompound>> {
  using type = ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayCompound>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayBasic>, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayBasic>> {
  static ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayBasic> ToNatural(::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayBasic> src);
  static ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayBasic> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayBasic> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayBasic>> {
  using type = ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayBasic>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayBasic>> {
  using type = ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayBasic>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayCompound>, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayCompound>> {
  static ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayCompound> ToNatural(::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayCompound> src);
  static ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayCompound> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayCompound> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayCompound>> {
  using type = ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayCompound>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayCompound>> {
  using type = ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayCompound>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorBasic>, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorBasic>> {
  static ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorBasic> ToNatural(::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorBasic> src);
  static ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorBasic> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorBasic> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorBasic>> {
  using type = ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorBasic>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorBasic>> {
  using type = ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorBasic>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorCompound>, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorCompound>> {
  static ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorCompound> ToNatural(::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorCompound> src);
  static ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorCompound> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorCompound> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorCompound>> {
  using type = ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorCompound>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorCompound>> {
  using type = ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorCompound>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorOptional>, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorOptional>> {
  static ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorOptional> ToNatural(::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorOptional> src);
  static ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorOptional> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorOptional> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorOptional>> {
  using type = ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorOptional>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_typesinprotocols::Protocol::TwoWayVectorOptional>> {
  using type = ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayVectorOptional>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested>, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested>> {
  static ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested> ToNatural(::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested> src);
  static ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested>> {
  using type = ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested>> {
  using type = ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayArrayVectorNested>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayResource>, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayResource>> {
  static ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayResource> ToNatural(::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayResource> src);
  static ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayResource> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayResource> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayResource>> {
  using type = ::fidl::Response<::test_typesinprotocols::Protocol::TwoWayResource>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_typesinprotocols::Protocol::TwoWayResource>> {
  using type = ::fidl::WireResponse<::test_typesinprotocols::Protocol::TwoWayResource>;
};

#endif  // __Fuchsia__
#pragma clang diagnostic pop

}  // namespace internal
}  // namespace fidl
