// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.typesinprotocols/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::Bits> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::Bits& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::Enum> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::Enum& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::Struct> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::Struct& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::Table> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::Table& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::Union> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::Union& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ResourceStruct> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ResourceStruct& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ResourceTable> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ResourceTable& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ResourceUnion> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ResourceUnion& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::Basic> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::Basic& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::Compound> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::Compound& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ArrayBasic> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ArrayBasic& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ArrayCompound> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ArrayCompound& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::VectorBasic> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::VectorBasic& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::VectorCompound> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::VectorCompound& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::VectorOptional> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::VectorOptional& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ArrayVectorNested> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ArrayVectorNested& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::Resource> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::Resource& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorBasicResult> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorBasicResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorBasicTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorBasicTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorCompoundResult> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorCompoundResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorCompoundTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorCompoundTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorArrayBasicResult> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayBasicResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorArrayBasicTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayBasicTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorArrayCompoundResult> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayCompoundResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorArrayCompoundTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayCompoundTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorVectorBasicResult> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorBasicResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorVectorBasicTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorBasicTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorVectorCompoundResult> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorCompoundResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorVectorCompoundTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorCompoundTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorVectorOptionalResult> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorOptionalResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorVectorOptionalTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorOptionalTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorArrayVectorNestedResult> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayVectorNestedResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorArrayVectorNestedTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayVectorNestedTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorResourceResult> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorResourceResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_typesinprotocols::ProtocolErrorResourceTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorResourceTopResponse& value);
};

namespace test_typesinprotocols {

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::Bits& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::Enum& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::Struct& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::Table& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::Union& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ResourceStruct& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ResourceTable& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ResourceUnion& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::Basic& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::Compound& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ArrayBasic& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ArrayCompound& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::VectorBasic& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::VectorCompound& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::VectorOptional& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ArrayVectorNested& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::Resource& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorBasicResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorBasicTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorCompoundResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorCompoundTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayBasicResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayBasicTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayCompoundResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayCompoundTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorBasicResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorBasicTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorCompoundResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorCompoundTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorOptionalResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorVectorOptionalTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayVectorNestedResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorArrayVectorNestedTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorResourceResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_typesinprotocols::ProtocolErrorResourceTopResponse& value);

}  // namespace test_typesinprotocols

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_typesinprotocols::Protocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_typesinprotocols::Protocol>& value) {
    return os << "ClientEnd<"
              << "test_typesinprotocols::Protocol"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_typesinprotocols::Protocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_typesinprotocols::Protocol>& value) {
    return os << "ServerEnd<"
              << "test_typesinprotocols::Protocol"
              << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_typesinprotocols::Protocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_typesinprotocols::Protocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_typesinprotocols::Protocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_typesinprotocols::Protocol>>::Format(os, value);
}

#pragma clang diagnostic pop

}  // namespace fidl
