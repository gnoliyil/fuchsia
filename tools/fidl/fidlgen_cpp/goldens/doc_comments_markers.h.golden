// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <lib/fidl/cpp/wire/internal/transport.h>
#include <lib/fidl/cpp/wire/unknown_interactions.h>

namespace test_doccomments {

/// interface comment #1
///
/// interface comment #3
class Interface final {
  Interface() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;

  /// method comment #1
  ///
  /// method comment #3
  class Method final {
    Method() = delete;

   public:
    using Protocol = ::test_doccomments::Interface;
    static constexpr bool kHasClientToServer = true;
    static constexpr bool kHasClientToServerBody = false;
    static constexpr bool kHasServerToClient = false;
    static constexpr bool kHasServerToClientBody = false;

    static constexpr bool kHasNonEmptyUserFacingResponse = false;
    static constexpr bool kHasDomainError = false;
    static constexpr bool kHasFrameworkError = false;
  };
  /// event comment #1
  ///
  /// event comment #3
  class OnEvent final {
    OnEvent() = delete;

   public:
    using Protocol = ::test_doccomments::Interface;
    static constexpr bool kHasClientToServer = false;
    static constexpr bool kHasClientToServerBody = false;
    static constexpr bool kHasServerToClient = true;
    static constexpr bool kHasServerToClientBody = false;

    static constexpr bool kHasNonEmptyUserFacingResponse = false;
    static constexpr bool kHasDomainError = false;
    static constexpr bool kHasFrameworkError = false;
  };
};

}  // namespace test_doccomments
namespace fidl {

template <>
struct IsProtocol<::test_doccomments::Interface> : public std::true_type {};

}  // namespace fidl
