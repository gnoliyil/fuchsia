// WARNING: This file is machine generated by fidlgen_cpp.

#include <fidl/test.protocollayoutssamelibrary/cpp/natural_messaging.h>
#include <lib/fidl/cpp/wire/unknown_interactions.h>

namespace test_protocollayoutssamelibrary {

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_OneWayAnonComposed_Ordinal = 7960710870216447007lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_OneWayAnonComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_TwoWayAnonComposed_Ordinal = 8107448265006659060lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_TwoWayAnonComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_TwoWayAnonComposedWithError_Ordinal = 5751989932125743144lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_TwoWayAnonComposedWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_OnAnonComposed_Ordinal = 5307191872315199016lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_OnAnonComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_OnAnonComposedWithError_Ordinal = 2988860281596185184lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_OnAnonComposedWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_OneWayNamedComposed_Ordinal = 1159174053475281336lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_OneWayNamedComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_TwoWayNamedComposed_Ordinal = 5022872388073111636lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_TwoWayNamedComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_TwoWayNamedComposedWithError_Ordinal = 4973436213756973807lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_TwoWayNamedComposedWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_OnNamedComposed_Ordinal = 1712755118419701115lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_OnNamedComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kComposedProtocol_OnNamedComposedWithError_Ordinal = 4609236429730196431lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kComposedProtocol_OnNamedComposedWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

#ifdef __Fuchsia__
}  // namespace test_protocollayoutssamelibrary

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::TwoWayAnonComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposed_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::TwoWayAnonComposedWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposedWithError_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::TwoWayNamedComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposed_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::TwoWayNamedComposedWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposedWithError_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::OneWayAnonComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::OneWayAnonComposed>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayAnonComposed_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::OneWayNamedComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::OneWayNamedComposed>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayNamedComposed_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_protocollayoutssamelibrary {

#endif  // __Fuchsia__

}  // namespace test_protocollayoutssamelibrary

#ifdef __Fuchsia__

::fidl::Result<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::TwoWayAnonComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposed_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::TwoWayAnonComposedWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposedWithError_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::TwoWayNamedComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposed_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::TwoWayNamedComposedWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposedWithError_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::OneWayAnonComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::OneWayAnonComposed>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayAnonComposed_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::ComposedProtocol>::OneWayNamedComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::ComposedProtocol::OneWayNamedComposed>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayNamedComposed_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Status fidl::SyncEventHandler<::test_protocollayoutssamelibrary::ComposedProtocol>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_protocollayoutssamelibrary::ComposedProtocol> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_protocollayoutssamelibrary::ComposedProtocol> event_storage;
  fidl::internal::NaturalEventDispatcher<::test_protocollayoutssamelibrary::ComposedProtocol> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}
::fidl::Status
fidl::internal::NaturalEventDispatcher<::test_protocollayoutssamelibrary::ComposedProtocol>::DispatchEvent(
    ::fidl::IncomingHeaderAndMessage& msg,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  switch (msg.header()->ordinal) {
    case ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposed_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::ComposedProtocol::OnAnonComposed> event = std::move(decoded.value());
        event_handler()->OnAnonComposed(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposedWithError_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedWithErrorRequest>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::ComposedProtocol::OnAnonComposedWithError> event = std::move(decoded.value());
        event_handler()->OnAnonComposedWithError(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposed_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::UnionPayload>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::ComposedProtocol::OnNamedComposed> event = std::move(decoded.value());
        event_handler()->OnNamedComposed(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposedWithError_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::ComposedProtocolOnNamedComposedWithErrorRequest>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::ComposedProtocol::OnNamedComposedWithError> event = std::move(decoded.value());
        event_handler()->OnNamedComposedWithError(event);
      }
      return ::fidl::Status::Ok();
    }
    default:
      std::move(msg).CloseHandles();
      return ::fidl::Status::UnknownOrdinal();
  }
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::ComposedProtocol>::OnAnonComposed(const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposed_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::ComposedProtocol>::OnAnonComposed(const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposed_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::ComposedProtocol>::OnAnonComposedWithError(const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposedWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::ComposedProtocol>::OnAnonComposedWithError(const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OnAnonComposedWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::ComposedProtocol>::OnNamedComposed(const ::test_protocollayoutssamelibrary::UnionPayload& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposed_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::ComposedProtocol>::OnNamedComposed(const ::test_protocollayoutssamelibrary::UnionPayload& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposed_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::ComposedProtocol>::OnNamedComposedWithError(const ::test_protocollayoutssamelibrary::ComposedProtocolOnNamedComposedWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposedWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::ComposedProtocol>::OnNamedComposedWithError(const ::test_protocollayoutssamelibrary::ComposedProtocolOnNamedComposedWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_OnNamedComposedWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposed_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposedWithError_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposed_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposedWithError_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<::test_protocollayoutssamelibrary::ComposedProtocol>::entries_[] = {
    {
        ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayAnonComposed_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::ComposedProtocol::OneWayAnonComposed>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::ComposedProtocol>*>(interface)->OneWayAnonComposed(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposed_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposed>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::ComposedProtocol>*>(interface)->TwoWayAnonComposed(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayAnonComposedWithError_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayAnonComposedWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::ComposedProtocol>*>(interface)->TwoWayAnonComposedWithError(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kComposedProtocol_OneWayNamedComposed_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::TablePayload>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::ComposedProtocol::OneWayNamedComposed>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::ComposedProtocol>*>(interface)->OneWayNamedComposed(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposed_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::UnionPayload>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposed>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::ComposedProtocol>*>(interface)->TwoWayNamedComposed(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kComposedProtocol_TwoWayNamedComposedWithError_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::TablePayload>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::ComposedProtocol::TwoWayNamedComposedWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::ComposedProtocol>*>(interface)->TwoWayNamedComposedWithError(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<::test_protocollayoutssamelibrary::ComposedProtocol>::entries_end_ =
    &entries_[6];

void fidl::internal::NaturalServerDispatcher<::test_protocollayoutssamelibrary::ComposedProtocol>::Dispatch(::fidl::Server<::test_protocollayoutssamelibrary::ComposedProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                                            internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_, &unknown_method_handler_entry_);
}

void fidl::Server<::test_protocollayoutssamelibrary::ComposedProtocol>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::NaturalServerDispatcher<::test_protocollayoutssamelibrary::ComposedProtocol>::Dispatch(this, std::move(msg), storage_view, txn);
}

#endif  // __Fuchsia__

namespace test_protocollayoutssamelibrary {

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayAnonComposed_Ordinal = 7960710870216447007lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OneWayAnonComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayAnonComposed_Ordinal = 8107448265006659060lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_TwoWayAnonComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayAnonComposedWithError_Ordinal = 5751989932125743144lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_TwoWayAnonComposedWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnAnonComposed_Ordinal = 5307191872315199016lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OnAnonComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnAnonComposedWithError_Ordinal = 2988860281596185184lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OnAnonComposedWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayNamedComposed_Ordinal = 1159174053475281336lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OneWayNamedComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayNamedComposed_Ordinal = 5022872388073111636lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_TwoWayNamedComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayNamedComposedWithError_Ordinal = 4973436213756973807lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_TwoWayNamedComposedWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnNamedComposed_Ordinal = 1712755118419701115lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OnNamedComposed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnNamedComposedWithError_Ordinal = 4609236429730196431lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OnNamedComposedWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayLocal_Ordinal = 4131125523789731521lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OneWayLocal_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayLocal_Ordinal = 2781407403924167255lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_TwoWayLocal_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayLocalWithError_Ordinal = 5367158046384127463lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_TwoWayLocalWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnLocal_Ordinal = 8208103053879750285lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OnLocal_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnLocalWithError_Ordinal = 3291144184088828891lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OnLocalWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayAnon_Ordinal = 8596232895075765804lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OneWayAnon_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayAnon_Ordinal = 4600336371166510638lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_TwoWayAnon_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayAnonWithError_Ordinal = 2104032160763523653lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_TwoWayAnonWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnAnon_Ordinal = 977183060572945300lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OnAnon_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnAnonWithError_Ordinal = 7374872280336235010lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kMainProtocol_OnAnonWithError_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

#ifdef __Fuchsia__
}  // namespace test_protocollayoutssamelibrary

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayAnonComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposed_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayAnonComposedWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposedWithError_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayNamedComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposed_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayNamedComposedWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposedWithError_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayLocal(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocal_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocal_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayLocalWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocalWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocalWithError_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayAnon(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnon_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnon_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayAnonWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>& request) const {
  return ::fidl::internal::NaturalThenable<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonWithError_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::OneWayAnonComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::OneWayAnonComposed>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnonComposed_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::OneWayNamedComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::OneWayNamedComposed>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayNamedComposed_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::OneWayLocal(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::OneWayLocal>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayLocal_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayLocal_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::OneWayAnon(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::OneWayAnon>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnon_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnon_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_protocollayoutssamelibrary {

#endif  // __Fuchsia__

}  // namespace test_protocollayoutssamelibrary

#ifdef __Fuchsia__

::fidl::Result<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayAnonComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposed_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayAnonComposedWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposedWithError_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayNamedComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposed_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayNamedComposedWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposedWithError_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayLocal(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocal_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocal_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayLocalWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocalWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocalWithError_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayAnon(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnon_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnon_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::TwoWayAnonWithError(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonWithError_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::OneWayAnonComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::OneWayAnonComposed>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnonComposed_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::OneWayNamedComposed(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::OneWayNamedComposed>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayNamedComposed_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::OneWayLocal(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::OneWayLocal>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayLocal_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayLocal_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_protocollayoutssamelibrary::MainProtocol>::OneWayAnon(const ::fidl::Request<::test_protocollayoutssamelibrary::MainProtocol::OneWayAnon>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnon_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnon_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Status fidl::SyncEventHandler<::test_protocollayoutssamelibrary::MainProtocol>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_protocollayoutssamelibrary::MainProtocol> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_protocollayoutssamelibrary::MainProtocol> event_storage;
  fidl::internal::NaturalEventDispatcher<::test_protocollayoutssamelibrary::MainProtocol> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}
::fidl::Status
fidl::internal::NaturalEventDispatcher<::test_protocollayoutssamelibrary::MainProtocol>::DispatchEvent(
    ::fidl::IncomingHeaderAndMessage& msg,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  switch (msg.header()->ordinal) {
    case ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposed_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::MainProtocol::OnAnonComposed> event = std::move(decoded.value());
        event_handler()->OnAnonComposed(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposedWithError_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedWithErrorRequest>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::MainProtocol::OnAnonComposedWithError> event = std::move(decoded.value());
        event_handler()->OnAnonComposedWithError(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposed_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::UnionPayload>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::MainProtocol::OnNamedComposed> event = std::move(decoded.value());
        event_handler()->OnNamedComposed(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposedWithError_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::ComposedProtocolOnNamedComposedWithErrorRequest>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::MainProtocol::OnNamedComposedWithError> event = std::move(decoded.value());
        event_handler()->OnNamedComposedWithError(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kMainProtocol_OnLocal_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::UnionPayload>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::MainProtocol::OnLocal> event = std::move(decoded.value());
        event_handler()->OnLocal(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kMainProtocol_OnLocalWithError_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::MainProtocolOnLocalWithErrorRequest>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::MainProtocol::OnLocalWithError> event = std::move(decoded.value());
        event_handler()->OnLocalWithError(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kMainProtocol_OnAnon_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::MainProtocolOnAnonRequest>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::MainProtocol::OnAnon> event = std::move(decoded.value());
        event_handler()->OnAnon(event);
      }
      return ::fidl::Status::Ok();
    }
    case ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonWithError_Ordinal: {
      ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessage<::test_protocollayoutssamelibrary::MainProtocolOnAnonWithErrorRequest>(std::move(msg));
      if (decoded.is_error()) {
        return decoded.error_value();
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayoutssamelibrary::MainProtocol::OnAnonWithError> event = std::move(decoded.value());
        event_handler()->OnAnonWithError(event);
      }
      return ::fidl::Status::Ok();
    }
    default:
      std::move(msg).CloseHandles();
      return ::fidl::Status::UnknownOrdinal();
  }
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnAnonComposed(const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposed_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnAnonComposed(const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposed_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnAnonComposedWithError(const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposedWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnAnonComposedWithError(const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonComposedWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnNamedComposed(const ::test_protocollayoutssamelibrary::UnionPayload& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposed_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnNamedComposed(const ::test_protocollayoutssamelibrary::UnionPayload& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposed_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnNamedComposedWithError(const ::test_protocollayoutssamelibrary::ComposedProtocolOnNamedComposedWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposedWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnNamedComposedWithError(const ::test_protocollayoutssamelibrary::ComposedProtocolOnNamedComposedWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnNamedComposedWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnLocal(const ::test_protocollayoutssamelibrary::UnionPayload& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnLocal_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnLocal_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnLocal(const ::test_protocollayoutssamelibrary::UnionPayload& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnLocal_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnLocal_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnLocalWithError(const ::test_protocollayoutssamelibrary::MainProtocolOnLocalWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnLocalWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnLocalWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnLocalWithError(const ::test_protocollayoutssamelibrary::MainProtocolOnLocalWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnLocalWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnLocalWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnAnon(const ::test_protocollayoutssamelibrary::MainProtocolOnAnonRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnon_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnon_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnAnon(const ::test_protocollayoutssamelibrary::MainProtocolOnAnonRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnon_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnon_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalWeakEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnAnonWithError(const ::test_protocollayoutssamelibrary::MainProtocolOnAnonWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  return ::fidl::internal::ToFitxResult(_inner().SendEvent(_encoded_message));
}

::fit::result<::fidl::OneWayError> fidl::internal::NaturalEventSender<::test_protocollayoutssamelibrary::MainProtocol>::OnAnonWithError(const ::test_protocollayoutssamelibrary::MainProtocolOnAnonWithErrorRequest& payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_OnAnonWithError_DynamicFlags};
  _encoder.EncodeBody(payload);
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{::fidl::Status{_encoded_message}});
}

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposed_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposedWithError_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposed_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposed_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposedWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposedWithError_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocal_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocal_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocalWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocalWithError_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnon_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnon_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>::Reply(const ::fidl::Response<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonWithError_Ordinal, ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonWithError_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<::test_protocollayoutssamelibrary::MainProtocol>::entries_[] = {
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnonComposed_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::OneWayAnonComposed>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->OneWayAnonComposed(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposed_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposed>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->TwoWayAnonComposed(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonComposedWithError_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonComposedWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->TwoWayAnonComposedWithError(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_OneWayNamedComposed_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::TablePayload>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::OneWayNamedComposed>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->OneWayNamedComposed(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposed_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::UnionPayload>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposed>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->TwoWayNamedComposed(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayNamedComposedWithError_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::TablePayload>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayNamedComposedWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->TwoWayNamedComposedWithError(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_OneWayLocal_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::TablePayload>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::OneWayLocal>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->OneWayLocal(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocal_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::UnionPayload>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocal>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->TwoWayLocal(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayLocalWithError_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::TablePayload>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayLocalWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->TwoWayLocalWithError(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_OneWayAnon_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::MainProtocolOneWayAnonRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::OneWayAnon>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->OneWayAnon(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnon_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnon>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->TwoWayAnon(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocollayoutssamelibrary::kMainProtocol_TwoWayAnonWithError_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_protocollayoutssamelibrary::MainProtocol::TwoWayAnonWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>*>(interface)->TwoWayAnonWithError(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<::test_protocollayoutssamelibrary::MainProtocol>::entries_end_ =
    &entries_[12];

void fidl::internal::NaturalServerDispatcher<::test_protocollayoutssamelibrary::MainProtocol>::Dispatch(::fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                                        internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_, &unknown_method_handler_entry_);
}

void fidl::Server<::test_protocollayoutssamelibrary::MainProtocol>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::NaturalServerDispatcher<::test_protocollayoutssamelibrary::MainProtocol>::Dispatch(this, std::move(msg), storage_view, txn);
}

#endif  // __Fuchsia__
