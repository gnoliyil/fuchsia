// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <lib/fidl/cpp/wire/array.h>
#include <lib/fidl/cpp/wire/envelope.h>
#include <lib/fidl/cpp/wire/internal/transport_err.h>
#include <lib/fidl/cpp/wire/message.h>
#include <lib/fidl/cpp/wire/message_storage.h>
#include <lib/fidl/cpp/wire/object_view.h>
#include <lib/fidl/cpp/wire/string_view.h>
#include <lib/fidl/cpp/wire/traits.h>
#include <lib/fidl/cpp/wire/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>
#include <lib/zx/handle.h>

#endif  // __Fuchsia__

#include <fidl/test.largemessages/cpp/common_types.h>
#include <fidl/test.largemessages/cpp/markers.h>

namespace test_largemessages {

namespace wire {

struct BoundedKnownToBeSmall;

struct BoundedMaybeLarge;

struct UnboundedMaybeLargeValue;

struct Elements;

struct UnboundedMaybeLargeResource;

class SemiBoundedBelievedToBeSmall;

class SemiBoundedMaybeLarge;

extern "C" const fidl_type_t test_largemessages_SemiBoundedBelievedToBeSmallTable;

class SemiBoundedBelievedToBeSmall {
 public:
  SemiBoundedBelievedToBeSmall() : ordinal_(::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Ordinal::Invalid), envelope_{} {}

  SemiBoundedBelievedToBeSmall(const SemiBoundedBelievedToBeSmall&) = default;
  SemiBoundedBelievedToBeSmall& operator=(const SemiBoundedBelievedToBeSmall&) = default;
  SemiBoundedBelievedToBeSmall(SemiBoundedBelievedToBeSmall&&) = default;
  SemiBoundedBelievedToBeSmall& operator=(SemiBoundedBelievedToBeSmall&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kBytes = 1,  // 0x1
    _do_not_handle_this__write_a_default_case_instead = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };
  constexpr bool IsUnknown() const {
    return Which() == ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Tag::_do_not_handle_this__write_a_default_case_instead;
  }

  bool has_invalid_tag() const { return ordinal_ == ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Ordinal::Invalid; }

  bool is_bytes() const { return ordinal_ == ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Ordinal::kBytes; }

  static SemiBoundedBelievedToBeSmall WithBytes(::fidl::ObjectView<::fidl::VectorView<uint8_t>> val) {
    SemiBoundedBelievedToBeSmall result;
    result.ordinal_ = ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Ordinal::kBytes;
    result.envelope_.As<::fidl::VectorView<uint8_t>>().set_data(std::move(val));
    return result;
  }

  template <typename... Args>
  static SemiBoundedBelievedToBeSmall WithBytes(::fidl::AnyArena& allocator, Args&&... args) {
    return WithBytes(::fidl::ObjectView<::fidl::VectorView<uint8_t>>(allocator,
                                                                     std::forward<Args>(args)...));
  }

  ::fidl::VectorView<uint8_t>& bytes() {
    ZX_ASSERT(ordinal_ == ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Ordinal::kBytes);
    return envelope_.As<::fidl::VectorView<uint8_t>>().get_data();
  }
  const ::fidl::VectorView<uint8_t>& bytes() const {
    ZX_ASSERT(ordinal_ == ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Ordinal::kBytes);
    return envelope_.As<::fidl::VectorView<uint8_t>>().get_data();
  }
  ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kBytes = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t test_largemessages_SemiBoundedMaybeLargeTable;

class SemiBoundedMaybeLarge {
 public:
  SemiBoundedMaybeLarge() : ordinal_(::test_largemessages::wire::SemiBoundedMaybeLarge::Ordinal::Invalid), envelope_{} {}

  SemiBoundedMaybeLarge(const SemiBoundedMaybeLarge&) = default;
  SemiBoundedMaybeLarge& operator=(const SemiBoundedMaybeLarge&) = default;
  SemiBoundedMaybeLarge(SemiBoundedMaybeLarge&&) = default;
  SemiBoundedMaybeLarge& operator=(SemiBoundedMaybeLarge&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kBytes = 1,  // 0x1
    _do_not_handle_this__write_a_default_case_instead = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };
  constexpr bool IsUnknown() const {
    return Which() == ::test_largemessages::wire::SemiBoundedMaybeLarge::Tag::_do_not_handle_this__write_a_default_case_instead;
  }

  bool has_invalid_tag() const { return ordinal_ == ::test_largemessages::wire::SemiBoundedMaybeLarge::Ordinal::Invalid; }

  bool is_bytes() const { return ordinal_ == ::test_largemessages::wire::SemiBoundedMaybeLarge::Ordinal::kBytes; }

  static SemiBoundedMaybeLarge WithBytes(::fidl::ObjectView<::fidl::VectorView<uint8_t>> val) {
    SemiBoundedMaybeLarge result;
    result.ordinal_ = ::test_largemessages::wire::SemiBoundedMaybeLarge::Ordinal::kBytes;
    result.envelope_.As<::fidl::VectorView<uint8_t>>().set_data(std::move(val));
    return result;
  }

  template <typename... Args>
  static SemiBoundedMaybeLarge WithBytes(::fidl::AnyArena& allocator, Args&&... args) {
    return WithBytes(::fidl::ObjectView<::fidl::VectorView<uint8_t>>(allocator,
                                                                     std::forward<Args>(args)...));
  }

  ::fidl::VectorView<uint8_t>& bytes() {
    ZX_ASSERT(ordinal_ == ::test_largemessages::wire::SemiBoundedMaybeLarge::Ordinal::kBytes);
    return envelope_.As<::fidl::VectorView<uint8_t>>().get_data();
  }
  const ::fidl::VectorView<uint8_t>& bytes() const {
    ZX_ASSERT(ordinal_ == ::test_largemessages::wire::SemiBoundedMaybeLarge::Ordinal::kBytes);
    return envelope_.As<::fidl::VectorView<uint8_t>>().get_data();
  }
  ::test_largemessages::wire::SemiBoundedMaybeLarge::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kBytes = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_largemessages::wire::SemiBoundedMaybeLarge::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

constexpr uint32_t kSmallStructByteVectorSize = 65504u;

constexpr uint32_t kLargeStructByteVectorSize = 65505u;

constexpr uint32_t kSmallUnionByteVectorSize = 65488u;

constexpr uint32_t kLargeUnionByteVectorSize = 65489u;

constexpr uint32_t kHandleCarryingElementsCount = 64u;

constexpr uint32_t kFirst63ElementsByteVectorSize = 1000u;

constexpr uint32_t kSmallLastElementByteVectorSize = 976u;

constexpr uint32_t kLargeLastElementByteVectorSize = 985u;

extern "C" const fidl_type_t test_largemessages_BoundedKnownToBeSmallTable;

struct BoundedKnownToBeSmall {
  ::fidl::VectorView<uint8_t> bytes = {};
};

extern "C" const fidl_type_t test_largemessages_BoundedMaybeLargeTable;

struct BoundedMaybeLarge {
  ::fidl::VectorView<uint8_t> bytes = {};
};

extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeValueTable;

struct UnboundedMaybeLargeValue {
  ::fidl::VectorView<uint8_t> bytes = {};
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_largemessages_ElementsTable;

struct Elements {
  ::zx::handle handle = {};

  ::fidl::VectorView<uint8_t> bytes = {};

  void _CloseHandles();
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_largemessages_UnboundedMaybeLargeResourceTable;

struct UnboundedMaybeLargeResource {
  using Elements = test_largemessages::wire::Elements;

  ::fidl::Array<::test_largemessages::wire::Elements, 64> elements = {};

  void _CloseHandles();
};

#endif  // __Fuchsia__

}  // namespace wire
}  // namespace test_largemessages
namespace fidl {

// TODO(fxbug.dev/95833) Remove this.
template <>
struct DeprecatedCTypeTraits<::test_largemessages::wire::BoundedKnownToBeSmall> {
  static constexpr const fidl_type_t* kType = &::test_largemessages::wire::test_largemessages_BoundedKnownToBeSmallTable;
};

template <>
struct TypeTraits<::test_largemessages::wire::BoundedKnownToBeSmall> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_largemessages::wire::BoundedKnownToBeSmall> : public std::true_type {};
template <>
struct IsStruct<::test_largemessages::wire::BoundedKnownToBeSmall> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_largemessages::wire::BoundedKnownToBeSmall>);
static_assert(offsetof(::test_largemessages::wire::BoundedKnownToBeSmall, bytes) == 0);
static_assert(sizeof(::test_largemessages::wire::BoundedKnownToBeSmall) == TypeTraits<::test_largemessages::wire::BoundedKnownToBeSmall>::kPrimarySize);

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_largemessages::wire::BoundedKnownToBeSmall, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65504>, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_largemessages::wire::BoundedKnownToBeSmall, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool is_memcpy_compatible = Base::is_memcpy_compatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_largemessages::wire::BoundedKnownToBeSmall* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (is_memcpy_compatible) {
      memcpy(position.As<void>(), value, sizeof(::test_largemessages::wire::BoundedKnownToBeSmall));
    } else {
      internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65504>, IsRecursive>::Encode(encoder, &value->bytes, position + 0, recursion_depth);
    }
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (!Base::are_members_memcpy_compatible) {
      internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65504>, IsRecursive>::Decode(
          decoder, position + 0, recursion_depth);
    }
  }
};

// TODO(fxbug.dev/95833) Remove this.
template <>
struct DeprecatedCTypeTraits<::test_largemessages::wire::BoundedMaybeLarge> {
  static constexpr const fidl_type_t* kType = &::test_largemessages::wire::test_largemessages_BoundedMaybeLargeTable;
};

template <>
struct TypeTraits<::test_largemessages::wire::BoundedMaybeLarge> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_largemessages::wire::BoundedMaybeLarge> : public std::true_type {};
template <>
struct IsStruct<::test_largemessages::wire::BoundedMaybeLarge> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_largemessages::wire::BoundedMaybeLarge>);
static_assert(offsetof(::test_largemessages::wire::BoundedMaybeLarge, bytes) == 0);
static_assert(sizeof(::test_largemessages::wire::BoundedMaybeLarge) == TypeTraits<::test_largemessages::wire::BoundedMaybeLarge>::kPrimarySize);

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_largemessages::wire::BoundedMaybeLarge, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65505>, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_largemessages::wire::BoundedMaybeLarge, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool is_memcpy_compatible = Base::is_memcpy_compatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_largemessages::wire::BoundedMaybeLarge* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (is_memcpy_compatible) {
      memcpy(position.As<void>(), value, sizeof(::test_largemessages::wire::BoundedMaybeLarge));
    } else {
      internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65505>, IsRecursive>::Encode(encoder, &value->bytes, position + 0, recursion_depth);
    }
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (!Base::are_members_memcpy_compatible) {
      internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65505>, IsRecursive>::Decode(
          decoder, position + 0, recursion_depth);
    }
  }
};

// TODO(fxbug.dev/95833) Remove this.
template <>
struct DeprecatedCTypeTraits<::test_largemessages::wire::UnboundedMaybeLargeValue> {
  static constexpr const fidl_type_t* kType = &::test_largemessages::wire::test_largemessages_UnboundedMaybeLargeValueTable;
};

template <>
struct TypeTraits<::test_largemessages::wire::UnboundedMaybeLargeValue> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr uint32_t kMaxOutOfLineV1 = 4294967295;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_largemessages::wire::UnboundedMaybeLargeValue> : public std::true_type {};
template <>
struct IsStruct<::test_largemessages::wire::UnboundedMaybeLargeValue> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_largemessages::wire::UnboundedMaybeLargeValue>);
static_assert(offsetof(::test_largemessages::wire::UnboundedMaybeLargeValue, bytes) == 0);
static_assert(sizeof(::test_largemessages::wire::UnboundedMaybeLargeValue) == TypeTraits<::test_largemessages::wire::UnboundedMaybeLargeValue>::kPrimarySize);

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeValue, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false>, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_largemessages::wire::UnboundedMaybeLargeValue, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool is_memcpy_compatible = Base::is_memcpy_compatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_largemessages::wire::UnboundedMaybeLargeValue* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (is_memcpy_compatible) {
      memcpy(position.As<void>(), value, sizeof(::test_largemessages::wire::UnboundedMaybeLargeValue));
    } else {
      internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false>, IsRecursive>::Encode(encoder, &value->bytes, position + 0, recursion_depth);
    }
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (!Base::are_members_memcpy_compatible) {
      internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false>, IsRecursive>::Decode(
          decoder, position + 0, recursion_depth);
    }
  }
};

#ifdef __Fuchsia__
template <>
struct IsResource<::test_largemessages::wire::Elements> : public std::true_type {};

// TODO(fxbug.dev/95833) Remove this.
template <>
struct DeprecatedCTypeTraits<::test_largemessages::wire::Elements> {
  static constexpr const fidl_type_t* kType = &::test_largemessages::wire::test_largemessages_ElementsTable;
};

template <>
struct TypeTraits<::test_largemessages::wire::Elements> {
  static constexpr uint32_t kMaxNumHandles = 1;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 24;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 1000;
  static constexpr uint32_t kMaxOutOfLineV1 = 1000;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_largemessages::wire::Elements> : public std::true_type {};
template <>
struct IsStruct<::test_largemessages::wire::Elements> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_largemessages::wire::Elements>);
static_assert(offsetof(::test_largemessages::wire::Elements, handle) == 0);
static_assert(offsetof(::test_largemessages::wire::Elements, bytes) == 8);
static_assert(sizeof(::test_largemessages::wire::Elements) == TypeTraits<::test_largemessages::wire::Elements>::kPrimarySize);

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_largemessages::wire::Elements, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 24;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::zx::handle, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_NONE, 0x80000000, true>, IsRecursive>(), ::fidl::internal::WireStructMemberCodingInfo<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 1000>, IsRecursive>());
  static constexpr bool kHasPadding = true;
  using Base = WireStructCodingTraitsBase<::test_largemessages::wire::Elements, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool is_memcpy_compatible = Base::is_memcpy_compatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_largemessages::wire::Elements* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (is_memcpy_compatible) {
      memcpy(position.As<void>(), value, sizeof(::test_largemessages::wire::Elements));
    } else {
      internal::WireZeroPadding<uint64_t>(encoder, position + 0);
      internal::WireCodingTraits<::zx::handle, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_NONE, 0x80000000, true>, IsRecursive>::Encode(encoder, &value->handle, position + 0, recursion_depth);
      internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 1000>, IsRecursive>::Encode(encoder, &value->bytes, position + 8, recursion_depth);
    }
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (!Base::are_members_memcpy_compatible) {
      internal::WireCodingTraits<::zx::handle, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_NONE, 0x80000000, true>, IsRecursive>::Decode(
          decoder, position + 0, recursion_depth);
      internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 1000>, IsRecursive>::Decode(
          decoder, position + 8, recursion_depth);
    }
    internal::WireCheckPadding<uint64_t>(decoder, position + 0, 0xffffffff00000000ull);
  }
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsResource<::test_largemessages::wire::UnboundedMaybeLargeResource> : public std::true_type {};

// TODO(fxbug.dev/95833) Remove this.
template <>
struct DeprecatedCTypeTraits<::test_largemessages::wire::UnboundedMaybeLargeResource> {
  static constexpr const fidl_type_t* kType = &::test_largemessages::wire::test_largemessages_UnboundedMaybeLargeResourceTable;
};

template <>
struct TypeTraits<::test_largemessages::wire::UnboundedMaybeLargeResource> {
  static constexpr uint32_t kMaxNumHandles = 64;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 1536;
  static constexpr uint32_t kPrimarySizeV1 = 1536;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 64000;
  static constexpr uint32_t kMaxOutOfLineV1 = 64000;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_largemessages::wire::UnboundedMaybeLargeResource> : public std::true_type {};
template <>
struct IsStruct<::test_largemessages::wire::UnboundedMaybeLargeResource> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_largemessages::wire::UnboundedMaybeLargeResource>);
static_assert(offsetof(::test_largemessages::wire::UnboundedMaybeLargeResource, elements) == 0);
static_assert(sizeof(::test_largemessages::wire::UnboundedMaybeLargeResource) == TypeTraits<::test_largemessages::wire::UnboundedMaybeLargeResource>::kPrimarySize);

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_largemessages::wire::UnboundedMaybeLargeResource, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 1536;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::fidl::Array<::test_largemessages::wire::Elements, 64>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_largemessages::wire::UnboundedMaybeLargeResource, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool is_memcpy_compatible = Base::is_memcpy_compatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_largemessages::wire::UnboundedMaybeLargeResource* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (is_memcpy_compatible) {
      memcpy(position.As<void>(), value, sizeof(::test_largemessages::wire::UnboundedMaybeLargeResource));
    } else {
      internal::WireCodingTraits<::fidl::Array<::test_largemessages::wire::Elements, 64>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->elements, position + 0, recursion_depth);
    }
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (!Base::are_members_memcpy_compatible) {
      internal::WireCodingTraits<::fidl::Array<::test_largemessages::wire::Elements, 64>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
          decoder, position + 0, recursion_depth);
    }
  }
};

#endif  // __Fuchsia__

template <>
struct TypeTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 65504;
  static constexpr uint32_t kMaxOutOfLineV1 = 65504;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_largemessages::wire::SemiBoundedBelievedToBeSmall> : public std::true_type {};
template <>
struct IsUnion<::test_largemessages::wire::SemiBoundedBelievedToBeSmall> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_largemessages::wire::SemiBoundedBelievedToBeSmall>);

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, Constraint, IsRecursive> {
  static constexpr size_t inline_size = 16;
  static constexpr bool is_memcpy_compatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_largemessages::wire::SemiBoundedBelievedToBeSmall* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl_xunion_v2_t* u = reinterpret_cast<fidl_xunion_v2_t*>(value);

    if (unlikely(u->tag == 0)) {
      if constexpr (Constraint::is_optional) {
        *position.As<fidl_xunion_v2_t>() = {};
        return;
      }
      encoder->SetError(kCodingErrorInvalidUnionTag);
      return;
    }

    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
    if (!inner_depth.IsValid()) {
      return;
    }

    *position.As<fidl_xunion_tag_t>() = u->tag;

    size_t encode_inline_size;
    switch (u->tag) {
      case 1:  // ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Tag::kBytes
        encode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65488>, IsRecursive>::inline_size;
        break;
      default:
        encode_inline_size = 0;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
    switch (u->tag) {
      case 1:  // ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Tag::kBytes
        encode_fn = ::fidl::internal::MakeEncodeFn<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65488>, IsRecursive>();
        break;
      default:
        encode_fn = nullptr;
        break;
    }
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
  }

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Tag tag = *position.As<::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Tag>();
    if (unlikely(static_cast<uint64_t>(tag) == 0)) {
      if constexpr (!Constraint::is_optional) {
        decoder->SetError(kCodingErrorInvalidUnionTag);
        return;
      }
      static_assert(sizeof(fidl_envelope_v2_t) == sizeof(uint64_t));
      if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
        decoder->SetError(kCodingErrorZeroTagButNonZeroEnvelope);
      }
      return;
    }

    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
    if (!inner_depth.IsValid()) {
      return;
    }

    size_t decode_inline_size;
    switch (tag) {
      case ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Tag::kBytes:
        decode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65488>, IsRecursive>::inline_size;
        break;
      default:
        decode_inline_size = 0;
        break;
    }
    DecodeFn<IsRecursive> decode_fn;
    switch (tag) {
      case ::test_largemessages::wire::SemiBoundedBelievedToBeSmall::Tag::kBytes:
        decode_fn = ::fidl::internal::MakeDecodeFn<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65488>, IsRecursive>();
        break;
      default:
        decode_fn = nullptr;
        break;
    }
    ::fidl::internal::WireDecodeFlexibleEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
  }
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

template <>
struct TypeTraits<::test_largemessages::wire::SemiBoundedMaybeLarge> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 65512;
  static constexpr uint32_t kMaxOutOfLineV1 = 65512;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_largemessages::wire::SemiBoundedMaybeLarge> : public std::true_type {};
template <>
struct IsUnion<::test_largemessages::wire::SemiBoundedMaybeLarge> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_largemessages::wire::SemiBoundedMaybeLarge>);

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, Constraint, IsRecursive> {
  static constexpr size_t inline_size = 16;
  static constexpr bool is_memcpy_compatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_largemessages::wire::SemiBoundedMaybeLarge* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl_xunion_v2_t* u = reinterpret_cast<fidl_xunion_v2_t*>(value);

    if (unlikely(u->tag == 0)) {
      if constexpr (Constraint::is_optional) {
        *position.As<fidl_xunion_v2_t>() = {};
        return;
      }
      encoder->SetError(kCodingErrorInvalidUnionTag);
      return;
    }

    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
    if (!inner_depth.IsValid()) {
      return;
    }

    *position.As<fidl_xunion_tag_t>() = u->tag;

    size_t encode_inline_size;
    switch (u->tag) {
      case 1:  // ::test_largemessages::wire::SemiBoundedMaybeLarge::Tag::kBytes
        encode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65489>, IsRecursive>::inline_size;
        break;
      default:
        encode_inline_size = 0;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
    switch (u->tag) {
      case 1:  // ::test_largemessages::wire::SemiBoundedMaybeLarge::Tag::kBytes
        encode_fn = ::fidl::internal::MakeEncodeFn<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65489>, IsRecursive>();
        break;
      default:
        encode_fn = nullptr;
        break;
    }
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
  }

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    ::test_largemessages::wire::SemiBoundedMaybeLarge::Tag tag = *position.As<::test_largemessages::wire::SemiBoundedMaybeLarge::Tag>();
    if (unlikely(static_cast<uint64_t>(tag) == 0)) {
      if constexpr (!Constraint::is_optional) {
        decoder->SetError(kCodingErrorInvalidUnionTag);
        return;
      }
      static_assert(sizeof(fidl_envelope_v2_t) == sizeof(uint64_t));
      if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
        decoder->SetError(kCodingErrorZeroTagButNonZeroEnvelope);
      }
      return;
    }

    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
    if (!inner_depth.IsValid()) {
      return;
    }

    size_t decode_inline_size;
    switch (tag) {
      case ::test_largemessages::wire::SemiBoundedMaybeLarge::Tag::kBytes:
        decode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65489>, IsRecursive>::inline_size;
        break;
      default:
        decode_inline_size = 0;
        break;
    }
    DecodeFn<IsRecursive> decode_fn;
    switch (tag) {
      case ::test_largemessages::wire::SemiBoundedMaybeLarge::Tag::kBytes:
        decode_fn = ::fidl::internal::MakeDecodeFn<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 65489>, IsRecursive>();
        break;
      default:
        decode_fn = nullptr;
        break;
    }
    ::fidl::internal::WireDecodeFlexibleEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
  }
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

}  // namespace fidl
