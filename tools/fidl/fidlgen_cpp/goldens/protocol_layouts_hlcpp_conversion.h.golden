// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.protocollayouts.imported/cpp/hlcpp_conversion.h>
#include <fidl/test.protocollayouts/cpp/natural_types.h>
#include <lib/fidl/cpp/hlcpp_conversion.h>
#include <lib/fidl/cpp/wire/internal/transport_channel.h>
#include <lib/fidl/cpp/wire/service_handler.h>
#include <test/protocollayouts/cpp/fidl.h>

namespace fidl {
namespace internal {

template <>
struct NaturalToHLCPPTraits<fidl::ClientEnd<::test_protocollayouts::MainProtocol>> {
  using HLCPPType = fidl::InterfaceHandle<::test::protocollayouts::MainProtocol>;
  static inline fidl::InterfaceHandle<::test::protocollayouts::MainProtocol> Convert(fidl::ClientEnd<::test_protocollayouts::MainProtocol>&& c) {
    return fidl::InterfaceHandle<::test::protocollayouts::MainProtocol>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<fidl::ServerEnd<::test_protocollayouts::MainProtocol>> {
  using HLCPPType = fidl::InterfaceRequest<::test::protocollayouts::MainProtocol>;
  static inline fidl::InterfaceRequest<::test::protocollayouts::MainProtocol> Convert(fidl::ServerEnd<::test_protocollayouts::MainProtocol>&& c) {
    return fidl::InterfaceRequest<::test::protocollayouts::MainProtocol>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceHandle<::test::protocollayouts::MainProtocol>> {
  using NaturalType = fidl::ClientEnd<::test_protocollayouts::MainProtocol>;
  static inline fidl::ClientEnd<::test_protocollayouts::MainProtocol> Convert(fidl::InterfaceHandle<::test::protocollayouts::MainProtocol>&& c) {
    return fidl::ClientEnd<::test_protocollayouts::MainProtocol>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceRequest<::test::protocollayouts::MainProtocol>> {
  using NaturalType = fidl::ServerEnd<::test_protocollayouts::MainProtocol>;
  static inline fidl::ServerEnd<::test_protocollayouts::MainProtocol> Convert(fidl::InterfaceRequest<::test::protocollayouts::MainProtocol>&& c) {
    return fidl::ServerEnd<::test_protocollayouts::MainProtocol>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<fidl::ProtocolHandler<::test_protocollayouts::MainProtocol>> {
  using HLCPPType = fidl::InterfaceRequestHandler<::test::protocollayouts::MainProtocol>;
  static inline fidl::InterfaceRequestHandler<::test::protocollayouts::MainProtocol> Convert(fidl::ProtocolHandler<::test_protocollayouts::MainProtocol>&& c) {
    return [c = std::move(c)](fidl::InterfaceRequest<::test::protocollayouts::MainProtocol> r) {
      c(::fidl::HLCPPToNatural(r));
    };
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceRequestHandler<::test::protocollayouts::MainProtocol>> {
  using NaturalType = fidl::ProtocolHandler<::test_protocollayouts::MainProtocol>;
  static inline fidl::ProtocolHandler<::test_protocollayouts::MainProtocol> Convert(fidl::InterfaceRequestHandler<::test::protocollayouts::MainProtocol>&& c) {
    return [c = std::move(c)](fidl::ServerEnd<::test_protocollayouts::MainProtocol> r) {
      c(::fidl::NaturalToHLCPP(r));
    };
  }
};

template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse> {
  using HLCPPType = ::test::protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse;
  static inline ::test::protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse Convert(::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse;
  static inline ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse Convert(::test::protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnImportWithErrorRequest> {
  using HLCPPType = ::test::protocollayouts::MainProtocolOnImportWithErrorRequest;
  static inline ::test::protocollayouts::MainProtocolOnImportWithErrorRequest Convert(::test_protocollayouts::MainProtocolOnImportWithErrorRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOnImportWithErrorRequest> {
  using NaturalType = ::test_protocollayouts::MainProtocolOnImportWithErrorRequest;
  static inline ::test_protocollayouts::MainProtocolOnImportWithErrorRequest Convert(::test::protocollayouts::MainProtocolOnImportWithErrorRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse> {
  using HLCPPType = ::test::protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse;
  static inline ::test::protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse Convert(::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse;
  static inline ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse Convert(::test::protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnLocalWithErrorRequest> {
  using HLCPPType = ::test::protocollayouts::MainProtocolOnLocalWithErrorRequest;
  static inline ::test::protocollayouts::MainProtocolOnLocalWithErrorRequest Convert(::test_protocollayouts::MainProtocolOnLocalWithErrorRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOnLocalWithErrorRequest> {
  using NaturalType = ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest;
  static inline ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest Convert(::test::protocollayouts::MainProtocolOnLocalWithErrorRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse> {
  using HLCPPType = ::test::protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse;
  static inline ::test::protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse Convert(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse;
  static inline ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse Convert(::test::protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnAnonWithErrorRequest> {
  using HLCPPType = ::test::protocollayouts::MainProtocolOnAnonWithErrorRequest;
  static inline ::test::protocollayouts::MainProtocolOnAnonWithErrorRequest Convert(::test_protocollayouts::MainProtocolOnAnonWithErrorRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOnAnonWithErrorRequest> {
  using NaturalType = ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest;
  static inline ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest Convert(::test::protocollayouts::MainProtocolOnAnonWithErrorRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::LocalTablePayload> {
  using HLCPPType = ::test::protocollayouts::LocalTablePayload;
  static inline ::test::protocollayouts::LocalTablePayload Convert(::test_protocollayouts::LocalTablePayload&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::LocalTablePayload> {
  using NaturalType = ::test_protocollayouts::LocalTablePayload;
  static inline ::test_protocollayouts::LocalTablePayload Convert(::test::protocollayouts::LocalTablePayload&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOneWayAnonRequest> {
  using HLCPPType = ::test::protocollayouts::MainProtocolOneWayAnonRequest;
  static inline ::test::protocollayouts::MainProtocolOneWayAnonRequest Convert(::test_protocollayouts::MainProtocolOneWayAnonRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOneWayAnonRequest> {
  using NaturalType = ::test_protocollayouts::MainProtocolOneWayAnonRequest;
  static inline ::test_protocollayouts::MainProtocolOneWayAnonRequest Convert(::test::protocollayouts::MainProtocolOneWayAnonRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonResponse> {
  using HLCPPType = ::test::protocollayouts::MainProtocolTwoWayAnonResponse;
  static inline ::test::protocollayouts::MainProtocolTwoWayAnonResponse Convert(::test_protocollayouts::MainProtocolTwoWayAnonResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayAnonResponse> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayAnonResponse;
  static inline ::test_protocollayouts::MainProtocolTwoWayAnonResponse Convert(::test::protocollayouts::MainProtocolTwoWayAnonResponse&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest> {
  using HLCPPType = ::test::protocollayouts::MainProtocolTwoWayAnonWithErrorRequest;
  static inline ::test::protocollayouts::MainProtocolTwoWayAnonWithErrorRequest Convert(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayAnonWithErrorRequest> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest;
  static inline ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest Convert(::test::protocollayouts::MainProtocolTwoWayAnonWithErrorRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnAnonWithErrorResponse> {
  using HLCPPType = ::test::protocollayouts::MainProtocol_OnAnonWithError_Response;
  static inline ::test::protocollayouts::MainProtocol_OnAnonWithError_Response Convert(::test_protocollayouts::MainProtocolOnAnonWithErrorResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_OnAnonWithError_Response> {
  using NaturalType = ::test_protocollayouts::MainProtocolOnAnonWithErrorResponse;
  static inline ::test_protocollayouts::MainProtocolOnAnonWithErrorResponse Convert(::test::protocollayouts::MainProtocol_OnAnonWithError_Response&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::LocalUnionPayload> {
  using HLCPPType = ::test::protocollayouts::LocalUnionPayload;
  static inline ::test::protocollayouts::LocalUnionPayload Convert(::test_protocollayouts::LocalUnionPayload&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::LocalUnionPayload> {
  using NaturalType = ::test_protocollayouts::LocalUnionPayload;
  static inline ::test_protocollayouts::LocalUnionPayload Convert(::test::protocollayouts::LocalUnionPayload&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult> {
  using HLCPPType = ::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result;
  static inline ::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result Convert(::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult;
  static inline ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult Convert(::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnImportWithErrorResult> {
  using HLCPPType = ::test::protocollayouts::MainProtocol_OnImportWithError_Result;
  static inline ::test::protocollayouts::MainProtocol_OnImportWithError_Result Convert(::test_protocollayouts::MainProtocolOnImportWithErrorResult&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_OnImportWithError_Result> {
  using NaturalType = ::test_protocollayouts::MainProtocolOnImportWithErrorResult;
  static inline ::test_protocollayouts::MainProtocolOnImportWithErrorResult Convert(::test::protocollayouts::MainProtocol_OnImportWithError_Result&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult> {
  using HLCPPType = ::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result;
  static inline ::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result Convert(::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult;
  static inline ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult Convert(::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnLocalWithErrorResult> {
  using HLCPPType = ::test::protocollayouts::MainProtocol_OnLocalWithError_Result;
  static inline ::test::protocollayouts::MainProtocol_OnLocalWithError_Result Convert(::test_protocollayouts::MainProtocolOnLocalWithErrorResult&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_OnLocalWithError_Result> {
  using NaturalType = ::test_protocollayouts::MainProtocolOnLocalWithErrorResult;
  static inline ::test_protocollayouts::MainProtocolOnLocalWithErrorResult Convert(::test::protocollayouts::MainProtocol_OnLocalWithError_Result&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonRequest> {
  using HLCPPType = ::test::protocollayouts::MainProtocolTwoWayAnonRequest;
  static inline ::test::protocollayouts::MainProtocolTwoWayAnonRequest Convert(::test_protocollayouts::MainProtocolTwoWayAnonRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayAnonRequest> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayAnonRequest;
  static inline ::test_protocollayouts::MainProtocolTwoWayAnonRequest Convert(::test::protocollayouts::MainProtocolTwoWayAnonRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse> {
  using HLCPPType = ::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Response;
  static inline ::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Response Convert(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Response> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse;
  static inline ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse Convert(::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Response&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult> {
  using HLCPPType = ::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result;
  static inline ::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result Convert(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result> {
  using NaturalType = ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult;
  static inline ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult Convert(::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnAnonRequest> {
  using HLCPPType = ::test::protocollayouts::MainProtocolOnAnonRequest;
  static inline ::test::protocollayouts::MainProtocolOnAnonRequest Convert(::test_protocollayouts::MainProtocolOnAnonRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOnAnonRequest> {
  using NaturalType = ::test_protocollayouts::MainProtocolOnAnonRequest;
  static inline ::test_protocollayouts::MainProtocolOnAnonRequest Convert(::test::protocollayouts::MainProtocolOnAnonRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnAnonWithErrorResult> {
  using HLCPPType = ::test::protocollayouts::MainProtocol_OnAnonWithError_Result;
  static inline ::test::protocollayouts::MainProtocol_OnAnonWithError_Result Convert(::test_protocollayouts::MainProtocolOnAnonWithErrorResult&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_OnAnonWithError_Result> {
  using NaturalType = ::test_protocollayouts::MainProtocolOnAnonWithErrorResult;
  static inline ::test_protocollayouts::MainProtocolOnAnonWithErrorResult Convert(::test::protocollayouts::MainProtocol_OnAnonWithError_Result&&);
};

::test::protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse>::Convert(::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse&& value) {
  ::test::protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse hlcpp;
  hlcpp.result = ::fidl::NaturalToHLCPP(std::move(value.result()));
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse>::Convert(::test::protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse&& value) {
  return ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse{{
      .result = ::fidl::HLCPPToNatural(std::move(value.result)),
  }};
}
::test::protocollayouts::MainProtocolOnImportWithErrorRequest NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnImportWithErrorRequest>::Convert(::test_protocollayouts::MainProtocolOnImportWithErrorRequest&& value) {
  ::test::protocollayouts::MainProtocolOnImportWithErrorRequest hlcpp;
  hlcpp.result = ::fidl::NaturalToHLCPP(std::move(value.result()));
  return hlcpp;
}

::test_protocollayouts::MainProtocolOnImportWithErrorRequest HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOnImportWithErrorRequest>::Convert(::test::protocollayouts::MainProtocolOnImportWithErrorRequest&& value) {
  return ::test_protocollayouts::MainProtocolOnImportWithErrorRequest{{
      .result = ::fidl::HLCPPToNatural(std::move(value.result)),
  }};
}
::test::protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse>::Convert(::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse&& value) {
  ::test::protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse hlcpp;
  hlcpp.result = ::fidl::NaturalToHLCPP(std::move(value.result()));
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse>::Convert(::test::protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse&& value) {
  return ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse{{
      .result = ::fidl::HLCPPToNatural(std::move(value.result)),
  }};
}
::test::protocollayouts::MainProtocolOnLocalWithErrorRequest NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnLocalWithErrorRequest>::Convert(::test_protocollayouts::MainProtocolOnLocalWithErrorRequest&& value) {
  ::test::protocollayouts::MainProtocolOnLocalWithErrorRequest hlcpp;
  hlcpp.result = ::fidl::NaturalToHLCPP(std::move(value.result()));
  return hlcpp;
}

::test_protocollayouts::MainProtocolOnLocalWithErrorRequest HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOnLocalWithErrorRequest>::Convert(::test::protocollayouts::MainProtocolOnLocalWithErrorRequest&& value) {
  return ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest{{
      .result = ::fidl::HLCPPToNatural(std::move(value.result)),
  }};
}
::test::protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse>::Convert(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse&& value) {
  ::test::protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse hlcpp;
  hlcpp.result = ::fidl::NaturalToHLCPP(std::move(value.result()));
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse>::Convert(::test::protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse&& value) {
  return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse{{
      .result = ::fidl::HLCPPToNatural(std::move(value.result)),
  }};
}
::test::protocollayouts::MainProtocolOnAnonWithErrorRequest NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnAnonWithErrorRequest>::Convert(::test_protocollayouts::MainProtocolOnAnonWithErrorRequest&& value) {
  ::test::protocollayouts::MainProtocolOnAnonWithErrorRequest hlcpp;
  hlcpp.result = ::fidl::NaturalToHLCPP(std::move(value.result()));
  return hlcpp;
}

::test_protocollayouts::MainProtocolOnAnonWithErrorRequest HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOnAnonWithErrorRequest>::Convert(::test::protocollayouts::MainProtocolOnAnonWithErrorRequest&& value) {
  return ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest{{
      .result = ::fidl::HLCPPToNatural(std::move(value.result)),
  }};
}
::test::protocollayouts::LocalTablePayload NaturalToHLCPPTraits<::test_protocollayouts::LocalTablePayload>::Convert(::test_protocollayouts::LocalTablePayload&& value) {
  ::test::protocollayouts::LocalTablePayload hlcpp;
  if (value.a().has_value()) {
    hlcpp.set_a(::fidl::NaturalToHLCPP(std::move(value.a().value())));
  }
  return hlcpp;
}

::test_protocollayouts::LocalTablePayload HLCPPToNaturalTraits<::test::protocollayouts::LocalTablePayload>::Convert(::test::protocollayouts::LocalTablePayload&& value) {
  ::test_protocollayouts::LocalTablePayload natural;
  if (value.has_a()) {
    natural.a() = ::fidl::HLCPPToNatural(std::move(*value.mutable_a()));
  }
  return natural;
}
::test::protocollayouts::MainProtocolOneWayAnonRequest NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOneWayAnonRequest>::Convert(::test_protocollayouts::MainProtocolOneWayAnonRequest&& value) {
  ::test::protocollayouts::MainProtocolOneWayAnonRequest hlcpp;
  if (value.a().has_value()) {
    hlcpp.set_a(::fidl::NaturalToHLCPP(std::move(value.a().value())));
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolOneWayAnonRequest HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOneWayAnonRequest>::Convert(::test::protocollayouts::MainProtocolOneWayAnonRequest&& value) {
  ::test_protocollayouts::MainProtocolOneWayAnonRequest natural;
  if (value.has_a()) {
    natural.a() = ::fidl::HLCPPToNatural(std::move(*value.mutable_a()));
  }
  return natural;
}
::test::protocollayouts::MainProtocolTwoWayAnonResponse NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonResponse>::Convert(::test_protocollayouts::MainProtocolTwoWayAnonResponse&& value) {
  ::test::protocollayouts::MainProtocolTwoWayAnonResponse hlcpp;
  if (value.a().has_value()) {
    hlcpp.set_a(::fidl::NaturalToHLCPP(std::move(value.a().value())));
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayAnonResponse HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayAnonResponse>::Convert(::test::protocollayouts::MainProtocolTwoWayAnonResponse&& value) {
  ::test_protocollayouts::MainProtocolTwoWayAnonResponse natural;
  if (value.has_a()) {
    natural.a() = ::fidl::HLCPPToNatural(std::move(*value.mutable_a()));
  }
  return natural;
}
::test::protocollayouts::MainProtocolTwoWayAnonWithErrorRequest NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>::Convert(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest&& value) {
  ::test::protocollayouts::MainProtocolTwoWayAnonWithErrorRequest hlcpp;
  if (value.a().has_value()) {
    hlcpp.set_a(::fidl::NaturalToHLCPP(std::move(value.a().value())));
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>::Convert(::test::protocollayouts::MainProtocolTwoWayAnonWithErrorRequest&& value) {
  ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest natural;
  if (value.has_a()) {
    natural.a() = ::fidl::HLCPPToNatural(std::move(*value.mutable_a()));
  }
  return natural;
}
::test::protocollayouts::MainProtocol_OnAnonWithError_Response NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnAnonWithErrorResponse>::Convert(::test_protocollayouts::MainProtocolOnAnonWithErrorResponse&& value) {
  ::test::protocollayouts::MainProtocol_OnAnonWithError_Response hlcpp;
  if (value.a().has_value()) {
    hlcpp.set_a(::fidl::NaturalToHLCPP(std::move(value.a().value())));
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolOnAnonWithErrorResponse HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_OnAnonWithError_Response>::Convert(::test::protocollayouts::MainProtocol_OnAnonWithError_Response&& value) {
  ::test_protocollayouts::MainProtocolOnAnonWithErrorResponse natural;
  if (value.has_a()) {
    natural.a() = ::fidl::HLCPPToNatural(std::move(*value.mutable_a()));
  }
  return natural;
}

::test::protocollayouts::LocalUnionPayload NaturalToHLCPPTraits<::test_protocollayouts::LocalUnionPayload>::Convert(::test_protocollayouts::LocalUnionPayload&& value) {
  ::test::protocollayouts::LocalUnionPayload hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::LocalUnionPayload::Tag::kB:
      hlcpp.set_b(::fidl::NaturalToHLCPP(std::move(value.b().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::LocalUnionPayload HLCPPToNaturalTraits<::test::protocollayouts::LocalUnionPayload>::Convert(::test::protocollayouts::LocalUnionPayload&& value) {
  using _NaturalUnion = ::test_protocollayouts::LocalUnionPayload;
  switch (value.Which()) {
    case ::test::protocollayouts::LocalUnionPayload::Tag::kB:
      return _NaturalUnion::WithB(
          ::fidl::HLCPPToNatural(std::move(value.b())));
    default:
      return _NaturalUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{});
  }
}
::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult>::Convert(::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult&& value) {
  ::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Tag::kResponse:
      hlcpp.set_response(::fidl::NaturalToHLCPP(std::move(value.response().value())));
      break;
    case ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Tag::kErr:
      hlcpp.set_err(::fidl::NaturalToHLCPP(std::move(value.err().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result>::Convert(::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result&& value) {
  using _NaturalUnion = ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult;
  switch (value.Which()) {
    case ::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result::Tag::kResponse:
      return _NaturalUnion::WithResponse(
          ::fidl::HLCPPToNatural(std::move(value.response())));
    case ::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result::Tag::kErr:
      return _NaturalUnion::WithErr(
          ::fidl::HLCPPToNatural(std::move(value.err())));
    default:
      ZX_PANIC("Can't convert invalid strict union %s from HLCPP to Natural", "::test::protocollayouts::MainProtocol_TwoWayImportWithError_Result");
  }
}
::test::protocollayouts::MainProtocol_OnImportWithError_Result NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnImportWithErrorResult>::Convert(::test_protocollayouts::MainProtocolOnImportWithErrorResult&& value) {
  ::test::protocollayouts::MainProtocol_OnImportWithError_Result hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::MainProtocolOnImportWithErrorResult::Tag::kResponse:
      hlcpp.set_response(::fidl::NaturalToHLCPP(std::move(value.response().value())));
      break;
    case ::test_protocollayouts::MainProtocolOnImportWithErrorResult::Tag::kErr:
      hlcpp.set_err(::fidl::NaturalToHLCPP(std::move(value.err().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolOnImportWithErrorResult HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_OnImportWithError_Result>::Convert(::test::protocollayouts::MainProtocol_OnImportWithError_Result&& value) {
  using _NaturalUnion = ::test_protocollayouts::MainProtocolOnImportWithErrorResult;
  switch (value.Which()) {
    case ::test::protocollayouts::MainProtocol_OnImportWithError_Result::Tag::kResponse:
      return _NaturalUnion::WithResponse(
          ::fidl::HLCPPToNatural(std::move(value.response())));
    case ::test::protocollayouts::MainProtocol_OnImportWithError_Result::Tag::kErr:
      return _NaturalUnion::WithErr(
          ::fidl::HLCPPToNatural(std::move(value.err())));
    default:
      ZX_PANIC("Can't convert invalid strict union %s from HLCPP to Natural", "::test::protocollayouts::MainProtocol_OnImportWithError_Result");
  }
}
::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult>::Convert(::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult&& value) {
  ::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Tag::kResponse:
      hlcpp.set_response(::fidl::NaturalToHLCPP(std::move(value.response().value())));
      break;
    case ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Tag::kErr:
      hlcpp.set_err(::fidl::NaturalToHLCPP(std::move(value.err().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result>::Convert(::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result&& value) {
  using _NaturalUnion = ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult;
  switch (value.Which()) {
    case ::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result::Tag::kResponse:
      return _NaturalUnion::WithResponse(
          ::fidl::HLCPPToNatural(std::move(value.response())));
    case ::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result::Tag::kErr:
      return _NaturalUnion::WithErr(
          ::fidl::HLCPPToNatural(std::move(value.err())));
    default:
      ZX_PANIC("Can't convert invalid strict union %s from HLCPP to Natural", "::test::protocollayouts::MainProtocol_TwoWayLocalWithError_Result");
  }
}
::test::protocollayouts::MainProtocol_OnLocalWithError_Result NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnLocalWithErrorResult>::Convert(::test_protocollayouts::MainProtocolOnLocalWithErrorResult&& value) {
  ::test::protocollayouts::MainProtocol_OnLocalWithError_Result hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::MainProtocolOnLocalWithErrorResult::Tag::kResponse:
      hlcpp.set_response(::fidl::NaturalToHLCPP(std::move(value.response().value())));
      break;
    case ::test_protocollayouts::MainProtocolOnLocalWithErrorResult::Tag::kErr:
      hlcpp.set_err(::fidl::NaturalToHLCPP(std::move(value.err().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolOnLocalWithErrorResult HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_OnLocalWithError_Result>::Convert(::test::protocollayouts::MainProtocol_OnLocalWithError_Result&& value) {
  using _NaturalUnion = ::test_protocollayouts::MainProtocolOnLocalWithErrorResult;
  switch (value.Which()) {
    case ::test::protocollayouts::MainProtocol_OnLocalWithError_Result::Tag::kResponse:
      return _NaturalUnion::WithResponse(
          ::fidl::HLCPPToNatural(std::move(value.response())));
    case ::test::protocollayouts::MainProtocol_OnLocalWithError_Result::Tag::kErr:
      return _NaturalUnion::WithErr(
          ::fidl::HLCPPToNatural(std::move(value.err())));
    default:
      ZX_PANIC("Can't convert invalid strict union %s from HLCPP to Natural", "::test::protocollayouts::MainProtocol_OnLocalWithError_Result");
  }
}
::test::protocollayouts::MainProtocolTwoWayAnonRequest NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonRequest>::Convert(::test_protocollayouts::MainProtocolTwoWayAnonRequest&& value) {
  ::test::protocollayouts::MainProtocolTwoWayAnonRequest hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag::kB:
      hlcpp.set_b(::fidl::NaturalToHLCPP(std::move(value.b().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayAnonRequest HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolTwoWayAnonRequest>::Convert(::test::protocollayouts::MainProtocolTwoWayAnonRequest&& value) {
  using _NaturalUnion = ::test_protocollayouts::MainProtocolTwoWayAnonRequest;
  switch (value.Which()) {
    case ::test::protocollayouts::MainProtocolTwoWayAnonRequest::Tag::kB:
      return _NaturalUnion::WithB(
          ::fidl::HLCPPToNatural(std::move(value.b())));
    default:
      return _NaturalUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{});
  }
}
::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Response NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse>::Convert(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse&& value) {
  ::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Response hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Tag::kB:
      hlcpp.set_b(::fidl::NaturalToHLCPP(std::move(value.b().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Response>::Convert(::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Response&& value) {
  using _NaturalUnion = ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse;
  switch (value.Which()) {
    case ::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Response::Tag::kB:
      return _NaturalUnion::WithB(
          ::fidl::HLCPPToNatural(std::move(value.b())));
    default:
      return _NaturalUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{});
  }
}
::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult>::Convert(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult&& value) {
  ::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Tag::kResponse:
      hlcpp.set_response(::fidl::NaturalToHLCPP(std::move(value.response().value())));
      break;
    case ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Tag::kErr:
      hlcpp.set_err(::fidl::NaturalToHLCPP(std::move(value.err().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result>::Convert(::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result&& value) {
  using _NaturalUnion = ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult;
  switch (value.Which()) {
    case ::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result::Tag::kResponse:
      return _NaturalUnion::WithResponse(
          ::fidl::HLCPPToNatural(std::move(value.response())));
    case ::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result::Tag::kErr:
      return _NaturalUnion::WithErr(
          ::fidl::HLCPPToNatural(std::move(value.err())));
    default:
      ZX_PANIC("Can't convert invalid strict union %s from HLCPP to Natural", "::test::protocollayouts::MainProtocol_TwoWayAnonWithError_Result");
  }
}
::test::protocollayouts::MainProtocolOnAnonRequest NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnAnonRequest>::Convert(::test_protocollayouts::MainProtocolOnAnonRequest&& value) {
  ::test::protocollayouts::MainProtocolOnAnonRequest hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::MainProtocolOnAnonRequest::Tag::kB:
      hlcpp.set_b(::fidl::NaturalToHLCPP(std::move(value.b().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolOnAnonRequest HLCPPToNaturalTraits<::test::protocollayouts::MainProtocolOnAnonRequest>::Convert(::test::protocollayouts::MainProtocolOnAnonRequest&& value) {
  using _NaturalUnion = ::test_protocollayouts::MainProtocolOnAnonRequest;
  switch (value.Which()) {
    case ::test::protocollayouts::MainProtocolOnAnonRequest::Tag::kB:
      return _NaturalUnion::WithB(
          ::fidl::HLCPPToNatural(std::move(value.b())));
    default:
      return _NaturalUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{});
  }
}
::test::protocollayouts::MainProtocol_OnAnonWithError_Result NaturalToHLCPPTraits<::test_protocollayouts::MainProtocolOnAnonWithErrorResult>::Convert(::test_protocollayouts::MainProtocolOnAnonWithErrorResult&& value) {
  ::test::protocollayouts::MainProtocol_OnAnonWithError_Result hlcpp;
  switch (value.Which()) {
    case ::test_protocollayouts::MainProtocolOnAnonWithErrorResult::Tag::kResponse:
      hlcpp.set_response(::fidl::NaturalToHLCPP(std::move(value.response().value())));
      break;
    case ::test_protocollayouts::MainProtocolOnAnonWithErrorResult::Tag::kErr:
      hlcpp.set_err(::fidl::NaturalToHLCPP(std::move(value.err().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_protocollayouts::MainProtocolOnAnonWithErrorResult HLCPPToNaturalTraits<::test::protocollayouts::MainProtocol_OnAnonWithError_Result>::Convert(::test::protocollayouts::MainProtocol_OnAnonWithError_Result&& value) {
  using _NaturalUnion = ::test_protocollayouts::MainProtocolOnAnonWithErrorResult;
  switch (value.Which()) {
    case ::test::protocollayouts::MainProtocol_OnAnonWithError_Result::Tag::kResponse:
      return _NaturalUnion::WithResponse(
          ::fidl::HLCPPToNatural(std::move(value.response())));
    case ::test::protocollayouts::MainProtocol_OnAnonWithError_Result::Tag::kErr:
      return _NaturalUnion::WithErr(
          ::fidl::HLCPPToNatural(std::move(value.err())));
    default:
      ZX_PANIC("Can't convert invalid strict union %s from HLCPP to Natural", "::test::protocollayouts::MainProtocol_OnAnonWithError_Result");
  }
}

}  // namespace internal
}  // namespace fidl
