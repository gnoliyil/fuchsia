// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <fidl/test.bindingsdenylist/cpp/natural_types.h>
#include <fidl/test.dependent/cpp/natural_ostream.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::OnlyLlcpp> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::OnlyLlcpp& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerTopResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::OnlyAppearsInImportingLibrary> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::OnlyAppearsInImportingLibrary& value);
};

namespace test_bindingsdenylist {

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::OnlyLlcpp& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerTopResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::OnlyAppearsInImportingLibrary& value);

}  // namespace test_bindingsdenylist

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>& value) {
    return os << "ClientEnd<"
              << "test_bindingsdenylist::OnlyLibfuzzerAndDeps"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>& value) {
    return os << "ServerEnd<"
              << "test_bindingsdenylist::OnlyLibfuzzerAndDeps"
              << ">(" << value.channel().get() << ")";
  }
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::OnlyCppAndDeps>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::OnlyCppAndDeps>& value) {
    return os << "ClientEnd<"
              << "test_bindingsdenylist::OnlyCppAndDeps"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::OnlyCppAndDeps>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::OnlyCppAndDeps>& value) {
    return os << "ServerEnd<"
              << "test_bindingsdenylist::OnlyCppAndDeps"
              << ">(" << value.channel().get() << ")";
  }
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::DenyEachBinding>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::DenyEachBinding>& value) {
    return os << "ClientEnd<"
              << "test_bindingsdenylist::DenyEachBinding"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::DenyEachBinding>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::DenyEachBinding>& value) {
    return os << "ServerEnd<"
              << "test_bindingsdenylist::DenyEachBinding"
              << ">(" << value.channel().get() << ")";
  }
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::Allowed>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::Allowed>& value) {
    return os << "ClientEnd<"
              << "test_bindingsdenylist::Allowed"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::Allowed>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::Allowed>& value) {
    return os << "ServerEnd<"
              << "test_bindingsdenylist::Allowed"
              << ">(" << value.channel().get() << ")";
  }
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::ImportsSameNameContext>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::ImportsSameNameContext>& value) {
    return os << "ClientEnd<"
              << "test_bindingsdenylist::ImportsSameNameContext"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::ImportsSameNameContext>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::ImportsSameNameContext>& value) {
    return os << "ServerEnd<"
              << "test_bindingsdenylist::ImportsSameNameContext"
              << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::OnlyCppAndDeps>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::OnlyCppAndDeps>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::OnlyCppAndDeps>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::OnlyCppAndDeps>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::DenyEachBinding>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::DenyEachBinding>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::DenyEachBinding>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::DenyEachBinding>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::Allowed>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::Allowed>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::Allowed>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::Allowed>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::ImportsSameNameContext>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::ImportsSameNameContext>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::ImportsSameNameContext>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::ImportsSameNameContext>>::Format(os, value);
}

#pragma clang diagnostic pop

}  // namespace fidl
