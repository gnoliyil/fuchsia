#include <fidl/test.driverhandle/cpp/driver/natural_messaging.h>
#include <lib/fidl_driver/cpp/unknown_interactions.h>
#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<::test_driverhandle::DriverProtocol>::entries_[] = {};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<::test_driverhandle::DriverProtocol>::entries_end_ =
    &entries_[0];

void fidl::internal::NaturalServerDispatcher<::test_driverhandle::DriverProtocol>::Dispatch(::fdf::Server<::test_driverhandle::DriverProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                            internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_, &unknown_method_handler_entry_);
}

void fdf::Server<::test_driverhandle::DriverProtocol>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::NaturalServerDispatcher<::test_driverhandle::DriverProtocol>::Dispatch(this, std::move(msg), storage_view, txn);
}

#endif  // __Fuchsia__

namespace test_driverhandle {

[[maybe_unused]] constexpr inline uint64_t kHandlesInProtocol_SendHandles_Ordinal = 8904504160365833729lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kHandlesInProtocol_SendHandles_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
#ifdef __Fuchsia__
}  // namespace test_driverhandle

::fit::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_driverhandle::HandlesInProtocol>::SendHandles(::fidl::Request<::test_driverhandle::HandlesInProtocol::SendHandles> request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::DriverTransport::VTable, ::test_driverhandle::kHandlesInProtocol_SendHandles_Ordinal, ::test_driverhandle::kHandlesInProtocol_SendHandles_DynamicFlags};

  fdf::Arena _arena('FIDL');

  ::fidl::WriteOptions _options = {
      .outgoing_transport_context =
          ::fidl::internal::OutgoingTransportContext::Create<::fidl::internal::DriverTransport>(_arena.get()),
  };
  _encoder.EncodeBody(std::move(request));
  ::fidl::OutgoingMessage _msg = _encoder.GetMessage();
  ::fidl::OutgoingMessage _arena_msg = ::fdf::internal::MoveToArena(_msg, _arena);
  ::fidl::Status status = client_base().SendOneWay(_arena_msg, std::move(_options));
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_driverhandle {

#endif  // __Fuchsia__
}  // namespace test_driverhandle

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<::test_driverhandle::HandlesInProtocol>::entries_[] = {
    {
        ::test_driverhandle::kHandlesInProtocol_SendHandles_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_driverhandle::HandlesInProtocolSendHandlesRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_driverhandle::HandlesInProtocol::SendHandles>::Sync completer(txn);
          static_cast<::fdf::Server<::test_driverhandle::HandlesInProtocol>*>(interface)->SendHandles(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<::test_driverhandle::HandlesInProtocol>::entries_end_ =
    &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_driverhandle::HandlesInProtocol>::Dispatch(::fdf::Server<::test_driverhandle::HandlesInProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                               internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_, &unknown_method_handler_entry_);
}

void fdf::Server<::test_driverhandle::HandlesInProtocol>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::NaturalServerDispatcher<::test_driverhandle::HandlesInProtocol>::Dispatch(this, std::move(msg), storage_view, txn);
}

#endif  // __Fuchsia__
