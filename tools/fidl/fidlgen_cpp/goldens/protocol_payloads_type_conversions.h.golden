// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.protocolpayloads/cpp/markers.h>
#include <fidl/test.protocolpayloads/cpp/natural_types.h>
#include <fidl/test.protocolpayloads/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.protocolpayloads/cpp/natural_messaging.h>
#include <fidl/test.protocolpayloads/cpp/wire_messaging.h>

#endif  // __Fuchsia__
#include <fidl/test.protocolpayloads.imported/cpp/type_conversions.h>
#include <lib/fidl/cpp/wire_natural_conversions.h>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {
namespace internal {

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::LocalStructPayload, ::test_protocolpayloads::LocalStructPayload> {
  static ::test_protocolpayloads::LocalStructPayload ToNatural(::test_protocolpayloads::wire::LocalStructPayload src);
  static ::test_protocolpayloads::wire::LocalStructPayload ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::LocalStructPayload src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::LocalStructPayload> {
  using type = ::test_protocolpayloads::LocalStructPayload;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::LocalStructPayload> {
  using type = ::test_protocolpayloads::wire::LocalStructPayload;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorTopResponse, ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorTopResponse src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorTopResponse ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorTopResponse> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorTopResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorRequest, ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest> {
  static ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest ToNatural(::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorRequest src);
  static ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorRequest ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorRequest> {
  using type = ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest> {
  using type = ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolOneWayAnonRequest, ::test_protocolpayloads::MainProtocolOneWayAnonRequest> {
  static ::test_protocolpayloads::MainProtocolOneWayAnonRequest ToNatural(::test_protocolpayloads::wire::MainProtocolOneWayAnonRequest src);
  static ::test_protocolpayloads::wire::MainProtocolOneWayAnonRequest ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolOneWayAnonRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolOneWayAnonRequest> {
  using type = ::test_protocolpayloads::MainProtocolOneWayAnonRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolOneWayAnonRequest> {
  using type = ::test_protocolpayloads::wire::MainProtocolOneWayAnonRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayAnonRequest, ::test_protocolpayloads::MainProtocolTwoWayAnonRequest> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonRequest ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayAnonRequest src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayAnonRequest ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayAnonRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayAnonRequest> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayAnonRequest> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayAnonRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayAnonResponse, ::test_protocolpayloads::MainProtocolTwoWayAnonResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonResponse ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayAnonResponse src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayAnonResponse ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayAnonResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayAnonResponse> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayAnonResponse> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayAnonResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorRequest, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorRequest src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorRequest ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorRequest> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResponse, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResponse src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResponse ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResponse> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorTopResponse, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorTopResponse src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorTopResponse ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorTopResponse> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorTopResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolOnAnonRequest, ::test_protocolpayloads::MainProtocolOnAnonRequest> {
  static ::test_protocolpayloads::MainProtocolOnAnonRequest ToNatural(::test_protocolpayloads::wire::MainProtocolOnAnonRequest src);
  static ::test_protocolpayloads::wire::MainProtocolOnAnonRequest ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolOnAnonRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolOnAnonRequest> {
  using type = ::test_protocolpayloads::MainProtocolOnAnonRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolOnAnonRequest> {
  using type = ::test_protocolpayloads::wire::MainProtocolOnAnonRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResponse, ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse> {
  static ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse ToNatural(::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResponse src);
  static ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResponse ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResponse> {
  using type = ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse> {
  using type = ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorRequest, ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest> {
  static ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest ToNatural(::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorRequest src);
  static ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorRequest ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorRequest> {
  using type = ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest> {
  using type = ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorTopResponse, ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorTopResponse src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorTopResponse ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorTopResponse> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorTopResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolOnImportWithErrorRequest, ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest> {
  static ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest ToNatural(::test_protocolpayloads::wire::MainProtocolOnImportWithErrorRequest src);
  static ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorRequest ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolOnImportWithErrorRequest> {
  using type = ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest> {
  using type = ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult, ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult>, std::unique_ptr<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult>> {
  static std::unique_ptr<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> ToNatural(::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult> src);
  static ::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult, ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult ToNatural(::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult src);
  static ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult>, std::unique_ptr<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult>> {
  static std::unique_ptr<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult> ToNatural(::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult> src);
  static ::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult> {
  using type = ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult> {
  using type = ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult>, std::unique_ptr<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult>> {
  static std::unique_ptr<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> ToNatural(::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult> src);
  static ::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult, ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult ToNatural(::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult src);
  static ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult>, std::unique_ptr<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult>> {
  static std::unique_ptr<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult> ToNatural(::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult> src);
  static ::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult> {
  using type = ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult> {
  using type = ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult, ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult ToNatural(::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult src);
  static ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult>, std::unique_ptr<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult>> {
  static std::unique_ptr<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> ToNatural(::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult> src);
  static ::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> {
  using type = ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult;
};

template <>
struct WireNaturalConversionTraits<::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult, ::test_protocolpayloads::MainProtocolOnImportWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolOnImportWithErrorResult ToNatural(::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult src);
  static ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult ToWire(fidl::AnyArena& arena, ::test_protocolpayloads::MainProtocolOnImportWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult>, std::unique_ptr<::test_protocolpayloads::MainProtocolOnImportWithErrorResult>> {
  static std::unique_ptr<::test_protocolpayloads::MainProtocolOnImportWithErrorResult> ToNatural(::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult> src);
  static ::fidl::WireOptional<::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocolpayloads::MainProtocolOnImportWithErrorResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult> {
  using type = ::test_protocolpayloads::MainProtocolOnImportWithErrorResult;
};
template <>
struct WireTypeForNaturalType<::test_protocolpayloads::MainProtocolOnImportWithErrorResult> {
  using type = ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposed>, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed> ToNatural(::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposed> src);
  static ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposed> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposed>> {
  using type = ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed>> {
  using type = ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposed>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> ToNatural(::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> src);
  static ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>> {
  using type = ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>> {
  using type = ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocal>, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal> ToNatural(::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocal> src);
  static ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocal> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocal>> {
  using type = ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal>> {
  using type = ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocal>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> ToNatural(::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> src);
  static ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>> {
  using type = ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>> {
  using type = ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImport>, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport> ToNatural(::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImport> src);
  static ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImport> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImport>> {
  using type = ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport>> {
  using type = ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImport>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> ToNatural(::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> src);
  static ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>> {
  using type = ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>> {
  using type = ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnon>, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon> ToNatural(::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnon> src);
  static ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnon> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnon>> {
  using type = ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon>> {
  using type = ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnon>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> ToNatural(::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> src);
  static ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>> {
  using type = ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>> {
  using type = ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>;
};

#endif  // __Fuchsia__
#pragma clang diagnostic pop

}  // namespace internal
}  // namespace fidl
