// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#pragma once

#include <fidl/test.protocolpayloads.imported/cpp/natural_messaging.h>
#include <fidl/test.protocolpayloads/cpp/markers.h>
#include <fidl/test.protocolpayloads/cpp/natural_types.h>
#include <fidl/test.protocolpayloads/cpp/wire_messaging.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/thenable.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <lib/fidl/cpp/wire/unknown_interaction_handler.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {

}  // namespace fidl

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OneWayComposed> {
  using Request = ::test_protocolpayloads_imported::ImportStructPayload;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::TwoWayComposed> {
  using Request = ::test_protocolpayloads_imported::ImportStructPayload;

  using Response = ::test_protocolpayloads_imported::ImportStructPayload;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayComposed>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayComposed>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> {
  using Request = ::test_protocolpayloads_imported::ImportStructPayload;

  using Response = ::test_protocolpayloads_imported::ComposedProtocolTwoWayComposedWithErrorTopResponse;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OnComposed> {
  using Request = ::test_protocolpayloads_imported::ImportStructPayload;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OnComposedWithError> {
  using Request = ::test_protocolpayloads_imported::ComposedProtocolOnComposedWithErrorRequest;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OneWayLocal> {
  using Request = ::test_protocolpayloads::LocalStructPayload;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::TwoWayLocal> {
  using Request = ::test_protocolpayloads::LocalStructPayload;

  using Response = ::test_protocolpayloads::LocalStructPayload;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayLocal>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayLocal>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> {
  using Request = ::test_protocolpayloads::LocalStructPayload;

  using Response = ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OnLocal> {
  using Request = ::test_protocolpayloads::LocalStructPayload;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OnLocalWithError> {
  using Request = ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OneWayImport> {
  using Request = ::test_protocolpayloads_imported::ImportStructPayload;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::TwoWayImport> {
  using Request = ::test_protocolpayloads_imported::ImportStructPayload;

  using Response = ::test_protocolpayloads_imported::ImportStructPayload;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayImport>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayImport>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> {
  using Request = ::test_protocolpayloads_imported::ImportStructPayload;

  using Response = ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OnImport> {
  using Request = ::test_protocolpayloads_imported::ImportStructPayload;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OnImportWithError> {
  using Request = ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OneWayAnon> {
  using Request = ::test_protocolpayloads::MainProtocolOneWayAnonRequest;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::TwoWayAnon> {
  using Request = ::test_protocolpayloads::MainProtocolTwoWayAnonRequest;

  using Response = ::test_protocolpayloads::MainProtocolTwoWayAnonResponse;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayAnon>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayAnon>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> {
  using Request = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest;

  using Response = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>&)>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OnAnon> {
  using Request = ::test_protocolpayloads::MainProtocolOnAnonRequest;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_protocolpayloads::MainProtocol::OnAnonWithError> {
  using Request = ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest;
};
namespace test_protocolpayloads {
__LOCAL extern "C" const fidl_type_t test_protocolpayloads_imported_ImportStructPayloadTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_imported_ComposedProtocolTwoWayComposedWithErrorTopResponseTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_imported_ComposedProtocolOnComposedWithErrorRequestTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_LocalStructPayloadTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayLocalWithErrorTopResponseTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnLocalWithErrorRequestTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayImportWithErrorTopResponseTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnImportWithErrorRequestTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOneWayAnonRequestTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonRequestTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonResponseTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonWithErrorRequestTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonWithErrorTopResponseTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnAnonRequestTable;

__LOCAL extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnAnonWithErrorRequestTable;

#ifdef __Fuchsia__
}  // namespace test_protocolpayloads

template <>
class ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed> final : public ::test_protocolpayloads_imported::ImportStructPayload {
 public:
  using ::test_protocolpayloads_imported::ImportStructPayload::ImportStructPayload;
  Response(::test_protocolpayloads_imported::ImportStructPayload v) : ImportStructPayload(std::move(v)) {}
};
namespace test_protocolpayloads {
}  // namespace test_protocolpayloads

template <>
class ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayComposed> final : public ::fit::result<::fidl::Error, ::test_protocolpayloads_imported::ImportStructPayload> {
 public:
  using ::fit::result<::fidl::Error, ::test_protocolpayloads_imported::ImportStructPayload>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> final : public ::fit::result<uint32_t, ::test_protocolpayloads_imported::ImportStructPayload> {
 public:
  using ::fit::result<uint32_t, ::test_protocolpayloads_imported::ImportStructPayload>::result;
  Response(::fit::result<uint32_t, ::test_protocolpayloads_imported::ImportStructPayload> v) : result(std::move(v)) {}
  Response() = delete;
};
template <>
class ::fidl::internal::ResponseMessageConverter<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> {
  using DomainObject = ::test_protocolpayloads_imported::ComposedProtocolTwoWayComposedWithErrorTopResponse;

 public:
  static DomainObject IntoDomainObject(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>& m) {
    if (m.is_error()) {
      return DomainObject{{.result = ::test_protocolpayloads_imported::ComposedProtocolTwoWayComposedWithErrorResult::WithErr(m.error_value())}};
    } else {
      return DomainObject{{.result = ::test_protocolpayloads_imported::ComposedProtocolTwoWayComposedWithErrorResult::WithResponse(std::move(m.value()))}};
    }
  }
};

template <>
class ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> final : public ::fit::result<::fidl::ErrorsIn<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>, ::test_protocolpayloads_imported::ImportStructPayload> {
 public:
  using ::fit::result<::fidl::ErrorsIn<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>, ::test_protocolpayloads_imported::ImportStructPayload>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal> final : public ::test_protocolpayloads::LocalStructPayload {
 public:
  using ::test_protocolpayloads::LocalStructPayload::LocalStructPayload;
  Response(::test_protocolpayloads::LocalStructPayload v) : LocalStructPayload(std::move(v)) {}
};

template <>
class ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayLocal> final : public ::fit::result<::fidl::Error, ::test_protocolpayloads::LocalStructPayload> {
 public:
  using ::fit::result<::fidl::Error, ::test_protocolpayloads::LocalStructPayload>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> final : public ::fit::result<uint32_t, ::test_protocolpayloads::LocalStructPayload> {
 public:
  using ::fit::result<uint32_t, ::test_protocolpayloads::LocalStructPayload>::result;
  Response(::fit::result<uint32_t, ::test_protocolpayloads::LocalStructPayload> v) : result(std::move(v)) {}
  Response() = delete;
};
template <>
class ::fidl::internal::ResponseMessageConverter<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> {
  using DomainObject = ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse;

 public:
  static DomainObject IntoDomainObject(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>& m) {
    if (m.is_error()) {
      return DomainObject{{.result = ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult::WithErr(m.error_value())}};
    } else {
      return DomainObject{{.result = ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult::WithResponse(std::move(m.value()))}};
    }
  }
};

template <>
class ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> final : public ::fit::result<::fidl::ErrorsIn<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>, ::test_protocolpayloads::LocalStructPayload> {
 public:
  using ::fit::result<::fidl::ErrorsIn<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>, ::test_protocolpayloads::LocalStructPayload>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport> final : public ::test_protocolpayloads_imported::ImportStructPayload {
 public:
  using ::test_protocolpayloads_imported::ImportStructPayload::ImportStructPayload;
  Response(::test_protocolpayloads_imported::ImportStructPayload v) : ImportStructPayload(std::move(v)) {}
};

template <>
class ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayImport> final : public ::fit::result<::fidl::Error, ::test_protocolpayloads_imported::ImportStructPayload> {
 public:
  using ::fit::result<::fidl::Error, ::test_protocolpayloads_imported::ImportStructPayload>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> final : public ::fit::result<uint32_t, ::test_protocolpayloads_imported::ImportStructPayload> {
 public:
  using ::fit::result<uint32_t, ::test_protocolpayloads_imported::ImportStructPayload>::result;
  Response(::fit::result<uint32_t, ::test_protocolpayloads_imported::ImportStructPayload> v) : result(std::move(v)) {}
  Response() = delete;
};
template <>
class ::fidl::internal::ResponseMessageConverter<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> {
  using DomainObject = ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse;

 public:
  static DomainObject IntoDomainObject(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>& m) {
    if (m.is_error()) {
      return DomainObject{{.result = ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult::WithErr(m.error_value())}};
    } else {
      return DomainObject{{.result = ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult::WithResponse(std::move(m.value()))}};
    }
  }
};

template <>
class ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> final : public ::fit::result<::fidl::ErrorsIn<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>, ::test_protocolpayloads_imported::ImportStructPayload> {
 public:
  using ::fit::result<::fidl::ErrorsIn<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>, ::test_protocolpayloads_imported::ImportStructPayload>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon> final : public ::test_protocolpayloads::MainProtocolTwoWayAnonResponse {
 public:
  using ::test_protocolpayloads::MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse;
  Response(::test_protocolpayloads::MainProtocolTwoWayAnonResponse v) : MainProtocolTwoWayAnonResponse(std::move(v)) {}
};

template <>
class ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayAnon> final : public ::fit::result<::fidl::Error, ::test_protocolpayloads::MainProtocolTwoWayAnonResponse> {
 public:
  using ::fit::result<::fidl::Error, ::test_protocolpayloads::MainProtocolTwoWayAnonResponse>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> final : public ::fit::result<uint32_t, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> {
 public:
  using ::fit::result<uint32_t, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse>::result;
  Response(::fit::result<uint32_t, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> v) : result(std::move(v)) {}
  Response() = delete;
};
template <>
class ::fidl::internal::ResponseMessageConverter<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> {
  using DomainObject = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse;

 public:
  static DomainObject IntoDomainObject(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>& m) {
    if (m.is_error()) {
      return DomainObject{{.result = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult::WithErr(m.error_value())}};
    } else {
      return DomainObject{{.result = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult::WithResponse(std::move(m.value()))}};
    }
  }
};

template <>
class ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> final : public ::fit::result<::fidl::ErrorsIn<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> {
 public:
  using ::fit::result<::fidl::ErrorsIn<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_protocolpayloads::MainProtocol> final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fidl::internal::NaturalThenable<::test_protocolpayloads::MainProtocol::TwoWayComposed> TwoWayComposed(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposed>& request) const;

  ::fidl::internal::NaturalThenable<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> TwoWayComposedWithError(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>& request) const;

  ::fidl::internal::NaturalThenable<::test_protocolpayloads::MainProtocol::TwoWayLocal> TwoWayLocal(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocal>& request) const;

  ::fidl::internal::NaturalThenable<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> TwoWayLocalWithError(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>& request) const;

  ::fidl::internal::NaturalThenable<::test_protocolpayloads::MainProtocol::TwoWayImport> TwoWayImport(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImport>& request) const;

  ::fidl::internal::NaturalThenable<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> TwoWayImportWithError(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>& request) const;

  ::fidl::internal::NaturalThenable<::test_protocolpayloads::MainProtocol::TwoWayAnon> TwoWayAnon(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnon>& request) const;

  ::fidl::internal::NaturalThenable<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> TwoWayAnonWithError(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>& request) const;

  ::fit::result<::fidl::OneWayError> OneWayComposed(const ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayComposed>& request) const;

  ::fit::result<::fidl::OneWayError> OneWayLocal(const ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayLocal>& request) const;

  ::fit::result<::fidl::OneWayError> OneWayImport(const ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayImport>& request) const;

  ::fit::result<::fidl::OneWayError> OneWayAnon(const ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayAnon>& request) const;
};
namespace test_protocolpayloads {

#endif  // __Fuchsia__

}  // namespace test_protocolpayloads

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalSyncClientImpl<::test_protocolpayloads::MainProtocol> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalSyncClientImpl<::test_protocolpayloads::MainProtocol>> {
 public:
  ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayComposed> TwoWayComposed(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposed>& request);

  ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> TwoWayComposedWithError(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>& request);

  ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayLocal> TwoWayLocal(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocal>& request);

  ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> TwoWayLocalWithError(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>& request);

  ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayImport> TwoWayImport(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImport>& request);

  ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> TwoWayImportWithError(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>& request);

  ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayAnon> TwoWayAnon(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnon>& request);

  ::fidl::Result<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> TwoWayAnonWithError(const ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>& request);

  ::fit::result<::fidl::OneWayError> OneWayComposed(const ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayComposed>& request);

  ::fit::result<::fidl::OneWayError> OneWayLocal(const ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayLocal>& request);

  ::fit::result<::fidl::OneWayError> OneWayImport(const ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayImport>& request);

  ::fit::result<::fidl::OneWayError> OneWayAnon(const ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayAnon>& request);

 private:
  ::fidl::UnownedClientEnd<::test_protocolpayloads::MainProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_protocolpayloads::MainProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<::test_protocolpayloads::MainProtocol> : public ::fidl::internal::BaseEventHandlerInterface {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
  virtual void OnComposed(::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposed>&) = 0;
  virtual void OnComposedWithError(::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposedWithError>&) = 0;
  virtual void OnLocal(::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocal>&) = 0;
  virtual void OnLocalWithError(::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocalWithError>&) = 0;
  virtual void OnImport(::fidl::Event<::test_protocolpayloads::MainProtocol::OnImport>&) = 0;
  virtual void OnImportWithError(::fidl::Event<::test_protocolpayloads::MainProtocol::OnImportWithError>&) = 0;
  virtual void OnAnon(::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnon>&) = 0;
  virtual void OnAnonWithError(::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnonWithError>&) = 0;
};

template <>
class ::fidl::AsyncEventHandler<::test_protocolpayloads::MainProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_protocolpayloads::MainProtocol>, public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
  void OnComposed(::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposed>&) override {}
  void OnComposedWithError(::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposedWithError>&) override {}
  void OnLocal(::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocal>&) override {}
  void OnLocalWithError(::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocalWithError>&) override {}
  void OnImport(::fidl::Event<::test_protocolpayloads::MainProtocol::OnImport>&) override {}
  void OnImportWithError(::fidl::Event<::test_protocolpayloads::MainProtocol::OnImportWithError>&) override {}
  void OnAnon(::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnon>&) override {}
  void OnAnonWithError(::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnonWithError>&) override {}
};

template <>
class ::fidl::SyncEventHandler<::test_protocolpayloads::MainProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_protocolpayloads::MainProtocol>, public ::fidl::internal::SyncEventHandler {
 public:
  SyncEventHandler() = default;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method.
  ::fidl::Status HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_protocolpayloads::MainProtocol> client_end);
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_protocolpayloads::MainProtocol> final : public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::NaturalEventHandlerInterface<::test_protocolpayloads::MainProtocol>> {
 public:
  explicit NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_protocolpayloads::MainProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
  ::fidl::Status DispatchEvent(
      ::fidl::IncomingHeaderAndMessage& msg,
      internal::MessageStorageViewBase* storage_view) override;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<::test_protocolpayloads::MainProtocol> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

  ::fit::result<::fidl::OneWayError> OnComposed(const ::test_protocolpayloads_imported::ImportStructPayload& payload);

  ::fit::result<::fidl::OneWayError> OnComposedWithError(const ::test_protocolpayloads_imported::ComposedProtocolOnComposedWithErrorRequest& payload);

  ::fit::result<::fidl::OneWayError> OnLocal(const ::test_protocolpayloads::LocalStructPayload& payload);

  ::fit::result<::fidl::OneWayError> OnLocalWithError(const ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest& payload);

  ::fit::result<::fidl::OneWayError> OnImport(const ::test_protocolpayloads_imported::ImportStructPayload& payload);

  ::fit::result<::fidl::OneWayError> OnImportWithError(const ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest& payload);

  ::fit::result<::fidl::OneWayError> OnAnon(const ::test_protocolpayloads::MainProtocolOnAnonRequest& payload);

  ::fit::result<::fidl::OneWayError> OnAnonWithError(const ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest& payload);
};

template <>
class ::fidl::internal::NaturalEventSender<::test_protocolpayloads::MainProtocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalEventSender<::test_protocolpayloads::MainProtocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

  ::fit::result<::fidl::OneWayError> OnComposed(const ::test_protocolpayloads_imported::ImportStructPayload& payload);

  ::fit::result<::fidl::OneWayError> OnComposedWithError(const ::test_protocolpayloads_imported::ComposedProtocolOnComposedWithErrorRequest& payload);

  ::fit::result<::fidl::OneWayError> OnLocal(const ::test_protocolpayloads::LocalStructPayload& payload);

  ::fit::result<::fidl::OneWayError> OnLocalWithError(const ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest& payload);

  ::fit::result<::fidl::OneWayError> OnImport(const ::test_protocolpayloads_imported::ImportStructPayload& payload);

  ::fit::result<::fidl::OneWayError> OnImportWithError(const ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest& payload);

  ::fit::result<::fidl::OneWayError> OnAnon(const ::test_protocolpayloads::MainProtocolOnAnonRequest& payload);

  ::fit::result<::fidl::OneWayError> OnAnonWithError(const ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest& payload);
};

#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayComposed> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayLocal> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayImport> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayImportWithError> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayAnon> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::Server<::test_protocolpayloads::MainProtocol> : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_protocolpayloads::MainProtocol;

  using Handler = fidl::ProtocolHandler<::test_protocolpayloads::MainProtocol>;

  using OneWayComposedRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayComposed>;
  using OneWayComposedCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::OneWayComposed>;

  virtual void OneWayComposed(OneWayComposedRequest& request,
                              OneWayComposedCompleter::Sync& completer) = 0;

  using TwoWayComposedRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposed>;
  using TwoWayComposedCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::TwoWayComposed>;

  virtual void TwoWayComposed(TwoWayComposedRequest& request,
                              TwoWayComposedCompleter::Sync& completer) = 0;

  using TwoWayComposedWithErrorRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>;
  using TwoWayComposedWithErrorCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>;

  virtual void TwoWayComposedWithError(TwoWayComposedWithErrorRequest& request,
                                       TwoWayComposedWithErrorCompleter::Sync& completer) = 0;

  using OneWayLocalRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayLocal>;
  using OneWayLocalCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::OneWayLocal>;

  virtual void OneWayLocal(OneWayLocalRequest& request,
                           OneWayLocalCompleter::Sync& completer) = 0;

  using TwoWayLocalRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocal>;
  using TwoWayLocalCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::TwoWayLocal>;

  virtual void TwoWayLocal(TwoWayLocalRequest& request,
                           TwoWayLocalCompleter::Sync& completer) = 0;

  using TwoWayLocalWithErrorRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>;
  using TwoWayLocalWithErrorCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>;

  virtual void TwoWayLocalWithError(TwoWayLocalWithErrorRequest& request,
                                    TwoWayLocalWithErrorCompleter::Sync& completer) = 0;

  using OneWayImportRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayImport>;
  using OneWayImportCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::OneWayImport>;

  virtual void OneWayImport(OneWayImportRequest& request,
                            OneWayImportCompleter::Sync& completer) = 0;

  using TwoWayImportRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImport>;
  using TwoWayImportCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::TwoWayImport>;

  virtual void TwoWayImport(TwoWayImportRequest& request,
                            TwoWayImportCompleter::Sync& completer) = 0;

  using TwoWayImportWithErrorRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>;
  using TwoWayImportWithErrorCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::TwoWayImportWithError>;

  virtual void TwoWayImportWithError(TwoWayImportWithErrorRequest& request,
                                     TwoWayImportWithErrorCompleter::Sync& completer) = 0;

  using OneWayAnonRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayAnon>;
  using OneWayAnonCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::OneWayAnon>;

  virtual void OneWayAnon(OneWayAnonRequest& request,
                          OneWayAnonCompleter::Sync& completer) = 0;

  using TwoWayAnonRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnon>;
  using TwoWayAnonCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::TwoWayAnon>;

  virtual void TwoWayAnon(TwoWayAnonRequest& request,
                          TwoWayAnonCompleter::Sync& completer) = 0;

  using TwoWayAnonWithErrorRequest = ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>;
  using TwoWayAnonWithErrorCompleter = ::fidl::internal::NaturalCompleter<::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>;

  virtual void TwoWayAnonWithError(TwoWayAnonWithErrorRequest& request,
                                   TwoWayAnonWithErrorCompleter::Sync& completer) = 0;

  // |bind_handler| returns a handler that binds incoming connections to this
  // server implementation.
  //
  // The returned handler borrows the server instance.
  // The server must outlive the provided |dispatcher|. Only after
  // the dispatcher is shutdown will it be safe to destroy the servers.
  // The server should not be moved.
  Handler bind_handler(async_dispatcher_t* dispatcher) {
    return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_protocolpayloads::MainProtocol> request) {
      (void)::fidl::BindServer(dispatcher, std::move(request), impl);
    };
  }

 private:
  void dispatch_message(
      ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::MessageStorageViewBase* storage_view) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<::test_protocolpayloads::MainProtocol> final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_protocolpayloads::MainProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static constexpr const ::fidl::internal::UnknownMethodHandlerEntry& unknown_method_handler_entry_ =
      ::fidl::internal::UnknownMethodHandlerEntry::kClosedProtocolHandlerEntry;
};

#endif  // __Fuchsia__

#pragma clang diagnostic pop
