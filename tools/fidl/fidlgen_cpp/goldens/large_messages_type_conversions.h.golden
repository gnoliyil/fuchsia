// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <fidl/test.largemessages/cpp/markers.h>
#include <fidl/test.largemessages/cpp/natural_types.h>
#include <fidl/test.largemessages/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.largemessages/cpp/natural_messaging.h>
#include <fidl/test.largemessages/cpp/wire_messaging.h>

#endif  // __Fuchsia__
#include <lib/fidl/cpp/wire_natural_conversions.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {
namespace internal {

template <>
struct WireNaturalConversionTraits<::test_largemessages::wire::BoundedKnownToBeSmall, ::test_largemessages::BoundedKnownToBeSmall> {
  static ::test_largemessages::BoundedKnownToBeSmall ToNatural(::test_largemessages::wire::BoundedKnownToBeSmall src);
  static ::test_largemessages::wire::BoundedKnownToBeSmall ToWire(fidl::AnyArena& arena, ::test_largemessages::BoundedKnownToBeSmall src);
};

template <>
struct NaturalTypeForWireType<::test_largemessages::wire::BoundedKnownToBeSmall> {
  using type = ::test_largemessages::BoundedKnownToBeSmall;
};
template <>
struct WireTypeForNaturalType<::test_largemessages::BoundedKnownToBeSmall> {
  using type = ::test_largemessages::wire::BoundedKnownToBeSmall;
};

template <>
struct WireNaturalConversionTraits<::test_largemessages::wire::BoundedMaybeLarge, ::test_largemessages::BoundedMaybeLarge> {
  static ::test_largemessages::BoundedMaybeLarge ToNatural(::test_largemessages::wire::BoundedMaybeLarge src);
  static ::test_largemessages::wire::BoundedMaybeLarge ToWire(fidl::AnyArena& arena, ::test_largemessages::BoundedMaybeLarge src);
};

template <>
struct NaturalTypeForWireType<::test_largemessages::wire::BoundedMaybeLarge> {
  using type = ::test_largemessages::BoundedMaybeLarge;
};
template <>
struct WireTypeForNaturalType<::test_largemessages::BoundedMaybeLarge> {
  using type = ::test_largemessages::wire::BoundedMaybeLarge;
};

template <>
struct WireNaturalConversionTraits<::test_largemessages::wire::UnboundedMaybeLargeValue, ::test_largemessages::UnboundedMaybeLargeValue> {
  static ::test_largemessages::UnboundedMaybeLargeValue ToNatural(::test_largemessages::wire::UnboundedMaybeLargeValue src);
  static ::test_largemessages::wire::UnboundedMaybeLargeValue ToWire(fidl::AnyArena& arena, ::test_largemessages::UnboundedMaybeLargeValue src);
};

template <>
struct NaturalTypeForWireType<::test_largemessages::wire::UnboundedMaybeLargeValue> {
  using type = ::test_largemessages::UnboundedMaybeLargeValue;
};
template <>
struct WireTypeForNaturalType<::test_largemessages::UnboundedMaybeLargeValue> {
  using type = ::test_largemessages::wire::UnboundedMaybeLargeValue;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_largemessages::wire::Elements, ::test_largemessages::Elements> {
  static ::test_largemessages::Elements ToNatural(::test_largemessages::wire::Elements src);
  static ::test_largemessages::wire::Elements ToWire(fidl::AnyArena& arena, ::test_largemessages::Elements src);
};

template <>
struct NaturalTypeForWireType<::test_largemessages::wire::Elements> {
  using type = ::test_largemessages::Elements;
};
template <>
struct WireTypeForNaturalType<::test_largemessages::Elements> {
  using type = ::test_largemessages::wire::Elements;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_largemessages::wire::UnboundedMaybeLargeResource, ::test_largemessages::UnboundedMaybeLargeResource> {
  static ::test_largemessages::UnboundedMaybeLargeResource ToNatural(::test_largemessages::wire::UnboundedMaybeLargeResource src);
  static ::test_largemessages::wire::UnboundedMaybeLargeResource ToWire(fidl::AnyArena& arena, ::test_largemessages::UnboundedMaybeLargeResource src);
};

template <>
struct NaturalTypeForWireType<::test_largemessages::wire::UnboundedMaybeLargeResource> {
  using type = ::test_largemessages::UnboundedMaybeLargeResource;
};
template <>
struct WireTypeForNaturalType<::test_largemessages::UnboundedMaybeLargeResource> {
  using type = ::test_largemessages::wire::UnboundedMaybeLargeResource;
};

#endif  // __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_largemessages::wire::SemiBoundedBelievedToBeSmall, ::test_largemessages::SemiBoundedBelievedToBeSmall> {
  static ::test_largemessages::SemiBoundedBelievedToBeSmall ToNatural(::test_largemessages::wire::SemiBoundedBelievedToBeSmall src);
  static ::test_largemessages::wire::SemiBoundedBelievedToBeSmall ToWire(fidl::AnyArena& arena, ::test_largemessages::SemiBoundedBelievedToBeSmall src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_largemessages::wire::SemiBoundedBelievedToBeSmall>, std::unique_ptr<::test_largemessages::SemiBoundedBelievedToBeSmall>> {
  static std::unique_ptr<::test_largemessages::SemiBoundedBelievedToBeSmall> ToNatural(::fidl::WireOptional<::test_largemessages::wire::SemiBoundedBelievedToBeSmall> src);
  static ::fidl::WireOptional<::test_largemessages::wire::SemiBoundedBelievedToBeSmall> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_largemessages::SemiBoundedBelievedToBeSmall> src);
};

template <>
struct NaturalTypeForWireType<::test_largemessages::wire::SemiBoundedBelievedToBeSmall> {
  using type = ::test_largemessages::SemiBoundedBelievedToBeSmall;
};
template <>
struct WireTypeForNaturalType<::test_largemessages::SemiBoundedBelievedToBeSmall> {
  using type = ::test_largemessages::wire::SemiBoundedBelievedToBeSmall;
};

template <>
struct WireNaturalConversionTraits<::test_largemessages::wire::SemiBoundedMaybeLarge, ::test_largemessages::SemiBoundedMaybeLarge> {
  static ::test_largemessages::SemiBoundedMaybeLarge ToNatural(::test_largemessages::wire::SemiBoundedMaybeLarge src);
  static ::test_largemessages::wire::SemiBoundedMaybeLarge ToWire(fidl::AnyArena& arena, ::test_largemessages::SemiBoundedMaybeLarge src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_largemessages::wire::SemiBoundedMaybeLarge>, std::unique_ptr<::test_largemessages::SemiBoundedMaybeLarge>> {
  static std::unique_ptr<::test_largemessages::SemiBoundedMaybeLarge> ToNatural(::fidl::WireOptional<::test_largemessages::wire::SemiBoundedMaybeLarge> src);
  static ::fidl::WireOptional<::test_largemessages::wire::SemiBoundedMaybeLarge> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_largemessages::SemiBoundedMaybeLarge> src);
};

template <>
struct NaturalTypeForWireType<::test_largemessages::wire::SemiBoundedMaybeLarge> {
  using type = ::test_largemessages::SemiBoundedMaybeLarge;
};
template <>
struct WireTypeForNaturalType<::test_largemessages::SemiBoundedMaybeLarge> {
  using type = ::test_largemessages::wire::SemiBoundedMaybeLarge;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>, ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> {
  static ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> ToNatural(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> src);
  static ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> {
  using type = ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> {
  using type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>, ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> {
  static ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> ToNatural(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> src);
  static ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> {
  using type = ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> {
  using type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>, ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> {
  static ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> ToNatural(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> src);
  static ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> {
  using type = ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> {
  using type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>, ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> {
  static ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> ToNatural(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> src);
  static ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> {
  using type = ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> {
  using type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>, ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> {
  static ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> ToNatural(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> src);
  static ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> {
  using type = ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> {
  using type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>, ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> {
  static ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> ToNatural(::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> src);
  static ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> {
  using type = ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> {
  using type = ::fidl::WireResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>;
};

#endif  // __Fuchsia__
#pragma clang diagnostic pop

}  // namespace internal
}  // namespace fidl
