// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.drivertwoway/cpp/markers.h>
#include <fidl/test.drivertwoway/cpp/wire_types.h>
#include <lib/fidl_driver/cpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/cpp/wire/connect_service.h>
#include <lib/fidl/cpp/wire/server.h>
#include <lib/fidl/cpp/wire/service_handler.h>
#include <lib/fidl/cpp/wire/sync_call.h>
#include <lib/fidl_driver/cpp/server.h>
#include <lib/fidl_driver/cpp/wire_client.h>

#endif  // __Fuchsia__

namespace test_drivertwoway {

class TwoWay;

__LOCAL extern "C" const fidl_type_t test_drivertwoway_TwoWayAddRequestTable;

__LOCAL extern "C" const fidl_type_t test_drivertwoway_TwoWayAddResponseTable;
}  // namespace test_drivertwoway

template <>
struct ::fidl::internal::WireOrdinal<::test_drivertwoway::TwoWay::Add> final {
  static constexpr uint64_t value = 989730524426044687lu;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireMethodTypes<::test_drivertwoway::TwoWay::Add> {
  static constexpr bool HasRequestPayload = true;
  using Request = ::test_drivertwoway::wire::TwoWayAddRequest;
  using Response = ::test_drivertwoway::wire::TwoWayAddResponse;

  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_drivertwoway::TwoWay::Add>>;
  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_drivertwoway::TwoWay::Add,
      ::fidl::internal::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>, ::fidl::internal::DriverTransport>>;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_drivertwoway::TwoWay::Add,
      ::fidl::internal::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>, ::fidl::internal::DriverTransport>>;
};

#endif  // __Fuchsia__

namespace test_drivertwoway {

}  // namespace test_drivertwoway

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_drivertwoway::TwoWay> {
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_drivertwoway::TwoWay> final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(::fdf::WireServer<::test_drivertwoway::TwoWay>* impl, ::fidl::IncomingHeaderAndMessage& msg,
                                            internal::MessageStorageViewBase* storage_view,
                                            ::fidl::Transaction* txn);
  static void Dispatch(::fdf::WireServer<::test_drivertwoway::TwoWay>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static constexpr const ::fidl::internal::UnknownMethodHandlerEntry& unknown_method_handler_entry_ =
      ::fidl::internal::UnknownMethodHandlerEntry::kClosedProtocolHandlerEntry;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::test_drivertwoway::wire::TwoWayAddRequest body;
  explicit TransactionalRequest(uint16_t addend1, uint16_t addend2)
      : body(::test_drivertwoway::wire::TwoWayAddRequest{addend1, addend2}) {
    _InitHeader();
  }
  TransactionalRequest() {
    _InitHeader();
  }
  using ResponseType = ::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>;

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 4 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_drivertwoway::wire::TwoWayAddRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_drivertwoway::wire::TwoWayAddRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

#endif  // __Fuchsia__

template <>
struct ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add> final : public ::test_drivertwoway::wire::TwoWayAddResponse {
  explicit WireResponse(::test_drivertwoway::wire::TwoWayAddResponse base) : ::test_drivertwoway::wire::TwoWayAddResponse(std::move(base)) {}
  explicit WireResponse(uint16_t sum) : ::test_drivertwoway::wire::TwoWayAddResponse{.sum = std::move(sum)} {}
  WireResponse() = default;
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 2;

  static void Encode(
      internal::WireEncoder* encoder, ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_drivertwoway::wire::TwoWayAddResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, value, position, recursion_depth);
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_drivertwoway::wire::TwoWayAddResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position, recursion_depth);
  }
};

template <>
struct ::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add> body;
  explicit TransactionalResponse(uint16_t sum)
      : body(::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>(sum)) {
    _InitHeader();
  }
  TransactionalResponse() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 2 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

namespace fidl {

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>> : public std::true_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_drivertwoway::test_drivertwoway_TwoWayAddRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>) == TypeTraits<::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>, body) == sizeof(fidl_message_header_t));
static_assert(sizeof(::test_drivertwoway::wire::TwoWayAddRequest) == TypeTraits<::test_drivertwoway::wire::TwoWayAddRequest>::kPrimarySize);
static_assert(offsetof(::test_drivertwoway::wire::TwoWayAddRequest, addend1) == 0);
static_assert(offsetof(::test_drivertwoway::wire::TwoWayAddRequest, addend2) == 2);

#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>> : public std::true_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_drivertwoway::test_drivertwoway_TwoWayAddResponseTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(2 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(2 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>) == TypeTraits<::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>, body) == sizeof(fidl_message_header_t));
template <>
struct TypeTraits<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_drivertwoway::test_drivertwoway_TwoWayAddResponseTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 2;
  static constexpr uint32_t kPrimarySizeV1 = 2;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(sizeof(::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>) == TypeTraits<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>, sum) == 0);
#ifdef __Fuchsia__
}  // namespace fidl

template <>
struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>> final
    : public ::fidl::internal::DriverMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>>> {};

template <>
struct ::fidl::internal::WireResultUnwrap<::test_drivertwoway::TwoWay::Add> {
  using Type = ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>;
};

template <>
class [[nodiscard]] ::fdf::WireUnownedResult<::test_drivertwoway::TwoWay::Add> final : public ::fidl::BaseWireResult<::test_drivertwoway::TwoWay::Add> {
 public:
  explicit WireUnownedResult(::fdf::UnownedClientEnd<::test_drivertwoway::TwoWay> client_end, const ::fdf::Arena& arena, ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>* request);
  explicit WireUnownedResult(::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>* response)
      : ::fidl::BaseWireResult<::test_drivertwoway::TwoWay::Add>(fidl::Status::Ok()), decoded_(response) {
    ExtractValueFromDecoded(decoded_.pointer());
  }

  explicit WireUnownedResult(
      ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>>>&& decoded,
      ::fidl::internal::MessageStorageViewBase* storage_view) : ::fidl::BaseWireResult<::test_drivertwoway::TwoWay::Add>(::fidl::internal::StatusFromResult(decoded)),
                                                                arena_(::fidl::internal::TakeDriverArenaFromStorage(storage_view)) {
    if (decoded.is_ok()) {
      decoded_ = std::move(decoded.value());
      ExtractValueFromDecoded(decoded_.pointer());
    }
  }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_drivertwoway::TwoWay::Add>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
  fdf::Arena& arena() {
    ZX_ASSERT(ok());
    return arena_;
  }

 private:
  ::fdf::Arena arena_{nullptr};
  ::fidl::DecodedValue<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>> decoded_;
};

template <>
class ::fidl::internal::WireEventHandlerInterface<::test_drivertwoway::TwoWay> : public ::fidl::internal::BaseEventHandlerInterface {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fdf::WireAsyncEventHandler<::test_drivertwoway::TwoWay>
    : public ::fidl::internal::WireEventHandlerInterface<::test_drivertwoway::TwoWay>, public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_drivertwoway::TwoWay> final : public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::WireEventHandlerInterface<::test_drivertwoway::TwoWay>> {
 public:
  explicit WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_drivertwoway::TwoWay>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_drivertwoway::TwoWay> final : public ::fdf::internal::SyncEndpointBufferVeneer<::fidl::internal::WireSyncBufferClientImpl<::test_drivertwoway::TwoWay>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
  ::fdf::WireUnownedResult<::test_drivertwoway::TwoWay::Add>
  Add(uint16_t addend1, uint16_t addend2) {
    ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add> _request{addend1, addend2};
    return ::fdf::WireUnownedResult<::test_drivertwoway::TwoWay::Add>(_client_end(), _arena(), &_request);
  }

 private:
  ::fdf::UnownedClientEnd<::test_drivertwoway::TwoWay> _client_end() const {
    return ::fdf::UnownedClientEnd<::test_drivertwoway::TwoWay>(
        _transport().get<::fidl::internal::DriverTransport>());
  }
};

template <>
class ::fidl::internal::WireCompleterImpl<::test_drivertwoway::TwoWay::Add> : public ::fdf::internal::CompleterImplBase<::test_drivertwoway::TwoWay::Add> {
 public:
  using CompleterImplBase::CompleterImplBase;
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_drivertwoway::TwoWay::Add> : public ::fdf::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(uint16_t sum);

 private:
  void MakeReply(uint16_t sum);
};

template <>
class ::fidl::internal::WireCompleterBase<::test_drivertwoway::TwoWay::Add> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_drivertwoway::TwoWay::Add> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |::fdf::ClientEnd<::test_drivertwoway::TwoWay>|
// and |::fdf::ServerEnd<::test_drivertwoway::TwoWay>|).
template <>
class ::fdf::WireServer<::test_drivertwoway::TwoWay> : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_drivertwoway::TwoWay;

  using Handler = fidl::ProtocolHandler<::test_drivertwoway::TwoWay>;

  using AddCompleter = ::fidl::internal::WireCompleter<::test_drivertwoway::TwoWay::Add>;
  using AddRequestView = ::test_drivertwoway::wire::TwoWayAddRequest*;

  virtual void Add(
      ::test_drivertwoway::wire::TwoWayAddRequest* request,
      fdf::Arena& arena,
      AddCompleter::Sync& completer) = 0;

  // |bind_handler| returns a handler that binds incoming connections to this
  // server implementation.
  //
  // The returned handler borrows the server instance.
  // The server must outlive the provided |dispatcher|. Only after
  // the dispatcher is shutdown will it be safe to destroy the servers.
  // The server should not be moved.
  Handler bind_handler(fdf_dispatcher_t* dispatcher) {
    return [impl = this, dispatcher = dispatcher](::fdf::ServerEnd<::test_drivertwoway::TwoWay> request) {
      (void)::fdf::BindServer(dispatcher, std::move(request), impl);
    };
  }

 private:
  void dispatch_message(
      ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::MessageStorageViewBase* storage_view) final;
};
namespace fidl {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_drivertwoway::TwoWay> : public ::fdf::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<::test_drivertwoway::TwoWay> final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_drivertwoway::TwoWay> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;

  // Caller provides the backing storage for FIDL message.
  ::fidl::internal::WireBufferThenable<::test_drivertwoway::TwoWay::Add> Add(uint16_t addend1, uint16_t addend2);
};

template <>
class ::fidl::internal::WireWeakOnewayClientImpl<::test_drivertwoway::TwoWay> : public ::fidl::internal::ClientImplBase {
 public:
  WireWeakOnewayClientImpl(fidl::internal::ClientBase* client_base, const fdf::Arena& arena)
      : ClientImplBase(client_base), arena_(arena) {}

 protected:
  const ::fdf::Arena& arena_;
};

template <>
class ::fidl::internal::WireWeakSyncClientImpl<::test_drivertwoway::TwoWay> final : public ::fidl::internal::WireWeakOnewayClientImpl<::test_drivertwoway::TwoWay> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;

  // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
  ::fdf::WireUnownedResult<::test_drivertwoway::TwoWay::Add> Add(uint16_t addend1, uint16_t addend2);
};
namespace fidl {

#endif  // __Fuchsia__

}  // namespace fidl
