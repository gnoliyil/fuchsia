// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#include <fidl/test.largemessages/cpp/natural_messaging.h>
#include <lib/fidl/cpp/wire/unknown_interactions.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_largemessages {

[[maybe_unused]] constexpr inline uint64_t kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal = 5952259942637616356lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_DecodeBoundedKnownToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_DecodeBoundedMaybeLarge_Ordinal = 4844409317800064506lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_DecodeBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal = 9033523515723994320lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_DecodeSemiBoundedBelievedToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal = 2934974775967009888lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_DecodeSemiBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal = 6619820881740926511lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_DecodeUnboundedMaybeLargeValue_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal = 4562382013720126356lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_DecodeUnboundedMaybeLargeResource_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal = 6548039810775918803lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_EncodeBoundedKnownToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_EncodeBoundedMaybeLarge_Ordinal = 3946825660199764192lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_EncodeBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal = 4256297304861928433lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_EncodeSemiBoundedBelievedToBeSmall_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal = 2268007598729864303lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_EncodeSemiBoundedMaybeLarge_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal = 3417738688177890202lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_EncodeUnboundedMaybeLargeValue_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal = 343754737384884834lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags kOverflowing_EncodeUnboundedMaybeLargeResource_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

#ifdef __Fuchsia__
}  // namespace test_largemessages

::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::EncodeBoundedKnownToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>& request) const {
  return ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::EncodeBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>& request) const {
  return ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedBelievedToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>& request) const {
  return ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>& request) const {
  return ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeValue(const ::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>& request) const {
  return ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeResource(::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> request) const {
  return ::fidl::internal::NaturalThenable<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_DynamicFlags,
      [request = std::move(request)](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(std::move(request));
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::DecodeBoundedKnownToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal, ::test_largemessages::kOverflowing_DecodeBoundedKnownToBeSmall_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::DecodeBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_DecodeBoundedMaybeLarge_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::DecodeSemiBoundedBelievedToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal, ::test_largemessages::kOverflowing_DecodeSemiBoundedBelievedToBeSmall_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::DecodeSemiBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_DecodeSemiBoundedMaybeLarge_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::DecodeUnboundedMaybeLargeValue(const ::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>& request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeValue_DynamicFlags};
  _encoder.EncodeBody(request);

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_largemessages::Overflowing>::DecodeUnboundedMaybeLargeResource(::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeResource_DynamicFlags};
  _encoder.EncodeBody(std::move(request));

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_largemessages {

#endif  // __Fuchsia__

}  // namespace test_largemessages

#ifdef __Fuchsia__

::fidl::Result<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::EncodeBoundedKnownToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::EncodeBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedBelievedToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::EncodeSemiBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeValue(const ::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::Result<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::EncodeUnboundedMaybeLargeResource(::fidl::Request<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_DynamicFlags};
  encoder.EncodeBody(std::move(request));
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::DecodeBoundedKnownToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal, ::test_largemessages::kOverflowing_DecodeBoundedKnownToBeSmall_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::DecodeBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_DecodeBoundedMaybeLarge_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::DecodeSemiBoundedBelievedToBeSmall(const ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal, ::test_largemessages::kOverflowing_DecodeSemiBoundedBelievedToBeSmall_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::DecodeSemiBoundedMaybeLarge(const ::fidl::Request<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_DecodeSemiBoundedMaybeLarge_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::DecodeUnboundedMaybeLargeValue(const ::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeValue_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_largemessages::Overflowing>::DecodeUnboundedMaybeLargeResource(::fidl::Request<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource> request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal, ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeResource_DynamicFlags};
  encoder.EncodeBody(std::move(request));
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Status fidl::SyncEventHandler<::test_largemessages::Overflowing>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_largemessages::Overflowing> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_largemessages::Overflowing> event_storage;
  fidl::internal::NaturalEventDispatcher<::test_largemessages::Overflowing> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}
::fidl::Status
fidl::internal::NaturalEventDispatcher<::test_largemessages::Overflowing>::DispatchEvent(
    ::fidl::IncomingHeaderAndMessage& msg,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  switch (msg.header()->ordinal) {
    default:
      auto* hdr = msg.header();
      ::fidl::UnknownMethodType unknown_method_type =
          ::fidl::internal::UnknownMethodTypeFromHeader(hdr);
      bool is_flexible_interaction = ::fidl::IsFlexibleInteraction(hdr);
      auto ordinal = hdr->ordinal;
      std::move(msg).CloseHandles();
      if (is_flexible_interaction &&
          ::fidl::internal::CanHandleEvent(::test_largemessages::Overflowing::kOpenness, unknown_method_type)) {
        if (event_handler()) {
          ::fidl::UnknownEventMetadata<::test_largemessages::Overflowing> metadata{
              .event_ordinal = ordinal,
          };
          event_handler()->handle_unknown_event(metadata);
        }
        return ::fidl::Status::Ok();
      }
      return ::fidl::Status::UnknownOrdinal();
  }
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal, ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::Reply(const ::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::Reply(::fidl::Response<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource> response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal, ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::IntoDomainObject(std::move(response)));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<::test_largemessages::Overflowing>::entries_[] = {
    {
        ::test_largemessages::kOverflowing_DecodeBoundedKnownToBeSmall_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::BoundedKnownToBeSmall>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeBoundedKnownToBeSmall>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->DecodeBoundedKnownToBeSmall(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeBoundedMaybeLarge_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::BoundedMaybeLarge>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeBoundedMaybeLarge>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->DecodeBoundedMaybeLarge(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeSemiBoundedBelievedToBeSmall_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::SemiBoundedBelievedToBeSmall>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeSemiBoundedBelievedToBeSmall>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->DecodeSemiBoundedBelievedToBeSmall(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeSemiBoundedMaybeLarge_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::SemiBoundedMaybeLarge>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeSemiBoundedMaybeLarge>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->DecodeSemiBoundedMaybeLarge(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeValue_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::UnboundedMaybeLargeValue>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeValue>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->DecodeUnboundedMaybeLargeValue(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_DecodeUnboundedMaybeLargeResource_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::UnboundedMaybeLargeResource>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::DecodeUnboundedMaybeLargeResource>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->DecodeUnboundedMaybeLargeResource(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeBoundedKnownToBeSmall_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::BoundedKnownToBeSmall>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeBoundedKnownToBeSmall>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->EncodeBoundedKnownToBeSmall(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeBoundedMaybeLarge_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::BoundedMaybeLarge>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeBoundedMaybeLarge>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->EncodeBoundedMaybeLarge(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeSemiBoundedBelievedToBeSmall_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::SemiBoundedBelievedToBeSmall>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeSemiBoundedBelievedToBeSmall>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->EncodeSemiBoundedBelievedToBeSmall(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeSemiBoundedMaybeLarge_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::SemiBoundedMaybeLarge>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeSemiBoundedMaybeLarge>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->EncodeSemiBoundedMaybeLarge(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeValue_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::UnboundedMaybeLargeValue>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeValue>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->EncodeUnboundedMaybeLargeValue(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_largemessages::kOverflowing_EncodeUnboundedMaybeLargeResource_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_largemessages::UnboundedMaybeLargeResource>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_largemessages::Overflowing::EncodeUnboundedMaybeLargeResource>::Sync completer(txn);
          static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->EncodeUnboundedMaybeLargeResource(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<::test_largemessages::Overflowing>::entries_end_ =
    &entries_[12];
const ::fidl::internal::UnknownMethodHandlerEntry fidl::internal::NaturalServerDispatcher<::test_largemessages::Overflowing>::unknown_method_handler_entry_ = {
    .openness = ::fidl::internal::Openness::kOpen,
    .dispatch = [](void* interface, uint64_t method_ordinal,
                   ::fidl::UnknownMethodType unknown_method_type, ::fidl::Transaction* txn) {
      ::fidl::UnknownMethodCompleter::Sync completer(txn);
      static_cast<::fidl::Server<::test_largemessages::Overflowing>*>(interface)->handle_unknown_method(
          ::fidl::UnknownMethodMetadata<::test_largemessages::Overflowing>{
              .method_ordinal = method_ordinal,

              .unknown_method_type = unknown_method_type,

          },
          completer);
    },
    .send_reply = ::fidl::internal::SendChannelUnknownMethodReply,
};

void fidl::internal::NaturalServerDispatcher<::test_largemessages::Overflowing>::Dispatch(::fidl::Server<::test_largemessages::Overflowing>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                          internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_, &unknown_method_handler_entry_);
}

void fidl::Server<::test_largemessages::Overflowing>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::NaturalServerDispatcher<::test_largemessages::Overflowing>::Dispatch(this, std::move(msg), storage_view, txn);
}

#endif  // __Fuchsia__

#pragma clang diagnostic pop
