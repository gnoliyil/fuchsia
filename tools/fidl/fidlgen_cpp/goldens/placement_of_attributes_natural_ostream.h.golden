// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.exampleusing/cpp/natural_ostream.h>
#include <fidl/test.placementofattributes/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <>
struct fidl::ostream::Formatter<::test_placementofattributes::ExampleBits> {
  static std::ostream& Format(std::ostream& os, const ::test_placementofattributes::ExampleBits& value);
};
template <>
struct fidl::ostream::Formatter<::test_placementofattributes::ExampleEnum> {
  static std::ostream& Format(std::ostream& os, const ::test_placementofattributes::ExampleEnum& value);
};
template <>
struct fidl::ostream::Formatter<::test_placementofattributes::ExampleProtocolMethodRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_placementofattributes::ExampleProtocolMethodRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_placementofattributes::ExampleStruct> {
  static std::ostream& Format(std::ostream& os, const ::test_placementofattributes::ExampleStruct& value);
};
template <>
struct fidl::ostream::Formatter<::test_placementofattributes::ExampleTable> {
  static std::ostream& Format(std::ostream& os, const ::test_placementofattributes::ExampleTable& value);
};
template <>
struct fidl::ostream::Formatter<::test_placementofattributes::ExampleUnion> {
  static std::ostream& Format(std::ostream& os, const ::test_placementofattributes::ExampleUnion& value);
};

namespace test_placementofattributes {

std::ostream& operator<<(std::ostream& os, const ::test_placementofattributes::ExampleBits& value);

std::ostream& operator<<(std::ostream& os, const ::test_placementofattributes::ExampleEnum& value);

std::ostream& operator<<(std::ostream& os, const ::test_placementofattributes::ExampleProtocolMethodRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_placementofattributes::ExampleStruct& value);

std::ostream& operator<<(std::ostream& os, const ::test_placementofattributes::ExampleTable& value);

std::ostream& operator<<(std::ostream& os, const ::test_placementofattributes::ExampleUnion& value);

}  // namespace test_placementofattributes

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_placementofattributes::ExampleProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_placementofattributes::ExampleProtocol>& value) {
    return os << "ClientEnd<"
              << "test_placementofattributes::ExampleProtocol"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_placementofattributes::ExampleProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_placementofattributes::ExampleProtocol>& value) {
    return os << "ServerEnd<"
              << "test_placementofattributes::ExampleProtocol"
              << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_placementofattributes::ExampleProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_placementofattributes::ExampleProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_placementofattributes::ExampleProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_placementofattributes::ExampleProtocol>>::Format(os, value);
}

#pragma clang diagnostic pop

}  // namespace fidl
