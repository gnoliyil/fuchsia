// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#include <fidl/test.padding/cpp/natural_ostream.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

std::ostream& fidl::ostream::Formatter<::test_padding::Padding1ByteEnd>::Format(std::ostream& os, const ::test_padding::Padding1ByteEnd& value) {
  os << "test_padding::Padding1ByteEnd";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding2ByteEnd>::Format(std::ostream& os, const ::test_padding::Padding2ByteEnd& value) {
  os << "test_padding::Padding2ByteEnd";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint32_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding3ByteEnd>::Format(std::ostream& os, const ::test_padding::Padding3ByteEnd& value) {
  os << "test_padding::Padding3ByteEnd";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint32_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding4ByteEnd>::Format(std::ostream& os, const ::test_padding::Padding4ByteEnd& value) {
  os << "test_padding::Padding4ByteEnd";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint64_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint32_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding5ByteEnd>::Format(std::ostream& os, const ::test_padding::Padding5ByteEnd& value) {
  os << "test_padding::Padding5ByteEnd";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint64_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.b()) << ", ";
  os << "c";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.c()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding6ByteEnd>::Format(std::ostream& os, const ::test_padding::Padding6ByteEnd& value) {
  os << "test_padding::Padding6ByteEnd";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint64_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding7ByteEnd>::Format(std::ostream& os, const ::test_padding::Padding7ByteEnd& value) {
  os << "test_padding::Padding7ByteEnd";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint64_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding1ByteMiddle>::Format(std::ostream& os, const ::test_padding::Padding1ByteMiddle& value) {
  os << "test_padding::Padding1ByteMiddle";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding2ByteMiddle>::Format(std::ostream& os, const ::test_padding::Padding2ByteMiddle& value) {
  os << "test_padding::Padding2ByteMiddle";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint32_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding3ByteMiddle>::Format(std::ostream& os, const ::test_padding::Padding3ByteMiddle& value) {
  os << "test_padding::Padding3ByteMiddle";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint32_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding4ByteMiddle>::Format(std::ostream& os, const ::test_padding::Padding4ByteMiddle& value) {
  os << "test_padding::Padding4ByteMiddle";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint32_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint64_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding5ByteMiddle>::Format(std::ostream& os, const ::test_padding::Padding5ByteMiddle& value) {
  os << "test_padding::Padding5ByteMiddle";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.b()) << ", ";
  os << "c";
  os << " = " << fidl::ostream::Formatted<uint64_t>(value.c()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding6ByteMiddle>::Format(std::ostream& os, const ::test_padding::Padding6ByteMiddle& value) {
  os << "test_padding::Padding6ByteMiddle";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint64_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding7ByteMiddle>::Format(std::ostream& os, const ::test_padding::Padding7ByteMiddle& value) {
  os << "test_padding::Padding7ByteMiddle";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint64_t>(value.b()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding4ByteAlignmentLength12>::Format(std::ostream& os, const ::test_padding::Padding4ByteAlignmentLength12& value) {
  os << "test_padding::Padding4ByteAlignmentLength12";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint32_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.b()) << ", ";
  os << "c";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.c()) << ", ";
  os << "d";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.d()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_padding::Padding2ByteAlignmentLength6>::Format(std::ostream& os, const ::test_padding::Padding2ByteAlignmentLength6& value) {
  os << "test_padding::Padding2ByteAlignmentLength6";
  os << "{ ";
  os << "a";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.a()) << ", ";
  os << "b";
  os << " = " << fidl::ostream::Formatted<uint16_t>(value.b()) << ", ";
  os << "c";
  os << " = " << fidl::ostream::Formatted<uint8_t>(value.c()) << ", ";
  os << "}";
  return os;
}

namespace test_padding {

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding1ByteEnd& value) {
  return fidl::ostream::Formatter<::test_padding::Padding1ByteEnd>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding2ByteEnd& value) {
  return fidl::ostream::Formatter<::test_padding::Padding2ByteEnd>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding3ByteEnd& value) {
  return fidl::ostream::Formatter<::test_padding::Padding3ByteEnd>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding4ByteEnd& value) {
  return fidl::ostream::Formatter<::test_padding::Padding4ByteEnd>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding5ByteEnd& value) {
  return fidl::ostream::Formatter<::test_padding::Padding5ByteEnd>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding6ByteEnd& value) {
  return fidl::ostream::Formatter<::test_padding::Padding6ByteEnd>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding7ByteEnd& value) {
  return fidl::ostream::Formatter<::test_padding::Padding7ByteEnd>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding1ByteMiddle& value) {
  return fidl::ostream::Formatter<::test_padding::Padding1ByteMiddle>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding2ByteMiddle& value) {
  return fidl::ostream::Formatter<::test_padding::Padding2ByteMiddle>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding3ByteMiddle& value) {
  return fidl::ostream::Formatter<::test_padding::Padding3ByteMiddle>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding4ByteMiddle& value) {
  return fidl::ostream::Formatter<::test_padding::Padding4ByteMiddle>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding5ByteMiddle& value) {
  return fidl::ostream::Formatter<::test_padding::Padding5ByteMiddle>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding6ByteMiddle& value) {
  return fidl::ostream::Formatter<::test_padding::Padding6ByteMiddle>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding7ByteMiddle& value) {
  return fidl::ostream::Formatter<::test_padding::Padding7ByteMiddle>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding4ByteAlignmentLength12& value) {
  return fidl::ostream::Formatter<::test_padding::Padding4ByteAlignmentLength12>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_padding::Padding2ByteAlignmentLength6& value) {
  return fidl::ostream::Formatter<::test_padding::Padding2ByteAlignmentLength6>::Format(os, value);
}

#pragma clang diagnostic pop

}  // namespace test_padding
