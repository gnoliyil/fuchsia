// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.protocolrequest/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

template <>
struct fidl::ostream::Formatter<::test_protocolrequest::ParentGetChildResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolrequest::ParentGetChildResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolrequest::ParentGetChildRequestResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolrequest::ParentGetChildRequestResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolrequest::ParentTakeChildRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolrequest::ParentTakeChildRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolrequest::ParentTakeChildRequestRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolrequest::ParentTakeChildRequestRequest& value);
};

namespace test_protocolrequest {

std::ostream& operator<<(std::ostream& os, const ::test_protocolrequest::ParentGetChildResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolrequest::ParentGetChildRequestResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolrequest::ParentTakeChildRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolrequest::ParentTakeChildRequestRequest& value);

}  // namespace test_protocolrequest

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolrequest::Child>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_protocolrequest::Child>& value) {
    return os << "ClientEnd<"
              << "test_protocolrequest::Child"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolrequest::Child>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_protocolrequest::Child>& value) {
    return os << "ServerEnd<"
              << "test_protocolrequest::Child"
              << ">(" << value.channel().get() << ")";
  }
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolrequest::Parent>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_protocolrequest::Parent>& value) {
    return os << "ClientEnd<"
              << "test_protocolrequest::Parent"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolrequest::Parent>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_protocolrequest::Parent>& value) {
    return os << "ServerEnd<"
              << "test_protocolrequest::Parent"
              << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_protocolrequest::Child>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolrequest::Child>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_protocolrequest::Child>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolrequest::Child>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_protocolrequest::Parent>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolrequest::Parent>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_protocolrequest::Parent>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolrequest::Parent>>::Format(os, value);
}

}  // namespace fidl
