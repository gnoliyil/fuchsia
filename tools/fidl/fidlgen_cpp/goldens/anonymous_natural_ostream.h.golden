// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <fidl/test.anonymous/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <>
struct fidl::ostream::Formatter<::test_anonymous::Op> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::Op& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::OverrideTest> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::OverrideTest& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::Flags> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::Flags& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::FunctionApplication> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::FunctionApplication& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::Expression> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::Expression& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::UnionMember> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::UnionMember& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::TableData> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::TableData& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::TableMember> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::TableMember& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::SomeProtocolSomeMethodRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::BitsMember> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::BitsMember& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::SomeProtocolSomeMethodResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::SomeProtocolSomeMethodError> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodError& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::SomeProtocolSomeMethodResult> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_anonymous::SomeProtocolSomeMethodTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodTopResponse& value);
};

namespace test_anonymous {

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::Op& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::OverrideTest& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::Flags& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::FunctionApplication& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::Expression& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::UnionMember& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::TableData& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::TableMember& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::BitsMember& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodError& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_anonymous::SomeProtocolSomeMethodTopResponse& value);

}  // namespace test_anonymous

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_anonymous::SomeProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_anonymous::SomeProtocol>& value) {
    return os << "ClientEnd<"
              << "test_anonymous::SomeProtocol"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_anonymous::SomeProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_anonymous::SomeProtocol>& value) {
    return os << "ServerEnd<"
              << "test_anonymous::SomeProtocol"
              << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_anonymous::SomeProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_anonymous::SomeProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_anonymous::SomeProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_anonymous::SomeProtocol>>::Format(os, value);
}

#pragma clang diagnostic pop

}  // namespace fidl
