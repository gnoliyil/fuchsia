// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.inheritancewithrecursivedecl/cpp/natural_types.h>
#include <lib/fidl/cpp/hlcpp_conversion.h>
#include <lib/fidl/cpp/wire/internal/transport_channel.h>
#include <test/inheritancewithrecursivedecl/cpp/fidl.h>

namespace fidl {
namespace internal {

template <>
struct NaturalToHLCPPTraits<fidl::ClientEnd<::test_inheritancewithrecursivedecl::Parent>> {
  using HLCPPType = fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Parent>;
  static inline fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Parent> Convert(fidl::ClientEnd<::test_inheritancewithrecursivedecl::Parent>&& c) {
    return fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Parent>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>> {
  using HLCPPType = fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>;
  static inline fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent> Convert(fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& c) {
    return fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Parent>> {
  using NaturalType = fidl::ClientEnd<::test_inheritancewithrecursivedecl::Parent>;
  static inline fidl::ClientEnd<::test_inheritancewithrecursivedecl::Parent> Convert(fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Parent>&& c) {
    return fidl::ClientEnd<::test_inheritancewithrecursivedecl::Parent>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>> {
  using NaturalType = fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>;
  static inline fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent> Convert(fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>&& c) {
    return fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>(c.TakeChannel());
  }
};
template <>
struct NaturalToHLCPPTraits<fidl::ClientEnd<::test_inheritancewithrecursivedecl::Child>> {
  using HLCPPType = fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Child>;
  static inline fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Child> Convert(fidl::ClientEnd<::test_inheritancewithrecursivedecl::Child>&& c) {
    return fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Child>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<fidl::ServerEnd<::test_inheritancewithrecursivedecl::Child>> {
  using HLCPPType = fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Child>;
  static inline fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Child> Convert(fidl::ServerEnd<::test_inheritancewithrecursivedecl::Child>&& c) {
    return fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Child>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Child>> {
  using NaturalType = fidl::ClientEnd<::test_inheritancewithrecursivedecl::Child>;
  static inline fidl::ClientEnd<::test_inheritancewithrecursivedecl::Child> Convert(fidl::InterfaceHandle<::test::inheritancewithrecursivedecl::Child>&& c) {
    return fidl::ClientEnd<::test_inheritancewithrecursivedecl::Child>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Child>> {
  using NaturalType = fidl::ServerEnd<::test_inheritancewithrecursivedecl::Child>;
  static inline fidl::ServerEnd<::test_inheritancewithrecursivedecl::Child> Convert(fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Child>&& c) {
    return fidl::ServerEnd<::test_inheritancewithrecursivedecl::Child>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<::test_inheritancewithrecursivedecl::ParentFirstRequest> {
  using HLCPPType = ::test::inheritancewithrecursivedecl::ParentFirstRequest;
  static inline ::test::inheritancewithrecursivedecl::ParentFirstRequest Convert(::test_inheritancewithrecursivedecl::ParentFirstRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::inheritancewithrecursivedecl::ParentFirstRequest> {
  using NaturalType = ::test_inheritancewithrecursivedecl::ParentFirstRequest;
  static inline ::test_inheritancewithrecursivedecl::ParentFirstRequest Convert(::test::inheritancewithrecursivedecl::ParentFirstRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_inheritancewithrecursivedecl::ChildSecondRequest> {
  using HLCPPType = ::test::inheritancewithrecursivedecl::ChildSecondRequest;
  static inline ::test::inheritancewithrecursivedecl::ChildSecondRequest Convert(::test_inheritancewithrecursivedecl::ChildSecondRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::inheritancewithrecursivedecl::ChildSecondRequest> {
  using NaturalType = ::test_inheritancewithrecursivedecl::ChildSecondRequest;
  static inline ::test_inheritancewithrecursivedecl::ChildSecondRequest Convert(::test::inheritancewithrecursivedecl::ChildSecondRequest&&);
};

::test::inheritancewithrecursivedecl::ParentFirstRequest NaturalToHLCPPTraits<::test_inheritancewithrecursivedecl::ParentFirstRequest>::Convert(::test_inheritancewithrecursivedecl::ParentFirstRequest&& value) {
  ::test::inheritancewithrecursivedecl::ParentFirstRequest hlcpp;
  hlcpp.request = ::fidl::NaturalToHLCPP(std::move(value.request()));
  return hlcpp;
}

::test_inheritancewithrecursivedecl::ParentFirstRequest HLCPPToNaturalTraits<::test::inheritancewithrecursivedecl::ParentFirstRequest>::Convert(::test::inheritancewithrecursivedecl::ParentFirstRequest&& value) {
  return ::test_inheritancewithrecursivedecl::ParentFirstRequest{{
      .request = ::fidl::HLCPPToNatural(std::move(value.request)),
  }};
}
::test::inheritancewithrecursivedecl::ChildSecondRequest NaturalToHLCPPTraits<::test_inheritancewithrecursivedecl::ChildSecondRequest>::Convert(::test_inheritancewithrecursivedecl::ChildSecondRequest&& value) {
  ::test::inheritancewithrecursivedecl::ChildSecondRequest hlcpp;
  hlcpp.request = ::fidl::NaturalToHLCPP(std::move(value.request()));
  return hlcpp;
}

::test_inheritancewithrecursivedecl::ChildSecondRequest HLCPPToNaturalTraits<::test::inheritancewithrecursivedecl::ChildSecondRequest>::Convert(::test::inheritancewithrecursivedecl::ChildSecondRequest&& value) {
  return ::test_inheritancewithrecursivedecl::ChildSecondRequest{{
      .request = ::fidl::HLCPPToNatural(std::move(value.request)),
  }};
}

}  // namespace internal
}  // namespace fidl
