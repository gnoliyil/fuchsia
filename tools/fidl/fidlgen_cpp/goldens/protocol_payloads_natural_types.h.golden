// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.protocolpayloads/cpp/common_types.h>
#include <fidl/test.protocolpayloads/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.protocolpayloads.imported/cpp/natural_types.h>
namespace test_protocolpayloads {

class LocalStructPayload;

class MainProtocolTwoWayLocalWithErrorTopResponse;

class MainProtocolOnLocalWithErrorRequest;

class MainProtocolOneWayAnonRequest;

class MainProtocolTwoWayAnonRequest;

class MainProtocolTwoWayAnonResponse;

class MainProtocolTwoWayAnonWithErrorRequest;

class MainProtocolTwoWayAnonWithErrorResponse;

class MainProtocolTwoWayAnonWithErrorTopResponse;

class MainProtocolOnAnonRequest;

class MainProtocolOnAnonWithErrorResponse;

class MainProtocolOnAnonWithErrorRequest;

class MainProtocolTwoWayImportWithErrorTopResponse;

class MainProtocolOnImportWithErrorRequest;

class MainProtocolTwoWayLocalWithErrorResult;

class MainProtocolOnLocalWithErrorResult;

class MainProtocolTwoWayAnonWithErrorResult;

class MainProtocolOnAnonWithErrorResult;

class MainProtocolTwoWayImportWithErrorResult;

class MainProtocolOnImportWithErrorResult;

extern "C" const fidl_type_t test_protocolpayloads_LocalStructPayloadTable;

class LocalStructPayload {
 private:
  struct Storage_;

 public:
  LocalStructPayload(Storage_ storage) noexcept;
  LocalStructPayload(uint32_t a, uint32_t b) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |LocalStructPayload| only if all of its members are default constructible.
  LocalStructPayload() = default;
#pragma clang diagnostic pop

  LocalStructPayload(LocalStructPayload&&) noexcept = default;
  LocalStructPayload& operator=(LocalStructPayload&&) noexcept = default;
  LocalStructPayload(const LocalStructPayload& other) noexcept;
  LocalStructPayload& operator=(const LocalStructPayload& other) noexcept;

  bool operator==(const LocalStructPayload& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::LocalStructPayload, 8>::Equal(this, &other);
  }
  bool operator!=(const LocalStructPayload& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::LocalStructPayload, 8>::Equal(this, &other);
  }

  uint32_t
  a() const {
    return storage_.a;
  }

  uint32_t& a() {
    return storage_.a;
  }

  // Setter for a.
  //

  LocalStructPayload& a(uint32_t value);

  uint32_t
  b() const {
    return storage_.b;
  }

  uint32_t& b() {
    return storage_.b;
  }

  // Setter for b.
  //

  LocalStructPayload& b(uint32_t value);

  LocalStructPayload(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t a = {};
    uint32_t b = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::LocalStructPayload, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::LocalStructPayload>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       &Storage_::a, 0},
                                                   ::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::b, 4});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_TwoWayLocalWithError_ResultTable;

class MainProtocolTwoWayLocalWithErrorResult {
 private:
  using Storage_ =
      std::variant<
          std::monostate, ::test_protocolpayloads::LocalStructPayload, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  MainProtocolTwoWayLocalWithErrorResult(MainProtocolTwoWayLocalWithErrorResult&& other) noexcept
      : MainProtocolTwoWayLocalWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
    *storage_ = std::move(*other.storage_);
  }
  MainProtocolTwoWayLocalWithErrorResult& operator=(MainProtocolTwoWayLocalWithErrorResult&& other) noexcept {
    if (this != &other) {
      *storage_ = std::move(*other.storage_);
    }
    return *this;
  }
  MainProtocolTwoWayLocalWithErrorResult(const MainProtocolTwoWayLocalWithErrorResult& other) noexcept : MainProtocolTwoWayLocalWithErrorResult(other.CloneStorage_()) {}
  MainProtocolTwoWayLocalWithErrorResult& operator=(const MainProtocolTwoWayLocalWithErrorResult& other) noexcept {
    if (this != &other) {
      storage_ = other.CloneStorage_();
    }
    return *this;
  }

  bool operator==(const MainProtocolTwoWayLocalWithErrorResult& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const MainProtocolTwoWayLocalWithErrorResult& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult::Tag Which() const {
    return MainProtocolTwoWayLocalWithErrorResult::IndexToTag(storage_->index()).value();
  }
  static MainProtocolTwoWayLocalWithErrorResult WithResponse(::test_protocolpayloads::LocalStructPayload val) {
    return MainProtocolTwoWayLocalWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<1>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  // Sets the union to hold the response member.
  //

  MainProtocolTwoWayLocalWithErrorResult& response(::test_protocolpayloads::LocalStructPayload value) {
    storage_->emplace<1>(std::move(value));
    return *this;
  }
  static MainProtocolTwoWayLocalWithErrorResult WithErr(uint32_t val) {
    return MainProtocolTwoWayLocalWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<2>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  // Sets the union to hold the err member.
  //

  MainProtocolTwoWayLocalWithErrorResult& err(uint32_t value) {
    storage_->emplace<2>(std::move(value));
    return *this;
  }

  MainProtocolTwoWayLocalWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
      : storage_(std::make_shared<Storage_>()) {}

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocolTwoWayLocalWithErrorResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult::Tag tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult::Tag::kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult::Tag::kErr:
        return 2;
      default: {
        decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
        return 0;
      }
    }
  }

  static constexpr std::optional<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult::Tag> IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult::Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult::Tag::kErr;
      default:
        return std::nullopt;
    }
  }
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayLocalWithErrorTopResponseTable;

class MainProtocolTwoWayLocalWithErrorTopResponse {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayLocalWithErrorTopResponse(Storage_ storage) noexcept;
  MainProtocolTwoWayLocalWithErrorTopResponse(::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult result) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolTwoWayLocalWithErrorTopResponse| only if all of its members are default constructible.
  MainProtocolTwoWayLocalWithErrorTopResponse() = default;
#pragma clang diagnostic pop

  MainProtocolTwoWayLocalWithErrorTopResponse(MainProtocolTwoWayLocalWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayLocalWithErrorTopResponse& operator=(MainProtocolTwoWayLocalWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayLocalWithErrorTopResponse(const MainProtocolTwoWayLocalWithErrorTopResponse& other) noexcept;
  MainProtocolTwoWayLocalWithErrorTopResponse& operator=(const MainProtocolTwoWayLocalWithErrorTopResponse& other) noexcept;

  bool operator==(const MainProtocolTwoWayLocalWithErrorTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse, 16>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayLocalWithErrorTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse, 16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult&
  result() const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult& result() {
    return storage_.result;
  }

  // Setter for result.
  //

  MainProtocolTwoWayLocalWithErrorTopResponse& result(::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult value);

  MainProtocolTwoWayLocalWithErrorTopResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult result;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse, 16>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::result, 0});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_OnLocalWithError_ResultTable;

class MainProtocolOnLocalWithErrorResult {
 private:
  using Storage_ =
      std::variant<
          std::monostate, ::test_protocolpayloads::LocalStructPayload, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  MainProtocolOnLocalWithErrorResult(MainProtocolOnLocalWithErrorResult&& other) noexcept
      : MainProtocolOnLocalWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
    *storage_ = std::move(*other.storage_);
  }
  MainProtocolOnLocalWithErrorResult& operator=(MainProtocolOnLocalWithErrorResult&& other) noexcept {
    if (this != &other) {
      *storage_ = std::move(*other.storage_);
    }
    return *this;
  }
  MainProtocolOnLocalWithErrorResult(const MainProtocolOnLocalWithErrorResult& other) noexcept : MainProtocolOnLocalWithErrorResult(other.CloneStorage_()) {}
  MainProtocolOnLocalWithErrorResult& operator=(const MainProtocolOnLocalWithErrorResult& other) noexcept {
    if (this != &other) {
      storage_ = other.CloneStorage_();
    }
    return *this;
  }

  bool operator==(const MainProtocolOnLocalWithErrorResult& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const MainProtocolOnLocalWithErrorResult& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult::Tag Which() const {
    return MainProtocolOnLocalWithErrorResult::IndexToTag(storage_->index()).value();
  }
  static MainProtocolOnLocalWithErrorResult WithResponse(::test_protocolpayloads::LocalStructPayload val) {
    return MainProtocolOnLocalWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<1>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  // Sets the union to hold the response member.
  //

  MainProtocolOnLocalWithErrorResult& response(::test_protocolpayloads::LocalStructPayload value) {
    storage_->emplace<1>(std::move(value));
    return *this;
  }
  static MainProtocolOnLocalWithErrorResult WithErr(uint32_t val) {
    return MainProtocolOnLocalWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<2>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  // Sets the union to hold the err member.
  //

  MainProtocolOnLocalWithErrorResult& err(uint32_t value) {
    storage_->emplace<2>(std::move(value));
    return *this;
  }

  MainProtocolOnLocalWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
      : storage_(std::make_shared<Storage_>()) {}

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocolOnLocalWithErrorResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult::Tag tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult::Tag::kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult::Tag::kErr:
        return 2;
      default: {
        decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
        return 0;
      }
    }
  }

  static constexpr std::optional<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult::Tag> IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult::Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult::Tag::kErr;
      default:
        return std::nullopt;
    }
  }
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnLocalWithErrorRequestTable;

class MainProtocolOnLocalWithErrorRequest {
 private:
  struct Storage_;

 public:
  MainProtocolOnLocalWithErrorRequest(Storage_ storage) noexcept;
  MainProtocolOnLocalWithErrorRequest(::test_protocolpayloads::MainProtocolOnLocalWithErrorResult result) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolOnLocalWithErrorRequest| only if all of its members are default constructible.
  MainProtocolOnLocalWithErrorRequest() = default;
#pragma clang diagnostic pop

  MainProtocolOnLocalWithErrorRequest(MainProtocolOnLocalWithErrorRequest&&) noexcept = default;
  MainProtocolOnLocalWithErrorRequest& operator=(MainProtocolOnLocalWithErrorRequest&&) noexcept = default;
  MainProtocolOnLocalWithErrorRequest(const MainProtocolOnLocalWithErrorRequest& other) noexcept;
  MainProtocolOnLocalWithErrorRequest& operator=(const MainProtocolOnLocalWithErrorRequest& other) noexcept;

  bool operator==(const MainProtocolOnLocalWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest, 16>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolOnLocalWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest, 16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult&
  result() const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult& result() {
    return storage_.result;
  }

  // Setter for result.
  //

  MainProtocolOnLocalWithErrorRequest& result(::test_protocolpayloads::MainProtocolOnLocalWithErrorResult value);

  MainProtocolOnLocalWithErrorRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult result;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest, 16>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::result, 0});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOneWayAnonRequestTable;

class MainProtocolOneWayAnonRequest {
 private:
  struct Storage_;

 public:
  MainProtocolOneWayAnonRequest(Storage_ storage) noexcept;
  MainProtocolOneWayAnonRequest(uint32_t a, uint32_t b) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolOneWayAnonRequest| only if all of its members are default constructible.
  MainProtocolOneWayAnonRequest() = default;
#pragma clang diagnostic pop

  MainProtocolOneWayAnonRequest(MainProtocolOneWayAnonRequest&&) noexcept = default;
  MainProtocolOneWayAnonRequest& operator=(MainProtocolOneWayAnonRequest&&) noexcept = default;
  MainProtocolOneWayAnonRequest(const MainProtocolOneWayAnonRequest& other) noexcept;
  MainProtocolOneWayAnonRequest& operator=(const MainProtocolOneWayAnonRequest& other) noexcept;

  bool operator==(const MainProtocolOneWayAnonRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOneWayAnonRequest, 8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolOneWayAnonRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOneWayAnonRequest, 8>::Equal(this, &other);
  }

  uint32_t
  a() const {
    return storage_.a;
  }

  uint32_t& a() {
    return storage_.a;
  }

  // Setter for a.
  //

  MainProtocolOneWayAnonRequest& a(uint32_t value);

  uint32_t
  b() const {
    return storage_.b;
  }

  uint32_t& b() {
    return storage_.b;
  }

  // Setter for b.
  //

  MainProtocolOneWayAnonRequest& b(uint32_t value);

  MainProtocolOneWayAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t a = {};
    uint32_t b = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOneWayAnonRequest, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolOneWayAnonRequest>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       &Storage_::a, 0},
                                                   ::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::b, 4});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonRequestTable;

class MainProtocolTwoWayAnonRequest {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonRequest(Storage_ storage) noexcept;
  MainProtocolTwoWayAnonRequest(uint32_t a, uint32_t b) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolTwoWayAnonRequest| only if all of its members are default constructible.
  MainProtocolTwoWayAnonRequest() = default;
#pragma clang diagnostic pop

  MainProtocolTwoWayAnonRequest(MainProtocolTwoWayAnonRequest&&) noexcept = default;
  MainProtocolTwoWayAnonRequest& operator=(MainProtocolTwoWayAnonRequest&&) noexcept = default;
  MainProtocolTwoWayAnonRequest(const MainProtocolTwoWayAnonRequest& other) noexcept;
  MainProtocolTwoWayAnonRequest& operator=(const MainProtocolTwoWayAnonRequest& other) noexcept;

  bool operator==(const MainProtocolTwoWayAnonRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonRequest, 8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayAnonRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonRequest, 8>::Equal(this, &other);
  }

  uint32_t
  a() const {
    return storage_.a;
  }

  uint32_t& a() {
    return storage_.a;
  }

  // Setter for a.
  //

  MainProtocolTwoWayAnonRequest& a(uint32_t value);

  uint32_t
  b() const {
    return storage_.b;
  }

  uint32_t& b() {
    return storage_.b;
  }

  // Setter for b.
  //

  MainProtocolTwoWayAnonRequest& b(uint32_t value);

  MainProtocolTwoWayAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t a = {};
    uint32_t b = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonRequest, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolTwoWayAnonRequest>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       &Storage_::a, 0},
                                                   ::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::b, 4});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonResponseTable;

class MainProtocolTwoWayAnonResponse {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonResponse(Storage_ storage) noexcept;
  MainProtocolTwoWayAnonResponse(uint32_t a, uint32_t b) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolTwoWayAnonResponse| only if all of its members are default constructible.
  MainProtocolTwoWayAnonResponse() = default;
#pragma clang diagnostic pop

  MainProtocolTwoWayAnonResponse(MainProtocolTwoWayAnonResponse&&) noexcept = default;
  MainProtocolTwoWayAnonResponse& operator=(MainProtocolTwoWayAnonResponse&&) noexcept = default;
  MainProtocolTwoWayAnonResponse(const MainProtocolTwoWayAnonResponse& other) noexcept;
  MainProtocolTwoWayAnonResponse& operator=(const MainProtocolTwoWayAnonResponse& other) noexcept;

  bool operator==(const MainProtocolTwoWayAnonResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonResponse, 8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayAnonResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonResponse, 8>::Equal(this, &other);
  }

  uint32_t
  a() const {
    return storage_.a;
  }

  uint32_t& a() {
    return storage_.a;
  }

  // Setter for a.
  //

  MainProtocolTwoWayAnonResponse& a(uint32_t value);

  uint32_t
  b() const {
    return storage_.b;
  }

  uint32_t& b() {
    return storage_.b;
  }

  // Setter for b.
  //

  MainProtocolTwoWayAnonResponse& b(uint32_t value);

  MainProtocolTwoWayAnonResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t a = {};
    uint32_t b = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonResponse, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolTwoWayAnonResponse>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       &Storage_::a, 0},
                                                   ::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::b, 4});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonWithErrorRequestTable;

class MainProtocolTwoWayAnonWithErrorRequest {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonWithErrorRequest(Storage_ storage) noexcept;
  MainProtocolTwoWayAnonWithErrorRequest(uint32_t a, uint32_t b) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolTwoWayAnonWithErrorRequest| only if all of its members are default constructible.
  MainProtocolTwoWayAnonWithErrorRequest() = default;
#pragma clang diagnostic pop

  MainProtocolTwoWayAnonWithErrorRequest(MainProtocolTwoWayAnonWithErrorRequest&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorRequest& operator=(MainProtocolTwoWayAnonWithErrorRequest&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorRequest(const MainProtocolTwoWayAnonWithErrorRequest& other) noexcept;
  MainProtocolTwoWayAnonWithErrorRequest& operator=(const MainProtocolTwoWayAnonWithErrorRequest& other) noexcept;

  bool operator==(const MainProtocolTwoWayAnonWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest, 8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayAnonWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest, 8>::Equal(this, &other);
  }

  uint32_t
  a() const {
    return storage_.a;
  }

  uint32_t& a() {
    return storage_.a;
  }

  // Setter for a.
  //

  MainProtocolTwoWayAnonWithErrorRequest& a(uint32_t value);

  uint32_t
  b() const {
    return storage_.b;
  }

  uint32_t& b() {
    return storage_.b;
  }

  // Setter for b.
  //

  MainProtocolTwoWayAnonWithErrorRequest& b(uint32_t value);

  MainProtocolTwoWayAnonWithErrorRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t a = {};
    uint32_t b = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       &Storage_::a, 0},
                                                   ::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::b, 4});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_TwoWayAnonWithError_ResponseTable;

class MainProtocolTwoWayAnonWithErrorResponse {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonWithErrorResponse(Storage_ storage) noexcept;
  MainProtocolTwoWayAnonWithErrorResponse(uint32_t a, uint32_t b) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolTwoWayAnonWithErrorResponse| only if all of its members are default constructible.
  MainProtocolTwoWayAnonWithErrorResponse() = default;
#pragma clang diagnostic pop

  MainProtocolTwoWayAnonWithErrorResponse(MainProtocolTwoWayAnonWithErrorResponse&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorResponse& operator=(MainProtocolTwoWayAnonWithErrorResponse&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorResponse(const MainProtocolTwoWayAnonWithErrorResponse& other) noexcept;
  MainProtocolTwoWayAnonWithErrorResponse& operator=(const MainProtocolTwoWayAnonWithErrorResponse& other) noexcept;

  bool operator==(const MainProtocolTwoWayAnonWithErrorResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse, 8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayAnonWithErrorResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse, 8>::Equal(this, &other);
  }

  uint32_t
  a() const {
    return storage_.a;
  }

  uint32_t& a() {
    return storage_.a;
  }

  // Setter for a.
  //

  MainProtocolTwoWayAnonWithErrorResponse& a(uint32_t value);

  uint32_t
  b() const {
    return storage_.b;
  }

  uint32_t& b() {
    return storage_.b;
  }

  // Setter for b.
  //

  MainProtocolTwoWayAnonWithErrorResponse& b(uint32_t value);

  MainProtocolTwoWayAnonWithErrorResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t a = {};
    uint32_t b = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       &Storage_::a, 0},
                                                   ::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::b, 4});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_TwoWayAnonWithError_ResultTable;

class MainProtocolTwoWayAnonWithErrorResult {
 private:
  using Storage_ =
      std::variant<
          std::monostate, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  MainProtocolTwoWayAnonWithErrorResult(MainProtocolTwoWayAnonWithErrorResult&& other) noexcept
      : MainProtocolTwoWayAnonWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
    *storage_ = std::move(*other.storage_);
  }
  MainProtocolTwoWayAnonWithErrorResult& operator=(MainProtocolTwoWayAnonWithErrorResult&& other) noexcept {
    if (this != &other) {
      *storage_ = std::move(*other.storage_);
    }
    return *this;
  }
  MainProtocolTwoWayAnonWithErrorResult(const MainProtocolTwoWayAnonWithErrorResult& other) noexcept : MainProtocolTwoWayAnonWithErrorResult(other.CloneStorage_()) {}
  MainProtocolTwoWayAnonWithErrorResult& operator=(const MainProtocolTwoWayAnonWithErrorResult& other) noexcept {
    if (this != &other) {
      storage_ = other.CloneStorage_();
    }
    return *this;
  }

  bool operator==(const MainProtocolTwoWayAnonWithErrorResult& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const MainProtocolTwoWayAnonWithErrorResult& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult::Tag Which() const {
    return MainProtocolTwoWayAnonWithErrorResult::IndexToTag(storage_->index()).value();
  }
  static MainProtocolTwoWayAnonWithErrorResult WithResponse(::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse val) {
    return MainProtocolTwoWayAnonWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<1>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  // Sets the union to hold the response member.
  //

  MainProtocolTwoWayAnonWithErrorResult& response(::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse value) {
    storage_->emplace<1>(std::move(value));
    return *this;
  }
  static MainProtocolTwoWayAnonWithErrorResult WithErr(uint32_t val) {
    return MainProtocolTwoWayAnonWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<2>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  // Sets the union to hold the err member.
  //

  MainProtocolTwoWayAnonWithErrorResult& err(uint32_t value) {
    storage_->emplace<2>(std::move(value));
    return *this;
  }

  MainProtocolTwoWayAnonWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
      : storage_(std::make_shared<Storage_>()) {}

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocolTwoWayAnonWithErrorResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult::Tag tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult::Tag::kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult::Tag::kErr:
        return 2;
      default: {
        decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
        return 0;
      }
    }
  }

  static constexpr std::optional<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult::Tag> IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult::Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult::Tag::kErr;
      default:
        return std::nullopt;
    }
  }
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonWithErrorTopResponseTable;

class MainProtocolTwoWayAnonWithErrorTopResponse {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonWithErrorTopResponse(Storage_ storage) noexcept;
  MainProtocolTwoWayAnonWithErrorTopResponse(::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult result) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolTwoWayAnonWithErrorTopResponse| only if all of its members are default constructible.
  MainProtocolTwoWayAnonWithErrorTopResponse() = default;
#pragma clang diagnostic pop

  MainProtocolTwoWayAnonWithErrorTopResponse(MainProtocolTwoWayAnonWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorTopResponse& operator=(MainProtocolTwoWayAnonWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorTopResponse(const MainProtocolTwoWayAnonWithErrorTopResponse& other) noexcept;
  MainProtocolTwoWayAnonWithErrorTopResponse& operator=(const MainProtocolTwoWayAnonWithErrorTopResponse& other) noexcept;

  bool operator==(const MainProtocolTwoWayAnonWithErrorTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse, 16>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayAnonWithErrorTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse, 16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult&
  result() const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult& result() {
    return storage_.result;
  }

  // Setter for result.
  //

  MainProtocolTwoWayAnonWithErrorTopResponse& result(::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult value);

  MainProtocolTwoWayAnonWithErrorTopResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult result;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse, 16>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::result, 0});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnAnonRequestTable;

class MainProtocolOnAnonRequest {
 private:
  struct Storage_;

 public:
  MainProtocolOnAnonRequest(Storage_ storage) noexcept;
  MainProtocolOnAnonRequest(uint32_t a, uint32_t b) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolOnAnonRequest| only if all of its members are default constructible.
  MainProtocolOnAnonRequest() = default;
#pragma clang diagnostic pop

  MainProtocolOnAnonRequest(MainProtocolOnAnonRequest&&) noexcept = default;
  MainProtocolOnAnonRequest& operator=(MainProtocolOnAnonRequest&&) noexcept = default;
  MainProtocolOnAnonRequest(const MainProtocolOnAnonRequest& other) noexcept;
  MainProtocolOnAnonRequest& operator=(const MainProtocolOnAnonRequest& other) noexcept;

  bool operator==(const MainProtocolOnAnonRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonRequest, 8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolOnAnonRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonRequest, 8>::Equal(this, &other);
  }

  uint32_t
  a() const {
    return storage_.a;
  }

  uint32_t& a() {
    return storage_.a;
  }

  // Setter for a.
  //

  MainProtocolOnAnonRequest& a(uint32_t value);

  uint32_t
  b() const {
    return storage_.b;
  }

  uint32_t& b() {
    return storage_.b;
  }

  // Setter for b.
  //

  MainProtocolOnAnonRequest& b(uint32_t value);

  MainProtocolOnAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t a = {};
    uint32_t b = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonRequest, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolOnAnonRequest>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       &Storage_::a, 0},
                                                   ::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::b, 4});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_OnAnonWithError_ResponseTable;

class MainProtocolOnAnonWithErrorResponse {
 private:
  struct Storage_;

 public:
  MainProtocolOnAnonWithErrorResponse(Storage_ storage) noexcept;
  MainProtocolOnAnonWithErrorResponse(uint32_t a, uint32_t b) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolOnAnonWithErrorResponse| only if all of its members are default constructible.
  MainProtocolOnAnonWithErrorResponse() = default;
#pragma clang diagnostic pop

  MainProtocolOnAnonWithErrorResponse(MainProtocolOnAnonWithErrorResponse&&) noexcept = default;
  MainProtocolOnAnonWithErrorResponse& operator=(MainProtocolOnAnonWithErrorResponse&&) noexcept = default;
  MainProtocolOnAnonWithErrorResponse(const MainProtocolOnAnonWithErrorResponse& other) noexcept;
  MainProtocolOnAnonWithErrorResponse& operator=(const MainProtocolOnAnonWithErrorResponse& other) noexcept;

  bool operator==(const MainProtocolOnAnonWithErrorResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse, 8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolOnAnonWithErrorResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse, 8>::Equal(this, &other);
  }

  uint32_t
  a() const {
    return storage_.a;
  }

  uint32_t& a() {
    return storage_.a;
  }

  // Setter for a.
  //

  MainProtocolOnAnonWithErrorResponse& a(uint32_t value);

  uint32_t
  b() const {
    return storage_.b;
  }

  uint32_t& b() {
    return storage_.b;
  }

  // Setter for b.
  //

  MainProtocolOnAnonWithErrorResponse& b(uint32_t value);

  MainProtocolOnAnonWithErrorResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t a = {};
    uint32_t b = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       &Storage_::a, 0},
                                                   ::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::b, 4});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_OnAnonWithError_ResultTable;

class MainProtocolOnAnonWithErrorResult {
 private:
  using Storage_ =
      std::variant<
          std::monostate, ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  MainProtocolOnAnonWithErrorResult(MainProtocolOnAnonWithErrorResult&& other) noexcept
      : MainProtocolOnAnonWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
    *storage_ = std::move(*other.storage_);
  }
  MainProtocolOnAnonWithErrorResult& operator=(MainProtocolOnAnonWithErrorResult&& other) noexcept {
    if (this != &other) {
      *storage_ = std::move(*other.storage_);
    }
    return *this;
  }
  MainProtocolOnAnonWithErrorResult(const MainProtocolOnAnonWithErrorResult& other) noexcept : MainProtocolOnAnonWithErrorResult(other.CloneStorage_()) {}
  MainProtocolOnAnonWithErrorResult& operator=(const MainProtocolOnAnonWithErrorResult& other) noexcept {
    if (this != &other) {
      storage_ = other.CloneStorage_();
    }
    return *this;
  }

  bool operator==(const MainProtocolOnAnonWithErrorResult& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const MainProtocolOnAnonWithErrorResult& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult::Tag Which() const {
    return MainProtocolOnAnonWithErrorResult::IndexToTag(storage_->index()).value();
  }
  static MainProtocolOnAnonWithErrorResult WithResponse(::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse val) {
    return MainProtocolOnAnonWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<1>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  // Sets the union to hold the response member.
  //

  MainProtocolOnAnonWithErrorResult& response(::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse value) {
    storage_->emplace<1>(std::move(value));
    return *this;
  }
  static MainProtocolOnAnonWithErrorResult WithErr(uint32_t val) {
    return MainProtocolOnAnonWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<2>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  // Sets the union to hold the err member.
  //

  MainProtocolOnAnonWithErrorResult& err(uint32_t value) {
    storage_->emplace<2>(std::move(value));
    return *this;
  }

  MainProtocolOnAnonWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
      : storage_(std::make_shared<Storage_>()) {}

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocolOnAnonWithErrorResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult::Tag tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult::Tag::kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult::Tag::kErr:
        return 2;
      default: {
        decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
        return 0;
      }
    }
  }

  static constexpr std::optional<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult::Tag> IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult::Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult::Tag::kErr;
      default:
        return std::nullopt;
    }
  }
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnAnonWithErrorRequestTable;

class MainProtocolOnAnonWithErrorRequest {
 private:
  struct Storage_;

 public:
  MainProtocolOnAnonWithErrorRequest(Storage_ storage) noexcept;
  MainProtocolOnAnonWithErrorRequest(::test_protocolpayloads::MainProtocolOnAnonWithErrorResult result) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolOnAnonWithErrorRequest| only if all of its members are default constructible.
  MainProtocolOnAnonWithErrorRequest() = default;
#pragma clang diagnostic pop

  MainProtocolOnAnonWithErrorRequest(MainProtocolOnAnonWithErrorRequest&&) noexcept = default;
  MainProtocolOnAnonWithErrorRequest& operator=(MainProtocolOnAnonWithErrorRequest&&) noexcept = default;
  MainProtocolOnAnonWithErrorRequest(const MainProtocolOnAnonWithErrorRequest& other) noexcept;
  MainProtocolOnAnonWithErrorRequest& operator=(const MainProtocolOnAnonWithErrorRequest& other) noexcept;

  bool operator==(const MainProtocolOnAnonWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest, 16>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolOnAnonWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest, 16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult&
  result() const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult& result() {
    return storage_.result;
  }

  // Setter for result.
  //

  MainProtocolOnAnonWithErrorRequest& result(::test_protocolpayloads::MainProtocolOnAnonWithErrorResult value);

  MainProtocolOnAnonWithErrorRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult result;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest, 16>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::result, 0});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_TwoWayImportWithError_ResultTable;

class MainProtocolTwoWayImportWithErrorResult {
 private:
  using Storage_ =
      std::variant<
          std::monostate, ::test_protocolpayloads_imported::ImportStructPayload, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  MainProtocolTwoWayImportWithErrorResult(MainProtocolTwoWayImportWithErrorResult&& other) noexcept
      : MainProtocolTwoWayImportWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
    *storage_ = std::move(*other.storage_);
  }
  MainProtocolTwoWayImportWithErrorResult& operator=(MainProtocolTwoWayImportWithErrorResult&& other) noexcept {
    if (this != &other) {
      *storage_ = std::move(*other.storage_);
    }
    return *this;
  }
  MainProtocolTwoWayImportWithErrorResult(const MainProtocolTwoWayImportWithErrorResult& other) noexcept : MainProtocolTwoWayImportWithErrorResult(other.CloneStorage_()) {}
  MainProtocolTwoWayImportWithErrorResult& operator=(const MainProtocolTwoWayImportWithErrorResult& other) noexcept {
    if (this != &other) {
      storage_ = other.CloneStorage_();
    }
    return *this;
  }

  bool operator==(const MainProtocolTwoWayImportWithErrorResult& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const MainProtocolTwoWayImportWithErrorResult& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult::Tag Which() const {
    return MainProtocolTwoWayImportWithErrorResult::IndexToTag(storage_->index()).value();
  }
  static MainProtocolTwoWayImportWithErrorResult WithResponse(::test_protocolpayloads_imported::ImportStructPayload val) {
    return MainProtocolTwoWayImportWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<1>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  // Sets the union to hold the response member.
  //

  MainProtocolTwoWayImportWithErrorResult& response(::test_protocolpayloads_imported::ImportStructPayload value) {
    storage_->emplace<1>(std::move(value));
    return *this;
  }
  static MainProtocolTwoWayImportWithErrorResult WithErr(uint32_t val) {
    return MainProtocolTwoWayImportWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<2>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  // Sets the union to hold the err member.
  //

  MainProtocolTwoWayImportWithErrorResult& err(uint32_t value) {
    storage_->emplace<2>(std::move(value));
    return *this;
  }

  MainProtocolTwoWayImportWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
      : storage_(std::make_shared<Storage_>()) {}

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocolTwoWayImportWithErrorResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult::Tag tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult::Tag::kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult::Tag::kErr:
        return 2;
      default: {
        decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
        return 0;
      }
    }
  }

  static constexpr std::optional<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult::Tag> IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult::Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult::Tag::kErr;
      default:
        return std::nullopt;
    }
  }
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayImportWithErrorTopResponseTable;

class MainProtocolTwoWayImportWithErrorTopResponse {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayImportWithErrorTopResponse(Storage_ storage) noexcept;
  MainProtocolTwoWayImportWithErrorTopResponse(::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult result) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolTwoWayImportWithErrorTopResponse| only if all of its members are default constructible.
  MainProtocolTwoWayImportWithErrorTopResponse() = default;
#pragma clang diagnostic pop

  MainProtocolTwoWayImportWithErrorTopResponse(MainProtocolTwoWayImportWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayImportWithErrorTopResponse& operator=(MainProtocolTwoWayImportWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayImportWithErrorTopResponse(const MainProtocolTwoWayImportWithErrorTopResponse& other) noexcept;
  MainProtocolTwoWayImportWithErrorTopResponse& operator=(const MainProtocolTwoWayImportWithErrorTopResponse& other) noexcept;

  bool operator==(const MainProtocolTwoWayImportWithErrorTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse, 16>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayImportWithErrorTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse, 16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult&
  result() const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult& result() {
    return storage_.result;
  }

  // Setter for result.
  //

  MainProtocolTwoWayImportWithErrorTopResponse& result(::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult value);

  MainProtocolTwoWayImportWithErrorTopResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult result;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse, 16>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::result, 0});
  static constexpr auto kPadding = std::make_tuple();
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_OnImportWithError_ResultTable;

class MainProtocolOnImportWithErrorResult {
 private:
  using Storage_ =
      std::variant<
          std::monostate, ::test_protocolpayloads_imported::ImportStructPayload, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  MainProtocolOnImportWithErrorResult(MainProtocolOnImportWithErrorResult&& other) noexcept
      : MainProtocolOnImportWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
    *storage_ = std::move(*other.storage_);
  }
  MainProtocolOnImportWithErrorResult& operator=(MainProtocolOnImportWithErrorResult&& other) noexcept {
    if (this != &other) {
      *storage_ = std::move(*other.storage_);
    }
    return *this;
  }
  MainProtocolOnImportWithErrorResult(const MainProtocolOnImportWithErrorResult& other) noexcept : MainProtocolOnImportWithErrorResult(other.CloneStorage_()) {}
  MainProtocolOnImportWithErrorResult& operator=(const MainProtocolOnImportWithErrorResult& other) noexcept {
    if (this != &other) {
      storage_ = other.CloneStorage_();
    }
    return *this;
  }

  bool operator==(const MainProtocolOnImportWithErrorResult& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const MainProtocolOnImportWithErrorResult& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocolOnImportWithErrorResult::Tag Which() const {
    return MainProtocolOnImportWithErrorResult::IndexToTag(storage_->index()).value();
  }
  static MainProtocolOnImportWithErrorResult WithResponse(::test_protocolpayloads_imported::ImportStructPayload val) {
    return MainProtocolOnImportWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<1>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  // Sets the union to hold the response member.
  //

  MainProtocolOnImportWithErrorResult& response(::test_protocolpayloads_imported::ImportStructPayload value) {
    storage_->emplace<1>(std::move(value));
    return *this;
  }
  static MainProtocolOnImportWithErrorResult WithErr(uint32_t val) {
    return MainProtocolOnImportWithErrorResult(std::make_shared<Storage_>(
        std::in_place_index_t<2>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

  // Sets the union to hold the err member.
  //

  MainProtocolOnImportWithErrorResult& err(uint32_t value) {
    storage_->emplace<2>(std::move(value));
    return *this;
  }

  MainProtocolOnImportWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
      : storage_(std::make_shared<Storage_>()) {}

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorResult>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocolOnImportWithErrorResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocolpayloads::MainProtocolOnImportWithErrorResult::Tag tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocolOnImportWithErrorResult::Tag::kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocolOnImportWithErrorResult::Tag::kErr:
        return 2;
      default: {
        decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
        return 0;
      }
    }
  }

  static constexpr std::optional<::test_protocolpayloads::MainProtocolOnImportWithErrorResult::Tag> IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::MainProtocolOnImportWithErrorResult::Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::MainProtocolOnImportWithErrorResult::Tag::kErr;
      default:
        return std::nullopt;
    }
  }
};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnImportWithErrorRequestTable;

class MainProtocolOnImportWithErrorRequest {
 private:
  struct Storage_;

 public:
  MainProtocolOnImportWithErrorRequest(Storage_ storage) noexcept;
  MainProtocolOnImportWithErrorRequest(::test_protocolpayloads::MainProtocolOnImportWithErrorResult result) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |MainProtocolOnImportWithErrorRequest| only if all of its members are default constructible.
  MainProtocolOnImportWithErrorRequest() = default;
#pragma clang diagnostic pop

  MainProtocolOnImportWithErrorRequest(MainProtocolOnImportWithErrorRequest&&) noexcept = default;
  MainProtocolOnImportWithErrorRequest& operator=(MainProtocolOnImportWithErrorRequest&&) noexcept = default;
  MainProtocolOnImportWithErrorRequest(const MainProtocolOnImportWithErrorRequest& other) noexcept;
  MainProtocolOnImportWithErrorRequest& operator=(const MainProtocolOnImportWithErrorRequest& other) noexcept;

  bool operator==(const MainProtocolOnImportWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest, 16>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolOnImportWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest, 16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocolOnImportWithErrorResult&
  result() const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocolOnImportWithErrorResult& result() {
    return storage_.result;
  }

  // Setter for result.
  //

  MainProtocolOnImportWithErrorRequest& result(::test_protocolpayloads::MainProtocolOnImportWithErrorResult value);

  MainProtocolOnImportWithErrorRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocolOnImportWithErrorResult result;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest, 16>;
  friend struct ::fidl::internal::MemberVisitor<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::test_protocolpayloads::MainProtocolOnImportWithErrorResult, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::result, 0});
  static constexpr auto kPadding = std::make_tuple();
};

inline LocalStructPayload::LocalStructPayload(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline LocalStructPayload::LocalStructPayload(uint32_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}
inline LocalStructPayload::LocalStructPayload(const ::test_protocolpayloads::LocalStructPayload& other) noexcept : ::test_protocolpayloads::LocalStructPayload(other.CloneStorage_()) {}
inline LocalStructPayload& ::test_protocolpayloads::LocalStructPayload::operator=(const ::test_protocolpayloads::LocalStructPayload& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline LocalStructPayload::LocalStructPayload(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : LocalStructPayload(Storage_{
                                                                                                                .a = {},
                                                                                                                .b = {},
                                                                                                            }) {}
inline LocalStructPayload& LocalStructPayload::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
inline LocalStructPayload& LocalStructPayload::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

inline MainProtocolTwoWayLocalWithErrorTopResponse::MainProtocolTwoWayLocalWithErrorTopResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolTwoWayLocalWithErrorTopResponse::MainProtocolTwoWayLocalWithErrorTopResponse(::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult result) noexcept
    : storage_({.result = std::move(result)}) {}
inline MainProtocolTwoWayLocalWithErrorTopResponse::MainProtocolTwoWayLocalWithErrorTopResponse(const ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse& other) noexcept : ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse(other.CloneStorage_()) {}
inline MainProtocolTwoWayLocalWithErrorTopResponse& ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse::operator=(const ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolTwoWayLocalWithErrorTopResponse::MainProtocolTwoWayLocalWithErrorTopResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolTwoWayLocalWithErrorTopResponse(Storage_{
                                                                                                                                                                  .result = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                              }) {}
inline MainProtocolTwoWayLocalWithErrorTopResponse& MainProtocolTwoWayLocalWithErrorTopResponse::result(::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult value) {
  storage_.result = std::move(value);
  return *this;
}

inline MainProtocolOnLocalWithErrorRequest::MainProtocolOnLocalWithErrorRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolOnLocalWithErrorRequest::MainProtocolOnLocalWithErrorRequest(::test_protocolpayloads::MainProtocolOnLocalWithErrorResult result) noexcept
    : storage_({.result = std::move(result)}) {}
inline MainProtocolOnLocalWithErrorRequest::MainProtocolOnLocalWithErrorRequest(const ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest& other) noexcept : ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest(other.CloneStorage_()) {}
inline MainProtocolOnLocalWithErrorRequest& ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest::operator=(const ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolOnLocalWithErrorRequest::MainProtocolOnLocalWithErrorRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolOnLocalWithErrorRequest(Storage_{
                                                                                                                                                  .result = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                              }) {}
inline MainProtocolOnLocalWithErrorRequest& MainProtocolOnLocalWithErrorRequest::result(::test_protocolpayloads::MainProtocolOnLocalWithErrorResult value) {
  storage_.result = std::move(value);
  return *this;
}

inline MainProtocolOneWayAnonRequest::MainProtocolOneWayAnonRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolOneWayAnonRequest::MainProtocolOneWayAnonRequest(uint32_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}
inline MainProtocolOneWayAnonRequest::MainProtocolOneWayAnonRequest(const ::test_protocolpayloads::MainProtocolOneWayAnonRequest& other) noexcept : ::test_protocolpayloads::MainProtocolOneWayAnonRequest(other.CloneStorage_()) {}
inline MainProtocolOneWayAnonRequest& ::test_protocolpayloads::MainProtocolOneWayAnonRequest::operator=(const ::test_protocolpayloads::MainProtocolOneWayAnonRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolOneWayAnonRequest::MainProtocolOneWayAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolOneWayAnonRequest(Storage_{
                                                                                                                                      .a = {},
                                                                                                                                      .b = {},
                                                                                                                                  }) {}
inline MainProtocolOneWayAnonRequest& MainProtocolOneWayAnonRequest::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
inline MainProtocolOneWayAnonRequest& MainProtocolOneWayAnonRequest::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

inline MainProtocolTwoWayAnonRequest::MainProtocolTwoWayAnonRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolTwoWayAnonRequest::MainProtocolTwoWayAnonRequest(uint32_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}
inline MainProtocolTwoWayAnonRequest::MainProtocolTwoWayAnonRequest(const ::test_protocolpayloads::MainProtocolTwoWayAnonRequest& other) noexcept : ::test_protocolpayloads::MainProtocolTwoWayAnonRequest(other.CloneStorage_()) {}
inline MainProtocolTwoWayAnonRequest& ::test_protocolpayloads::MainProtocolTwoWayAnonRequest::operator=(const ::test_protocolpayloads::MainProtocolTwoWayAnonRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolTwoWayAnonRequest::MainProtocolTwoWayAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolTwoWayAnonRequest(Storage_{
                                                                                                                                      .a = {},
                                                                                                                                      .b = {},
                                                                                                                                  }) {}
inline MainProtocolTwoWayAnonRequest& MainProtocolTwoWayAnonRequest::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
inline MainProtocolTwoWayAnonRequest& MainProtocolTwoWayAnonRequest::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

inline MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse(uint32_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}
inline MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse(const ::test_protocolpayloads::MainProtocolTwoWayAnonResponse& other) noexcept : ::test_protocolpayloads::MainProtocolTwoWayAnonResponse(other.CloneStorage_()) {}
inline MainProtocolTwoWayAnonResponse& ::test_protocolpayloads::MainProtocolTwoWayAnonResponse::operator=(const ::test_protocolpayloads::MainProtocolTwoWayAnonResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolTwoWayAnonResponse(Storage_{
                                                                                                                                        .a = {},
                                                                                                                                        .b = {},
                                                                                                                                    }) {}
inline MainProtocolTwoWayAnonResponse& MainProtocolTwoWayAnonResponse::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
inline MainProtocolTwoWayAnonResponse& MainProtocolTwoWayAnonResponse::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

inline MainProtocolTwoWayAnonWithErrorRequest::MainProtocolTwoWayAnonWithErrorRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolTwoWayAnonWithErrorRequest::MainProtocolTwoWayAnonWithErrorRequest(uint32_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}
inline MainProtocolTwoWayAnonWithErrorRequest::MainProtocolTwoWayAnonWithErrorRequest(const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest& other) noexcept : ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest(other.CloneStorage_()) {}
inline MainProtocolTwoWayAnonWithErrorRequest& ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest::operator=(const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolTwoWayAnonWithErrorRequest::MainProtocolTwoWayAnonWithErrorRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolTwoWayAnonWithErrorRequest(Storage_{
                                                                                                                                                        .a = {},
                                                                                                                                                        .b = {},
                                                                                                                                                    }) {}
inline MainProtocolTwoWayAnonWithErrorRequest& MainProtocolTwoWayAnonWithErrorRequest::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
inline MainProtocolTwoWayAnonWithErrorRequest& MainProtocolTwoWayAnonWithErrorRequest::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

inline MainProtocolTwoWayAnonWithErrorResponse::MainProtocolTwoWayAnonWithErrorResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolTwoWayAnonWithErrorResponse::MainProtocolTwoWayAnonWithErrorResponse(uint32_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}
inline MainProtocolTwoWayAnonWithErrorResponse::MainProtocolTwoWayAnonWithErrorResponse(const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse& other) noexcept : ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse(other.CloneStorage_()) {}
inline MainProtocolTwoWayAnonWithErrorResponse& ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse::operator=(const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolTwoWayAnonWithErrorResponse::MainProtocolTwoWayAnonWithErrorResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolTwoWayAnonWithErrorResponse(Storage_{
                                                                                                                                                          .a = {},
                                                                                                                                                          .b = {},
                                                                                                                                                      }) {}
inline MainProtocolTwoWayAnonWithErrorResponse& MainProtocolTwoWayAnonWithErrorResponse::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
inline MainProtocolTwoWayAnonWithErrorResponse& MainProtocolTwoWayAnonWithErrorResponse::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

inline MainProtocolTwoWayAnonWithErrorTopResponse::MainProtocolTwoWayAnonWithErrorTopResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolTwoWayAnonWithErrorTopResponse::MainProtocolTwoWayAnonWithErrorTopResponse(::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult result) noexcept
    : storage_({.result = std::move(result)}) {}
inline MainProtocolTwoWayAnonWithErrorTopResponse::MainProtocolTwoWayAnonWithErrorTopResponse(const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse& other) noexcept : ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse(other.CloneStorage_()) {}
inline MainProtocolTwoWayAnonWithErrorTopResponse& ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse::operator=(const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolTwoWayAnonWithErrorTopResponse::MainProtocolTwoWayAnonWithErrorTopResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolTwoWayAnonWithErrorTopResponse(Storage_{
                                                                                                                                                                .result = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                            }) {}
inline MainProtocolTwoWayAnonWithErrorTopResponse& MainProtocolTwoWayAnonWithErrorTopResponse::result(::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult value) {
  storage_.result = std::move(value);
  return *this;
}

inline MainProtocolOnAnonRequest::MainProtocolOnAnonRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolOnAnonRequest::MainProtocolOnAnonRequest(uint32_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}
inline MainProtocolOnAnonRequest::MainProtocolOnAnonRequest(const ::test_protocolpayloads::MainProtocolOnAnonRequest& other) noexcept : ::test_protocolpayloads::MainProtocolOnAnonRequest(other.CloneStorage_()) {}
inline MainProtocolOnAnonRequest& ::test_protocolpayloads::MainProtocolOnAnonRequest::operator=(const ::test_protocolpayloads::MainProtocolOnAnonRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolOnAnonRequest::MainProtocolOnAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolOnAnonRequest(Storage_{
                                                                                                                              .a = {},
                                                                                                                              .b = {},
                                                                                                                          }) {}
inline MainProtocolOnAnonRequest& MainProtocolOnAnonRequest::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
inline MainProtocolOnAnonRequest& MainProtocolOnAnonRequest::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

inline MainProtocolOnAnonWithErrorResponse::MainProtocolOnAnonWithErrorResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolOnAnonWithErrorResponse::MainProtocolOnAnonWithErrorResponse(uint32_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}
inline MainProtocolOnAnonWithErrorResponse::MainProtocolOnAnonWithErrorResponse(const ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse& other) noexcept : ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse(other.CloneStorage_()) {}
inline MainProtocolOnAnonWithErrorResponse& ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse::operator=(const ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolOnAnonWithErrorResponse::MainProtocolOnAnonWithErrorResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolOnAnonWithErrorResponse(Storage_{
                                                                                                                                                  .a = {},
                                                                                                                                                  .b = {},
                                                                                                                                              }) {}
inline MainProtocolOnAnonWithErrorResponse& MainProtocolOnAnonWithErrorResponse::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
inline MainProtocolOnAnonWithErrorResponse& MainProtocolOnAnonWithErrorResponse::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

inline MainProtocolOnAnonWithErrorRequest::MainProtocolOnAnonWithErrorRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolOnAnonWithErrorRequest::MainProtocolOnAnonWithErrorRequest(::test_protocolpayloads::MainProtocolOnAnonWithErrorResult result) noexcept
    : storage_({.result = std::move(result)}) {}
inline MainProtocolOnAnonWithErrorRequest::MainProtocolOnAnonWithErrorRequest(const ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest& other) noexcept : ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest(other.CloneStorage_()) {}
inline MainProtocolOnAnonWithErrorRequest& ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest::operator=(const ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolOnAnonWithErrorRequest::MainProtocolOnAnonWithErrorRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolOnAnonWithErrorRequest(Storage_{
                                                                                                                                                .result = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                            }) {}
inline MainProtocolOnAnonWithErrorRequest& MainProtocolOnAnonWithErrorRequest::result(::test_protocolpayloads::MainProtocolOnAnonWithErrorResult value) {
  storage_.result = std::move(value);
  return *this;
}

inline MainProtocolTwoWayImportWithErrorTopResponse::MainProtocolTwoWayImportWithErrorTopResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolTwoWayImportWithErrorTopResponse::MainProtocolTwoWayImportWithErrorTopResponse(::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult result) noexcept
    : storage_({.result = std::move(result)}) {}
inline MainProtocolTwoWayImportWithErrorTopResponse::MainProtocolTwoWayImportWithErrorTopResponse(const ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse& other) noexcept : ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse(other.CloneStorage_()) {}
inline MainProtocolTwoWayImportWithErrorTopResponse& ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse::operator=(const ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolTwoWayImportWithErrorTopResponse::MainProtocolTwoWayImportWithErrorTopResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolTwoWayImportWithErrorTopResponse(Storage_{
                                                                                                                                                                    .result = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                                }) {}
inline MainProtocolTwoWayImportWithErrorTopResponse& MainProtocolTwoWayImportWithErrorTopResponse::result(::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult value) {
  storage_.result = std::move(value);
  return *this;
}

inline MainProtocolOnImportWithErrorRequest::MainProtocolOnImportWithErrorRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline MainProtocolOnImportWithErrorRequest::MainProtocolOnImportWithErrorRequest(::test_protocolpayloads::MainProtocolOnImportWithErrorResult result) noexcept
    : storage_({.result = std::move(result)}) {}
inline MainProtocolOnImportWithErrorRequest::MainProtocolOnImportWithErrorRequest(const ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest& other) noexcept : ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest(other.CloneStorage_()) {}
inline MainProtocolOnImportWithErrorRequest& ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest::operator=(const ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline MainProtocolOnImportWithErrorRequest::MainProtocolOnImportWithErrorRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolOnImportWithErrorRequest(Storage_{
                                                                                                                                                    .result = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                }) {}
inline MainProtocolOnImportWithErrorRequest& MainProtocolOnImportWithErrorRequest::result(::test_protocolpayloads::MainProtocolOnImportWithErrorResult value) {
  storage_.result = std::move(value);
  return *this;
}

}  // namespace test_protocolpayloads
namespace fidl {

extern "C" const fidl_type_t test_protocolpayloads_LocalStructPayloadTable;

template <>
struct IsFidlType<::test_protocolpayloads::LocalStructPayload> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::LocalStructPayload> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_protocolpayloads::LocalStructPayload> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::LocalStructPayload, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::LocalStructPayload, 8> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayLocalWithErrorTopResponseTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse, 16> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnLocalWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest, 16> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOneWayAnonRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOneWayAnonRequest> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolOneWayAnonRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolOneWayAnonRequest> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolOneWayAnonRequest, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOneWayAnonRequest, 8> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayAnonRequest> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayAnonRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolTwoWayAnonRequest> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonRequest, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonRequest, 8> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonResponseTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayAnonResponse> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayAnonResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolTwoWayAnonResponse> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonResponse, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonResponse, 8> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest, 8> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_TwoWayAnonWithError_ResponseTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse, 8> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayAnonWithErrorTopResponseTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse, 16> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnAnonRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnAnonRequest> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolOnAnonRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolOnAnonRequest> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolOnAnonRequest, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonRequest, 8> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_OnAnonWithError_ResponseTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse, 8> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnAnonWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest, 16> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolTwoWayImportWithErrorTopResponseTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse, 16> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocolOnImportWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsStruct<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest, 16> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_TwoWayLocalWithError_ResultTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_OnLocalWithError_ResultTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolOnLocalWithErrorResult> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_TwoWayAnonWithError_ResultTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_OnAnonWithError_ResultTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolOnAnonWithErrorResult> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_TwoWayImportWithError_ResultTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> {};

extern "C" const fidl_type_t test_protocolpayloads_MainProtocol_OnImportWithError_ResultTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnImportWithErrorResult> : public std::true_type {};

template <>
struct TypeTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorResult> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_protocolpayloads::MainProtocolOnImportWithErrorResult> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorResult, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_protocolpayloads::MainProtocolOnImportWithErrorResult> {};

}  // namespace fidl
