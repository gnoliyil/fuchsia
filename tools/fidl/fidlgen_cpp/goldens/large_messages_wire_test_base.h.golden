// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <fidl/test.largemessages/cpp/wire.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_largemessages::Overflowing> : public ::fidl::WireServer<::test_largemessages::Overflowing> {
 public:
  virtual ~WireTestBase<::test_largemessages::Overflowing>() = default;
  virtual void NotImplemented_(const std::string& name, ::fidl::CompleterBase& completer) = 0;
  virtual void DecodeBoundedKnownToBeSmall(
      ::test_largemessages::wire::BoundedKnownToBeSmall* request,
      DecodeBoundedKnownToBeSmallCompleter::Sync& completer) override {
    NotImplemented_("DecodeBoundedKnownToBeSmall", completer);
  }
  virtual void DecodeBoundedMaybeLarge(
      ::test_largemessages::wire::BoundedMaybeLarge* request,
      DecodeBoundedMaybeLargeCompleter::Sync& completer) override {
    NotImplemented_("DecodeBoundedMaybeLarge", completer);
  }
  virtual void DecodeSemiBoundedBelievedToBeSmall(
      ::test_largemessages::wire::SemiBoundedBelievedToBeSmall* request,
      DecodeSemiBoundedBelievedToBeSmallCompleter::Sync& completer) override {
    NotImplemented_("DecodeSemiBoundedBelievedToBeSmall", completer);
  }
  virtual void DecodeSemiBoundedMaybeLarge(
      ::test_largemessages::wire::SemiBoundedMaybeLarge* request,
      DecodeSemiBoundedMaybeLargeCompleter::Sync& completer) override {
    NotImplemented_("DecodeSemiBoundedMaybeLarge", completer);
  }
  virtual void DecodeUnboundedMaybeLargeValue(
      ::test_largemessages::wire::UnboundedMaybeLargeValue* request,
      DecodeUnboundedMaybeLargeValueCompleter::Sync& completer) override {
    NotImplemented_("DecodeUnboundedMaybeLargeValue", completer);
  }
  virtual void DecodeUnboundedMaybeLargeResource(
      ::test_largemessages::wire::UnboundedMaybeLargeResource* request,
      DecodeUnboundedMaybeLargeResourceCompleter::Sync& completer) override {
    NotImplemented_("DecodeUnboundedMaybeLargeResource", completer);
  }
  virtual void EncodeBoundedKnownToBeSmall(
      ::test_largemessages::wire::BoundedKnownToBeSmall* request,
      EncodeBoundedKnownToBeSmallCompleter::Sync& completer) override {
    NotImplemented_("EncodeBoundedKnownToBeSmall", completer);
  }
  virtual void EncodeBoundedMaybeLarge(
      ::test_largemessages::wire::BoundedMaybeLarge* request,
      EncodeBoundedMaybeLargeCompleter::Sync& completer) override {
    NotImplemented_("EncodeBoundedMaybeLarge", completer);
  }
  virtual void EncodeSemiBoundedBelievedToBeSmall(
      ::test_largemessages::wire::SemiBoundedBelievedToBeSmall* request,
      EncodeSemiBoundedBelievedToBeSmallCompleter::Sync& completer) override {
    NotImplemented_("EncodeSemiBoundedBelievedToBeSmall", completer);
  }
  virtual void EncodeSemiBoundedMaybeLarge(
      ::test_largemessages::wire::SemiBoundedMaybeLarge* request,
      EncodeSemiBoundedMaybeLargeCompleter::Sync& completer) override {
    NotImplemented_("EncodeSemiBoundedMaybeLarge", completer);
  }
  virtual void EncodeUnboundedMaybeLargeValue(
      ::test_largemessages::wire::UnboundedMaybeLargeValue* request,
      EncodeUnboundedMaybeLargeValueCompleter::Sync& completer) override {
    NotImplemented_("EncodeUnboundedMaybeLargeValue", completer);
  }
  virtual void EncodeUnboundedMaybeLargeResource(
      ::test_largemessages::wire::UnboundedMaybeLargeResource* request,
      EncodeUnboundedMaybeLargeResourceCompleter::Sync& completer) override {
    NotImplemented_("EncodeUnboundedMaybeLargeResource", completer);
  }
  virtual void handle_unknown_method(::fidl::UnknownMethodMetadata<::test_largemessages::Overflowing> metadata, UnknownMethodCompleter::Sync& completer) override {
    NotImplemented_("handle_unknown_method", completer);
  }
};

template <>
class ::fidl::testing::WireSyncEventHandlerTestBase<::test_largemessages::Overflowing> : public ::fidl::WireSyncEventHandler<::test_largemessages::Overflowing> {
 public:
  virtual ~WireSyncEventHandlerTestBase<::test_largemessages::Overflowing>() = default;
  virtual void NotImplemented_(const std::string& name) = 0;
  virtual void handle_unknown_event(::fidl::UnknownEventMetadata<::test_largemessages::Overflowing> metadata) override {
    NotImplemented_("handle_unknown_event");
  }
};
#pragma clang diagnostic pop

}  // namespace testing
}  // namespace fidl
