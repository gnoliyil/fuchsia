// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.byteandbytes/cpp/common_types.h>
#include <fidl/test.byteandbytes/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_byteandbytes {

class ByteAndBytes;

extern "C" const fidl_type_t test_byteandbytes_ByteAndBytesTable;

class ByteAndBytes {
 private:
  struct Storage_;

 public:
  ByteAndBytes(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ByteAndBytes(uint8_t single_byte) noexcept
      : storage_({.single_byte = std::move(single_byte)}) {}

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |ByteAndBytes| only if all of its members are default constructible.
  ByteAndBytes() = default;
#pragma clang diagnostic pop

  ByteAndBytes(ByteAndBytes&&) noexcept = default;
  ByteAndBytes& operator=(ByteAndBytes&&) noexcept = default;
  ByteAndBytes(const ByteAndBytes& other) noexcept : ByteAndBytes(other.CloneStorage_()) {}
  ByteAndBytes& operator=(const ByteAndBytes& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const ByteAndBytes& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_byteandbytes::ByteAndBytes, 1>::Equal(this, &other);
  }
  bool operator!=(const ByteAndBytes& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_byteandbytes::ByteAndBytes, 1>::Equal(this, &other);
  }

  uint8_t
  single_byte() const {
    return storage_.single_byte;
  }

  uint8_t& single_byte() {
    return storage_.single_byte;
  }

  // Setter for single_byte.
  //

  ByteAndBytes& single_byte(uint8_t value) {
    storage_.single_byte = std::move(value);
    return *this;
  }

  ByteAndBytes(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ByteAndBytes(Storage_{
                                                                                 .single_byte = {},
                                                                             }) {}

 private:
  struct Storage_ final {
    uint8_t single_byte = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_byteandbytes::ByteAndBytes, 1>;
  friend struct ::fidl::internal::MemberVisitor<::test_byteandbytes::ByteAndBytes>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint8_t, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::single_byte, 0});
  static constexpr auto kPadding = std::make_tuple();
};

}  // namespace test_byteandbytes
namespace fidl {

extern "C" const fidl_type_t test_byteandbytes_ByteAndBytesTable;

template <>
struct IsFidlType<::test_byteandbytes::ByteAndBytes> : public std::true_type {};

template <>
struct TypeTraits<::test_byteandbytes::ByteAndBytes> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 1;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_byteandbytes::ByteAndBytes> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_byteandbytes::ByteAndBytes, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_byteandbytes::ByteAndBytes, 1> {};

}  // namespace fidl
