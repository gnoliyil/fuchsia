// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.transitivedependenciescompose/cpp/markers.h>
#include <fidl/test.transitivedependenciescompose/cpp/wire_types.h>
#include <lib/fidl/cpp/wire/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/cpp/wire/client.h>
#include <lib/fidl/cpp/wire/connect_service.h>
#include <lib/fidl/cpp/wire/server.h>
#include <lib/fidl/cpp/wire/service_handler.h>
#include <lib/fidl/cpp/wire/sync_call.h>
#include <lib/fidl/cpp/wire/unknown_interaction_handler.h>

#endif  // __Fuchsia__

#include <fidl/test.bottom/cpp/wire_messaging.h>
#include <fidl/test.middle/cpp/wire_messaging.h>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_transitivedependenciescompose {

class Top;

__LOCAL extern "C" const fidl_type_t test_bottom_BottomGetFooResponseTable;
}  // namespace test_transitivedependenciescompose

template <>
struct ::fidl::internal::WireOrdinal<::test_transitivedependenciescompose::Top::GetFoo> final {
  static constexpr uint64_t value = 2618685789258237543lu;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireMethodTypes<::test_transitivedependenciescompose::Top::GetFoo> {
  static constexpr bool HasRequestPayload = false;
  using Response = ::test_bottom::wire::BottomGetFooResponse;

  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_transitivedependenciescompose::Top::GetFoo>>;
  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_transitivedependenciescompose::Top::GetFoo,
      ::fidl::internal::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>, ::fidl::internal::ChannelTransport>>;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_transitivedependenciescompose::Top::GetFoo,
      ::fidl::internal::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>, ::fidl::internal::ChannelTransport>>;
};

#endif  // __Fuchsia__

namespace test_transitivedependenciescompose {

}  // namespace test_transitivedependenciescompose

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_transitivedependenciescompose::Top> {
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_transitivedependenciescompose::Top> final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(::fidl::WireServer<::test_transitivedependenciescompose::Top>* impl, ::fidl::IncomingHeaderAndMessage& msg,
                                            internal::MessageStorageViewBase* storage_view,
                                            ::fidl::Transaction* txn);
  static void Dispatch(::fidl::WireServer<::test_transitivedependenciescompose::Top>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static constexpr const ::fidl::internal::UnknownMethodHandlerEntry& unknown_method_handler_entry_ =
      ::fidl::internal::UnknownMethodHandlerEntry::kClosedProtocolHandlerEntry;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct ::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  TransactionalRequest() {
    _InitHeader();
  }
  using ResponseType = ::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>;

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 0 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

#endif  // __Fuchsia__

template <>
struct ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo> final : public ::test_bottom::wire::BottomGetFooResponse {
  explicit WireResponse(::test_bottom::wire::BottomGetFooResponse base) : ::test_bottom::wire::BottomGetFooResponse(std::move(base)) {}
  explicit WireResponse(const ::test_bottom::wire::Foo& foo) : ::test_bottom::wire::BottomGetFooResponse{.foo = std::move(foo)} {}
  WireResponse() = default;
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 4;

  static void Encode(
      internal::WireEncoder* encoder, ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bottom::wire::BottomGetFooResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, value, position, recursion_depth);
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bottom::wire::BottomGetFooResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position, recursion_depth);
  }
};

template <>
struct ::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo> body;
  explicit TransactionalResponse(const ::test_bottom::wire::Foo& foo)
      : body(::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>(foo)) {
    _InitHeader();
  }
  TransactionalResponse() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 4 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

namespace fidl {

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>> : public std::true_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>) == TypeTraits<::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>, header) == 0);

#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>> : public std::true_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>> {
  static constexpr const fidl_type_t* kType =
      &::test_transitivedependenciescompose::test_bottom_BottomGetFooResponseTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>) == TypeTraits<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>, body) == sizeof(fidl_message_header_t));
template <>
struct TypeTraits<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>> {
  static constexpr const fidl_type_t* kType =
      &::test_transitivedependenciescompose::test_bottom_BottomGetFooResponseTable;
  static constexpr bool kHasServerToClientBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 4;
  static constexpr uint32_t kPrimarySizeV1 = 4;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(sizeof(::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>) == TypeTraits<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>, foo) == 0);
#ifdef __Fuchsia__
}  // namespace fidl

template <>
struct ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>> final
    : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>>> {
  static constexpr uint32_t kNumHandles =
      fidl::internal::ClampedHandleCount<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>, fidl::MessageDirection::kReceiving>();

  ::std::array<zx_handle_t, kNumHandles> handles_;
  ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
};

template <>
struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>> final
    : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>>> {
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_transitivedependenciescompose::Top::GetFoo>> handles_storage_;
};
template <>
struct ::fidl::internal::IncomingEventsHandleStorage<::test_transitivedependenciescompose::Top> final : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingEventsHandleStorage<::test_transitivedependenciescompose::Top>> {
 public:
  static constexpr uint32_t kNumHandles = 0;

  ::std::array<zx_handle_t, kNumHandles> handles_;
  ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
};

template <>
struct ::fidl::internal::IncomingEventsStorage<::test_transitivedependenciescompose::Top> final : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingEventsStorage<::test_transitivedependenciescompose::Top>> {
 public:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
  ::fidl::internal::IncomingEventsHandleStorage<::test_transitivedependenciescompose::Top> handles_storage_;
};

template <>
struct ::fidl::internal::WireResultUnwrap<::test_transitivedependenciescompose::Top::GetFoo> {
  using Type = ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>;
};

template <>
class [[nodiscard]] ::fidl::WireResult<::test_transitivedependenciescompose::Top::GetFoo> final : public ::fidl::BaseWireResult<::test_transitivedependenciescompose::Top::GetFoo> {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top> client,
      ::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>* request);

  explicit WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_transitivedependenciescompose::Top::GetFoo>(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
  ::fidl::DecodedValue<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>> decoded_;
};

template <>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_transitivedependenciescompose::Top::GetFoo> final : public ::fidl::BaseWireResult<::test_transitivedependenciescompose::Top::GetFoo> {
 public:
  explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo>* request);
  explicit WireUnownedResult(::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>* response)
      : ::fidl::BaseWireResult<::test_transitivedependenciescompose::Top::GetFoo>(fidl::Status::Ok()), decoded_(response) {
    ExtractValueFromDecoded(decoded_.pointer());
  }

  explicit WireUnownedResult(
      ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>>>&& decoded,
      ::fidl::internal::MessageStorageViewBase* storage_view) : ::fidl::BaseWireResult<::test_transitivedependenciescompose::Top::GetFoo>(::fidl::internal::StatusFromResult(decoded)) {
    if (decoded.is_ok()) {
      decoded_ = std::move(decoded.value());
      ExtractValueFromDecoded(decoded_.pointer());
    }
  }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_transitivedependenciescompose::Top::GetFoo>(result) {}
  WireUnownedResult(WireUnownedResult&&) = default;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = default;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

 private:
  ::fidl::DecodedValue<::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>> decoded_;
};

template <>
class ::fidl::internal::WireEventHandlerInterface<::test_transitivedependenciescompose::Top> : public ::fidl::internal::BaseEventHandlerInterface {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::test_transitivedependenciescompose::Top>
    : public ::fidl::internal::WireEventHandlerInterface<::test_transitivedependenciescompose::Top>, public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_transitivedependenciescompose::Top>
    : public ::fidl::internal::WireEventHandlerInterface<::test_transitivedependenciescompose::Top>, public ::fidl::internal::SyncEventHandler {
 public:
  WireSyncEventHandler() = default;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method.
  ::fidl::Status HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top> client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_transitivedependenciescompose::Top> final : public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::WireEventHandlerInterface<::test_transitivedependenciescompose::Top>> {
 public:
  explicit WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_transitivedependenciescompose::Top>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
};

// Methods to make a sync FIDL call directly on an unowned handle or a
// const reference to a |::fidl::ClientEnd<::test_transitivedependenciescompose::Top>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::test_transitivedependenciescompose::Top> final : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::WireSyncClientImpl<::test_transitivedependenciescompose::Top>> {
 public:
  // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::WireResult<::test_transitivedependenciescompose::Top::GetFoo>
  GetFoo() {
    ::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo> _request{};
    return ::fidl::WireResult<::test_transitivedependenciescompose::Top::GetFoo>(_client_end(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_transitivedependenciescompose::Top> final : public ::fidl::internal::SyncEndpointBufferVeneer<::fidl::internal::WireSyncBufferClientImpl<::test_transitivedependenciescompose::Top>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
  ::fidl::WireUnownedResult<::test_transitivedependenciescompose::Top::GetFoo>
  GetFoo() {
    ::fidl::internal::TransactionalRequest<::test_transitivedependenciescompose::Top::GetFoo> _request{};
    return ::fidl::WireUnownedResult<::test_transitivedependenciescompose::Top::GetFoo>(_client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireCompleterImpl<::test_transitivedependenciescompose::Top::GetFoo> : public ::fidl::internal::CompleterImplBase<::test_transitivedependenciescompose::Top::GetFoo> {
 public:
  using CompleterImplBase::CompleterImplBase;

  void Reply(const ::test_bottom::wire::Foo& foo);

 private:
  void MakeReply(const ::test_bottom::wire::Foo& foo);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_transitivedependenciescompose::Top::GetFoo> : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(const ::test_bottom::wire::Foo& foo);

 private:
  void MakeReply(const ::test_bottom::wire::Foo& foo);
};

template <>
class ::fidl::internal::WireCompleterBase<::test_transitivedependenciescompose::Top::GetFoo> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_transitivedependenciescompose::Top::GetFoo> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |::fidl::ClientEnd<::test_transitivedependenciescompose::Top>|
// and |::fidl::ServerEnd<::test_transitivedependenciescompose::Top>|).
template <>
class ::fidl::WireServer<::test_transitivedependenciescompose::Top> : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_transitivedependenciescompose::Top;

  using Handler = fidl::ProtocolHandler<::test_transitivedependenciescompose::Top>;

  using GetFooCompleter = ::fidl::internal::WireCompleter<::test_transitivedependenciescompose::Top::GetFoo>;

  virtual void GetFoo(
      GetFooCompleter::Sync& completer) = 0;

  // |bind_handler| returns a handler that binds incoming connections to this
  // server implementation.
  //
  // The returned handler borrows the server instance.
  // The server must outlive the provided |dispatcher|. Only after
  // the dispatcher is shutdown will it be safe to destroy the servers.
  // The server should not be moved.
  Handler bind_handler(async_dispatcher_t* dispatcher) {
    return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_transitivedependenciescompose::Top> request) {
      (void)::fidl::BindServer(dispatcher, std::move(request), impl);
    };
  }

 private:
  void dispatch_message(
      ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::MessageStorageViewBase* storage_view) final;
};
namespace fidl {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::internal::WireWeakOnewayClientImpl<::test_transitivedependenciescompose::Top> : public ::fidl::internal::ClientImplBase {
 public:
  using ClientImplBase::ClientImplBase;
};

template <>
class ::fidl::internal::WireWeakAsyncClientImpl<::test_transitivedependenciescompose::Top> final : public ::fidl::internal::WireWeakOnewayClientImpl<::test_transitivedependenciescompose::Top> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
  // Allocates 16 bytes of request buffer on the stack. The callback is stored on the heap.
  ::fidl::internal::WireThenable<::test_transitivedependenciescompose::Top::GetFoo> GetFoo();
};

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_transitivedependenciescompose::Top> : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<::test_transitivedependenciescompose::Top> final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_transitivedependenciescompose::Top> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;

  // Caller provides the backing storage for FIDL message.
  ::fidl::internal::WireBufferThenable<::test_transitivedependenciescompose::Top::GetFoo> GetFoo();
};
template <>
class ::fidl::internal::WireWeakSyncClientImpl<::test_transitivedependenciescompose::Top> final : public ::fidl::internal::WireWeakOnewayClientImpl<::test_transitivedependenciescompose::Top> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;

  // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::WireResult<::test_transitivedependenciescompose::Top::GetFoo> GetFoo();
};
namespace fidl {

#endif  // __Fuchsia__

}  // namespace fidl

#ifdef __Fuchsia__
template <>
class ::fidl::internal::WireWeakEventSender<::test_transitivedependenciescompose::Top> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::WireWeakBufferEventSender<::test_transitivedependenciescompose::Top> : public ::fidl::internal::WeakBufferEventSenderBase {
 public:
  using WeakBufferEventSenderBase::WeakBufferEventSenderBase;
};

template <>
class ::fidl::internal::WireEventSender<::test_transitivedependenciescompose::Top>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::WireEventSender<::test_transitivedependenciescompose::Top>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};

template <>
class ::fidl::internal::WireBufferEventSender<::test_transitivedependenciescompose::Top>
    : public ::fidl::internal::SyncEndpointBufferVeneer<::fidl::internal::WireBufferEventSender<::test_transitivedependenciescompose::Top>> {
 public:
  using SyncEndpointBufferVeneer::SyncEndpointBufferVeneer;
};

#endif  // __Fuchsia__

#pragma clang diagnostic pop
