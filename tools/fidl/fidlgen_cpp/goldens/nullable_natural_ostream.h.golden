// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.nullable/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

template <>
struct fidl::ostream::Formatter<::test_nullable::StructWithNullableString> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::StructWithNullableString& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::StructWithNullableVector> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::StructWithNullableVector& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::StructWithNullableHandle> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::StructWithNullableHandle& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::SimpleProtocolAddRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::SimpleProtocolAddRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::SimpleProtocolAddResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::SimpleProtocolAddResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::StructWithNullableProtocol> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::StructWithNullableProtocol& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::StructWithNullableRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::StructWithNullableRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::Int32Wrapper> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::Int32Wrapper& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::StructWithNullableStruct> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::StructWithNullableStruct& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::SimpleUnion> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::SimpleUnion& value);
};
template <>
struct fidl::ostream::Formatter<::test_nullable::StructWithNullableUnion> {
  static std::ostream& Format(std::ostream& os, const ::test_nullable::StructWithNullableUnion& value);
};

namespace test_nullable {

std::ostream& operator<<(std::ostream& os, const ::test_nullable::StructWithNullableString& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::StructWithNullableVector& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::StructWithNullableHandle& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::SimpleProtocolAddRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::SimpleProtocolAddResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::StructWithNullableProtocol& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::StructWithNullableRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::Int32Wrapper& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::StructWithNullableStruct& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::SimpleUnion& value);

std::ostream& operator<<(std::ostream& os, const ::test_nullable::StructWithNullableUnion& value);

}  // namespace test_nullable

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_nullable::SimpleProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_nullable::SimpleProtocol>& value) {
    return os << "ClientEnd<"
              << "test_nullable::SimpleProtocol"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_nullable::SimpleProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_nullable::SimpleProtocol>& value) {
    return os << "ServerEnd<"
              << "test_nullable::SimpleProtocol"
              << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_nullable::SimpleProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_nullable::SimpleProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_nullable::SimpleProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_nullable::SimpleProtocol>>::Format(os, value);
}

}  // namespace fidl
