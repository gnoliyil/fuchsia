// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = allow_overflowing
// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <fidl/test.largemessages/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <>
struct fidl::ostream::Formatter<::test_largemessages::BoundedKnownToBeSmall> {
  static std::ostream& Format(std::ostream& os, const ::test_largemessages::BoundedKnownToBeSmall& value);
};
template <>
struct fidl::ostream::Formatter<::test_largemessages::BoundedMaybeLarge> {
  static std::ostream& Format(std::ostream& os, const ::test_largemessages::BoundedMaybeLarge& value);
};
template <>
struct fidl::ostream::Formatter<::test_largemessages::SemiBoundedBelievedToBeSmall> {
  static std::ostream& Format(std::ostream& os, const ::test_largemessages::SemiBoundedBelievedToBeSmall& value);
};
template <>
struct fidl::ostream::Formatter<::test_largemessages::SemiBoundedMaybeLarge> {
  static std::ostream& Format(std::ostream& os, const ::test_largemessages::SemiBoundedMaybeLarge& value);
};
template <>
struct fidl::ostream::Formatter<::test_largemessages::UnboundedMaybeLargeValue> {
  static std::ostream& Format(std::ostream& os, const ::test_largemessages::UnboundedMaybeLargeValue& value);
};
template <>
struct fidl::ostream::Formatter<::test_largemessages::Elements> {
  static std::ostream& Format(std::ostream& os, const ::test_largemessages::Elements& value);
};
template <>
struct fidl::ostream::Formatter<::test_largemessages::UnboundedMaybeLargeResource> {
  static std::ostream& Format(std::ostream& os, const ::test_largemessages::UnboundedMaybeLargeResource& value);
};

namespace test_largemessages {

std::ostream& operator<<(std::ostream& os, const ::test_largemessages::BoundedKnownToBeSmall& value);

std::ostream& operator<<(std::ostream& os, const ::test_largemessages::BoundedMaybeLarge& value);

std::ostream& operator<<(std::ostream& os, const ::test_largemessages::SemiBoundedBelievedToBeSmall& value);

std::ostream& operator<<(std::ostream& os, const ::test_largemessages::SemiBoundedMaybeLarge& value);

std::ostream& operator<<(std::ostream& os, const ::test_largemessages::UnboundedMaybeLargeValue& value);

std::ostream& operator<<(std::ostream& os, const ::test_largemessages::Elements& value);

std::ostream& operator<<(std::ostream& os, const ::test_largemessages::UnboundedMaybeLargeResource& value);

}  // namespace test_largemessages

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_largemessages::Overflowing>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_largemessages::Overflowing>& value) {
    return os << "ClientEnd<"
              << "test_largemessages::Overflowing"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_largemessages::Overflowing>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_largemessages::Overflowing>& value) {
    return os << "ServerEnd<"
              << "test_largemessages::Overflowing"
              << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_largemessages::Overflowing>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_largemessages::Overflowing>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_largemessages::Overflowing>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_largemessages::Overflowing>>::Format(os, value);
}

#pragma clang diagnostic pop

}  // namespace fidl
