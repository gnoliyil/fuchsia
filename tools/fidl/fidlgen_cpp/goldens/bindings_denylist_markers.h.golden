// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <lib/fidl/cpp/wire/internal/transport.h>
#include <lib/fidl/cpp/wire/unknown_interactions.h>

namespace test_bindingsdenylist {

class OnlyLibfuzzerAndDeps final {
  OnlyLibfuzzerAndDeps() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
};

class OnlyCppAndDeps final {
  OnlyCppAndDeps() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
};

class DenyEachBinding final {
  DenyEachBinding() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;

  class OnlyDenyDart final {
    OnlyDenyDart() = delete;

   public:
    using Protocol = ::test_bindingsdenylist::DenyEachBinding;
    static constexpr bool kHasClientToServer = true;
    static constexpr bool kHasClientToServerBody = true;
    static constexpr bool kHasServerToClient = true;
    static constexpr bool kHasServerToClientBody = true;

    static constexpr bool kHasNonEmptyUserFacingResponse = true;
    static constexpr bool kHasDomainError = true;
    static constexpr bool kHasFrameworkError = false;
  };
  class OnlyDenyGo final {
    OnlyDenyGo() = delete;

   public:
    using Protocol = ::test_bindingsdenylist::DenyEachBinding;
    static constexpr bool kHasClientToServer = true;
    static constexpr bool kHasClientToServerBody = true;
    static constexpr bool kHasServerToClient = true;
    static constexpr bool kHasServerToClientBody = true;

    static constexpr bool kHasNonEmptyUserFacingResponse = true;
    static constexpr bool kHasDomainError = true;
    static constexpr bool kHasFrameworkError = false;
  };
  class OnlyDenyLibfuzzer final {
    OnlyDenyLibfuzzer() = delete;

   public:
    using Protocol = ::test_bindingsdenylist::DenyEachBinding;
    static constexpr bool kHasClientToServer = true;
    static constexpr bool kHasClientToServerBody = true;
    static constexpr bool kHasServerToClient = true;
    static constexpr bool kHasServerToClientBody = true;

    static constexpr bool kHasNonEmptyUserFacingResponse = true;
    static constexpr bool kHasDomainError = true;
    static constexpr bool kHasFrameworkError = false;
  };
  class OnlyDenyRust final {
    OnlyDenyRust() = delete;

   public:
    using Protocol = ::test_bindingsdenylist::DenyEachBinding;
    static constexpr bool kHasClientToServer = true;
    static constexpr bool kHasClientToServerBody = true;
    static constexpr bool kHasServerToClient = true;
    static constexpr bool kHasServerToClientBody = true;

    static constexpr bool kHasNonEmptyUserFacingResponse = true;
    static constexpr bool kHasDomainError = true;
    static constexpr bool kHasFrameworkError = false;
  };
  class OnlyDenySyzkaller final {
    OnlyDenySyzkaller() = delete;

   public:
    using Protocol = ::test_bindingsdenylist::DenyEachBinding;
    static constexpr bool kHasClientToServer = true;
    static constexpr bool kHasClientToServerBody = true;
    static constexpr bool kHasServerToClient = true;
    static constexpr bool kHasServerToClientBody = true;

    static constexpr bool kHasNonEmptyUserFacingResponse = true;
    static constexpr bool kHasDomainError = true;
    static constexpr bool kHasFrameworkError = false;
  };
};

class Allowed final {
  Allowed() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
};

class ImportsSameNameContext final {
  ImportsSameNameContext() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;

  class Unattributed final {
    Unattributed() = delete;

   public:
    using Protocol = ::test_bindingsdenylist::ImportsSameNameContext;
    static constexpr bool kHasClientToServer = true;
    static constexpr bool kHasClientToServerBody = false;
    static constexpr bool kHasServerToClient = false;
    static constexpr bool kHasServerToClientBody = false;

    static constexpr bool kHasNonEmptyUserFacingResponse = false;
    static constexpr bool kHasDomainError = false;
    static constexpr bool kHasFrameworkError = false;
  };
  class AlwaysAppearsInImportingLibrary final {
    AlwaysAppearsInImportingLibrary() = delete;

   public:
    using Protocol = ::test_bindingsdenylist::ImportsSameNameContext;
    static constexpr bool kHasClientToServer = true;
    static constexpr bool kHasClientToServerBody = false;
    static constexpr bool kHasServerToClient = false;
    static constexpr bool kHasServerToClientBody = false;

    static constexpr bool kHasNonEmptyUserFacingResponse = false;
    static constexpr bool kHasDomainError = false;
    static constexpr bool kHasFrameworkError = false;
  };
};

}  // namespace test_bindingsdenylist
namespace fidl {

template <>
struct IsProtocol<::test_bindingsdenylist::OnlyLibfuzzerAndDeps> : public std::true_type {};

template <>
struct IsProtocol<::test_bindingsdenylist::OnlyCppAndDeps> : public std::true_type {};

template <>
struct IsProtocol<::test_bindingsdenylist::DenyEachBinding> : public std::true_type {};

template <>
struct IsProtocol<::test_bindingsdenylist::Allowed> : public std::true_type {};

template <>
struct IsProtocol<::test_bindingsdenylist::ImportsSameNameContext> : public std::true_type {};

}  // namespace fidl
