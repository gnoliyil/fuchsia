// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#pragma once

#include <fidl/test.protocols/cpp/markers.h>
#include <fidl/test.protocols/cpp/natural_types.h>
#include <fidl/test.protocols/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.protocols/cpp/natural_messaging.h>
#include <fidl/test.protocols/cpp/wire_messaging.h>

#endif  // __Fuchsia__
#include <lib/fidl/cpp/wire_natural_conversions.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {
namespace internal {

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ErrorEnum> {
  using type = ::test_protocols::ErrorEnum;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ErrorEnum> {
  using type = ::test_protocols::wire::ErrorEnum;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithAndWithoutRequestResponseNoRequestWithResponseResponse, ::test_protocols::WithAndWithoutRequestResponseNoRequestWithResponseResponse> {
  static ::test_protocols::WithAndWithoutRequestResponseNoRequestWithResponseResponse ToNatural(::test_protocols::wire::WithAndWithoutRequestResponseNoRequestWithResponseResponse src);
  static ::test_protocols::wire::WithAndWithoutRequestResponseNoRequestWithResponseResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithAndWithoutRequestResponseNoRequestWithResponseResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithAndWithoutRequestResponseNoRequestWithResponseResponse> {
  using type = ::test_protocols::WithAndWithoutRequestResponseNoRequestWithResponseResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithAndWithoutRequestResponseNoRequestWithResponseResponse> {
  using type = ::test_protocols::wire::WithAndWithoutRequestResponseNoRequestWithResponseResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithAndWithoutRequestResponseWithRequestNoResponseRequest, ::test_protocols::WithAndWithoutRequestResponseWithRequestNoResponseRequest> {
  static ::test_protocols::WithAndWithoutRequestResponseWithRequestNoResponseRequest ToNatural(::test_protocols::wire::WithAndWithoutRequestResponseWithRequestNoResponseRequest src);
  static ::test_protocols::wire::WithAndWithoutRequestResponseWithRequestNoResponseRequest ToWire(fidl::AnyArena& arena, ::test_protocols::WithAndWithoutRequestResponseWithRequestNoResponseRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithAndWithoutRequestResponseWithRequestNoResponseRequest> {
  using type = ::test_protocols::WithAndWithoutRequestResponseWithRequestNoResponseRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithAndWithoutRequestResponseWithRequestNoResponseRequest> {
  using type = ::test_protocols::wire::WithAndWithoutRequestResponseWithRequestNoResponseRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest, ::test_protocols::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest> {
  static ::test_protocols::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest ToNatural(::test_protocols::wire::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest src);
  static ::test_protocols::wire::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest ToWire(fidl::AnyArena& arena, ::test_protocols::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest> {
  using type = ::test_protocols::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest> {
  using type = ::test_protocols::wire::WithAndWithoutRequestResponseWithRequestEmptyResponseRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseRequest, ::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseRequest> {
  static ::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseRequest ToNatural(::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseRequest src);
  static ::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseRequest ToWire(fidl::AnyArena& arena, ::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseRequest> {
  using type = ::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseRequest> {
  using type = ::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseResponse, ::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseResponse> {
  static ::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseResponse ToNatural(::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseResponse src);
  static ::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseResponse> {
  using type = ::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithAndWithoutRequestResponseWithRequestWithResponseResponse> {
  using type = ::test_protocols::wire::WithAndWithoutRequestResponseWithRequestWithResponseResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithAndWithoutRequestResponseOnWithResponseRequest, ::test_protocols::WithAndWithoutRequestResponseOnWithResponseRequest> {
  static ::test_protocols::WithAndWithoutRequestResponseOnWithResponseRequest ToNatural(::test_protocols::wire::WithAndWithoutRequestResponseOnWithResponseRequest src);
  static ::test_protocols::wire::WithAndWithoutRequestResponseOnWithResponseRequest ToWire(fidl::AnyArena& arena, ::test_protocols::WithAndWithoutRequestResponseOnWithResponseRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithAndWithoutRequestResponseOnWithResponseRequest> {
  using type = ::test_protocols::WithAndWithoutRequestResponseOnWithResponseRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithAndWithoutRequestResponseOnWithResponseRequest> {
  using type = ::test_protocols::wire::WithAndWithoutRequestResponseOnWithResponseRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse, ::test_protocols::WithErrorSyntaxResponseAsStructResponse> {
  static ::test_protocols::WithErrorSyntaxResponseAsStructResponse ToNatural(::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse src);
  static ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxResponseAsStructResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse> {
  using type = ::test_protocols::WithErrorSyntaxResponseAsStructResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxResponseAsStructResponse> {
  using type = ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxResponseAsStructTopResponse, ::test_protocols::WithErrorSyntaxResponseAsStructTopResponse> {
  static ::test_protocols::WithErrorSyntaxResponseAsStructTopResponse ToNatural(::test_protocols::wire::WithErrorSyntaxResponseAsStructTopResponse src);
  static ::test_protocols::wire::WithErrorSyntaxResponseAsStructTopResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxResponseAsStructTopResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxResponseAsStructTopResponse> {
  using type = ::test_protocols::WithErrorSyntaxResponseAsStructTopResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxResponseAsStructTopResponse> {
  using type = ::test_protocols::wire::WithErrorSyntaxResponseAsStructTopResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse, ::test_protocols::WithErrorSyntaxErrorAsPrimitiveResponse> {
  static ::test_protocols::WithErrorSyntaxErrorAsPrimitiveResponse ToNatural(::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse src);
  static ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxErrorAsPrimitiveResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse> {
  using type = ::test_protocols::WithErrorSyntaxErrorAsPrimitiveResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxErrorAsPrimitiveResponse> {
  using type = ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveTopResponse, ::test_protocols::WithErrorSyntaxErrorAsPrimitiveTopResponse> {
  static ::test_protocols::WithErrorSyntaxErrorAsPrimitiveTopResponse ToNatural(::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveTopResponse src);
  static ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveTopResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxErrorAsPrimitiveTopResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveTopResponse> {
  using type = ::test_protocols::WithErrorSyntaxErrorAsPrimitiveTopResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxErrorAsPrimitiveTopResponse> {
  using type = ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveTopResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse, ::test_protocols::WithErrorSyntaxErrorAsEnumResponse> {
  static ::test_protocols::WithErrorSyntaxErrorAsEnumResponse ToNatural(::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse src);
  static ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxErrorAsEnumResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse> {
  using type = ::test_protocols::WithErrorSyntaxErrorAsEnumResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxErrorAsEnumResponse> {
  using type = ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxErrorAsEnumTopResponse, ::test_protocols::WithErrorSyntaxErrorAsEnumTopResponse> {
  static ::test_protocols::WithErrorSyntaxErrorAsEnumTopResponse ToNatural(::test_protocols::wire::WithErrorSyntaxErrorAsEnumTopResponse src);
  static ::test_protocols::wire::WithErrorSyntaxErrorAsEnumTopResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxErrorAsEnumTopResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxErrorAsEnumTopResponse> {
  using type = ::test_protocols::WithErrorSyntaxErrorAsEnumTopResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxErrorAsEnumTopResponse> {
  using type = ::test_protocols::wire::WithErrorSyntaxErrorAsEnumTopResponse;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxHandleInResultResponse, ::test_protocols::WithErrorSyntaxHandleInResultResponse> {
  static ::test_protocols::WithErrorSyntaxHandleInResultResponse ToNatural(::test_protocols::wire::WithErrorSyntaxHandleInResultResponse src);
  static ::test_protocols::wire::WithErrorSyntaxHandleInResultResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxHandleInResultResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxHandleInResultResponse> {
  using type = ::test_protocols::WithErrorSyntaxHandleInResultResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxHandleInResultResponse> {
  using type = ::test_protocols::wire::WithErrorSyntaxHandleInResultResponse;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxHandleInResultTopResponse, ::test_protocols::WithErrorSyntaxHandleInResultTopResponse> {
  static ::test_protocols::WithErrorSyntaxHandleInResultTopResponse ToNatural(::test_protocols::wire::WithErrorSyntaxHandleInResultTopResponse src);
  static ::test_protocols::wire::WithErrorSyntaxHandleInResultTopResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxHandleInResultTopResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxHandleInResultTopResponse> {
  using type = ::test_protocols::WithErrorSyntaxHandleInResultTopResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxHandleInResultTopResponse> {
  using type = ::test_protocols::wire::WithErrorSyntaxHandleInResultTopResponse;
};

#endif  // __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::ChannelProtocolMethodARequest, ::test_protocols::ChannelProtocolMethodARequest> {
  static ::test_protocols::ChannelProtocolMethodARequest ToNatural(::test_protocols::wire::ChannelProtocolMethodARequest src);
  static ::test_protocols::wire::ChannelProtocolMethodARequest ToWire(fidl::AnyArena& arena, ::test_protocols::ChannelProtocolMethodARequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ChannelProtocolMethodARequest> {
  using type = ::test_protocols::ChannelProtocolMethodARequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ChannelProtocolMethodARequest> {
  using type = ::test_protocols::wire::ChannelProtocolMethodARequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::ChannelProtocolEventARequest, ::test_protocols::ChannelProtocolEventARequest> {
  static ::test_protocols::ChannelProtocolEventARequest ToNatural(::test_protocols::wire::ChannelProtocolEventARequest src);
  static ::test_protocols::wire::ChannelProtocolEventARequest ToWire(fidl::AnyArena& arena, ::test_protocols::ChannelProtocolEventARequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ChannelProtocolEventARequest> {
  using type = ::test_protocols::ChannelProtocolEventARequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ChannelProtocolEventARequest> {
  using type = ::test_protocols::wire::ChannelProtocolEventARequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::ChannelProtocolMethodBRequest, ::test_protocols::ChannelProtocolMethodBRequest> {
  static ::test_protocols::ChannelProtocolMethodBRequest ToNatural(::test_protocols::wire::ChannelProtocolMethodBRequest src);
  static ::test_protocols::wire::ChannelProtocolMethodBRequest ToWire(fidl::AnyArena& arena, ::test_protocols::ChannelProtocolMethodBRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ChannelProtocolMethodBRequest> {
  using type = ::test_protocols::ChannelProtocolMethodBRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ChannelProtocolMethodBRequest> {
  using type = ::test_protocols::wire::ChannelProtocolMethodBRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::ChannelProtocolMethodBResponse, ::test_protocols::ChannelProtocolMethodBResponse> {
  static ::test_protocols::ChannelProtocolMethodBResponse ToNatural(::test_protocols::wire::ChannelProtocolMethodBResponse src);
  static ::test_protocols::wire::ChannelProtocolMethodBResponse ToWire(fidl::AnyArena& arena, ::test_protocols::ChannelProtocolMethodBResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ChannelProtocolMethodBResponse> {
  using type = ::test_protocols::ChannelProtocolMethodBResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ChannelProtocolMethodBResponse> {
  using type = ::test_protocols::wire::ChannelProtocolMethodBResponse;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::ChannelProtocolTakeHandleRequest, ::test_protocols::ChannelProtocolTakeHandleRequest> {
  static ::test_protocols::ChannelProtocolTakeHandleRequest ToNatural(::test_protocols::wire::ChannelProtocolTakeHandleRequest src);
  static ::test_protocols::wire::ChannelProtocolTakeHandleRequest ToWire(fidl::AnyArena& arena, ::test_protocols::ChannelProtocolTakeHandleRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ChannelProtocolTakeHandleRequest> {
  using type = ::test_protocols::ChannelProtocolTakeHandleRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ChannelProtocolTakeHandleRequest> {
  using type = ::test_protocols::wire::ChannelProtocolTakeHandleRequest;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::ChannelProtocolMutateSocketRequest, ::test_protocols::ChannelProtocolMutateSocketRequest> {
  static ::test_protocols::ChannelProtocolMutateSocketRequest ToNatural(::test_protocols::wire::ChannelProtocolMutateSocketRequest src);
  static ::test_protocols::wire::ChannelProtocolMutateSocketRequest ToWire(fidl::AnyArena& arena, ::test_protocols::ChannelProtocolMutateSocketRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ChannelProtocolMutateSocketRequest> {
  using type = ::test_protocols::ChannelProtocolMutateSocketRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ChannelProtocolMutateSocketRequest> {
  using type = ::test_protocols::wire::ChannelProtocolMutateSocketRequest;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::ChannelProtocolMutateSocketResponse, ::test_protocols::ChannelProtocolMutateSocketResponse> {
  static ::test_protocols::ChannelProtocolMutateSocketResponse ToNatural(::test_protocols::wire::ChannelProtocolMutateSocketResponse src);
  static ::test_protocols::wire::ChannelProtocolMutateSocketResponse ToWire(fidl::AnyArena& arena, ::test_protocols::ChannelProtocolMutateSocketResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ChannelProtocolMutateSocketResponse> {
  using type = ::test_protocols::ChannelProtocolMutateSocketResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ChannelProtocolMutateSocketResponse> {
  using type = ::test_protocols::wire::ChannelProtocolMutateSocketResponse;
};

#endif  // __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::SyscallProtocolMethodCRequest, ::test_protocols::SyscallProtocolMethodCRequest> {
  static ::test_protocols::SyscallProtocolMethodCRequest ToNatural(::test_protocols::wire::SyscallProtocolMethodCRequest src);
  static ::test_protocols::wire::SyscallProtocolMethodCRequest ToWire(fidl::AnyArena& arena, ::test_protocols::SyscallProtocolMethodCRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::SyscallProtocolMethodCRequest> {
  using type = ::test_protocols::SyscallProtocolMethodCRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::SyscallProtocolMethodCRequest> {
  using type = ::test_protocols::wire::SyscallProtocolMethodCRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::TransitionalRequestRequest, ::test_protocols::TransitionalRequestRequest> {
  static ::test_protocols::TransitionalRequestRequest ToNatural(::test_protocols::wire::TransitionalRequestRequest src);
  static ::test_protocols::wire::TransitionalRequestRequest ToWire(fidl::AnyArena& arena, ::test_protocols::TransitionalRequestRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::TransitionalRequestRequest> {
  using type = ::test_protocols::TransitionalRequestRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::TransitionalRequestRequest> {
  using type = ::test_protocols::wire::TransitionalRequestRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::TransitionalRequestResponse, ::test_protocols::TransitionalRequestResponse> {
  static ::test_protocols::TransitionalRequestResponse ToNatural(::test_protocols::wire::TransitionalRequestResponse src);
  static ::test_protocols::wire::TransitionalRequestResponse ToWire(fidl::AnyArena& arena, ::test_protocols::TransitionalRequestResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::TransitionalRequestResponse> {
  using type = ::test_protocols::TransitionalRequestResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::TransitionalRequestResponse> {
  using type = ::test_protocols::wire::TransitionalRequestResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::TransitionalOneWayRequest, ::test_protocols::TransitionalOneWayRequest> {
  static ::test_protocols::TransitionalOneWayRequest ToNatural(::test_protocols::wire::TransitionalOneWayRequest src);
  static ::test_protocols::wire::TransitionalOneWayRequest ToWire(fidl::AnyArena& arena, ::test_protocols::TransitionalOneWayRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::TransitionalOneWayRequest> {
  using type = ::test_protocols::TransitionalOneWayRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::TransitionalOneWayRequest> {
  using type = ::test_protocols::wire::TransitionalOneWayRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::TransitionalEventRequest, ::test_protocols::TransitionalEventRequest> {
  static ::test_protocols::TransitionalEventRequest ToNatural(::test_protocols::wire::TransitionalEventRequest src);
  static ::test_protocols::wire::TransitionalEventRequest ToWire(fidl::AnyArena& arena, ::test_protocols::TransitionalEventRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::TransitionalEventRequest> {
  using type = ::test_protocols::TransitionalEventRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::TransitionalEventRequest> {
  using type = ::test_protocols::wire::TransitionalEventRequest;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::HandleRightsProtocolNoResponseMethodRequest, ::test_protocols::HandleRightsProtocolNoResponseMethodRequest> {
  static ::test_protocols::HandleRightsProtocolNoResponseMethodRequest ToNatural(::test_protocols::wire::HandleRightsProtocolNoResponseMethodRequest src);
  static ::test_protocols::wire::HandleRightsProtocolNoResponseMethodRequest ToWire(fidl::AnyArena& arena, ::test_protocols::HandleRightsProtocolNoResponseMethodRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::HandleRightsProtocolNoResponseMethodRequest> {
  using type = ::test_protocols::HandleRightsProtocolNoResponseMethodRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::HandleRightsProtocolNoResponseMethodRequest> {
  using type = ::test_protocols::wire::HandleRightsProtocolNoResponseMethodRequest;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::HandleRightsProtocolResponseMethodRequest, ::test_protocols::HandleRightsProtocolResponseMethodRequest> {
  static ::test_protocols::HandleRightsProtocolResponseMethodRequest ToNatural(::test_protocols::wire::HandleRightsProtocolResponseMethodRequest src);
  static ::test_protocols::wire::HandleRightsProtocolResponseMethodRequest ToWire(fidl::AnyArena& arena, ::test_protocols::HandleRightsProtocolResponseMethodRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::HandleRightsProtocolResponseMethodRequest> {
  using type = ::test_protocols::HandleRightsProtocolResponseMethodRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::HandleRightsProtocolResponseMethodRequest> {
  using type = ::test_protocols::wire::HandleRightsProtocolResponseMethodRequest;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::HandleRightsProtocolResponseMethodResponse, ::test_protocols::HandleRightsProtocolResponseMethodResponse> {
  static ::test_protocols::HandleRightsProtocolResponseMethodResponse ToNatural(::test_protocols::wire::HandleRightsProtocolResponseMethodResponse src);
  static ::test_protocols::wire::HandleRightsProtocolResponseMethodResponse ToWire(fidl::AnyArena& arena, ::test_protocols::HandleRightsProtocolResponseMethodResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::HandleRightsProtocolResponseMethodResponse> {
  using type = ::test_protocols::HandleRightsProtocolResponseMethodResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::HandleRightsProtocolResponseMethodResponse> {
  using type = ::test_protocols::wire::HandleRightsProtocolResponseMethodResponse;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::HandleRightsProtocolAnEventRequest, ::test_protocols::HandleRightsProtocolAnEventRequest> {
  static ::test_protocols::HandleRightsProtocolAnEventRequest ToNatural(::test_protocols::wire::HandleRightsProtocolAnEventRequest src);
  static ::test_protocols::wire::HandleRightsProtocolAnEventRequest ToWire(fidl::AnyArena& arena, ::test_protocols::HandleRightsProtocolAnEventRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::HandleRightsProtocolAnEventRequest> {
  using type = ::test_protocols::HandleRightsProtocolAnEventRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::HandleRightsProtocolAnEventRequest> {
  using type = ::test_protocols::wire::HandleRightsProtocolAnEventRequest;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::ProtocolEnds, ::test_protocols::ProtocolEnds> {
  static ::test_protocols::ProtocolEnds ToNatural(::test_protocols::wire::ProtocolEnds src);
  static ::test_protocols::wire::ProtocolEnds ToWire(fidl::AnyArena& arena, ::test_protocols::ProtocolEnds src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ProtocolEnds> {
  using type = ::test_protocols::ProtocolEnds;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ProtocolEnds> {
  using type = ::test_protocols::wire::ProtocolEnds;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithProtocolEndsClientEndsRequest, ::test_protocols::WithProtocolEndsClientEndsRequest> {
  static ::test_protocols::WithProtocolEndsClientEndsRequest ToNatural(::test_protocols::wire::WithProtocolEndsClientEndsRequest src);
  static ::test_protocols::wire::WithProtocolEndsClientEndsRequest ToWire(fidl::AnyArena& arena, ::test_protocols::WithProtocolEndsClientEndsRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithProtocolEndsClientEndsRequest> {
  using type = ::test_protocols::WithProtocolEndsClientEndsRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithProtocolEndsClientEndsRequest> {
  using type = ::test_protocols::wire::WithProtocolEndsClientEndsRequest;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithProtocolEndsClientEndsResponse, ::test_protocols::WithProtocolEndsClientEndsResponse> {
  static ::test_protocols::WithProtocolEndsClientEndsResponse ToNatural(::test_protocols::wire::WithProtocolEndsClientEndsResponse src);
  static ::test_protocols::wire::WithProtocolEndsClientEndsResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithProtocolEndsClientEndsResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithProtocolEndsClientEndsResponse> {
  using type = ::test_protocols::WithProtocolEndsClientEndsResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithProtocolEndsClientEndsResponse> {
  using type = ::test_protocols::wire::WithProtocolEndsClientEndsResponse;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithProtocolEndsServerEndsRequest, ::test_protocols::WithProtocolEndsServerEndsRequest> {
  static ::test_protocols::WithProtocolEndsServerEndsRequest ToNatural(::test_protocols::wire::WithProtocolEndsServerEndsRequest src);
  static ::test_protocols::wire::WithProtocolEndsServerEndsRequest ToWire(fidl::AnyArena& arena, ::test_protocols::WithProtocolEndsServerEndsRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithProtocolEndsServerEndsRequest> {
  using type = ::test_protocols::WithProtocolEndsServerEndsRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithProtocolEndsServerEndsRequest> {
  using type = ::test_protocols::wire::WithProtocolEndsServerEndsRequest;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithProtocolEndsServerEndsResponse, ::test_protocols::WithProtocolEndsServerEndsResponse> {
  static ::test_protocols::WithProtocolEndsServerEndsResponse ToNatural(::test_protocols::wire::WithProtocolEndsServerEndsResponse src);
  static ::test_protocols::wire::WithProtocolEndsServerEndsResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithProtocolEndsServerEndsResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithProtocolEndsServerEndsResponse> {
  using type = ::test_protocols::WithProtocolEndsServerEndsResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithProtocolEndsServerEndsResponse> {
  using type = ::test_protocols::wire::WithProtocolEndsServerEndsResponse;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithProtocolEndsStructContainingEndsRequest, ::test_protocols::WithProtocolEndsStructContainingEndsRequest> {
  static ::test_protocols::WithProtocolEndsStructContainingEndsRequest ToNatural(::test_protocols::wire::WithProtocolEndsStructContainingEndsRequest src);
  static ::test_protocols::wire::WithProtocolEndsStructContainingEndsRequest ToWire(fidl::AnyArena& arena, ::test_protocols::WithProtocolEndsStructContainingEndsRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithProtocolEndsStructContainingEndsRequest> {
  using type = ::test_protocols::WithProtocolEndsStructContainingEndsRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithProtocolEndsStructContainingEndsRequest> {
  using type = ::test_protocols::wire::WithProtocolEndsStructContainingEndsRequest;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithProtocolEndsStructContainingEndsResponse, ::test_protocols::WithProtocolEndsStructContainingEndsResponse> {
  static ::test_protocols::WithProtocolEndsStructContainingEndsResponse ToNatural(::test_protocols::wire::WithProtocolEndsStructContainingEndsResponse src);
  static ::test_protocols::wire::WithProtocolEndsStructContainingEndsResponse ToWire(fidl::AnyArena& arena, ::test_protocols::WithProtocolEndsStructContainingEndsResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithProtocolEndsStructContainingEndsResponse> {
  using type = ::test_protocols::WithProtocolEndsStructContainingEndsResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithProtocolEndsStructContainingEndsResponse> {
  using type = ::test_protocols::wire::WithProtocolEndsStructContainingEndsResponse;
};

#endif  // __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::ManyParametersFifteenRequest, ::test_protocols::ManyParametersFifteenRequest> {
  static ::test_protocols::ManyParametersFifteenRequest ToNatural(::test_protocols::wire::ManyParametersFifteenRequest src);
  static ::test_protocols::wire::ManyParametersFifteenRequest ToWire(fidl::AnyArena& arena, ::test_protocols::ManyParametersFifteenRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::ManyParametersFifteenRequest> {
  using type = ::test_protocols::ManyParametersFifteenRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::ManyParametersFifteenRequest> {
  using type = ::test_protocols::wire::ManyParametersFifteenRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::MethodWithUnionUnionMethodRequest, ::test_protocols::MethodWithUnionUnionMethodRequest> {
  static ::test_protocols::MethodWithUnionUnionMethodRequest ToNatural(::test_protocols::wire::MethodWithUnionUnionMethodRequest src);
  static ::test_protocols::wire::MethodWithUnionUnionMethodRequest ToWire(fidl::AnyArena& arena, ::test_protocols::MethodWithUnionUnionMethodRequest src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::MethodWithUnionUnionMethodRequest> {
  using type = ::test_protocols::MethodWithUnionUnionMethodRequest;
};
template <>
struct WireTypeForNaturalType<::test_protocols::MethodWithUnionUnionMethodRequest> {
  using type = ::test_protocols::wire::MethodWithUnionUnionMethodRequest;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::MethodWithUnionUnionMethodResponse, ::test_protocols::MethodWithUnionUnionMethodResponse> {
  static ::test_protocols::MethodWithUnionUnionMethodResponse ToNatural(::test_protocols::wire::MethodWithUnionUnionMethodResponse src);
  static ::test_protocols::wire::MethodWithUnionUnionMethodResponse ToWire(fidl::AnyArena& arena, ::test_protocols::MethodWithUnionUnionMethodResponse src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::MethodWithUnionUnionMethodResponse> {
  using type = ::test_protocols::MethodWithUnionUnionMethodResponse;
};
template <>
struct WireTypeForNaturalType<::test_protocols::MethodWithUnionUnionMethodResponse> {
  using type = ::test_protocols::wire::MethodWithUnionUnionMethodResponse;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxResponseAsStructResult, ::test_protocols::WithErrorSyntaxResponseAsStructResult> {
  static ::test_protocols::WithErrorSyntaxResponseAsStructResult ToNatural(::test_protocols::wire::WithErrorSyntaxResponseAsStructResult src);
  static ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxResponseAsStructResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxResponseAsStructResult>, std::unique_ptr<::test_protocols::WithErrorSyntaxResponseAsStructResult>> {
  static std::unique_ptr<::test_protocols::WithErrorSyntaxResponseAsStructResult> ToNatural(::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxResponseAsStructResult> src);
  static ::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxResponseAsStructResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocols::WithErrorSyntaxResponseAsStructResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxResponseAsStructResult> {
  using type = ::test_protocols::WithErrorSyntaxResponseAsStructResult;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxResponseAsStructResult> {
  using type = ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult, ::test_protocols::WithErrorSyntaxErrorAsPrimitiveResult> {
  static ::test_protocols::WithErrorSyntaxErrorAsPrimitiveResult ToNatural(::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult src);
  static ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxErrorAsPrimitiveResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult>, std::unique_ptr<::test_protocols::WithErrorSyntaxErrorAsPrimitiveResult>> {
  static std::unique_ptr<::test_protocols::WithErrorSyntaxErrorAsPrimitiveResult> ToNatural(::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult> src);
  static ::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocols::WithErrorSyntaxErrorAsPrimitiveResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult> {
  using type = ::test_protocols::WithErrorSyntaxErrorAsPrimitiveResult;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxErrorAsPrimitiveResult> {
  using type = ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult;
};

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult, ::test_protocols::WithErrorSyntaxErrorAsEnumResult> {
  static ::test_protocols::WithErrorSyntaxErrorAsEnumResult ToNatural(::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult src);
  static ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxErrorAsEnumResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult>, std::unique_ptr<::test_protocols::WithErrorSyntaxErrorAsEnumResult>> {
  static std::unique_ptr<::test_protocols::WithErrorSyntaxErrorAsEnumResult> ToNatural(::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult> src);
  static ::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocols::WithErrorSyntaxErrorAsEnumResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult> {
  using type = ::test_protocols::WithErrorSyntaxErrorAsEnumResult;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxErrorAsEnumResult> {
  using type = ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::WithErrorSyntaxHandleInResultResult, ::test_protocols::WithErrorSyntaxHandleInResultResult> {
  static ::test_protocols::WithErrorSyntaxHandleInResultResult ToNatural(::test_protocols::wire::WithErrorSyntaxHandleInResultResult src);
  static ::test_protocols::wire::WithErrorSyntaxHandleInResultResult ToWire(fidl::AnyArena& arena, ::test_protocols::WithErrorSyntaxHandleInResultResult src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxHandleInResultResult>, std::unique_ptr<::test_protocols::WithErrorSyntaxHandleInResultResult>> {
  static std::unique_ptr<::test_protocols::WithErrorSyntaxHandleInResultResult> ToNatural(::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxHandleInResultResult> src);
  static ::fidl::WireOptional<::test_protocols::wire::WithErrorSyntaxHandleInResultResult> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocols::WithErrorSyntaxHandleInResultResult> src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::WithErrorSyntaxHandleInResultResult> {
  using type = ::test_protocols::WithErrorSyntaxHandleInResultResult;
};
template <>
struct WireTypeForNaturalType<::test_protocols::WithErrorSyntaxHandleInResultResult> {
  using type = ::test_protocols::wire::WithErrorSyntaxHandleInResultResult;
};

#endif  // __Fuchsia__

template <>
struct WireNaturalConversionTraits<::test_protocols::wire::TheUnion, ::test_protocols::TheUnion> {
  static ::test_protocols::TheUnion ToNatural(::test_protocols::wire::TheUnion src);
  static ::test_protocols::wire::TheUnion ToWire(fidl::AnyArena& arena, ::test_protocols::TheUnion src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_protocols::wire::TheUnion>, std::unique_ptr<::test_protocols::TheUnion>> {
  static std::unique_ptr<::test_protocols::TheUnion> ToNatural(::fidl::WireOptional<::test_protocols::wire::TheUnion> src);
  static ::fidl::WireOptional<::test_protocols::wire::TheUnion> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_protocols::TheUnion> src);
};

template <>
struct NaturalTypeForWireType<::test_protocols::wire::TheUnion> {
  using type = ::test_protocols::TheUnion;
};
template <>
struct WireTypeForNaturalType<::test_protocols::TheUnion> {
  using type = ::test_protocols::wire::TheUnion;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse>, ::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse>> {
  static ::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse> ToNatural(::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse> src);
  static ::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse>> {
  using type = ::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse>> {
  using type = ::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::NoRequestWithResponse>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse>, ::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse>> {
  static ::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse> ToNatural(::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse> src);
  static ::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse>> {
  using type = ::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse>> {
  using type = ::fidl::WireResponse<::test_protocols::WithAndWithoutRequestResponse::WithRequestWithResponse>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::WithErrorSyntax::ResponseAsStruct>, ::fidl::Response<::test_protocols::WithErrorSyntax::ResponseAsStruct>> {
  static ::fidl::Response<::test_protocols::WithErrorSyntax::ResponseAsStruct> ToNatural(::fidl::WireResponse<::test_protocols::WithErrorSyntax::ResponseAsStruct> src);
  static ::fidl::WireResponse<::test_protocols::WithErrorSyntax::ResponseAsStruct> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::WithErrorSyntax::ResponseAsStruct> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::WithErrorSyntax::ResponseAsStruct>> {
  using type = ::fidl::Response<::test_protocols::WithErrorSyntax::ResponseAsStruct>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::WithErrorSyntax::ResponseAsStruct>> {
  using type = ::fidl::WireResponse<::test_protocols::WithErrorSyntax::ResponseAsStruct>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsPrimitive>, ::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsPrimitive>> {
  static ::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsPrimitive> ToNatural(::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsPrimitive> src);
  static ::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsPrimitive> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsPrimitive> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsPrimitive>> {
  using type = ::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsPrimitive>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsPrimitive>> {
  using type = ::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsPrimitive>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsEnum>, ::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsEnum>> {
  static ::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsEnum> ToNatural(::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsEnum> src);
  static ::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsEnum> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsEnum> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsEnum>> {
  using type = ::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsEnum>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::WithErrorSyntax::ErrorAsEnum>> {
  using type = ::fidl::WireResponse<::test_protocols::WithErrorSyntax::ErrorAsEnum>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::WithErrorSyntax::HandleInResult>, ::fidl::Response<::test_protocols::WithErrorSyntax::HandleInResult>> {
  static ::fidl::Response<::test_protocols::WithErrorSyntax::HandleInResult> ToNatural(::fidl::WireResponse<::test_protocols::WithErrorSyntax::HandleInResult> src);
  static ::fidl::WireResponse<::test_protocols::WithErrorSyntax::HandleInResult> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::WithErrorSyntax::HandleInResult> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::WithErrorSyntax::HandleInResult>> {
  using type = ::fidl::Response<::test_protocols::WithErrorSyntax::HandleInResult>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::WithErrorSyntax::HandleInResult>> {
  using type = ::fidl::WireResponse<::test_protocols::WithErrorSyntax::HandleInResult>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::ChannelProtocol::MethodB>, ::fidl::Response<::test_protocols::ChannelProtocol::MethodB>> {
  static ::fidl::Response<::test_protocols::ChannelProtocol::MethodB> ToNatural(::fidl::WireResponse<::test_protocols::ChannelProtocol::MethodB> src);
  static ::fidl::WireResponse<::test_protocols::ChannelProtocol::MethodB> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::ChannelProtocol::MethodB> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::ChannelProtocol::MethodB>> {
  using type = ::fidl::Response<::test_protocols::ChannelProtocol::MethodB>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::ChannelProtocol::MethodB>> {
  using type = ::fidl::WireResponse<::test_protocols::ChannelProtocol::MethodB>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::ChannelProtocol::MutateSocket>, ::fidl::Response<::test_protocols::ChannelProtocol::MutateSocket>> {
  static ::fidl::Response<::test_protocols::ChannelProtocol::MutateSocket> ToNatural(::fidl::WireResponse<::test_protocols::ChannelProtocol::MutateSocket> src);
  static ::fidl::WireResponse<::test_protocols::ChannelProtocol::MutateSocket> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::ChannelProtocol::MutateSocket> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::ChannelProtocol::MutateSocket>> {
  using type = ::fidl::Response<::test_protocols::ChannelProtocol::MutateSocket>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::ChannelProtocol::MutateSocket>> {
  using type = ::fidl::WireResponse<::test_protocols::ChannelProtocol::MutateSocket>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::Transitional::Request>, ::fidl::Response<::test_protocols::Transitional::Request>> {
  static ::fidl::Response<::test_protocols::Transitional::Request> ToNatural(::fidl::WireResponse<::test_protocols::Transitional::Request> src);
  static ::fidl::WireResponse<::test_protocols::Transitional::Request> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::Transitional::Request> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::Transitional::Request>> {
  using type = ::fidl::Response<::test_protocols::Transitional::Request>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::Transitional::Request>> {
  using type = ::fidl::WireResponse<::test_protocols::Transitional::Request>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::HandleRightsProtocol::ResponseMethod>, ::fidl::Response<::test_protocols::HandleRightsProtocol::ResponseMethod>> {
  static ::fidl::Response<::test_protocols::HandleRightsProtocol::ResponseMethod> ToNatural(::fidl::WireResponse<::test_protocols::HandleRightsProtocol::ResponseMethod> src);
  static ::fidl::WireResponse<::test_protocols::HandleRightsProtocol::ResponseMethod> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::HandleRightsProtocol::ResponseMethod> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::HandleRightsProtocol::ResponseMethod>> {
  using type = ::fidl::Response<::test_protocols::HandleRightsProtocol::ResponseMethod>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::HandleRightsProtocol::ResponseMethod>> {
  using type = ::fidl::WireResponse<::test_protocols::HandleRightsProtocol::ResponseMethod>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::WithProtocolEnds::ClientEnds>, ::fidl::Response<::test_protocols::WithProtocolEnds::ClientEnds>> {
  static ::fidl::Response<::test_protocols::WithProtocolEnds::ClientEnds> ToNatural(::fidl::WireResponse<::test_protocols::WithProtocolEnds::ClientEnds> src);
  static ::fidl::WireResponse<::test_protocols::WithProtocolEnds::ClientEnds> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::WithProtocolEnds::ClientEnds> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::WithProtocolEnds::ClientEnds>> {
  using type = ::fidl::Response<::test_protocols::WithProtocolEnds::ClientEnds>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::WithProtocolEnds::ClientEnds>> {
  using type = ::fidl::WireResponse<::test_protocols::WithProtocolEnds::ClientEnds>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::WithProtocolEnds::ServerEnds>, ::fidl::Response<::test_protocols::WithProtocolEnds::ServerEnds>> {
  static ::fidl::Response<::test_protocols::WithProtocolEnds::ServerEnds> ToNatural(::fidl::WireResponse<::test_protocols::WithProtocolEnds::ServerEnds> src);
  static ::fidl::WireResponse<::test_protocols::WithProtocolEnds::ServerEnds> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::WithProtocolEnds::ServerEnds> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::WithProtocolEnds::ServerEnds>> {
  using type = ::fidl::Response<::test_protocols::WithProtocolEnds::ServerEnds>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::WithProtocolEnds::ServerEnds>> {
  using type = ::fidl::WireResponse<::test_protocols::WithProtocolEnds::ServerEnds>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::WithProtocolEnds::StructContainingEnds>, ::fidl::Response<::test_protocols::WithProtocolEnds::StructContainingEnds>> {
  static ::fidl::Response<::test_protocols::WithProtocolEnds::StructContainingEnds> ToNatural(::fidl::WireResponse<::test_protocols::WithProtocolEnds::StructContainingEnds> src);
  static ::fidl::WireResponse<::test_protocols::WithProtocolEnds::StructContainingEnds> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::WithProtocolEnds::StructContainingEnds> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::WithProtocolEnds::StructContainingEnds>> {
  using type = ::fidl::Response<::test_protocols::WithProtocolEnds::StructContainingEnds>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::WithProtocolEnds::StructContainingEnds>> {
  using type = ::fidl::WireResponse<::test_protocols::WithProtocolEnds::StructContainingEnds>;
};

template <>
struct WireNaturalConversionTraits<::fidl::WireResponse<::test_protocols::MethodWithUnion::UnionMethod>, ::fidl::Response<::test_protocols::MethodWithUnion::UnionMethod>> {
  static ::fidl::Response<::test_protocols::MethodWithUnion::UnionMethod> ToNatural(::fidl::WireResponse<::test_protocols::MethodWithUnion::UnionMethod> src);
  static ::fidl::WireResponse<::test_protocols::MethodWithUnion::UnionMethod> ToWire(fidl::AnyArena& arena, ::fidl::Response<::test_protocols::MethodWithUnion::UnionMethod> src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<::test_protocols::MethodWithUnion::UnionMethod>> {
  using type = ::fidl::Response<::test_protocols::MethodWithUnion::UnionMethod>;
};
template <>
struct WireTypeForNaturalType<::fidl::Response<::test_protocols::MethodWithUnion::UnionMethod>> {
  using type = ::fidl::WireResponse<::test_protocols::MethodWithUnion::UnionMethod>;
};

#endif  // __Fuchsia__
#pragma clang diagnostic pop

}  // namespace internal
}  // namespace fidl
