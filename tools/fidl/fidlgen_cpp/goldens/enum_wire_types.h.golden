// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <lib/fidl/cpp/wire/array.h>
#include <lib/fidl/cpp/wire/envelope.h>
#include <lib/fidl/cpp/wire/internal/transport_err.h>
#include <lib/fidl/cpp/wire/message.h>
#include <lib/fidl/cpp/wire/message_storage.h>
#include <lib/fidl/cpp/wire/object_view.h>
#include <lib/fidl/cpp/wire/string_view.h>
#include <lib/fidl/cpp/wire/traits.h>
#include <lib/fidl/cpp/wire/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/test.enum/cpp/common_types.h>
#include <fidl/test.enum/cpp/markers.h>

namespace test_enum {

namespace wire {
using MyStrictEnum = ::test_enum::MyStrictEnum;

using MyFlexibleEnum = ::test_enum::MyFlexibleEnum;

using MyFlexibleEnumWithCustomUnknown = ::test_enum::MyFlexibleEnumWithCustomUnknown;

using MyEmptyFlexibleEnum = ::test_enum::MyEmptyFlexibleEnum;

}  // namespace wire
}  // namespace test_enum
namespace fidl {

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_enum::wire::MyStrictEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = sizeof(uint32_t);
  static constexpr bool is_memcpy_compatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_enum::wire::MyStrictEnum* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    switch (*value) {
      case ::test_enum::wire::MyStrictEnum::kFoo:
      case ::test_enum::wire::MyStrictEnum::kBar:
        break;
      default:
        encoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
        return;
    }
    *position.As<::test_enum::wire::MyStrictEnum>() = *value;
  }
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    [[maybe_unused]] ::test_enum::wire::MyStrictEnum value = *position.As<::test_enum::wire::MyStrictEnum>();
    switch (value) {
      case ::test_enum::wire::MyStrictEnum::kFoo:
      case ::test_enum::wire::MyStrictEnum::kBar:
        break;
      default:
        decoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
        return;
    }
  }
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = sizeof(uint32_t);
  static constexpr bool is_memcpy_compatible = true;

  static void Encode(internal::WireEncoder* encoder, ::test_enum::wire::MyFlexibleEnum* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<::test_enum::wire::MyFlexibleEnum>() = *value;
  }
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnumWithCustomUnknown, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = sizeof(uint32_t);
  static constexpr bool is_memcpy_compatible = true;

  static void Encode(internal::WireEncoder* encoder, ::test_enum::wire::MyFlexibleEnumWithCustomUnknown* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<::test_enum::wire::MyFlexibleEnumWithCustomUnknown>() = *value;
  }
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_enum::wire::MyEmptyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = sizeof(uint32_t);
  static constexpr bool is_memcpy_compatible = true;

  static void Encode(internal::WireEncoder* encoder, ::test_enum::wire::MyEmptyFlexibleEnum* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<::test_enum::wire::MyEmptyFlexibleEnum>() = *value;
  }
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

}  // namespace fidl
