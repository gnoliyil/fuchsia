// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.emptystruct/cpp/markers.h>
#include <fidl/test.emptystruct/cpp/natural_types.h>
#include <fidl/test.emptystruct/cpp/wire_messaging.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/thenable.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <lib/fidl/cpp/wire/unknown_interaction_handler.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {

}  // namespace fidl

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_emptystruct::EmptyProtocol::Send> {
  using Request = ::test_emptystruct::EmptyProtocolSendRequest;

  using Completer = fidl::Completer<>;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_emptystruct::EmptyProtocol::Receive> {
  using Request = ::test_emptystruct::EmptyProtocolReceiveRequest;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<::test_emptystruct::EmptyProtocol::SendAndReceive> {
  using Request = ::test_emptystruct::EmptyProtocolSendAndReceiveRequest;

  using Response = ::test_emptystruct::EmptyProtocolSendAndReceiveResponse;

  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_emptystruct::EmptyProtocol::SendAndReceive>>;
  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_emptystruct::EmptyProtocol::SendAndReceive>&)>;
};
namespace test_emptystruct {
__LOCAL extern "C" const fidl_type_t test_emptystruct_EmptyProtocolSendRequestTable;

__LOCAL extern "C" const fidl_type_t test_emptystruct_EmptyProtocolReceiveRequestTable;

__LOCAL extern "C" const fidl_type_t test_emptystruct_EmptyProtocolSendAndReceiveRequestTable;

__LOCAL extern "C" const fidl_type_t test_emptystruct_EmptyProtocolSendAndReceiveResponseTable;

#ifdef __Fuchsia__
}  // namespace test_emptystruct

template <>
class ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive> final : public ::test_emptystruct::EmptyProtocolSendAndReceiveResponse {
 public:
  using ::test_emptystruct::EmptyProtocolSendAndReceiveResponse::EmptyProtocolSendAndReceiveResponse;
  Response(::test_emptystruct::EmptyProtocolSendAndReceiveResponse v) : EmptyProtocolSendAndReceiveResponse(std::move(v)) {}
};
namespace test_emptystruct {
}  // namespace test_emptystruct

template <>
class ::fidl::Result<::test_emptystruct::EmptyProtocol::SendAndReceive> final : public ::fit::result<::fidl::Error, ::test_emptystruct::EmptyProtocolSendAndReceiveResponse> {
 public:
  using ::fit::result<::fidl::Error, ::test_emptystruct::EmptyProtocolSendAndReceiveResponse>::result;

 protected:
  Result() = default;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol> final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fidl::internal::NaturalThenable<::test_emptystruct::EmptyProtocol::SendAndReceive> SendAndReceive(const ::fidl::Request<::test_emptystruct::EmptyProtocol::SendAndReceive>& request) const;

  ::fit::result<::fidl::OneWayError> Send(const ::fidl::Request<::test_emptystruct::EmptyProtocol::Send>& request) const;
};
namespace test_emptystruct {

#endif  // __Fuchsia__

}  // namespace test_emptystruct

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalSyncClientImpl<::test_emptystruct::EmptyProtocol> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalSyncClientImpl<::test_emptystruct::EmptyProtocol>> {
 public:
  ::fidl::Result<::test_emptystruct::EmptyProtocol::SendAndReceive> SendAndReceive(const ::fidl::Request<::test_emptystruct::EmptyProtocol::SendAndReceive>& request);

  ::fit::result<::fidl::OneWayError> Send(const ::fidl::Request<::test_emptystruct::EmptyProtocol::Send>& request);

 private:
  ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<::test_emptystruct::EmptyProtocol> : public ::fidl::internal::BaseEventHandlerInterface {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
  virtual void Receive(::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>&) = 0;
};

template <>
class ::fidl::AsyncEventHandler<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_emptystruct::EmptyProtocol>, public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
  void Receive(::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>&) override {}
};

template <>
class ::fidl::SyncEventHandler<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_emptystruct::EmptyProtocol>, public ::fidl::internal::SyncEventHandler {
 public:
  SyncEventHandler() = default;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method.
  ::fidl::Status HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> client_end);
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_emptystruct::EmptyProtocol> final : public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::NaturalEventHandlerInterface<::test_emptystruct::EmptyProtocol>> {
 public:
  explicit NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_emptystruct::EmptyProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
  ::fidl::Status DispatchEvent(
      ::fidl::IncomingHeaderAndMessage& msg,
      internal::MessageStorageViewBase* storage_view) override;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<::test_emptystruct::EmptyProtocol> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

  ::fit::result<::fidl::OneWayError> Receive(const ::test_emptystruct::EmptyProtocolReceiveRequest& payload);
};

template <>
class ::fidl::internal::NaturalEventSender<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalEventSender<::test_emptystruct::EmptyProtocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

  ::fit::result<::fidl::OneWayError> Receive(const ::test_emptystruct::EmptyProtocolReceiveRequest& payload);
};

#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<::test_emptystruct::EmptyProtocol::SendAndReceive> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::Server<::test_emptystruct::EmptyProtocol> : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_emptystruct::EmptyProtocol;

  using Handler = fidl::ProtocolHandler<::test_emptystruct::EmptyProtocol>;

  using SendRequest = ::fidl::Request<::test_emptystruct::EmptyProtocol::Send>;
  using SendCompleter = ::fidl::internal::NaturalCompleter<::test_emptystruct::EmptyProtocol::Send>;

  virtual void Send(SendRequest& request,
                    SendCompleter::Sync& completer) = 0;

  using SendAndReceiveRequest = ::fidl::Request<::test_emptystruct::EmptyProtocol::SendAndReceive>;
  using SendAndReceiveCompleter = ::fidl::internal::NaturalCompleter<::test_emptystruct::EmptyProtocol::SendAndReceive>;

  virtual void SendAndReceive(SendAndReceiveRequest& request,
                              SendAndReceiveCompleter::Sync& completer) = 0;

  // |bind_handler| returns a handler that binds incoming connections to this
  // server implementation.
  //
  // The returned handler borrows the server instance.
  // The server must outlive the provided |dispatcher|. Only after
  // the dispatcher is shutdown will it be safe to destroy the servers.
  // The server should not be moved.
  Handler bind_handler(async_dispatcher_t* dispatcher) {
    return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_emptystruct::EmptyProtocol> request) {
      (void)::fidl::BindServer(dispatcher, std::move(request), impl);
    };
  }

 private:
  void dispatch_message(
      ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::MessageStorageViewBase* storage_view) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<::test_emptystruct::EmptyProtocol> final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_emptystruct::EmptyProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static constexpr const ::fidl::internal::UnknownMethodHandlerEntry& unknown_method_handler_entry_ =
      ::fidl::internal::UnknownMethodHandlerEntry::kClosedProtocolHandlerEntry;
};

#endif  // __Fuchsia__

#pragma clang diagnostic pop
