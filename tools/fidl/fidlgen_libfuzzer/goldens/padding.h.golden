// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <test/padding/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using Padding1ByteEnd = ::test::padding::Padding1ByteEnd;
using Padding2ByteEnd = ::test::padding::Padding2ByteEnd;
using Padding3ByteEnd = ::test::padding::Padding3ByteEnd;
using Padding4ByteEnd = ::test::padding::Padding4ByteEnd;
using Padding5ByteEnd = ::test::padding::Padding5ByteEnd;
using Padding6ByteEnd = ::test::padding::Padding6ByteEnd;
using Padding7ByteEnd = ::test::padding::Padding7ByteEnd;
using Padding1ByteMiddle = ::test::padding::Padding1ByteMiddle;
using Padding2ByteMiddle = ::test::padding::Padding2ByteMiddle;
using Padding3ByteMiddle = ::test::padding::Padding3ByteMiddle;
using Padding4ByteMiddle = ::test::padding::Padding4ByteMiddle;
using Padding5ByteMiddle = ::test::padding::Padding5ByteMiddle;
using Padding6ByteMiddle = ::test::padding::Padding6ByteMiddle;
using Padding7ByteMiddle = ::test::padding::Padding7ByteMiddle;
using Padding4ByteAlignmentLength12 = ::test::padding::Padding4ByteAlignmentLength12;
using Padding2ByteAlignmentLength6 = ::test::padding::Padding2ByteAlignmentLength6;

template <>
struct MinSize<Padding1ByteEnd> {
  operator size_t() {
    return MinSize<uint16_t>() + MinSize<uint8_t>();
  }
};
template <>
struct Allocate<Padding1ByteEnd> {
  Padding1ByteEnd operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding1ByteEnd>());
    Padding1ByteEnd out;
    const size_t slack_per_member = (*size - MinSize<Padding1ByteEnd>()) / 2;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.a = Allocate<uint16_t>{}(src, &out_size);
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.b = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding2ByteEnd> {
  operator size_t() {
    return MinSize<uint32_t>() + MinSize<uint16_t>();
  }
};
template <>
struct Allocate<Padding2ByteEnd> {
  Padding2ByteEnd operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding2ByteEnd>());
    Padding2ByteEnd out;
    const size_t slack_per_member = (*size - MinSize<Padding2ByteEnd>()) / 2;
    size_t out_size;
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.a = Allocate<uint32_t>{}(src, &out_size);
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.b = Allocate<uint16_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding3ByteEnd> {
  operator size_t() {
    return MinSize<uint32_t>() + MinSize<uint8_t>();
  }
};
template <>
struct Allocate<Padding3ByteEnd> {
  Padding3ByteEnd operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding3ByteEnd>());
    Padding3ByteEnd out;
    const size_t slack_per_member = (*size - MinSize<Padding3ByteEnd>()) / 2;
    size_t out_size;
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.a = Allocate<uint32_t>{}(src, &out_size);
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.b = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding4ByteEnd> {
  operator size_t() {
    return MinSize<uint64_t>() + MinSize<uint32_t>();
  }
};
template <>
struct Allocate<Padding4ByteEnd> {
  Padding4ByteEnd operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding4ByteEnd>());
    Padding4ByteEnd out;
    const size_t slack_per_member = (*size - MinSize<Padding4ByteEnd>()) / 2;
    size_t out_size;
    out_size = MinSize<uint64_t>() + slack_per_member;
    out.a = Allocate<uint64_t>{}(src, &out_size);
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.b = Allocate<uint32_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding5ByteEnd> {
  operator size_t() {
    return MinSize<uint64_t>() + MinSize<uint16_t>() + MinSize<uint8_t>();
  }
};
template <>
struct Allocate<Padding5ByteEnd> {
  Padding5ByteEnd operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding5ByteEnd>());
    Padding5ByteEnd out;
    const size_t slack_per_member = (*size - MinSize<Padding5ByteEnd>()) / 3;
    size_t out_size;
    out_size = MinSize<uint64_t>() + slack_per_member;
    out.a = Allocate<uint64_t>{}(src, &out_size);
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.b = Allocate<uint16_t>{}(src, &out_size);
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.c = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding6ByteEnd> {
  operator size_t() {
    return MinSize<uint64_t>() + MinSize<uint16_t>();
  }
};
template <>
struct Allocate<Padding6ByteEnd> {
  Padding6ByteEnd operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding6ByteEnd>());
    Padding6ByteEnd out;
    const size_t slack_per_member = (*size - MinSize<Padding6ByteEnd>()) / 2;
    size_t out_size;
    out_size = MinSize<uint64_t>() + slack_per_member;
    out.a = Allocate<uint64_t>{}(src, &out_size);
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.b = Allocate<uint16_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding7ByteEnd> {
  operator size_t() {
    return MinSize<uint64_t>() + MinSize<uint8_t>();
  }
};
template <>
struct Allocate<Padding7ByteEnd> {
  Padding7ByteEnd operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding7ByteEnd>());
    Padding7ByteEnd out;
    const size_t slack_per_member = (*size - MinSize<Padding7ByteEnd>()) / 2;
    size_t out_size;
    out_size = MinSize<uint64_t>() + slack_per_member;
    out.a = Allocate<uint64_t>{}(src, &out_size);
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.b = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding1ByteMiddle> {
  operator size_t() {
    return MinSize<uint8_t>() + MinSize<uint16_t>();
  }
};
template <>
struct Allocate<Padding1ByteMiddle> {
  Padding1ByteMiddle operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding1ByteMiddle>());
    Padding1ByteMiddle out;
    const size_t slack_per_member = (*size - MinSize<Padding1ByteMiddle>()) / 2;
    size_t out_size;
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.a = Allocate<uint8_t>{}(src, &out_size);
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.b = Allocate<uint16_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding2ByteMiddle> {
  operator size_t() {
    return MinSize<uint16_t>() + MinSize<uint32_t>();
  }
};
template <>
struct Allocate<Padding2ByteMiddle> {
  Padding2ByteMiddle operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding2ByteMiddle>());
    Padding2ByteMiddle out;
    const size_t slack_per_member = (*size - MinSize<Padding2ByteMiddle>()) / 2;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.a = Allocate<uint16_t>{}(src, &out_size);
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.b = Allocate<uint32_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding3ByteMiddle> {
  operator size_t() {
    return MinSize<uint8_t>() + MinSize<uint32_t>();
  }
};
template <>
struct Allocate<Padding3ByteMiddle> {
  Padding3ByteMiddle operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding3ByteMiddle>());
    Padding3ByteMiddle out;
    const size_t slack_per_member = (*size - MinSize<Padding3ByteMiddle>()) / 2;
    size_t out_size;
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.a = Allocate<uint8_t>{}(src, &out_size);
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.b = Allocate<uint32_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding4ByteMiddle> {
  operator size_t() {
    return MinSize<uint32_t>() + MinSize<uint64_t>();
  }
};
template <>
struct Allocate<Padding4ByteMiddle> {
  Padding4ByteMiddle operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding4ByteMiddle>());
    Padding4ByteMiddle out;
    const size_t slack_per_member = (*size - MinSize<Padding4ByteMiddle>()) / 2;
    size_t out_size;
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.a = Allocate<uint32_t>{}(src, &out_size);
    out_size = MinSize<uint64_t>() + slack_per_member;
    out.b = Allocate<uint64_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding5ByteMiddle> {
  operator size_t() {
    return MinSize<uint16_t>() + MinSize<uint8_t>() + MinSize<uint64_t>();
  }
};
template <>
struct Allocate<Padding5ByteMiddle> {
  Padding5ByteMiddle operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding5ByteMiddle>());
    Padding5ByteMiddle out;
    const size_t slack_per_member = (*size - MinSize<Padding5ByteMiddle>()) / 3;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.a = Allocate<uint16_t>{}(src, &out_size);
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.b = Allocate<uint8_t>{}(src, &out_size);
    out_size = MinSize<uint64_t>() + slack_per_member;
    out.c = Allocate<uint64_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding6ByteMiddle> {
  operator size_t() {
    return MinSize<uint16_t>() + MinSize<uint64_t>();
  }
};
template <>
struct Allocate<Padding6ByteMiddle> {
  Padding6ByteMiddle operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding6ByteMiddle>());
    Padding6ByteMiddle out;
    const size_t slack_per_member = (*size - MinSize<Padding6ByteMiddle>()) / 2;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.a = Allocate<uint16_t>{}(src, &out_size);
    out_size = MinSize<uint64_t>() + slack_per_member;
    out.b = Allocate<uint64_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding7ByteMiddle> {
  operator size_t() {
    return MinSize<uint8_t>() + MinSize<uint64_t>();
  }
};
template <>
struct Allocate<Padding7ByteMiddle> {
  Padding7ByteMiddle operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding7ByteMiddle>());
    Padding7ByteMiddle out;
    const size_t slack_per_member = (*size - MinSize<Padding7ByteMiddle>()) / 2;
    size_t out_size;
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.a = Allocate<uint8_t>{}(src, &out_size);
    out_size = MinSize<uint64_t>() + slack_per_member;
    out.b = Allocate<uint64_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding4ByteAlignmentLength12> {
  operator size_t() {
    return MinSize<uint32_t>() + MinSize<uint8_t>() + MinSize<uint16_t>() + MinSize<uint16_t>();
  }
};
template <>
struct Allocate<Padding4ByteAlignmentLength12> {
  Padding4ByteAlignmentLength12 operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding4ByteAlignmentLength12>());
    Padding4ByteAlignmentLength12 out;
    const size_t slack_per_member = (*size - MinSize<Padding4ByteAlignmentLength12>()) / 4;
    size_t out_size;
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.a = Allocate<uint32_t>{}(src, &out_size);
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.b = Allocate<uint8_t>{}(src, &out_size);
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.c = Allocate<uint16_t>{}(src, &out_size);
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.d = Allocate<uint16_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Padding2ByteAlignmentLength6> {
  operator size_t() {
    return MinSize<uint8_t>() + MinSize<uint16_t>() + MinSize<uint8_t>();
  }
};
template <>
struct Allocate<Padding2ByteAlignmentLength6> {
  Padding2ByteAlignmentLength6 operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Padding2ByteAlignmentLength6>());
    Padding2ByteAlignmentLength6 out;
    const size_t slack_per_member = (*size - MinSize<Padding2ByteAlignmentLength6>()) / 3;
    size_t out_size;
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.a = Allocate<uint8_t>{}(src, &out_size);
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.b = Allocate<uint16_t>{}(src, &out_size);
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.c = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};

}  // namespace fuzzing
