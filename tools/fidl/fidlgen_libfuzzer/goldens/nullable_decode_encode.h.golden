// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions

#pragma once

#include <fidl/test.nullable/cpp/wire.h>

// For ::fidl::fuzzing::DecoderEncoderImpl.
#include <lib/fidl/cpp/fuzzing/decoder_encoder.h>

namespace fuzzing {

inline constexpr ::std::array<::fidl::fuzzing::DecoderEncoderForType, 20>
    test_nullable_decoder_encoders = {
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::StructWithNullableString",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableString, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::StructWithNullableString as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableString, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::StructWithNullableVector",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableVector, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::StructWithNullableVector as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableVector, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::StructWithNullableHandle",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableHandle, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::StructWithNullableHandle as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableHandle, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::SimpleProtocolAddRequest",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::SimpleProtocolAddRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::SimpleProtocolAddRequest as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::SimpleProtocolAddRequest, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::SimpleProtocolAddResponse",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::SimpleProtocolAddResponse, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::SimpleProtocolAddResponse as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::SimpleProtocolAddResponse, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::StructWithNullableProtocol",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableProtocol, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::StructWithNullableProtocol as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableProtocol, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::StructWithNullableRequest",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::StructWithNullableRequest as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableRequest, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::Int32Wrapper",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::Int32Wrapper, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::Int32Wrapper as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::Int32Wrapper, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::StructWithNullableStruct",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableStruct, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::StructWithNullableStruct as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableStruct, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_nullable::wire::StructWithNullableUnion",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableUnion, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_nullable::wire::StructWithNullableUnion as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_nullable::wire::StructWithNullableUnion, true>,
        },
};

}  // namespace fuzzing
