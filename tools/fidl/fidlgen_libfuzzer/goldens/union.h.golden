// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#pragma once

#include <test/union/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using Pizza = ::test::union_::Pizza;
using Pasta = ::test::union_::Pasta;
using PizzaOrPasta = ::test::union_::PizzaOrPasta;
using ExplicitPizzaOrPasta = ::test::union_::ExplicitPizzaOrPasta;
using FlexiblePizzaOrPasta = ::test::union_::FlexiblePizzaOrPasta;
using StrictPizzaOrPasta = ::test::union_::StrictPizzaOrPasta;
using Union = ::test::union_::Union;
using FlexibleUnion = ::test::union_::FlexibleUnion;
using StrictUnion = ::test::union_::StrictUnion;
using FieldCollision = ::test::union_::FieldCollision;
using ExplicitUnion = ::test::union_::ExplicitUnion;
using ReverseOrdinalUnion = ::test::union_::ReverseOrdinalUnion;
using NullableUnionStruct = ::test::union_::NullableUnionStruct;
using FlexibleFoo = ::test::union_::FlexibleFoo;
using StrictFoo = ::test::union_::StrictFoo;
using ExplicitFoo = ::test::union_::ExplicitFoo;
using ExplicitStrictFoo = ::test::union_::ExplicitStrictFoo;
using OlderSimpleUnion = ::test::union_::OlderSimpleUnion;
using NewerSimpleUnion = ::test::union_::NewerSimpleUnion;
using StrictSimpleUnion = ::test::union_::StrictSimpleUnion;
using Empty = ::test::union_::Empty;
using UnionContainingEmptyStruct = ::test::union_::UnionContainingEmptyStruct;
using StrictBoundedUnion = ::test::union_::StrictBoundedUnion;
using TestProtocolStrictUnionHenceResponseMayBeStackAllocatedResponse = ::test::union_::TestProtocolStrictUnionHenceResponseMayBeStackAllocatedResponse;
using TestProtocolFlexibleUnionHenceResponseMustBeHeapAllocatedResponse = ::test::union_::TestProtocolFlexibleUnionHenceResponseMustBeHeapAllocatedResponse;
using StructWithNullableUnion = ::test::union_::StructWithNullableUnion;
using ExplicitFlexibleUnion = ::test::union_::ExplicitFlexibleUnion;
using UnionSandwich = ::test::union_::UnionSandwich;
using UnionWithAttributes = ::test::union_::UnionWithAttributes;
using EmptyFlexibleUnion = ::test::union_::EmptyFlexibleUnion;
using OnlyReservedFlexibleUnion = ::test::union_::OnlyReservedFlexibleUnion;

template <>
struct MinSize<Pizza> {
  operator size_t() {
    return MinSize<::std::vector<::std::string>>();
  }
};
template <>
struct Allocate<Pizza> {
  Pizza operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Pizza>());
    Pizza out;
    const size_t slack_per_member = (*size - MinSize<Pizza>()) / 1;
    size_t out_size;
    out_size = MinSize<::std::vector<::std::string>>() + slack_per_member;
    out.toppings = Allocate<::std::vector<::std::string>>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Pasta> {
  operator size_t() {
    return MinSize<::std::string>();
  }
};
template <>
struct Allocate<Pasta> {
  Pasta operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Pasta>());
    Pasta out;
    const size_t slack_per_member = (*size - MinSize<Pasta>()) / 1;
    size_t out_size;
    out_size = MinSize<::std::string>() + slack_per_member;
    out.sauce = Allocate<::std::string>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<PizzaOrPasta> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::union_::Pizza>(), MinSize<::test::union_::Pasta>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<PizzaOrPasta> {
  static_assert(2 > 0, "xunion must have at least one member");

  PizzaOrPasta operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<PizzaOrPasta>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    PizzaOrPasta out;
    switch (selector % 2) {
      case 0: {
        out.set_pizza(Allocate<::test::union_::Pizza>{}(src, size));
        break;
      }
      case 1: {
        out.set_pasta(Allocate<::test::union_::Pasta>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ExplicitPizzaOrPasta> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::union_::Pizza>(), MinSize<::test::union_::Pasta>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ExplicitPizzaOrPasta> {
  static_assert(2 > 0, "xunion must have at least one member");

  ExplicitPizzaOrPasta operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ExplicitPizzaOrPasta>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ExplicitPizzaOrPasta out;
    switch (selector % 2) {
      case 0: {
        out.set_pizza(Allocate<::test::union_::Pizza>{}(src, size));
        break;
      }
      case 1: {
        out.set_pasta(Allocate<::test::union_::Pasta>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<FlexiblePizzaOrPasta> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::union_::Pizza>(), MinSize<::test::union_::Pasta>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<FlexiblePizzaOrPasta> {
  static_assert(2 > 0, "xunion must have at least one member");

  FlexiblePizzaOrPasta operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<FlexiblePizzaOrPasta>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    FlexiblePizzaOrPasta out;
    switch (selector % 2) {
      case 0: {
        out.set_pizza(Allocate<::test::union_::Pizza>{}(src, size));
        break;
      }
      case 1: {
        out.set_pasta(Allocate<::test::union_::Pasta>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<StrictPizzaOrPasta> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::union_::Pizza>(), MinSize<::test::union_::Pasta>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<StrictPizzaOrPasta> {
  static_assert(2 > 0, "xunion must have at least one member");

  StrictPizzaOrPasta operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<StrictPizzaOrPasta>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    StrictPizzaOrPasta out;
    switch (selector % 2) {
      case 0: {
        out.set_pizza(Allocate<::test::union_::Pizza>{}(src, size));
        break;
      }
      case 1: {
        out.set_pasta(Allocate<::test::union_::Pasta>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<Union> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int32_t>(), MinSize<::std::string>(), MinSize<::std::vector<::std::string>>()};
    return 1 + *std::max_element(sizes, sizes + 3 + 1);
  }
};
template <>
struct Allocate<Union> {
  static_assert(3 > 0, "xunion must have at least one member");

  Union operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Union>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    Union out;
    switch (selector % 3) {
      case 0: {
        out.set_Primitive(Allocate<int32_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_StringNeedsConstructor(Allocate<::std::string>{}(src, size));
        break;
      }
      case 2: {
        out.set_VectorStringAlsoNeedsConstructor(Allocate<::std::vector<::std::string>>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<FlexibleUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int32_t>(), MinSize<::std::string>(), MinSize<::std::vector<::std::string>>()};
    return 1 + *std::max_element(sizes, sizes + 3 + 1);
  }
};
template <>
struct Allocate<FlexibleUnion> {
  static_assert(3 > 0, "xunion must have at least one member");

  FlexibleUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<FlexibleUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    FlexibleUnion out;
    switch (selector % 3) {
      case 0: {
        out.set_Primitive(Allocate<int32_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_StringNeedsConstructor(Allocate<::std::string>{}(src, size));
        break;
      }
      case 2: {
        out.set_VectorStringAlsoNeedsConstructor(Allocate<::std::vector<::std::string>>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<StrictUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int32_t>(), MinSize<::std::string>(), MinSize<::std::vector<::std::string>>()};
    return 1 + *std::max_element(sizes, sizes + 3 + 1);
  }
};
template <>
struct Allocate<StrictUnion> {
  static_assert(3 > 0, "xunion must have at least one member");

  StrictUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<StrictUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    StrictUnion out;
    switch (selector % 3) {
      case 0: {
        out.set_Primitive(Allocate<int32_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_StringNeedsConstructor(Allocate<::std::string>{}(src, size));
        break;
      }
      case 2: {
        out.set_VectorStringAlsoNeedsConstructor(Allocate<::std::vector<::std::string>>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<FieldCollision> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int32_t>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<FieldCollision> {
  static_assert(1 > 0, "xunion must have at least one member");

  FieldCollision operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<FieldCollision>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    FieldCollision out;
    switch (selector % 1) {
      case 0: {
        out.set_field_collision_tag(Allocate<int32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ExplicitUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int32_t>(), MinSize<::std::string>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ExplicitUnion> {
  static_assert(2 > 0, "xunion must have at least one member");

  ExplicitUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ExplicitUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ExplicitUnion out;
    switch (selector % 2) {
      case 0: {
        out.set_Primitive(Allocate<int32_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_StringNeedsConstructor(Allocate<::std::string>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ReverseOrdinalUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<uint32_t>(), MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ReverseOrdinalUnion> {
  static_assert(2 > 0, "xunion must have at least one member");

  ReverseOrdinalUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ReverseOrdinalUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ReverseOrdinalUnion out;
    switch (selector % 2) {
      case 0: {
        out.set_first(Allocate<uint32_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_second(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<NullableUnionStruct> {
  operator size_t() {
    return MinSize<::std::unique_ptr<::test::union_::Union>>();
  }
};
template <>
struct Allocate<NullableUnionStruct> {
  NullableUnionStruct operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<NullableUnionStruct>());
    NullableUnionStruct out;
    const size_t slack_per_member = (*size - MinSize<NullableUnionStruct>()) / 1;
    size_t out_size;
    out_size = MinSize<::std::unique_ptr<::test::union_::Union>>() + slack_per_member;
    out.the_union = Allocate<::std::unique_ptr<::test::union_::Union>>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<FlexibleFoo> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::std::string>(), MinSize<int32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<FlexibleFoo> {
  static_assert(2 > 0, "xunion must have at least one member");

  FlexibleFoo operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<FlexibleFoo>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    FlexibleFoo out;
    switch (selector % 2) {
      case 0: {
        out.set_s(Allocate<::std::string>{}(src, size));
        break;
      }
      case 1: {
        out.set_i(Allocate<int32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<StrictFoo> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::std::string>(), MinSize<int32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<StrictFoo> {
  static_assert(2 > 0, "xunion must have at least one member");

  StrictFoo operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<StrictFoo>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    StrictFoo out;
    switch (selector % 2) {
      case 0: {
        out.set_s(Allocate<::std::string>{}(src, size));
        break;
      }
      case 1: {
        out.set_i(Allocate<int32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ExplicitFoo> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int32_t>(), MinSize<::std::string>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ExplicitFoo> {
  static_assert(2 > 0, "xunion must have at least one member");

  ExplicitFoo operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ExplicitFoo>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ExplicitFoo out;
    switch (selector % 2) {
      case 0: {
        out.set_i(Allocate<int32_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_s(Allocate<::std::string>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ExplicitStrictFoo> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int32_t>(), MinSize<::std::string>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ExplicitStrictFoo> {
  static_assert(2 > 0, "xunion must have at least one member");

  ExplicitStrictFoo operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ExplicitStrictFoo>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ExplicitStrictFoo out;
    switch (selector % 2) {
      case 0: {
        out.set_i(Allocate<int32_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_s(Allocate<::std::string>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<OlderSimpleUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int64_t>(), MinSize<float>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<OlderSimpleUnion> {
  static_assert(2 > 0, "xunion must have at least one member");

  OlderSimpleUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<OlderSimpleUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    OlderSimpleUnion out;
    switch (selector % 2) {
      case 0: {
        out.set_i(Allocate<int64_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_f(Allocate<float>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<NewerSimpleUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int64_t>(), MinSize<::std::string>(), MinSize<::std::vector<::std::string>>()};
    return 1 + *std::max_element(sizes, sizes + 3 + 1);
  }
};
template <>
struct Allocate<NewerSimpleUnion> {
  static_assert(3 > 0, "xunion must have at least one member");

  NewerSimpleUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<NewerSimpleUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    NewerSimpleUnion out;
    switch (selector % 3) {
      case 0: {
        out.set_i(Allocate<int64_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_s(Allocate<::std::string>{}(src, size));
        break;
      }
      case 2: {
        out.set_v(Allocate<::std::vector<::std::string>>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<StrictSimpleUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int32_t>(), MinSize<float>(), MinSize<::std::string>()};
    return 1 + *std::max_element(sizes, sizes + 3 + 1);
  }
};
template <>
struct Allocate<StrictSimpleUnion> {
  static_assert(3 > 0, "xunion must have at least one member");

  StrictSimpleUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<StrictSimpleUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    StrictSimpleUnion out;
    switch (selector % 3) {
      case 0: {
        out.set_i(Allocate<int32_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_f(Allocate<float>{}(src, size));
        break;
      }
      case 2: {
        out.set_s(Allocate<::std::string>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<Empty> {
  operator size_t() {
    return MinSize<uint8_t>();
  }
};
template <>
struct Allocate<Empty> {
  Empty operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Empty>());
    Empty out;
    const size_t slack_per_member = (*size - MinSize<Empty>()) / 1;
    size_t out_size;
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.__reserved = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<UnionContainingEmptyStruct> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::union_::Empty>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<UnionContainingEmptyStruct> {
  static_assert(1 > 0, "xunion must have at least one member");

  UnionContainingEmptyStruct operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<UnionContainingEmptyStruct>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    UnionContainingEmptyStruct out;
    switch (selector % 1) {
      case 0: {
        out.set_empty(Allocate<::test::union_::Empty>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<StrictBoundedUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::std::vector<uint8_t>>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<StrictBoundedUnion> {
  static_assert(1 > 0, "xunion must have at least one member");

  StrictBoundedUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<StrictBoundedUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    StrictBoundedUnion out;
    switch (selector % 1) {
      case 0: {
        out.set_v(Allocate<::std::vector<uint8_t>>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<TestProtocolStrictUnionHenceResponseMayBeStackAllocatedResponse> {
  operator size_t() {
    return MinSize<::test::union_::StrictBoundedUnion>();
  }
};
template <>
struct Allocate<TestProtocolStrictUnionHenceResponseMayBeStackAllocatedResponse> {
  TestProtocolStrictUnionHenceResponseMayBeStackAllocatedResponse operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<TestProtocolStrictUnionHenceResponseMayBeStackAllocatedResponse>());
    TestProtocolStrictUnionHenceResponseMayBeStackAllocatedResponse out;
    const size_t slack_per_member = (*size - MinSize<TestProtocolStrictUnionHenceResponseMayBeStackAllocatedResponse>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::union_::StrictBoundedUnion>() + slack_per_member;
    out.xu = Allocate<::test::union_::StrictBoundedUnion>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<TestProtocolFlexibleUnionHenceResponseMustBeHeapAllocatedResponse> {
  operator size_t() {
    return MinSize<::test::union_::OlderSimpleUnion>();
  }
};
template <>
struct Allocate<TestProtocolFlexibleUnionHenceResponseMustBeHeapAllocatedResponse> {
  TestProtocolFlexibleUnionHenceResponseMustBeHeapAllocatedResponse operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<TestProtocolFlexibleUnionHenceResponseMustBeHeapAllocatedResponse>());
    TestProtocolFlexibleUnionHenceResponseMustBeHeapAllocatedResponse out;
    const size_t slack_per_member = (*size - MinSize<TestProtocolFlexibleUnionHenceResponseMustBeHeapAllocatedResponse>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::union_::OlderSimpleUnion>() + slack_per_member;
    out.xu = Allocate<::test::union_::OlderSimpleUnion>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<StructWithNullableUnion> {
  operator size_t() {
    return MinSize<::std::unique_ptr<::test::union_::OlderSimpleUnion>>();
  }
};
template <>
struct Allocate<StructWithNullableUnion> {
  StructWithNullableUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<StructWithNullableUnion>());
    StructWithNullableUnion out;
    const size_t slack_per_member = (*size - MinSize<StructWithNullableUnion>()) / 1;
    size_t out_size;
    out_size = MinSize<::std::unique_ptr<::test::union_::OlderSimpleUnion>>() + slack_per_member;
    out.x1 = Allocate<::std::unique_ptr<::test::union_::OlderSimpleUnion>>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<ExplicitFlexibleUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int64_t>(), MinSize<float>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ExplicitFlexibleUnion> {
  static_assert(2 > 0, "xunion must have at least one member");

  ExplicitFlexibleUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ExplicitFlexibleUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ExplicitFlexibleUnion out;
    switch (selector % 2) {
      case 0: {
        out.set_i(Allocate<int64_t>{}(src, size));
        break;
      }
      case 1: {
        out.set_f(Allocate<float>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<UnionSandwich> {
  operator size_t() {
    return MinSize<uint32_t>() + MinSize<::test::union_::ExplicitFlexibleUnion>() + MinSize<uint32_t>();
  }
};
template <>
struct Allocate<UnionSandwich> {
  UnionSandwich operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<UnionSandwich>());
    UnionSandwich out;
    const size_t slack_per_member = (*size - MinSize<UnionSandwich>()) / 3;
    size_t out_size;
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.a = Allocate<uint32_t>{}(src, &out_size);
    out_size = MinSize<::test::union_::ExplicitFlexibleUnion>() + slack_per_member;
    out.u = Allocate<::test::union_::ExplicitFlexibleUnion>{}(src, &out_size);
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.b = Allocate<uint32_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<UnionWithAttributes> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int64_t>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<UnionWithAttributes> {
  static_assert(1 > 0, "xunion must have at least one member");

  UnionWithAttributes operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<UnionWithAttributes>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    UnionWithAttributes out;
    switch (selector % 1) {
      case 0: {
        out.set_x(Allocate<int64_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<EmptyFlexibleUnion> {
  operator size_t() {
    size_t sizes[] = {0};
    return 1 + *std::max_element(sizes, sizes + 0 + 1);
  }
};
template <>
struct Allocate<EmptyFlexibleUnion> {
  static_assert(0 > 0, "xunion must have at least one member");

  EmptyFlexibleUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<EmptyFlexibleUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    EmptyFlexibleUnion out;
    switch (selector % 0) {
    }

    return out;
  }
};
template <>
struct MinSize<OnlyReservedFlexibleUnion> {
  operator size_t() {
    size_t sizes[] = {0};
    return 1 + *std::max_element(sizes, sizes + 0 + 1);
  }
};
template <>
struct Allocate<OnlyReservedFlexibleUnion> {
  static_assert(0 > 0, "xunion must have at least one member");

  OnlyReservedFlexibleUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<OnlyReservedFlexibleUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    OnlyReservedFlexibleUnion out;
    switch (selector % 0) {
    }

    return out;
  }
};

}  // namespace fuzzing
