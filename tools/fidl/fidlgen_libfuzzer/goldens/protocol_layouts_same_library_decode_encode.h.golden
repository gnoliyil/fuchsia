// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#pragma once

#include <fidl/test.protocollayoutssamelibrary/cpp/wire.h>

// For ::fidl::fuzzing::DecoderEncoderImpl.
#include <lib/fidl/cpp/fuzzing/decoder_encoder.h>

namespace fuzzing {

inline constexpr ::std::array<::fidl::fuzzing::DecoderEncoderForType, 34>
    test_protocollayoutssamelibrary_decoder_encoders = {
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::TablePayload",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::TablePayload, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::TablePayload as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::TablePayload, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::ComposedProtocolOneWayAnonComposedRequest",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolOneWayAnonComposedRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::ComposedProtocolOneWayAnonComposedRequest as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolOneWayAnonComposedRequest, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedResponse",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedResponse, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedResponse as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedResponse, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedWithErrorRequest",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedWithErrorRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedWithErrorRequest as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedWithErrorRequest, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedWithErrorTopResponse",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedWithErrorTopResponse, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedWithErrorTopResponse as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayAnonComposedWithErrorTopResponse, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::ComposedProtocolOnAnonComposedWithErrorResponse",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolOnAnonComposedWithErrorResponse, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::ComposedProtocolOnAnonComposedWithErrorResponse as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolOnAnonComposedWithErrorResponse, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::ComposedProtocolOnAnonComposedWithErrorRequest",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolOnAnonComposedWithErrorRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::ComposedProtocolOnAnonComposedWithErrorRequest as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolOnAnonComposedWithErrorRequest, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayNamedComposedWithErrorTopResponse",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayNamedComposedWithErrorTopResponse, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayNamedComposedWithErrorTopResponse as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolTwoWayNamedComposedWithErrorTopResponse, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::ComposedProtocolOnNamedComposedWithErrorRequest",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolOnNamedComposedWithErrorRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::ComposedProtocolOnNamedComposedWithErrorRequest as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::ComposedProtocolOnNamedComposedWithErrorRequest, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayLocalWithErrorTopResponse",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayLocalWithErrorTopResponse, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayLocalWithErrorTopResponse as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayLocalWithErrorTopResponse, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::MainProtocolOnLocalWithErrorRequest",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolOnLocalWithErrorRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::MainProtocolOnLocalWithErrorRequest as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolOnLocalWithErrorRequest, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::MainProtocolOneWayAnonRequest",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolOneWayAnonRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::MainProtocolOneWayAnonRequest as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolOneWayAnonRequest, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonResponse",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonResponse, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonResponse as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonResponse, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonWithErrorRequest",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonWithErrorRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonWithErrorRequest as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonWithErrorRequest, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonWithErrorTopResponse",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonWithErrorTopResponse, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonWithErrorTopResponse as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolTwoWayAnonWithErrorTopResponse, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::MainProtocolOnAnonWithErrorResponse",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolOnAnonWithErrorResponse, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::MainProtocolOnAnonWithErrorResponse as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolOnAnonWithErrorResponse, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_protocollayoutssamelibrary::wire::MainProtocolOnAnonWithErrorRequest",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolOnAnonWithErrorRequest, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_protocollayoutssamelibrary::wire::MainProtocolOnAnonWithErrorRequest as the body",
            .has_flexible_envelope = true,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_protocollayoutssamelibrary::wire::MainProtocolOnAnonWithErrorRequest, true>,
        },
};

}  // namespace fuzzing
