// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <test/byteandbytes/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using ByteAndBytes = ::test::byteandbytes::ByteAndBytes;

template <>
struct MinSize<ByteAndBytes> {
  operator size_t() {
    return MinSize<uint8_t>();
  }
};
template <>
struct Allocate<ByteAndBytes> {
  ByteAndBytes operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ByteAndBytes>());
    ByteAndBytes out;
    const size_t slack_per_member = (*size - MinSize<ByteAndBytes>()) / 1;
    size_t out_size;
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.single_byte = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};

}  // namespace fuzzing
