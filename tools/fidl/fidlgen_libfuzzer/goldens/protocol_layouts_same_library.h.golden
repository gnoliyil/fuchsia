// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <test/protocollayoutssamelibrary/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using TablePayload = ::test::protocollayoutssamelibrary::TablePayload;
using UnionPayload = ::test::protocollayoutssamelibrary::UnionPayload;
using ComposedProtocolOneWayAnonComposedRequest = ::test::protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest;
using ComposedProtocolTwoWayAnonComposedRequest = ::test::protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest;
using ComposedProtocolTwoWayAnonComposedResponse = ::test::protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedResponse;
using ComposedProtocolTwoWayAnonComposedWithErrorRequest = ::test::protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest;
using ComposedProtocol_TwoWayAnonComposedWithError_Response = ::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayAnonComposedWithError_Response;
using ComposedProtocol_TwoWayAnonComposedWithError_Result = ::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayAnonComposedWithError_Result;
using ComposedProtocolTwoWayAnonComposedWithErrorTopResponse = ::test::protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorTopResponse;
using ComposedProtocolOnAnonComposedRequest = ::test::protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest;
using ComposedProtocol_OnAnonComposedWithError_Response = ::test::protocollayoutssamelibrary::ComposedProtocol_OnAnonComposedWithError_Response;
using ComposedProtocol_OnAnonComposedWithError_Result = ::test::protocollayoutssamelibrary::ComposedProtocol_OnAnonComposedWithError_Result;
using ComposedProtocolOnAnonComposedWithErrorRequest = ::test::protocollayoutssamelibrary::ComposedProtocolOnAnonComposedWithErrorRequest;
using ComposedProtocol_TwoWayNamedComposedWithError_Result = ::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayNamedComposedWithError_Result;
using ComposedProtocolTwoWayNamedComposedWithErrorTopResponse = ::test::protocollayoutssamelibrary::ComposedProtocolTwoWayNamedComposedWithErrorTopResponse;
using ComposedProtocol_OnNamedComposedWithError_Result = ::test::protocollayoutssamelibrary::ComposedProtocol_OnNamedComposedWithError_Result;
using ComposedProtocolOnNamedComposedWithErrorRequest = ::test::protocollayoutssamelibrary::ComposedProtocolOnNamedComposedWithErrorRequest;
using MainProtocol_TwoWayLocalWithError_Result = ::test::protocollayoutssamelibrary::MainProtocol_TwoWayLocalWithError_Result;
using MainProtocolTwoWayLocalWithErrorTopResponse = ::test::protocollayoutssamelibrary::MainProtocolTwoWayLocalWithErrorTopResponse;
using MainProtocol_OnLocalWithError_Result = ::test::protocollayoutssamelibrary::MainProtocol_OnLocalWithError_Result;
using MainProtocolOnLocalWithErrorRequest = ::test::protocollayoutssamelibrary::MainProtocolOnLocalWithErrorRequest;
using MainProtocolOneWayAnonRequest = ::test::protocollayoutssamelibrary::MainProtocolOneWayAnonRequest;
using MainProtocolTwoWayAnonRequest = ::test::protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest;
using MainProtocolTwoWayAnonResponse = ::test::protocollayoutssamelibrary::MainProtocolTwoWayAnonResponse;
using MainProtocolTwoWayAnonWithErrorRequest = ::test::protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorRequest;
using MainProtocol_TwoWayAnonWithError_Response = ::test::protocollayoutssamelibrary::MainProtocol_TwoWayAnonWithError_Response;
using MainProtocol_TwoWayAnonWithError_Result = ::test::protocollayoutssamelibrary::MainProtocol_TwoWayAnonWithError_Result;
using MainProtocolTwoWayAnonWithErrorTopResponse = ::test::protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorTopResponse;
using MainProtocolOnAnonRequest = ::test::protocollayoutssamelibrary::MainProtocolOnAnonRequest;
using MainProtocol_OnAnonWithError_Response = ::test::protocollayoutssamelibrary::MainProtocol_OnAnonWithError_Response;
using MainProtocol_OnAnonWithError_Result = ::test::protocollayoutssamelibrary::MainProtocol_OnAnonWithError_Result;
using MainProtocolOnAnonWithErrorRequest = ::test::protocollayoutssamelibrary::MainProtocolOnAnonWithErrorRequest;

template <>
struct MinSize<TablePayload> {
  operator size_t() {
    return MinSize<uint16_t>();
  }
};
template <>
struct Allocate<TablePayload> {
  TablePayload operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<TablePayload>());
    TablePayload out;
    const size_t slack_per_member = (*size - MinSize<TablePayload>()) / 1;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.set_a(Allocate<uint16_t>{}(src, &out_size));
    return out;
  }
};
template <>
struct MinSize<UnionPayload> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<bool>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<UnionPayload> {
  static_assert(1 > 0, "xunion must have at least one member");

  UnionPayload operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<UnionPayload>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    UnionPayload out;
    switch (selector % 1) {
      case 0: {
        out.set_b(Allocate<bool>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ComposedProtocolOneWayAnonComposedRequest> {
  operator size_t() {
    return MinSize<uint16_t>();
  }
};
template <>
struct Allocate<ComposedProtocolOneWayAnonComposedRequest> {
  ComposedProtocolOneWayAnonComposedRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocolOneWayAnonComposedRequest>());
    ComposedProtocolOneWayAnonComposedRequest out;
    const size_t slack_per_member = (*size - MinSize<ComposedProtocolOneWayAnonComposedRequest>()) / 1;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.set_a(Allocate<uint16_t>{}(src, &out_size));
    return out;
  }
};
template <>
struct MinSize<ComposedProtocolTwoWayAnonComposedRequest> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<bool>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<ComposedProtocolTwoWayAnonComposedRequest> {
  static_assert(1 > 0, "xunion must have at least one member");

  ComposedProtocolTwoWayAnonComposedRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocolTwoWayAnonComposedRequest>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ComposedProtocolTwoWayAnonComposedRequest out;
    switch (selector % 1) {
      case 0: {
        out.set_b(Allocate<bool>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ComposedProtocolTwoWayAnonComposedResponse> {
  operator size_t() {
    return MinSize<uint16_t>();
  }
};
template <>
struct Allocate<ComposedProtocolTwoWayAnonComposedResponse> {
  ComposedProtocolTwoWayAnonComposedResponse operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocolTwoWayAnonComposedResponse>());
    ComposedProtocolTwoWayAnonComposedResponse out;
    const size_t slack_per_member = (*size - MinSize<ComposedProtocolTwoWayAnonComposedResponse>()) / 1;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.set_a(Allocate<uint16_t>{}(src, &out_size));
    return out;
  }
};
template <>
struct MinSize<ComposedProtocolTwoWayAnonComposedWithErrorRequest> {
  operator size_t() {
    return MinSize<uint16_t>();
  }
};
template <>
struct Allocate<ComposedProtocolTwoWayAnonComposedWithErrorRequest> {
  ComposedProtocolTwoWayAnonComposedWithErrorRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocolTwoWayAnonComposedWithErrorRequest>());
    ComposedProtocolTwoWayAnonComposedWithErrorRequest out;
    const size_t slack_per_member = (*size - MinSize<ComposedProtocolTwoWayAnonComposedWithErrorRequest>()) / 1;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.set_a(Allocate<uint16_t>{}(src, &out_size));
    return out;
  }
};
template <>
struct MinSize<ComposedProtocol_TwoWayAnonComposedWithError_Response> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<bool>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<ComposedProtocol_TwoWayAnonComposedWithError_Response> {
  static_assert(1 > 0, "xunion must have at least one member");

  ComposedProtocol_TwoWayAnonComposedWithError_Response operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocol_TwoWayAnonComposedWithError_Response>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ComposedProtocol_TwoWayAnonComposedWithError_Response out;
    switch (selector % 1) {
      case 0: {
        out.set_b(Allocate<bool>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ComposedProtocol_TwoWayAnonComposedWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayAnonComposedWithError_Response>(), MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ComposedProtocol_TwoWayAnonComposedWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  ComposedProtocol_TwoWayAnonComposedWithError_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocol_TwoWayAnonComposedWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ComposedProtocol_TwoWayAnonComposedWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(Allocate<::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayAnonComposedWithError_Response>{}(src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ComposedProtocolTwoWayAnonComposedWithErrorTopResponse> {
  operator size_t() {
    return MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayAnonComposedWithError_Result>();
  }
};
template <>
struct Allocate<ComposedProtocolTwoWayAnonComposedWithErrorTopResponse> {
  ComposedProtocolTwoWayAnonComposedWithErrorTopResponse operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocolTwoWayAnonComposedWithErrorTopResponse>());
    ComposedProtocolTwoWayAnonComposedWithErrorTopResponse out;
    const size_t slack_per_member = (*size - MinSize<ComposedProtocolTwoWayAnonComposedWithErrorTopResponse>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayAnonComposedWithError_Result>() + slack_per_member;
    out.result = Allocate<::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayAnonComposedWithError_Result>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<ComposedProtocolOnAnonComposedRequest> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<bool>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<ComposedProtocolOnAnonComposedRequest> {
  static_assert(1 > 0, "xunion must have at least one member");

  ComposedProtocolOnAnonComposedRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocolOnAnonComposedRequest>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ComposedProtocolOnAnonComposedRequest out;
    switch (selector % 1) {
      case 0: {
        out.set_b(Allocate<bool>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ComposedProtocol_OnAnonComposedWithError_Response> {
  operator size_t() {
    return MinSize<uint16_t>();
  }
};
template <>
struct Allocate<ComposedProtocol_OnAnonComposedWithError_Response> {
  ComposedProtocol_OnAnonComposedWithError_Response operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocol_OnAnonComposedWithError_Response>());
    ComposedProtocol_OnAnonComposedWithError_Response out;
    const size_t slack_per_member = (*size - MinSize<ComposedProtocol_OnAnonComposedWithError_Response>()) / 1;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.set_a(Allocate<uint16_t>{}(src, &out_size));
    return out;
  }
};
template <>
struct MinSize<ComposedProtocol_OnAnonComposedWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_OnAnonComposedWithError_Response>(), MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ComposedProtocol_OnAnonComposedWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  ComposedProtocol_OnAnonComposedWithError_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocol_OnAnonComposedWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ComposedProtocol_OnAnonComposedWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(Allocate<::test::protocollayoutssamelibrary::ComposedProtocol_OnAnonComposedWithError_Response>{}(src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ComposedProtocolOnAnonComposedWithErrorRequest> {
  operator size_t() {
    return MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_OnAnonComposedWithError_Result>();
  }
};
template <>
struct Allocate<ComposedProtocolOnAnonComposedWithErrorRequest> {
  ComposedProtocolOnAnonComposedWithErrorRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocolOnAnonComposedWithErrorRequest>());
    ComposedProtocolOnAnonComposedWithErrorRequest out;
    const size_t slack_per_member = (*size - MinSize<ComposedProtocolOnAnonComposedWithErrorRequest>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_OnAnonComposedWithError_Result>() + slack_per_member;
    out.result = Allocate<::test::protocollayoutssamelibrary::ComposedProtocol_OnAnonComposedWithError_Result>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<ComposedProtocol_TwoWayNamedComposedWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::protocollayoutssamelibrary::UnionPayload>(), MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ComposedProtocol_TwoWayNamedComposedWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  ComposedProtocol_TwoWayNamedComposedWithError_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocol_TwoWayNamedComposedWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ComposedProtocol_TwoWayNamedComposedWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(Allocate<::test::protocollayoutssamelibrary::UnionPayload>{}(src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ComposedProtocolTwoWayNamedComposedWithErrorTopResponse> {
  operator size_t() {
    return MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayNamedComposedWithError_Result>();
  }
};
template <>
struct Allocate<ComposedProtocolTwoWayNamedComposedWithErrorTopResponse> {
  ComposedProtocolTwoWayNamedComposedWithErrorTopResponse operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocolTwoWayNamedComposedWithErrorTopResponse>());
    ComposedProtocolTwoWayNamedComposedWithErrorTopResponse out;
    const size_t slack_per_member = (*size - MinSize<ComposedProtocolTwoWayNamedComposedWithErrorTopResponse>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayNamedComposedWithError_Result>() + slack_per_member;
    out.result = Allocate<::test::protocollayoutssamelibrary::ComposedProtocol_TwoWayNamedComposedWithError_Result>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<ComposedProtocol_OnNamedComposedWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::protocollayoutssamelibrary::TablePayload>(), MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<ComposedProtocol_OnNamedComposedWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  ComposedProtocol_OnNamedComposedWithError_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocol_OnNamedComposedWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    ComposedProtocol_OnNamedComposedWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(Allocate<::test::protocollayoutssamelibrary::TablePayload>{}(src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ComposedProtocolOnNamedComposedWithErrorRequest> {
  operator size_t() {
    return MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_OnNamedComposedWithError_Result>();
  }
};
template <>
struct Allocate<ComposedProtocolOnNamedComposedWithErrorRequest> {
  ComposedProtocolOnNamedComposedWithErrorRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ComposedProtocolOnNamedComposedWithErrorRequest>());
    ComposedProtocolOnNamedComposedWithErrorRequest out;
    const size_t slack_per_member = (*size - MinSize<ComposedProtocolOnNamedComposedWithErrorRequest>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::protocollayoutssamelibrary::ComposedProtocol_OnNamedComposedWithError_Result>() + slack_per_member;
    out.result = Allocate<::test::protocollayoutssamelibrary::ComposedProtocol_OnNamedComposedWithError_Result>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<MainProtocol_TwoWayLocalWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::protocollayoutssamelibrary::UnionPayload>(), MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_TwoWayLocalWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_TwoWayLocalWithError_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_TwoWayLocalWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_TwoWayLocalWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(Allocate<::test::protocollayoutssamelibrary::UnionPayload>{}(src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocolTwoWayLocalWithErrorTopResponse> {
  operator size_t() {
    return MinSize<::test::protocollayoutssamelibrary::MainProtocol_TwoWayLocalWithError_Result>();
  }
};
template <>
struct Allocate<MainProtocolTwoWayLocalWithErrorTopResponse> {
  MainProtocolTwoWayLocalWithErrorTopResponse operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocolTwoWayLocalWithErrorTopResponse>());
    MainProtocolTwoWayLocalWithErrorTopResponse out;
    const size_t slack_per_member = (*size - MinSize<MainProtocolTwoWayLocalWithErrorTopResponse>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::protocollayoutssamelibrary::MainProtocol_TwoWayLocalWithError_Result>() + slack_per_member;
    out.result = Allocate<::test::protocollayoutssamelibrary::MainProtocol_TwoWayLocalWithError_Result>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<MainProtocol_OnLocalWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::protocollayoutssamelibrary::TablePayload>(), MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_OnLocalWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_OnLocalWithError_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_OnLocalWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_OnLocalWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(Allocate<::test::protocollayoutssamelibrary::TablePayload>{}(src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocolOnLocalWithErrorRequest> {
  operator size_t() {
    return MinSize<::test::protocollayoutssamelibrary::MainProtocol_OnLocalWithError_Result>();
  }
};
template <>
struct Allocate<MainProtocolOnLocalWithErrorRequest> {
  MainProtocolOnLocalWithErrorRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocolOnLocalWithErrorRequest>());
    MainProtocolOnLocalWithErrorRequest out;
    const size_t slack_per_member = (*size - MinSize<MainProtocolOnLocalWithErrorRequest>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::protocollayoutssamelibrary::MainProtocol_OnLocalWithError_Result>() + slack_per_member;
    out.result = Allocate<::test::protocollayoutssamelibrary::MainProtocol_OnLocalWithError_Result>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<MainProtocolOneWayAnonRequest> {
  operator size_t() {
    return MinSize<uint16_t>();
  }
};
template <>
struct Allocate<MainProtocolOneWayAnonRequest> {
  MainProtocolOneWayAnonRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocolOneWayAnonRequest>());
    MainProtocolOneWayAnonRequest out;
    const size_t slack_per_member = (*size - MinSize<MainProtocolOneWayAnonRequest>()) / 1;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.set_a(Allocate<uint16_t>{}(src, &out_size));
    return out;
  }
};
template <>
struct MinSize<MainProtocolTwoWayAnonRequest> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<bool>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<MainProtocolTwoWayAnonRequest> {
  static_assert(1 > 0, "xunion must have at least one member");

  MainProtocolTwoWayAnonRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocolTwoWayAnonRequest>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocolTwoWayAnonRequest out;
    switch (selector % 1) {
      case 0: {
        out.set_b(Allocate<bool>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocolTwoWayAnonResponse> {
  operator size_t() {
    return MinSize<uint16_t>();
  }
};
template <>
struct Allocate<MainProtocolTwoWayAnonResponse> {
  MainProtocolTwoWayAnonResponse operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocolTwoWayAnonResponse>());
    MainProtocolTwoWayAnonResponse out;
    const size_t slack_per_member = (*size - MinSize<MainProtocolTwoWayAnonResponse>()) / 1;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.set_a(Allocate<uint16_t>{}(src, &out_size));
    return out;
  }
};
template <>
struct MinSize<MainProtocolTwoWayAnonWithErrorRequest> {
  operator size_t() {
    return MinSize<uint16_t>();
  }
};
template <>
struct Allocate<MainProtocolTwoWayAnonWithErrorRequest> {
  MainProtocolTwoWayAnonWithErrorRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocolTwoWayAnonWithErrorRequest>());
    MainProtocolTwoWayAnonWithErrorRequest out;
    const size_t slack_per_member = (*size - MinSize<MainProtocolTwoWayAnonWithErrorRequest>()) / 1;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.set_a(Allocate<uint16_t>{}(src, &out_size));
    return out;
  }
};
template <>
struct MinSize<MainProtocol_TwoWayAnonWithError_Response> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<bool>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<MainProtocol_TwoWayAnonWithError_Response> {
  static_assert(1 > 0, "xunion must have at least one member");

  MainProtocol_TwoWayAnonWithError_Response operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_TwoWayAnonWithError_Response>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_TwoWayAnonWithError_Response out;
    switch (selector % 1) {
      case 0: {
        out.set_b(Allocate<bool>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocol_TwoWayAnonWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::protocollayoutssamelibrary::MainProtocol_TwoWayAnonWithError_Response>(), MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_TwoWayAnonWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_TwoWayAnonWithError_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_TwoWayAnonWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_TwoWayAnonWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(Allocate<::test::protocollayoutssamelibrary::MainProtocol_TwoWayAnonWithError_Response>{}(src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocolTwoWayAnonWithErrorTopResponse> {
  operator size_t() {
    return MinSize<::test::protocollayoutssamelibrary::MainProtocol_TwoWayAnonWithError_Result>();
  }
};
template <>
struct Allocate<MainProtocolTwoWayAnonWithErrorTopResponse> {
  MainProtocolTwoWayAnonWithErrorTopResponse operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocolTwoWayAnonWithErrorTopResponse>());
    MainProtocolTwoWayAnonWithErrorTopResponse out;
    const size_t slack_per_member = (*size - MinSize<MainProtocolTwoWayAnonWithErrorTopResponse>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::protocollayoutssamelibrary::MainProtocol_TwoWayAnonWithError_Result>() + slack_per_member;
    out.result = Allocate<::test::protocollayoutssamelibrary::MainProtocol_TwoWayAnonWithError_Result>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<MainProtocolOnAnonRequest> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<bool>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<MainProtocolOnAnonRequest> {
  static_assert(1 > 0, "xunion must have at least one member");

  MainProtocolOnAnonRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocolOnAnonRequest>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocolOnAnonRequest out;
    switch (selector % 1) {
      case 0: {
        out.set_b(Allocate<bool>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocol_OnAnonWithError_Response> {
  operator size_t() {
    return MinSize<uint16_t>();
  }
};
template <>
struct Allocate<MainProtocol_OnAnonWithError_Response> {
  MainProtocol_OnAnonWithError_Response operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_OnAnonWithError_Response>());
    MainProtocol_OnAnonWithError_Response out;
    const size_t slack_per_member = (*size - MinSize<MainProtocol_OnAnonWithError_Response>()) / 1;
    size_t out_size;
    out_size = MinSize<uint16_t>() + slack_per_member;
    out.set_a(Allocate<uint16_t>{}(src, &out_size));
    return out;
  }
};
template <>
struct MinSize<MainProtocol_OnAnonWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::protocollayoutssamelibrary::MainProtocol_OnAnonWithError_Response>(), MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_OnAnonWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_OnAnonWithError_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_OnAnonWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_OnAnonWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(Allocate<::test::protocollayoutssamelibrary::MainProtocol_OnAnonWithError_Response>{}(src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocolOnAnonWithErrorRequest> {
  operator size_t() {
    return MinSize<::test::protocollayoutssamelibrary::MainProtocol_OnAnonWithError_Result>();
  }
};
template <>
struct Allocate<MainProtocolOnAnonWithErrorRequest> {
  MainProtocolOnAnonWithErrorRequest operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocolOnAnonWithErrorRequest>());
    MainProtocolOnAnonWithErrorRequest out;
    const size_t slack_per_member = (*size - MinSize<MainProtocolOnAnonWithErrorRequest>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::protocollayoutssamelibrary::MainProtocol_OnAnonWithError_Result>() + slack_per_member;
    out.result = Allocate<::test::protocollayoutssamelibrary::MainProtocol_OnAnonWithError_Result>{}(src, &out_size);
    return out;
  }
};

}  // namespace fuzzing
