// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#pragma once

#include <test/bits/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using MyBits = ::test::bits::MyBits;
using StrictBits = ::test::bits::StrictBits;
using FlexibleBits = ::test::bits::FlexibleBits;
using EmptyBits = ::test::bits::EmptyBits;

template <>
struct MinSize<MyBits> {
  operator size_t() { return sizeof(MyBits); }
};
template <>
struct Allocate<MyBits> {
  MyBits operator()(FuzzInput* src, size_t* size) {
    MyBits out;
    ZX_ASSERT(*size >= sizeof(MyBits));
    ZX_ASSERT(src->CopyObject(&out));
    *size = sizeof(MyBits);
    return out;
  }
};
template <>
struct MinSize<StrictBits> {
  operator size_t() { return sizeof(StrictBits); }
};
template <>
struct Allocate<StrictBits> {
  StrictBits operator()(FuzzInput* src, size_t* size) {
    StrictBits out;
    ZX_ASSERT(*size >= sizeof(StrictBits));
    ZX_ASSERT(src->CopyObject(&out));
    *size = sizeof(StrictBits);
    return out;
  }
};
template <>
struct MinSize<FlexibleBits> {
  operator size_t() { return sizeof(uint64_t); }
};
template <>
struct Allocate<FlexibleBits> {
  FlexibleBits operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= sizeof(uint64_t));
    return FlexibleBits(*reinterpret_cast<const uint64_t*>(src->TakeBytes(sizeof(uint64_t))));
  }
};
template <>
struct MinSize<EmptyBits> {
  operator size_t() { return sizeof(uint32_t); }
};
template <>
struct Allocate<EmptyBits> {
  EmptyBits operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= sizeof(uint32_t));
    return EmptyBits(*reinterpret_cast<const uint32_t*>(src->TakeBytes(sizeof(uint32_t))));
  }
};

}  // namespace fuzzing
