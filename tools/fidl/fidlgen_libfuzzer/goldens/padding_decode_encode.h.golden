// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <fidl/test.padding/cpp/wire.h>

// For ::fidl::fuzzing::DecoderEncoderImpl.
#include <lib/fidl/cpp/fuzzing/decoder_encoder.h>

namespace fuzzing {

inline constexpr ::std::array<::fidl::fuzzing::DecoderEncoderForType, 32>
    test_padding_decoder_encoders = {
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding1ByteEnd",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding1ByteEnd, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding1ByteEnd as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding1ByteEnd, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding2ByteEnd",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding2ByteEnd, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding2ByteEnd as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding2ByteEnd, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding3ByteEnd",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding3ByteEnd, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding3ByteEnd as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding3ByteEnd, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding4ByteEnd",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding4ByteEnd, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding4ByteEnd as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding4ByteEnd, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding5ByteEnd",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding5ByteEnd, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding5ByteEnd as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding5ByteEnd, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding6ByteEnd",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding6ByteEnd, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding6ByteEnd as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding6ByteEnd, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding7ByteEnd",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding7ByteEnd, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding7ByteEnd as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding7ByteEnd, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding1ByteMiddle",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding1ByteMiddle, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding1ByteMiddle as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding1ByteMiddle, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding2ByteMiddle",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding2ByteMiddle, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding2ByteMiddle as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding2ByteMiddle, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding3ByteMiddle",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding3ByteMiddle, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding3ByteMiddle as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding3ByteMiddle, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding4ByteMiddle",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding4ByteMiddle, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding4ByteMiddle as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding4ByteMiddle, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding5ByteMiddle",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding5ByteMiddle, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding5ByteMiddle as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding5ByteMiddle, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding6ByteMiddle",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding6ByteMiddle, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding6ByteMiddle as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding6ByteMiddle, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding7ByteMiddle",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding7ByteMiddle, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding7ByteMiddle as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding7ByteMiddle, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding4ByteAlignmentLength12",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding4ByteAlignmentLength12, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding4ByteAlignmentLength12 as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding4ByteAlignmentLength12, true>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "::test_padding::wire::Padding2ByteAlignmentLength6",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = false,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding2ByteAlignmentLength6, false>,
        },
        ::fidl::fuzzing::DecoderEncoderForType{
            .fidl_type_name = "A transactional message using ::test_padding::wire::Padding2ByteAlignmentLength6 as the body",
            .has_flexible_envelope = false,
            .treat_bytes_as_transactional_message = true,
            .decoder_encoder = ::fidl::fuzzing::DecoderEncoderImpl<::test_padding::wire::Padding2ByteAlignmentLength6, true>,
        },
};

}  // namespace fuzzing
