// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = zx_select_case_sensitivity

#pragma once

#include <test/vectors/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using ExampleUseOfVectors = ::test::vectors::ExampleUseOfVectors;

template <>
struct MinSize<ExampleUseOfVectors> {
  operator size_t() {
    return MinSize<::std::vector<uint8_t>>() + MinSize<::std::vector<::std::vector<bool>>>();
  }
};
template <>
struct Allocate<ExampleUseOfVectors> {
  ExampleUseOfVectors operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ExampleUseOfVectors>());
    ExampleUseOfVectors out;
    const size_t slack_per_member = (*size - MinSize<ExampleUseOfVectors>()) / 2;
    size_t out_size;
    out_size = MinSize<::std::vector<uint8_t>>() + slack_per_member;
    out.vector_of_uint8 = Allocate<::std::vector<uint8_t>>{}(src, &out_size);
    out_size = MinSize<::std::vector<::std::vector<bool>>>() + slack_per_member;
    out.vector_of_vector_of_bool = Allocate<::std::vector<::std::vector<bool>>>{}(src, &out_size);
    return out;
  }
};

}  // namespace fuzzing
