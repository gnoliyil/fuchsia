// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = no_optional_structs
// fidl_experiment = output_index_json
// fidl_experiment = simple_empty_response_syntax
// fidl_experiment = unknown_interactions
// fidl_experiment = unknown_interactions_mandate

#pragma once

#include <test/dependent/cpp/libfuzzer.h>
#include <test/structdefaultvalueenumlibraryreference/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using Foo = ::test::structdefaultvalueenumlibraryreference::Foo;

template <>
struct MinSize<Foo> {
  operator size_t() {
    return MinSize<::test::dependent::MyEnum>();
  }
};
template <>
struct Allocate<Foo> {
  Foo operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Foo>());
    Foo out;
    const size_t slack_per_member = (*size - MinSize<Foo>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::dependent::MyEnum>() + slack_per_member;
    out.field = Allocate<::test::dependent::MyEnum>{}(src, &out_size);
    return out;
  }
};

}  // namespace fuzzing
