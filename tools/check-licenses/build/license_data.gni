# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//build/info/info.gni")

# Invokes the check-licenses tool.
#
# Parameters
#
#   fuchsia_dir (optional)
#     [string] Path to the fuchsia root directory. Defaults to "//".
#
#   out_dir (optional)
#     [string] Directory where generated NOTICE files will be placed. Defaults
#     to target_out_dir.
#
#   target (optional)
#     [string] Target to analyze. Defaults to "//:default".
#
#   testonly, visibility
template("license_data") {
  filter = ""
  if (defined(invoker.filter)) {
    filter = invoker.filter
  }

  target = "//:default"
  if (defined(invoker.target)) {
    target = invoker.target
  }

  if (build_info_version == "") {
    build_info_version = "version"
  }
  if (build_info_product == "") {
    build_info_product = "product"
  }
  if (build_info_board == "") {
    build_info_board = "board"
  }

  out_dir = "$target_out_dir/check-licenses"
  if (defined(invoker.out_dir)) {
    out_dir = invoker.out_dir
  }
  temp_out_dir = "$out_dir/temp"
  temp_out_licenses_dir = "$out_dir/temp_licenses"

  check_licenses_target = "${target_name}_check-licenses"
  copy_txt_notices_target = "${target_name}_txt_copy"
  copy_html_notices_target = "${target_name}_html_copy"

  # TODO(fxb/116788): Uncomment once SPDX generation flakiness resolves
  # copy_spdx_target = "${target_name}_spdx_copy"

  compliance_output = "compliance.csv"

  # TODO(fxb/116788): Uncomment once SPDX generation flakiness resolves
  # spdx_output = "results.spdx.json"
  txt_notices_output = "license_texts_grouped_by_license_pattern_deduped.txt.gz"
  html_notices_output =
      "license_texts_grouped_by_license_pattern_deduped.html.gz"

  product_board = "${build_info_product}.${build_info_board}"
  path_prefix = "${build_info_version}/${product_board}"

  compiled_action(check_licenses_target) {
    forward_variables_from(invoker,
                           [
                             "fuchsia_dir",
                             "testonly",
                             "visibility",
                           ])
    tool = "//tools/check-licenses"

    # The license tool scans the whole source tree, so it cannot be hermetic.
    # TODO(fxbug.dev/84924): Improve the way notice files are generated.
    hermetic_deps = false

    license_tool = "//tools/check-licenses($host_toolchain)"
    deps = [ license_tool ]

    sources = [ "//tools/check-licenses/cmd/_config.json" ]

    outputs = [
      "$temp_out_dir/$path_prefix/out/$txt_notices_output",
      "$temp_out_dir/$path_prefix/out/$html_notices_output",
      "$temp_out_dir/$path_prefix/out/$compliance_output",

      # TODO(fxb/116788): Uncomment once SPDX generation flakiness resolves
      # "$temp_out_dir/$path_prefix/$spdx_output",
    ]

    args = [
      "--log_level",
      "0",
      "--fuchsia_dir",
      rebase_path("//", root_build_dir),
      "--out_dir",
      rebase_path(temp_out_dir, root_build_dir),
      "--licenses_out_dir",
      rebase_path(temp_out_licenses_dir, root_build_dir),
      "--gn_path",
      rebase_path("//prebuilt/third_party/gn/${host_os}-${host_cpu}/gn",
                  root_build_dir),
      "--build_dir",
      rebase_path(root_out_dir, root_build_dir),
    ]

    args += [
      "--build_info_version",
      build_info_version,
      "--build_info_product",
      build_info_product,
      "--build_info_board",
      build_info_board,
    ]

    if (filter != "") {
      args += [
        "--filter",
        filter,
      ]
    }

    args += [ target ]

    metadata = {
      licenses = [
        {
          license_files = rebase_path(temp_out_licenses_dir, root_build_dir)
          compliance_file =
              rebase_path("$temp_out_dir/$path_prefix/out/$compliance_output",
                          root_build_dir)
        },
      ]
    }
  }

  copy(copy_txt_notices_target) {
    forward_variables_from(invoker,
                           [
                             "fuchsia_dir",
                             "testonly",
                             "visibility",
                           ])

    sources = [ "$temp_out_dir/$path_prefix/out/$txt_notices_output" ]
    outputs = [ "$out_dir/NOTICE.txt.gz" ]
    deps = [ ":$check_licenses_target" ]
  }
  copy(copy_html_notices_target) {
    forward_variables_from(invoker,
                           [
                             "fuchsia_dir",
                             "testonly",
                             "visibility",
                           ])

    sources = [ "$temp_out_dir/$path_prefix/out/$html_notices_output" ]
    outputs = [ "$out_dir/NOTICE.html.gz" ]
    deps = [ ":$check_licenses_target" ]
  }

  # TODO(fxb/116788): Uncomment once SPDX generation flakiness resolves
  # copy(copy_spdx_target) {
  #   forward_variables_from(invoker,
  #                          [
  #                            "fuchsia_dir",
  #                            "testonly",
  #                            "visibility",
  #                          ])

  #   sources = [ "$temp_out_dir/$path_prefix/$spdx_output" ]
  #   outputs = [ "$out_dir/results.spdx.json" ]
  #   deps = [ ":$check_licenses_target" ]
  # }

  group(target_name) {
    forward_variables_from(invoker,
                           [
                             "fuchsia_dir",
                             "testonly",
                             "visibility",
                           ])

    deps = [
      ":$check_licenses_target",
      ":$copy_html_notices_target",

      # TODO(fxb/116788): Uncomment once SPDX generation flakiness resolves
      # ":$copy_spdx_target",
      ":$copy_txt_notices_target",
    ]
  }
}
