// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <lib/ddk/binding_priv.h>

#if !defined(countof) && defined(__cplusplus)
#include <iterator>
#define countof(x) std::size(x)
#endif

// Generated bytecode.
constexpr zx_bind_inst_t wallcreeper_wagtail_insts[] = {
  {0x20000001,0x1,0x3010000},{0x1000000,0x0,0x0},
};

constexpr device_fragment_part_t wallcreeper_wagtail_fragment_part[] = {
  {
    .instruction_count = countof(wallcreeper_wagtail_insts),
    .match_program = wallcreeper_wagtail_insts,
  }
};

constexpr device_fragment_t wallcreeper_wagtail_fragment = {
    .name = "wagtail",
    .parts_count = countof(wallcreeper_wagtail_fragment_part),
    .parts = wallcreeper_wagtail_fragment_part,
};

// Generated bytecode.
constexpr zx_bind_inst_t wallcreeper_redpoll_insts[] = {
  {0x20000001,0x2,0x6010000},{0x1000000,0x0,0x0},
};

constexpr device_fragment_part_t wallcreeper_redpoll_fragment_part[] = {
  {
    .instruction_count = countof(wallcreeper_redpoll_insts),
    .match_program = wallcreeper_redpoll_insts,
  }
};

constexpr device_fragment_t wallcreeper_redpoll_fragment = {
    .name = "redpoll",
    .parts_count = countof(wallcreeper_redpoll_fragment_part),
    .parts = wallcreeper_redpoll_fragment_part,
};

constexpr device_fragment_t wallcreeper_fragments[] {
  wallcreeper_wagtail_fragment, wallcreeper_redpoll_fragment
};

// clang-format off
#define ZIRCON_DRIVER(Driver, Ops, VendorName, Version) \
  ZIRCON_DRIVER_PRIV(Driver, Ops, VendorName, Version)
