# Copyright 2022 The Fuchsia Authors.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/product_assembly_configuration.gni")
import("//build/assembly/sshd_config.gni")
import("//src/connectivity/network/use_netstack3.gni")

assert(
    is_fuchsia,
    "Product definitions and assemblies should only be defined in the fuchsia toolchain")

_base_driver_packages = [
  {
    package_target = "//src/graphics/drivers/msd-arm-mali:msd-arm-mali-test"
    driver_components = [
      "meta/libmsd_arm_test.cm",
      "meta/libmsd_arm_rebind.cm",
    ]
  },
  {
    package_target = "//src/graphics/drivers/msd-intel-gen:msd-intel-gen-test"
    driver_components = [ "meta/libmsd_intel_test.cm" ]
  },
  {
    package_target = "//src/graphics/drivers/msd-vsi-vip:msd-vsi-vip-test"
    driver_components = [ "meta/libmsd_vsi_test.cm" ]
  },
]

# LINT.IfChange

# This is the base platform configuration used by core
platform_configuration_base = {
  build_type = "eng"
  input = {
    supported_input_devices = [
      "button",
      "touchscreen",
    ]
  }

  fonts = {
    enabled = true
  }

  # If the 'authorized_ssh_keys_path' GN arg has been set, then pass that path
  # as part of the platform configuration.
  if (authorized_ssh_keys_path != false) {
    development_support = {
      authorized_ssh_keys_path =
          rebase_path(authorized_ssh_keys_path, root_build_dir)
    }
  }
}

product_assembly_configuration("core") {
  testonly = true
  platform = {
    forward_variables_from(platform_configuration_base, "*")

    # TODO(https://fxbug.dev/121811): Remove this as soon as the existing
    # Netstack3 CI builders have been transitioned to use the
    # core_with_netstack3 target below.
    connectivity = {
      network = {
        force_netstack3 = use_netstack3
      }
    }
  }
  product = {
  }

  base_driver_packages = _base_driver_packages
}

# LINT.ThenChange(//build/bazel/assembly/product_configurations/BUILD.bazel)

product_assembly_configuration("core_with_netstack3") {
  testonly = true
  platform = {
    forward_variables_from(platform_configuration_base, "*")

    connectivity = {
      network = {
        force_netstack3 = true
      }
    }
  }
  product = {
  }

  base_driver_packages = _base_driver_packages
}
