# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang_cpu.gni")
import("//build/toolchain/zircon/user_basic_redirect.gni")

# Source directory for Fucshia libc.
libc = "//zircon/system/ulib/c"

# Root source directory for llvm-libc.
llvm_libc = "//third_party/llvm-libc/src"

declare_args() {
  # **NOTE: Experimental** Use the llvm-libc implementations of string functions.
  use_llvm_libc_string_functions = current_cpu == "riscv64"
}

libc_configs = [
  # These configs are needed for the expectations of the source code,
  # whether compiled into libc.so or into unit test code.
  "$libc:internal.config",
]

# When compiled for unit tests, add only those.
libc_testonly_configs = libc_configs + [ "$libc:testonly.config" ]

# These additional configs are needed when compiling for the real libc.
libc_configs += [
  "$libc:llvm-libc-export.config",

  # libfuzzer also uses libc internally.  By removing the fuzzing
  # instrumentation we avoid it adding noise to the fuzzing coverage.
  # TODO(25073): Once a cleaner solution is found, remove this.
  "//build/config/zircon:no_fuzzer",
]

# Define source_set() targets for some libc code.
#
# This defines two source_set() targets, one with the main target name and one
# called "$target_name.testonly".  They differ in the configs applied to the
# code (before $configs is appended if set).  The main target is compiled for
# libc proper and defines the public C entry points, while the testonly target
# is compiled for unit test code and does not define the public C entry points.
# A libc_test() target should have the corresponding ".testonly" target in its
# $deps while the main target rolls up into the deps of libc proper.
#
# Paramaters
#
#   * basic_abi
#     - Optional: If true, $sources must be compiled for the basic machine ABI.
#     - Type: bool
#     - Default: false
#
#   * configs
#     - Optional: Extra configs to append.  Unlike source_set(), configs
#     is not pre-set so defaults cannot be removed and += isn't used.
#     - Type: list(config)
#     - Default: []
#
#   * remove_configs
#     - Optional: Configs to remove from the defaults.
#     - Type: list(config)
#     - Default: []
#
#   * non_test_deps
#     - Optional: Extra deps to append for the main target but
#     not the testonly target.
#     - Type: list(label)
#     - Default: []
#
#   * non_test_vars
#     - Optional: Extra parameters to pass through to source_set()
#     in the main target but not in the testonly target.
#     - Type: scope
#     - Default: {}
#
#   * testonly_deps
#     - Optional: Extra deps to append for the testonly target
#     but not the main target.
#     - Type: list(label)
#     - Default: []
#
#   * dir
#     - Optional: Directory prefix for $sources file names.
#     - Type: dir
#     - Default: "."
#
#   * public
#     - Optional: As for source_set(), but $dir is prefixed if set.
#     This should list the headers intended to be used for other parts
#     of libc and for unit tests.  Those targets will have deps on this one.
#     - Type: list(file)
#
#   * sources
#     - Required: As for source_set(), but $dir is prefixed if set.
#     - Type: list(file)
#
#   * visibility
#     - Optional: Additional label patterns that can use this target.
#     All targets have visibility limited to libc code by default.
#     This can add additional label patterns to expose libc internal
#     pieces to other parts of the build, but minimal patterns should
#     be used and never broad wildcards.
#     - Type: list(label_pattern)
#     - Default: []
#
# See source_set() for the rest.
#
template("libc_source_set") {
  set_vars = {
    forward_variables_from(invoker,
                           "*",
                           [
                             "basic_abi",
                             "configs",
                             "dir",
                             "non_test_deps",
                             "non_test_vars",
                             "remove_configs",
                             "sources",
                             "testonly_deps",
                             "public",
                             "visibility",
                           ])

    visibility = [ "$libc/*" ]
    if (defined(invoker.visibility)) {
      visibility += invoker.visibility
    }

    if (defined(invoker.dir)) {
      sources = []
      foreach(file, invoker.sources) {
        sources += [ "${invoker.dir}/$file" ]
      }
    } else {
      sources = invoker.sources
    }

    if (defined(invoker.public)) {
      if (defined(invoker.dir)) {
        public = []
        foreach(file, invoker.public) {
          public += [ "${invoker.dir}/$file" ]
        }
      } else {
        public = invoker.public
      }
    }
  }

  set_configs = []
  if (defined(invoker.configs)) {
    set_configs = invoker.configs
  }

  # If basic_abi is set, then the main target will use user_basic_redirect()
  # but the test targets are never compiled for the basic ABI.
  basic_abi = defined(invoker.basic_abi) && invoker.basic_abi
  need_redirect = basic_abi && toolchain_variant.tags + [ "no-compiler-abi" ] -
                               [ "no-compiler-abi" ] == toolchain_variant.tags

  # The secondary .export target compiles the same functions but with an
  # explicit use of the config to define LLVM_LIBC_FUNCTION for export in the
  # shared library.  The main target redirector group in the user.libc
  # environment will go to the .export target in the user.basic environment.
  # Other environments use the main user.basic target that only provides
  # hidden-visibility definitions.
  compile_targets = [ "" ]
  if (basic_abi) {
    compile_targets += [ ".export" ]
  }

  if (need_redirect) {
    group(target_name) {
      forward_variables_from(set_vars, [ "visibility" ])
      if (toolchain_environment == "user.libc") {
        public_deps = [ ":$target_name.export.basic" ]
      } else {
        public_deps = [ ":$target_name.basic" ]
      }
    }
  } else {
    foreach(suffix, compile_targets) {
      source_set(target_name + suffix) {
        if (defined(invoker.remove_configs)) {
          configs += invoker.remove_configs
          configs -= invoker.remove_configs
        }
        configs += libc_configs + set_configs
        deps = []
        forward_variables_from(set_vars, "*")
        if (defined(invoker.non_test_vars)) {
          forward_variables_from(invoker.non_test_vars, "*")
        }
        if (defined(invoker.non_test_deps)) {
          deps += invoker.non_test_deps
        }
        if (suffix != "") {
          configs += [ "$libc:llvm-libc-function-attr.config" ]
        }
      }
    }
  }

  if (basic_abi) {
    foreach(target, compile_targets) {
      target = target_name + target
      user_basic_redirect("$target.basic") {
        visibility = [ ":*" ]
        public_deps = [ ":$target" ]
      }
    }
  }

  source_set("$target_name.testonly") {
    testonly = true
    if (defined(invoker.remove_configs)) {
      configs += invoker.remove_configs
      configs -= invoker.remove_configs
    }
    configs += libc_testonly_configs + set_configs
    deps = []
    forward_variables_from(set_vars, "*")
    if (defined(invoker.testonly_deps)) {
      deps += invoker.testonly_deps
    }
  }
}

# Define a source_set() of libc unit test code.
#
# This defines a source_set() that will roll up into the libc-unittests
# executable and the standalone Zircon core-tests executable.  It's expected to
# use llvm-libc's unit test API, which acts as a wrapper for zxtest, or to use
# the zxtest API directly.  Its $deps should include the "foo.testonly" target
# defined by libc_source_set("foo") for the code under test, which is tested
# via its C++ namespace-scoped entry points.
#
# Paramaters
#
#   * configs
#     - Optional: Extra configs to append.  Unlike source_set(), configs
#     is not pre-set so defaults cannot be removed and += isn't used.
#     - Type: list(config)
#     - Default: []
#
#   * remove_configs
#     - Optional: Configs to remove from the defaults.
#     - Type: list(config)
#     - Default: []
#
#   * dir
#     - Optional: Directory prefix for $sources file names.
#     - Type: dir
#     - Default: "."
#
#   * sources
#     - Required: As for source_set(), but $dir is prefixed if set.
#     - Type: list(file)
#
# See source_set() for the rest.
#
template("libc_test") {
  source_set(target_name) {
    testonly = true

    deps = []
    forward_variables_from(invoker,
                           "*",
                           [
                             "configs",
                             "dir",
                             "remove_configs",
                             "sources",
                             "testonly",
                           ])

    if (defined(invoker.dir)) {
      sources = []
      foreach(file, invoker.sources) {
        sources += [ "${invoker.dir}/$file" ]
      }
    } else {
      sources = invoker.sources
    }

    if (defined(invoker.remove_configs)) {
      configs += invoker.remove_configs
      configs -= invoker.remove_configs
    }
    configs += libc_testonly_configs
    if (defined(invoker.configs)) {
      configs += invoker.configs
    }

    deps += [ "//zircon/system/ulib/zxtest" ]
  }
}

variant_replaces_allocator = toolchain_variant.tags + [ "replaces-allocator" ] -
                             [ "replaces-allocator" ] != toolchain_variant.tags

# Convenience wrapper over the pattern of creating a libc_source_set() and
# libc_test() which is common when using llvm-libc functions.
#
# Parameters
#
#   * functions
#     - Required: A list of functions to take from $llvm_libc/src/$dir, i.e.
#       the name of the directory containing the invoking BUILD.gn file.
#     - Type: list(string)
#
#   * cpu_functions
#     - Optional: A subset of $functions that whose implementations come from
#       the $llvm_libc/src/$dir/$clang_cpu directory instead.
#     - Type: list(string)
#     - Default: []
#
#   * noncpu_dir
#     - Optional: Subdir of $llvm_libc/src/$dir where implementations are found
#       for $functions not found in $cpu_functions.
#
#   * no_test_functions
#     - Optional: A subset of $functions that don't have tests.
#
#   * basic_abi, configs, non_test_deps, testonly_deps
#     - Optional: See libc_source_set().
#
#   * deps
#     - Optional: See llvm_libc_group().
#
#   * defines, visibility
#     - Optional: See source_set().
#
template("llvm_libc_source_set") {
  main_target = target_name
  target_dir = get_path_info(target_out_dir, "name")

  if (target_name == target_dir) {
    test_target = "unittests"
  } else {
    test_target = "$target_name.unittests"
  }

  cpu_functions = []
  if (defined(invoker.cpu_functions)) {
    cpu_functions = invoker.cpu_functions
    assert(cpu_functions + invoker.functions - invoker.functions == [],
           "cpu_functions must be a subset of functions")
  }

  no_test_functions = []
  if (defined(invoker.no_test_functions)) {
    no_test_functions = invoker.no_test_functions
    assert(no_test_functions + invoker.functions - invoker.functions == [],
           "no_test_functions must be a subset of functions")
  }

  libc_source_set(main_target) {
    forward_variables_from(invoker,
                           [
                             "basic_abi",
                             "configs",
                             "defines",
                             "non_test_deps",
                             "non_test_vars",
                             "testonly_deps",
                             "visibility",
                           ])

    dir = "$llvm_libc/src/$target_dir"
    public = []
    sources = []

    foreach(function, invoker.functions) {
      public += [ "$function.h" ]
      if (cpu_functions + [ function ] - [ function ] != cpu_functions) {
        sources += [ "$clang_cpu/$function.cpp" ]
        not_needed(invoker, [ "noncpu_dir" ])
      } else if (defined(invoker.noncpu_dir)) {
        sources += [ "${invoker.noncpu_dir}/$function.cpp" ]
      } else {
        sources += [ "$function.cpp" ]
      }
    }

    if (defined(invoker.deps)) {
      if (!defined(non_test_deps)) {
        non_test_deps = []
      }
      if (!defined(testonly_deps)) {
        testonly_deps = []
      }
      foreach(label, invoker.deps) {
        non_test_deps += [ "$label" ]
        testonly_deps += [ "$label.testonly" ]
      }
    }
  }

  libc_test(test_target) {
    dir = "$llvm_libc/test/src/$target_dir"
    deps = [ ":$main_target.testonly" ]
    sources = []

    foreach(function, invoker.functions - no_test_functions) {
      sources += [ "${function}_test.cpp" ]
    }

    if (defined(invoker.deps)) {
      foreach(label, invoker.deps) {
        deps += [ "$label.unittests" ]
      }
    }
  }
}

# Convenience wrapper for aggregating all the llvm_libc_source_set() subtargets
# into a parallel set of targets with a collective name.  If the target_name
# matches the directory name, there will also be a "unittests" target defined.
#
# Parameters
#
#   * deps
#     - Required: A list of labels of llvm_libc_source_set() targets.
#     - Type: list(label_without_toolchain)
#
#   * non_test_deps
#     - Optional: A list of labels not used for test code.
#     - Type: list(label_without_toolchain)
#
template("llvm_libc_group") {
  group_name = target_name
  target_dir = get_path_info(target_out_dir, "name")

  foreach(suffix,
          [
            "",
            "testonly",
            "unittests",
          ]) {
    subtarget = group_name
    if (suffix != "") {
      subtarget += ".$suffix"
    }
    group(subtarget) {
      if (suffix != "") {
        testonly = true
      }
      deps = []
      foreach(label, invoker.deps) {
        if (suffix != "") {
          label += ".$suffix"
        }
        deps += [ label ]
      }
      if (suffix == "" && defined(invoker.non_test_deps)) {
        deps += invoker.non_test_deps
      }
    }
  }

  if (group_name == target_dir) {
    group("unittests") {
      testonly = true
      public_deps = [ ":$group_name.unittests" ]
    }
  }
}
