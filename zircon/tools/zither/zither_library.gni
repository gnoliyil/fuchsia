# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//build/config/clang/clang.gni")
import("//build/cpp/library_headers.gni")
import("//build/go/go_library.gni")
import("//build/rust/config.gni")
import("//build/rust/rustc_library.gni")

# TODO(fxbug.dev/91102, fxbug.dev/93393): "cpp"
supported_zither_backends = [
  "asm",  # Assembly data layout bindings.
  "c",  # C data layout bindings.
  "go",  # Go data layout bindings.
  "rust",  # Rust data layout bindings.
  "legacy_syscall_cdecl",  # Legacy C syscall declarations.
  "zircon_ifs",  # Syscall text ABI bindings.
  "kernel",  # Internal kernel bindings.
  "rust_syscall",  # Thin Rust FFI syscall wrappers.
]

_clang_format = {
  script = "$clang_prefix/clang-format"
  inputs = [ "//.clang-format" ]
  args = [ "--style=file:" + rebase_path(inputs[0], root_build_dir) ]
}

# Information on supported backends, accessible via
# `supported_zither_backend_info[ "$backend" ]`.
#
# Each backend scope contains the following:
#
#  * output_subdir
#    - Required: Describes the output subdirectory of the output directory
#      passed to zither in which the backend artifacts will be written. This
#      subdirectory has backend-specific significance as an C include path,
#      Go package name, etc. Given a FIDL library name `library_name` and
#      referring to this scope as `output_subdir_info`, one can reconstruct
#      this path as follows:
#      ```
#      output_subdir_info = {
#        prefix_parts = []
#        suffix_parts = []
#        forward_variables_from(backend_info.output_subdir, "*")
#        parts = prefix_parts
#        if (defined(library_name_separator)) {
#         parts += [ string_replace(library_name, ".", library_name_separator) ]
#        }
#        path += suffix_parts
#        path = string_join("/", parts)
#      }
#      output_subdir = output_subdir_info.path
#      ```
#    - Type: scope
#
#    The scope contains the following:
#      * prefix_parts
#        - Optional: The path parts that prefix the output subdirectory.
#        - Type: list(string)
#        - Default: []
#
#      * library_name_separator
#        - Optional: The separator with which the '.'-separated tokens of the
#          FIDL library name should be joined in the output subdirectory
#          namespace (in between the prefix and suffix parts ). A value of "."
#          will just use the library name unchanged as path token.
#        - Type: string
#
#      * suffix_parts
#        - Optional: The path parts that suffix the output subdirectory.
#        - Type: list(string)
#        - Default: []
#
#  * formatter
#    - Optional: A formatting specification for Zither outputs. The shape and
#      semantics of this parameter are identical to the `formatter` parameter
#      of `golden_files()`. While `formatter.extensions` is not consumed by
#      Zither - it makes sure to only format the appropriate files - it is
#      consumed in zither_golden_files() for the formatting of goldens outside
#      of Zither.
#    - Type: scope
#
supported_zither_backend_info = {
  c = {
    output_subdir = {
      prefix_parts = [ "lib" ]
      library_name_separator = "."
      suffix_parts = [ "c" ]
    }
    formatter = _clang_format

    _library_template = "_zither_c_family_library"
  }
  asm = {
    output_subdir = {
      prefix_parts = [ "lib" ]
      library_name_separator = "."
      suffix_parts = [ "asm" ]
    }
    formatter = _clang_format

    _library_template = "_zither_c_family_library"
  }
  go = {
    output_subdir = {
      library_name_separator = "/"
    }
    formatter = {
      script = "//prebuilt/third_party/go/$host_platform/bin/gofmt"

      # The go backend emits both go and text files; restrict the use of the
      # formatter to the go files.
      extensions = [ "go" ]
    }

    _library_template = "_zither_go_library"
  }
  rust = {
    output_subdir = {
      library_name_separator = "-"
    }
    formatter = {
      script = "$rustc_prefix/bin/rustfmt"
      inputs = [ "//rustfmt.toml" ]
      args = [ "--config-path=" + rebase_path(inputs[0], root_build_dir) ]
    }
    _library_template = "_zither_rust_library"
  }
  zircon_ifs = {
    output_subdir = {
    }
    _library_template = "_zither_zircon_ifs_file"
  }

  kernel = {
    formatter = _clang_format
    output_subdir = {
      prefix_parts = [
        "lib",
        "syscalls",
      ]
    }

    _library_template = "_zither_kernel_sources"
  }

  legacy_syscall_cdecl = {
    formatter = _clang_format
    output_subdir = {
      prefix_parts = [
        "zircon",
        "syscalls",
        "internal",
      ]
    }
    _library_template = "_zither_legacy_syscall_cdecl_sources"
  }

  rust_syscall = rust
}

# Internal Zither invocation helper template used by `zither_library()`.
#
# Parameters:
#
#  * backend
#    - Required: The Zither backend to invoke.
#    - Type: string
#
#  * fidl_ir_json
#    - Required: The path to the associated FIDL IR JSON file.
#    - Type: path
#
#  * fidl_ir_target
#    - Required: The label of the target that generates the FIDL IR JSON file.
#    - Type: label
#
#  * output_dir
#    - Required: The directory for Zither outputs.
#    - Type: path
#
#  * generated_files
#    - Required: The expected set of Zither outputs, which necessarily must
#      start with "$output_dir/".
#    - Type: list(path)
#
#  * formatter
#    - Optional: See `supported_zither_backend_info`.
#    - Type: scope.
#
#  * testonly, visibility, deps
#    - Usual GN meanings. `deps` is just expected to contain whatever produced
#      the FIDL IR file.
#
template("_zither") {
  if (current_toolchain == default_toolchain) {
    forward_variables_from(invoker,
                           [
                             "generated_files",
                             "backend",
                             "output_dir",
                             "formatter",
                           ])

    main_target = target_name

    # Internal subtarget used to check that a given backend's outputs were
    # fully specified; used for testing.
    output_check_target = "$target_name.check"

    output_manifest = "$output_dir/outputs.json"

    compiled_action(main_target) {
      forward_variables_from(invoker,
                             [
                               "testonly",
                               "fidl_ir_json",
                               "fidl_ir_target",
                             ])
      visibility = [ ":*" ]

      tool = "//zircon/tools/zither"

      inputs = [ fidl_ir_json ]
      outputs = generated_files + [ output_manifest ]
      args = [
        "-ir",
        rebase_path(fidl_ir_json, root_build_dir),
        "-backend",
        backend,
        "-output-manifest",
        rebase_path(output_manifest, root_build_dir),
        "-output-dir",
        rebase_path(output_dir, root_build_dir),
        "-source-dir",
        rebase_path("//", root_build_dir),
      ]

      if (defined(formatter)) {
        inputs += [ formatter.script ]
        args += [
          "-formatter",
          rebase_path(formatter.script, root_build_dir),
        ]
        if (defined(formatter.args)) {
          args += [ "-formatter-args" ] + formatter.args
        }
        if (defined(formatter.inputs)) {
          inputs += formatter.inputs
        }
      }
      deps = [ fidl_ir_target ]
    }

    # Ensures that the outputs were fully specified above.
    action(output_check_target) {
      forward_variables_from(invoker,
                             [
                               "testonly",
                               "visibility",
                             ])

      script = "//zircon/tools/zither/testing/check-outputs.py"

      # Stamp file.
      outputs = [ "$target_gen_dir/$output_check_target.stamp" ]

      inputs = generated_files + [ output_manifest ]
      args = [
               "--stamp",
               rebase_path(outputs[0], root_build_dir),
               "--manifest",
               rebase_path(output_manifest, root_build_dir),
             ] + rebase_path(generated_files, root_build_dir)
      deps = [ ":$main_target" ]
    }
  } else {
    group(target_name) {
      forward_variables_from(invoker, [ "testonly" ])
      visibility = [ ":*" ]
      deps = [ ":$target_name($default_toolchain)" ]
    }
    not_needed(invoker, "*", [ "testonly" ])
  }
}

#
# Internal language library helper templates used by `zither_library()`.
#
# Parameters:
#
#  * source_names
#    - Required: The list of the basenames (i.e., stripped of .fidl and
#      .test.fidl extensions) of the source FIDL files.
#
#  * output_subdir
#    - Required: The subdirectory of `output_dir` that has the Zither outputs
#      for entries.
#    - Type: relative path
#
#  * fidl_ir_json, fidl_ir_target, output_dir, formatter
#    - Same as `_zither()`.
#
#  * testonly, visibility, deps
#    - Usual GN meanings.
#

template("_zither_c_family_library") {
  main_target = target_name
  zither_target = "$target_name.gen"

  forward_variables_from(invoker,
                         [
                           "source_names",
                           "output_dir",
                           "output_subdir",
                         ])

  generated_files = []
  foreach(name, source_names) {
    generated_files += [ "${output_dir}/${output_subdir}/${name}.h" ]
  }

  _zither(zither_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "deps",
                             "fidl_ir_json",
                             "fidl_ir_target",
                             "generated_files",
                             "backend",
                             "formatter",
                           ])
  }

  library_headers(main_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "generated_files",
                           ])
    include_dir = output_dir
    headers = rebase_path(generated_files, include_dir)
    deps = [
      ":${zither_target}($default_toolchain)",
      ":${zither_target}.check($default_toolchain)",
    ]
  }
}

template("_zither_go_library") {
  assert(invoker.backend == "go")

  main_target = target_name
  zither_target = "$target_name.gen"

  forward_variables_from(invoker,
                         [
                           "source_names",
                           "output_dir",
                           "output_subdir",
                         ])

  generated_files = [ "${output_dir}/${output_subdir}/pkg_name.txt" ]
  foreach(name, source_names) {
    generated_files += [ "${output_dir}/${output_subdir}/${name}.go" ]
  }

  _zither(zither_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "deps",
                             "fidl_ir_json",
                             "fidl_ir_target",
                             "generated_files",
                             "formatter",
                           ])
    backend = "go"
  }

  go_library(main_target) {
    forward_variables_from(invoker,
                           [
                             "visibility",
                             "testonly",
                             "generated_files",
                           ])
    name = output_subdir
    source_dir = "${output_dir}/${output_subdir}"
    sources = rebase_path(generated_files, source_dir)
    non_go_deps = [
      ":${zither_target}($default_toolchain)",
      ":${zither_target}.check($default_toolchain)",
    ]
  }
}

template("_zither_rust_library") {
  assert(invoker.backend == "rust" || invoker.backend == "rust_syscall")

  main_target = target_name
  zither_target = "$target_name.gen"

  forward_variables_from(invoker,
                         [
                           "source_names",
                           "output_dir",
                           "output_subdir",
                         ])

  generated_files = []
  if (invoker.backend == "rust_syscall") {
    crate_root = "${output_dir}/${output_subdir}/src/definitions.rs"
    crate_deps = [ "//src/lib/zircon/rust:fuchsia-zircon-types" ]
    not_needed([ "source_names" ])
  } else {
    foreach(name, source_names) {
      generated_files += [ "${output_dir}/${output_subdir}/src/${name}.rs" ]
    }
    crate_root = "${output_dir}/${output_subdir}/src/lib.rs"
    crate_deps = [ "//third_party/rust_crates:bitflags" ]
  }
  generated_files += [ crate_root ]

  _zither(zither_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "deps",
                             "fidl_ir_json",
                             "fidl_ir_target",
                             "generated_files",
                             "backend",
                             "formatter",
                           ])
  }

  rustc_library(main_target) {
    forward_variables_from(invoker,
                           [
                             "visibility",
                             "testonly",
                           ])
    name = output_subdir
    edition = "2021"
    source_root = crate_root
    sources = generated_files
    non_rust_deps = [
      ":${zither_target}($default_toolchain)",
      ":${zither_target}.check($default_toolchain)",
    ]
    deps = crate_deps
    configs -= [ "//build/config/rust/lints:allow_unused_results" ]
  }
}

template("_zither_zircon_ifs_file") {
  assert(invoker.backend == "zircon_ifs")

  main_target = target_name
  zither_target = "$target_name.gen"

  not_needed(invoker, [ "source_names" ])

  forward_variables_from(invoker, [ "output_dir" ])
  ifs_file = "${output_dir}/zircon.ifs"

  _zither(zither_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "deps",
                             "fidl_ir_json",
                             "fidl_ir_target",
                           ])
    backend = "zircon_ifs"
    generated_files = [ ifs_file ]
  }

  group(main_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    public_deps = [
      ":${zither_target}($default_toolchain)",
      ":${zither_target}.check($default_toolchain)",
    ]

    metadata = {
      link_output_barrier = []
      link_output_path = [ rebase_path(ifs_file, root_build_dir) ]
    }
  }
}

template("_zither_kernel_sources") {
  assert(invoker.backend == "kernel")

  main_target = target_name
  zither_target = "$target_name.gen"

  not_needed(invoker, [ "source_names" ])

  forward_variables_from(invoker,
                         [
                           "output_dir",
                           "output_subdir",
                         ])
  generated_files = [
    "$output_dir/${output_subdir}/category.inc",
    "$output_dir/${output_subdir}/kernel.inc",
    "$output_dir/${output_subdir}/kernel-wrappers.inc",
    "$output_dir/${output_subdir}/syscalls.inc",
    "$output_dir/${output_subdir}/zx-syscall-numbers.h",
  ]

  _zither(zither_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "deps",
                             "backend",
                             "fidl_ir_json",
                             "fidl_ir_target",
                             "generated_files",
                             "formatter",
                           ])
  }

  library_headers(main_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "generated_files",
                           ])
    include_dir = output_dir
    headers = rebase_path(generated_files, include_dir)
    deps = [
      ":${zither_target}($default_toolchain)",
      ":${zither_target}.check($default_toolchain)",
    ]
  }
}

template("_zither_legacy_syscall_cdecl_sources") {
  assert(invoker.backend == "legacy_syscall_cdecl")

  main_target = target_name
  zither_target = "$target_name.gen"

  not_needed(invoker, [ "source_names" ])

  forward_variables_from(invoker,
                         [
                           "output_dir",
                           "output_subdir",
                         ])
  generated_files = [
    "$output_dir/${output_subdir}/cdecls.inc",
    "$output_dir/${output_subdir}/cdecls-next.inc",
    "$output_dir/${output_subdir}/testonly-cdecls.inc",
  ]

  _zither(zither_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "deps",
                             "backend",
                             "fidl_ir_json",
                             "fidl_ir_target",
                             "generated_files",
                             "formatter",
                           ])
  }

  library_headers(main_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "generated_files",
                           ])
    include_dir = output_dir
    headers = rebase_path(generated_files, include_dir)
    deps = [
      ":${zither_target}($default_toolchain)",
      ":${zither_target}.check($default_toolchain)",
    ]
  }
}

# Define a full set of per-backend targets for a Zither library.
#
# `zither_library()` is meant to be instantiated within `fidl()`. It consumes
# FIDL source and defines the relevant language library targets that collect
# the bindings of the various supported Zither backends. These backends are
# listed in `supported_zither_backends` and the details of their bindings can
# be found in //zircon/tools/zither/README.md. The associated backend library
# subtargets are as follows where `${output_subdir}` is as described above in
# `supported_zither_backend_info`:
#
# Subtargets:
#
#   * C backend: ${target_name}.c
#     A C library target (e.g., a source set or static library), whose
#     generated headers are of the form `<${output_subdir}/${filename}>` for
#     each basename of the associated FIDL source files.
#
#   * Go backend: ${target_name}.go
#     A `go_library()` with a package name of ${output_subdir} (which is
#     written to pkg_name.txt alongside the bindings).
#
#   * Assembly backend: ${target_name}.asm
#     An assembly library target (e.g., a source set), whose generated headers
#     are of the form `<${output_subdir}/${filename}>` for each basename of the
#     associated FIDL source files.
#
#   * zircon.ifs backend: ${target_name}.zircon_ifs
#     A dependency generating a "zircon.ifs" (i.e., a text ABI specification of
#     libzircon.so). The file is intended to be accessed via
#     `zither_golden_files()` and checked in as source.
#
#   * kernel: ${target_name}.kernel
#     A C++ library target for the kernel with the following headers:
#       - <lib/syscalls/category.inc>: a categorization of syscalls with macro
#         helpers.
#       - <lib/syscalls/kernel-wrappers.inc>: kernel-side boilerplate for
#         syscall definitions.
#       - <lib/syscalls/kernel.inc>: macro-templated enumeration of syscalls
#         from the kernel's point of view.
#       - <lib/syscalls/syscalls.inc>: macro-templated enumeration of syscalls
#         from userspace's point of view.
#       - <lib/syscalls/zx-syscall-numbers.h>: `#define`s of syscall numbers.
#
#   * Legacy syscall C declaration backend: ${target_name}.legacy_syscall_cdecl
#     A C++ library target for the kernel with the following headers:
#       - internal/cdecls.inc: macro-templated enumeration of syscalls meant
#         for the public headers
#       - internal/testonly-cdecls.inc: similar to cdecls.inc, but consisting
#         of the test-only syscalls.
#       - internal/cdecls-next.inc: similar to cdecls.inc, but consisting
#         of the "next" syscalls.
#
#   * Rust syscall backend: ${target_name}.rust_syscall
#     Generates a crate consisting of thin FFI syscall wrappers.
#
# Parameters:
#
#  * library_name
#    - Required: The name of the FIDL library.
#    - Type: string
#
#  * sources
#    - Required: The input FIDL sources, comprising one library necessarily of the
#      name $target_name.
#    - Type: list(path)
#
#  * fidl_gen_dir
#    - Required: The directory under which Zither outputs should be generated.
#    - Type: path
#
#  * fidl_ir_json
#    - Required: The path to the associated FIDL IR JSON file.
#    - Type: path
#
#  * fidl_ir_target
#    - Required: The label of the target that generates the FIDL IR JSON file.
#    - Type: label
#
template("zither_library") {
  assert(defined(invoker.sources),
         "zither_library(\"$target_name\") requires `sources`")
  assert(defined(invoker.library_name),
         "zither_library(\"target_name\") must define `library_name`")
  assert(defined(invoker.fidl_gen_dir),
         "zither_library(\"target_name\") must define `fidl_gen_dir`")
  assert(defined(invoker.fidl_ir_json),
         "zither_library(\"target_name\") must define `fidl_ir_json`")
  assert(defined(invoker.fidl_ir_target),
         "zither_library(\"target_name\") must define `fidl_ir_target`")

  foreach(backend, supported_zither_backends) {
    backend_info = {
    }  # Clear from previous iteration.
    backend_info = supported_zither_backend_info[backend]

    target(backend_info._library_template, "${target_name}.${backend}") {
      forward_variables_from(invoker,
                             [
                               "testonly",
                               "visibility",
                               "fidl_gen_dir",
                               "fidl_ir_json",
                               "fidl_ir_target",
                               "backend",
                             ])
      forward_variables_from(backend_info, [ "formatter" ])

      output_dir = "${fidl_gen_dir}/${backend}"
      output_subdir_info = {
        prefix_parts = []
        suffix_parts = []
        forward_variables_from(backend_info.output_subdir, "*")
        parts = prefix_parts
        if (defined(library_name_separator)) {
          parts += [ string_replace(invoker.library_name,
                                    ".",
                                    library_name_separator) ]
        }
        parts += suffix_parts
        path = string_join("/", parts)
      }
      if (output_subdir_info.path != "") {
        output_subdir = output_subdir_info.path
      }

      source_names = []
      foreach(source, invoker.sources) {
        # Strip any .fidl or .test.fidl extensions.
        name = get_path_info(source, "name")
        if (get_path_info(name, "extension") == "test") {
          name = get_path_info(name, "name")
        }

        # Ignore overview.fidl files, which do not contribute declarations:
        #
        # See https://fuchsia.dev/fuchsia-src/development/languages/fidl/guides/style#library-overview.
        if (name != "overview") {
          source_names += [ name ]
        }
      }
    }
  }
}
