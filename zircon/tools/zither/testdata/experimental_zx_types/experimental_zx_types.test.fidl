// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file excludes enum and bits constants, so that enum/bits support can be
// tested as a whole.
library zither.experimental.zx.types;

/// 'a'
const CHAR_CONST uchar = 97;
const SIZE_CONST usize64 = 100;
const UINTPTR_CONST uintptr64 = 0x1234abcd5678ffff;

type StructWithPrimitives = struct {
    char_field uchar;
    size_field usize64;
    uintptr_field uintptr64;
};

alias Uint8Alias = uint8;

type StructWithPointers = struct {
    u64ptr experimental_pointer<uint64>;
    charptr experimental_pointer<uchar>;
    usizeptr experimental_pointer<usize64>;
    byteptr experimental_pointer<byte>;
    @voidptr
    voidptr experimental_pointer<byte>;
    @embedded_alias("zither.experimental.zx.types/Uint8Alias")
    aliasptr experimental_pointer<Uint8Alias>;
};


type StructWithStringArrays = struct {
    str string_array<10>;
    strs array<string_array<6>, 4>;
};

type OverlayStructVariant = struct {
    value uint64;
};

type OverlayWithEquallySizedVariants = strict overlay {
    1: a uint64;
    2: b int64;
    3: c OverlayStructVariant;
    4: d uint64;
};

type OverlayWithDifferentlySizedVariants = strict overlay {
    1: a OverlayStructVariant;
    2: b uint32;
    3: c bool;
};
