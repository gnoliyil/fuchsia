// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library zx;

alias Time = uint64;

type Status = enum : int32 {
    OK = 0;
    BAD = 1;
};

type Subtype = enum : uint32 {
    CHANNEL = 1;
    RESOURCE = 2;
};

resource_definition handle : uint32 {
    properties {
        subtype Subtype;
    };
};

@transport("Syscall")
protocol Channel {
    @handle_unchecked
    Read(resource struct {
        handle handle:CHANNEL;
        options uint32;
        @out
        @voidptr
        bytes experimental_pointer<byte>;
        @out
        handles experimental_pointer<handle>;
        num_bytes uint32;
        num_handles uint32;
    }) -> (resource struct {
        actual_bytes uint32;
        actual_handles uint32;
    }) error Status;

    Write(resource struct {
        handle handle:CHANNEL;
        options uint32;
        @voidptr
        @size32
        bytes vector<byte>;
        @release
        @size32
        handles vector<handle>;
    }) -> () error Status;
};

@transport("Syscall")
@no_protocol_prefix
protocol Clockfuncs {
    @vdsocall
    ClockGetMonotonic() -> (@wrapped_return struct {
        time Time;
    });

    @internal
    ClockGetMonotonicViaKernel() -> (@wrapped_return struct {
        time Time;
    });
};

@transport("Syscall")
@no_protocol_prefix
protocol Handlefuncs {
    HandleCloseMany(resource struct {
        @release
        handles vector<handle>;
    }) -> () error Status;
};

@transport("Syscall")
protocol Ktrace {
    Control(resource struct {
        handle handle:RESOURCE;
        action uint32;
        options uint32;

        @inout
        @voidptr
        ptr experimental_pointer<byte>;
    }) -> () error Status;
};

@transport("Syscall")
@no_protocol_prefix
protocol Misc {
    @blocking
    Nanosleep(struct {
        deadline Time;
    }) -> () error Status;
};

@transport("Syscall")
protocol Process {
    @noreturn
    Exit(struct {
        retcode int64;
    });
};

@transport("Syscall")
protocol System {
    @const
    @vdsocall
    GetPageSize() -> (@wrapped_return struct {
        size uint32;
    });
};

@transport("Syscall")
protocol Syscall {
    @next
    Next();

    @testonly
    Test0();

    @testonly
    @test_category1
    Test1();

    @testonly
    @test_category2
    Test2();
};
