// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library zx;

alias Time = uint64;

type Status = enum : int32 {
    OK = 0;
    BAD = 1;
};

type Subtype = enum : uint32 {
    CHANNEL = 1;
    RESOURCE = 2;
};

resource_definition Handle : uint32 {
    properties {
        subtype Subtype;
    };
};

@transport("Syscall")
closed protocol Channel {
    @handle_unchecked
    strict Read(resource struct {
        handle Handle:CHANNEL;
        options uint32;
        @out
        @voidptr
        bytes experimental_pointer<byte>;
        @out
        handles experimental_pointer<Handle>;
        num_bytes uint32;
        num_handles uint32;
    }) -> (resource struct {
        actual_bytes uint32;
        actual_handles uint32;
    }) error Status;

    strict Write(resource struct {
        handle Handle:CHANNEL;
        options uint32;
        @voidptr
        @size32
        bytes vector<byte>;
        @release
        @size32
        handles vector<Handle>;
    }) -> () error Status;
};

@transport("Syscall")
@no_protocol_prefix
closed protocol Clockfuncs {
    @vdsocall
    strict ClockGetMonotonic() -> (@wrapped_return struct {
        time Time;
    });

    @internal
    strict ClockGetMonotonicViaKernel() -> (@wrapped_return struct {
        time Time;
    });
};

@transport("Syscall")
@no_protocol_prefix
closed protocol Handlefuncs {
    strict HandleCloseMany(resource struct {
        @release
        handles vector<Handle>;
    }) -> () error Status;
};

@transport("Syscall")
closed protocol Ktrace {
    strict Control(resource struct {
        handle Handle:RESOURCE;
        action uint32;
        options uint32;

        @inout
        @voidptr
        ptr experimental_pointer<byte>;
    }) -> () error Status;
};

@transport("Syscall")
@no_protocol_prefix
closed protocol Misc {
    /// ## Summary
    ///
    /// High resolution sleep.
    ///
    /// ## Declaration
    ///
    /// ```c
    /// #include <zircon/syscalls.h>
    ///
    /// zx_status_t zx_nanosleep(zx_time_t deadline);
    /// ```
    ///
    /// ## Description
    ///
    /// `zx_nanosleep()` suspends the calling thread execution until *deadline* passes
    /// on **ZX_CLOCK_MONOTONIC**. *deadline* will be automatically adjusted according to the job's
    /// [timer slack] policy.
    ///
    /// To sleep for a duration, use [`zx_deadline_after()`] and the
    /// **ZX_\<time-unit\>** helpers:
    ///
    /// ```
    /// #include <zircon/syscalls.h> // zx_deadline_after, zx_nanosleep
    /// #include <zircon/types.h> // ZX_MSEC et al.
    ///
    /// // Sleep 50 milliseconds
    /// zx_nanosleep(zx_deadline_after(ZX_MSEC(50)));
    /// ```
    ///
    /// ## Rights
    ///
    /// None.
    ///
    /// ## Return value
    ///
    /// `zx_nanosleep()` always returns **ZX_OK**.
    ///
    /// ## See also
    ///
    ///  - [timer slack]
    ///  - [`zx_deadline_after()`]
    ///  - [`zx_timer_cancel()`]
    ///  - [`zx_timer_create()`]
    ///  - [`zx_timer_set()`]
    ///
    /// [timer slack]: /docs/concepts/kernel/timer_slack.md
    /// [`zx_deadline_after()`]: deadline_after.md
    /// [`zx_timer_cancel()`]: timer_cancel.md
    /// [`zx_timer_create()`]: timer_create.md
    /// [`zx_timer_set()`]: timer_set.md
    @blocking
    strict Nanosleep(struct {
        deadline Time;
    }) -> () error Status;
};

@transport("Syscall")
closed protocol Process {
    @noreturn
    strict Exit(struct {
        retcode int64;
    });
};

@transport("Syscall")
closed protocol System {
    @const
    @vdsocall
    strict GetPageSize() -> (@wrapped_return struct {
        size uint32;
    });
};

@transport("Syscall")
closed protocol Syscall {
    @next
    strict Next();

    @testonly
    strict Test0();

    @testonly
    @test_category1
    strict Test1();

    @testonly
    @test_category2
    strict Test2();
};
