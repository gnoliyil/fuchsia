{{/*
// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}
{{- define "GenerateRustOverlay" -}}

{{- $name := UpperCamelCase . }}
{{- $discType := print $name "Discriminant" }}
{{- $attrs := OverlayAttributes . }}

{{ range .Comments }}
///{{ . }}
{{- end }}
{{- range $attrs }}
{{ . }}
{{- end }}
pub struct {{ $name }} {
    pub discriminant: {{ $discType }},
    pub variant: {{ $name }}Variant,
}

{{ range U64EnumAttributes }}
{{ . }}
{{- end }}
pub enum {{ $discType }} {
{{ range .Variants }}
{{- if .Comments }}
{{ range .Comments }}
    ///{{ . }}
{{- end }}
{{ end -}}
    {{ UpperCamelCase . }} = {{ .Discriminant }},
{{ end }}
}

// TODO(https://github.com/rust-lang/rust/issues/49804): Define anonymously.
{{- range $attrs }}
{{ . }}
{{- end }}
pub union {{ $name }}Variant {
{{ range .Variants }}
    pub {{ LowerCaseWithUnderscores . }}: {{ DescribeType .Type }},
{{- end }}
}

impl {{ $name }} {
{{ range .Variants }}
    pub fn is_{{ .Name }}(&self) -> bool {
        self.discriminant == {{ $discType }}::{{ UpperCamelCase . }}
    }

    pub fn as_{{ .Name }}(&mut self) -> Option<&mut {{ DescribeType .Type }}> {
        if self.is_{{ .Name }}() {
            return None;
        }
        unsafe { Some(&mut self.variant.{{ LowerCaseWithUnderscores . }}) }
    }
{{ end }}
}

{{ end }}
