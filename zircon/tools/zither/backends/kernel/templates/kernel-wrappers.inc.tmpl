{{/*
// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}
{{- define "Generate-kernel-wrappers.inc" -}}
// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT. Generated from FIDL library zx by zither, a Fuchsia platform
// tool.

extern "C" {

{{ range . }}
{{ if not .IsVdsoCall }}
{{ $syscallName := LowerCaseWithUnderscores . }}
{{ $userOutHandles := UserOutHandles . }}
{{ $lastParamIndex := LastParameterIndex . }}

syscall_result wrapper_{{ $syscallName }}(
{{- range .Parameters -}}
SafeSyscallArgument<{{ ParameterType . }}>::RawType {{ LowerCaseWithUnderscores . }},
{{- end -}}
uint64_t pc);
syscall_result wrapper_{{ $syscallName }}(
{{- range .Parameters -}}
SafeSyscallArgument<{{ ParameterType . }}>::RawType {{ LowerCaseWithUnderscores . }},
{{- end -}}
uint64_t pc) {
    return do_syscall(
        ZX_SYS_{{ $syscallName }}, pc, &VDso::ValidSyscallPC::{{ $syscallName }},
        [&](ProcessDispatcher* current_process) -> uint64_t {
{{/* Write out locals for the ouput handles */}}
{{- range $userOutHandles }}
    user_out_handle out_handle_{{ LowerCaseWithUnderscores . }};
{{- end }}

{{- if .NoReturn }} /*noreturn*/ {{ else }} auto result = {{ end }} sys_{{ $syscallName }} (
{{- range $i, $param := .Parameters }}
{{- $paramName := LowerCaseWithUnderscores $param }}
{{- $paramType := ParameterType $param }}
{{- $arg := printf "SafeSyscallArgument<%s>::Sanitize(%s)" $paramType $paramName }}
{{- if PassedAsPointer $param }}
    {{- if IsUserOutHandle $param }}
        {{- $arg = printf "&out_handle_%s" $paramName }}
    {{- else if $param.IsStrictInput }}
        {{- $arg = printf "make_user_in_ptr(%s)" $arg }}
    {{- else if $param.IsStrictOutput }}
        {{- $arg = printf "make_user_out_ptr(%s)" $arg }}
    {{- else }}
        {{- $arg = printf "make_user_inout_ptr(%s)" $arg }}
    {{- end }}
{{- end }}
    {{ $arg }}{{ if ne $i $lastParamIndex }},{{end}}
{{- end -}}
);
{{- if len $userOutHandles }} {{/* Complete copy-out of output handles. */}}
    if (result != ZX_OK)
        return result;
{{- end }}
{{- range $userOutHandles }}
    result = out_handle_{{ LowerCaseWithUnderscores . }}.begin_copyout(current_process, make_user_out_ptr(SafeSyscallArgument<{{ ParameterType . }}>::Sanitize({{ LowerCaseWithUnderscores . }})));
    if (result != ZX_OK)
        return result;
{{- end }}
{{- range $userOutHandles }}
    out_handle_{{ LowerCaseWithUnderscores . }}.finish_copyout(current_process);
{{- end }}

{{- if .NoReturn }}
    /* NOTREACHED */
    return ZX_ERR_BAD_STATE;
{{- else }}
    return result;
{{- end }}
});
}

{{ end }}
{{ end }}

}
{{ end }}
