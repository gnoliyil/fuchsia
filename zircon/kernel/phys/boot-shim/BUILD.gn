# Copyright 2021 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

import("//build/testing/zbi_test.gni")
import("//build/zbi/kernel_cmdline.gni")
import("//zircon/kernel/phys/efi/efi_executable.gni")
import("//zircon/kernel/phys/qemu.gni")
import("//zircon/kernel/phys/test/turducken_zbi_test.gni")
import("//zircon/kernel/phys/zbi_executable.gni")

group("boot-shim") {
  deps = [
    ":efi-boot-shim",
    ":zbi-boot-shim",
  ]
  if (current_cpu == "x64") {
    deps += [ "//zircon/kernel/arch/x86/phys/boot-shim" ]
  }
}

zbi_executable("zbi-boot-shim") {
  deps = [ ":noop-boot-shim" ]
}

if (toolchain_environment == "kernel.phys") {
  source_set("noop-boot-shim") {
    sources = [ "zbi-boot-shim.cc" ]
    include_dirs = [ "//zircon/kernel/phys" ]
    deps = [
      "//src/lib/zbitl",
      "//zircon/kernel/phys:allocation",
      "//zircon/kernel/phys:boot-zbi",
      "//zircon/kernel/phys:main",
      "//zircon/kernel/phys:symbolize",
      "//zircon/kernel/phys:zbi-memory",
    ]
  }
}

efi_executable("efi-boot-shim") {
  sources = [ "efi-boot-shim.cc" ]
  defines = [ "DEFAULT_ZBI_FILENAME=\"boot${efi_cpu}.zbi\"" ]
  deps = [
    "//zircon/kernel/lib/ktl",
    "//zircon/kernel/lib/libc",
    "//zircon/kernel/phys/efi:efi-boot-zbi",
    "//zircon/kernel/phys/efi:file",
    "//zircon/kernel/phys/efi:main",
    "//zircon/kernel/phys/lib/boot-shim",
  ]
}

group("tests") {
  testonly = true

  deps = [ ":boot-shim" ]

  if (current_cpu == "x64") {
    deps += [ "//zircon/kernel/arch/x86/phys/boot-shim:tests" ]
  }
}

group("boot_tests") {
  testonly = true
  deps = [
    ":zbi-boot-shim-core-tests",
    ":zbi-boot-shim-phys-unittests",
    ":zbi-debugdata-boot-shim-hello-world-test",
    ":zbi-debugdata-boot-shim-test",
  ]

  if (current_cpu == "x64") {
    deps += [ "//zircon/kernel/arch/x86/phys/boot-shim:boot_tests" ]
  }
}

zbi_test("zbi-boot-shim-phys-unittests") {
  deps = [
    ":zbi-boot-shim",
    "//zircon/kernel/phys/test:zbi-phys-unittests.zbi($phys_toolchain)",
  ]

  # Set a short timeout since the tests don't reliably reboot the machine.
  timeout = qemu_short_timeout
}

zbi_test("zbi-boot-shim-core-tests") {
  deps = [
    ":zbi-boot-shim",
    "//zircon/system/utest/core:core-tests.zbi($default_toolchain)",
  ]
}

zbi_executable("debugdata-boot-shim-test") {
  testonly = true

  sources = [ "debugdata-boot-shim-test.cc" ]
  deps = [
    "//zircon/kernel/lib/arch",
    "//zircon/kernel/phys/lib/boot-shim",
    "//zircon/kernel/phys/test:turducken",
  ]
}

# This brings the test program and the command-line to tell it to be the turkey
# that publishes data for the duck to see.
kernel_cmdline("debugdata-boot-shim-test.publish") {
  visibility = [ ":*" ]
  testonly = true
  args = [ "debugdata.publish" ]
  deps = [ ":debugdata-boot-shim-test" ]
}

# This just repacks the ZBI executable as a ZBI again, which doesn't change its
# contents.  But it gets the file into a place where get_target_outputs() can
# find it without being in the right phys toolchain.
zbi("debugdata-boot-shim-test.zbi") {
  visibility = [ ":*" ]
  testonly = true
  deps = [ ":debugdata-boot-shim-test" ]
}

# This just packs the same test as the turkey and the duck, the second instance
# won't get the "publish" command line so it will check instead.
turducken_zbi_test("zbi-debugdata-boot-shim-test") {
  kernel = ":debugdata-boot-shim-test.publish"

  # This needs a dependency on the zbi() target so it can use its output as an
  # input.  data_deps vs deps keeps it from being folded as a zbi_input() into
  # the outer ZBI being created.  The second output from the zbi() target is
  # the JSON file; we only want the ZBI file, which is the first output.
  data_deps = [ ":debugdata-boot-shim-test.zbi" ]
  zbi_files = get_target_outputs(data_deps[0])
  sources = [ zbi_files[0] ]
}

# This just repacks the hello-world-test ZBI executable as a ZBI again, which
# doesn't change its contents.  But it gets the file into a place where
# get_target_outputs() in this BUILD.gn file can find it.
zbi("zbi-hello-world-test") {
  visibility = [ ":*" ]
  testonly = true
  deps = [ "//zircon/kernel/phys/test:zbi-hello-world-test.executable($phys_toolchain)" ]
}

# This is the duck inside the turkey below.  It checks for the debugdata item
# and then hands off to its chicken: the hello-world test.
turducken_zbi_test("debugdata-boot-shim-test.hello-world-test") {
  visibility = [ ":*" ]
  kernel = ":debugdata-boot-shim-test"
  data_deps = [ ":zbi-hello-world-test" ]
  zbi_files = get_target_outputs(data_deps[0])
  sources = [ zbi_files[0] ]
}

# This will add the debugdata, hand off the the duck above that checks it
# and then hands off to hello-world-test.
turducken_zbi_test("zbi-debugdata-boot-shim-hello-world-test") {
  kernel = ":debugdata-boot-shim-test.publish"
  data_deps = [ ":debugdata-boot-shim-test.hello-world-test.zbi" ]
  zbi_files = get_target_outputs(data_deps[0])
  sources = [ zbi_files[0] ]
}
