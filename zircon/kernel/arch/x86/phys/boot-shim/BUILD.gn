# Copyright 2021 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

import("//build/images/args.gni")
import("//build/test.gni")
import("//build/testing/zbi_test.gni")
import("//build/toolchain/toolchain_environment.gni")
import("//zircon/kernel/phys/phys_executable.gni")
import("//zircon/kernel/phys/qemu.gni")
import("//zircon/kernel/phys/zbi_executable.gni")

# All these 32-bit legacy shims can be booted directly by QEMU.
legacy_shims = [
  {
    name = "linux-x86-boot-shim"
    format = "linuxboot"
  },
  {
    name = "multiboot-shim"
    format = "multiboot"
  },
  {
    # This boot shim is not meant to be used with qemu, but it works with it.
    # So we test it via qemu just to get some automated testing of it at all.
    # Its logic that differs from multiboot-shim won't really be exercised this
    # way, so it needs direct testing on Chromebook devices too.
    name = "depthcharge-multiboot-shim"
    format = "multiboot"
  },
]

group("boot-shim") {
  deps = [
    ":pic-1mb-boot-shim",
    ":x86-legacy-zbi-boot-shim",
  ]
  foreach(shim, legacy_shims) {
    deps += [ ":${shim.name}" ]
  }
}

# This is a shim between a legacy 1M ZBI boot loader and a modern
# position-independent ZBI.  It's just the plain ZBI boot shim but
# linked at the fixed 1M load address instead of linked at zero.  Like
# that shim, it's simply a ZBI kernel item prepended to a bootable ZBI
# to make the shimmed bootable ZBI--in this case, the 1M protocol ZBI.
zbi_executable("x86-legacy-zbi-boot-shim") {
  sources = [ "x86-legacy-zbi-boot-shim.cc" ]
  deps = [
    ":legacy-mem-config",
    "//src/lib/zbitl",
    "//zircon/kernel/lib/ktl",
    "//zircon/kernel/lib/libc",
    "//zircon/kernel/phys:allocation",
    "//zircon/kernel/phys:boot-zbi",
    "//zircon/kernel/phys:main",
    "//zircon/kernel/phys:symbolize",
    "//zircon/kernel/phys/lib/boot-shim",
  ]

  configs -= [ "//zircon/kernel/phys:load-pic" ]
  configs += [ "//zircon/kernel/arch/x86/phys:load-1mb" ]
}

# This is the inverse shim: between a modern ZBI boot loader that
# supports only the position-independent protocol, and a legacy ZBI
# that must be loaded at the 1M fixed address.  It's also just a ZBI
# kernel item prepended to a bootable ZBI to make the shimmed bootable
# ZBI--in this case, the position-independent protocol ZBI.
zbi_executable("pic-1mb-boot-shim") {
  # The add, remove trick ensures these are removed, whether or not they're
  # present in the default configs list.
  configs += [ "//zircon/kernel/arch/x86/phys:load-1mb" ]
  configs -= [ "//zircon/kernel/arch/x86/phys:load-1mb" ]
  configs += [ "//zircon/kernel/phys:load-pic" ]
  configs -= [ "//zircon/kernel/phys:load-pic" ]

  # Now add the one we want.
  configs += [ "//zircon/kernel/phys:load-pic" ]

  sources = [ "pic-1mb-shim.cc" ]
  deps = [
    "//src/lib/zbitl",
    "//zircon/kernel/phys:main",
    "//zircon/kernel/phys:symbolize",
    "//zircon/kernel/phys:trampoline-boot",
    "//zircon/kernel/phys:zbi-memory",
    "//zircon/kernel/phys/lib/memalloc",
  ]
}

zbi_executable("phys-1mb-hello-world") {
  testonly = true

  # The add, remove trick ensures these are removed, whether or not they're
  # present in the default configs list.
  configs += [ "//zircon/kernel/arch/x86/phys:load-1mb" ]
  configs -= [ "//zircon/kernel/arch/x86/phys:load-1mb" ]
  configs += [ "//zircon/kernel/phys:load-pic" ]
  configs -= [ "//zircon/kernel/phys:load-pic" ]

  # Now add the one we want.
  configs += [ "//zircon/kernel/arch/x86/phys:load-1mb" ]

  deps = [
    "//zircon/kernel/phys:symbolize",
    "//zircon/kernel/phys/test:hello-world-test.source",
    "//zircon/kernel/phys/test:zbi-test-main",
  ]
}

zbi_test("x86-boot-shim-tests") {
  # The order matters here!
  deps = [
    # First, the 1M shim: boot loaders in use today support the 1M protocol.
    ":x86-legacy-zbi-boot-shim",

    # Second, the 1M->PIC shim hands off to the PIC->1M shim.
    ":pic-1mb-boot-shim",

    # Finally, the PIC->1M shim hands off to the 1M test program.
    ":phys-1mb-hello-world",
  ]
}

source_set("legacy-mem-config") {
  visibility = [ ":*" ]
  sources = [ "legacy-mem-config.cc" ]
  public_deps = [
    "//sdk/lib/stdcompat",

    # legacy-mem-config.h has #include <lib/zbi-format/zbi.h>
    "//sdk/lib/zbi-format",

    # legacy-mem-config.h has #include <efi/boot-services.h>
    "//zircon/kernel/lib/efi",

    # legacy-mem-config.h has #include <lib/zbitl/storage-traits.h>
    "//src/lib/zbitl",

    # legacy-mem-config.h has #include <lib/fit/result.h>
    "//zircon/system/ulib/zx",

    # mem-config.h has #include <lib/zircon-internal/e820.h>
    "//zircon/system/ulib/zircon-internal",
  ]

  if (is_kernel) {
    deps = [
      "//zircon/kernel/lib/ktl",
      "//zircon/kernel/lib/libc",
    ]
    public_deps += [ "//zircon/kernel/lib/ktl:headers" ]
  }
}

if (toolchain_environment == "kernel.phys32") {
  source_set("legacy-boot-shim") {
    public = [ "legacy-boot-shim.h" ]
    sources = [ "legacy-boot-shim.cc" ]
    public_deps = [
      ":stdout",
      "..:legacy-boot",
      "//zircon/kernel/lib/acpi_lite",
      "//zircon/kernel/lib/arch",
      "//zircon/kernel/lib/boot-options",
      "//zircon/kernel/lib/ktl",
      "//zircon/kernel/lib/libc",
      "//zircon/kernel/phys:acpi",
      "//zircon/kernel/phys:address-space",
      "//zircon/kernel/phys:main",
      "//zircon/kernel/phys:symbolize",
      "//zircon/kernel/phys:trampoline-boot",
      "//zircon/kernel/phys/lib/boot-shim",
      "//zircon/system/ulib/hwreg",
    ]
    deps = [ "//zircon/kernel/phys:uart" ]
    friend = [ ":legacy-boot-shim-tests" ]
  }

  source_set("stdout") {
    sources = [ "stdout.cc" ]
    public = [ "stdout.h" ]
    deps = [
      "//zircon/kernel/lib/boot-options",
      "//zircon/kernel/phys:stdio",
      "//zircon/kernel/phys:uart",
    ]
  }

  phys_executable("linux-x86-boot-shim") {
    sources = [ "linux-x86-boot-shim.cc" ]
    deps = [
      ":legacy-boot-shim",
      "..:linuxboot",
      "//zircon/kernel/phys:symbolize",
    ]
  }

  phys_executable("multiboot-shim") {
    sources = [ "multiboot-shim.cc" ]
    deps = [
      ":legacy-boot-shim",
      "..:multiboot",
      "//zircon/kernel/phys:symbolize",
    ]

    # This marks it as the official default boot shim for using QEMU.
    images_metadata = {
      name = "qemu-kernel"
      archive = add_qemu_to_build_archives
    }

    # Everything should find this via the //:images build API.
    # But some things might still look for "out/.../multiboot.bin" directly.
    output_dir = root_build_dir
    output_name = "multiboot"
  }

  phys_executable("depthcharge-multiboot-shim") {
    sources = [ "depthcharge-multiboot-shim.cc" ]
    deps = [
      ":legacy-boot-shim",
      "..:multiboot",
      "//sdk/lib/fit",
      "//sdk/lib/zbi-format",
      "//zircon/kernel/phys:stdio",
      "//zircon/kernel/phys:symbolize",
      "//zircon/kernel/phys:uart",
      "//zircon/system/ulib/uart",
    ]
  }
} else {
  foreach(shim, legacy_shims) {
    group(shim.name) {
      public_deps =
          [ ":${shim.name}(//zircon/kernel/arch/x86/phys:kernel.phys32)" ]
    }
  }
}

test("legacy-boot-shim-tests") {
  sources = [ "legacy-boot-shim-tests.cc" ]
  deps = [
    "//zircon/kernel/lib/acpi_lite",
    "//zircon/kernel/phys/lib/boot-shim",
    "//zircon/kernel/phys/lib/boot-shim:boot-shim-test",
    "//zircon/system/ulib/zxtest",
  ]
}

test("legacy-mem-config-tests") {
  sources = [ "legacy-mem-config-tests.cc" ]
  deps = [
    ":legacy-mem-config",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/zbitl",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

qemu_shim_tests = [
  "core-tests",
  "phys-unittests",
]

template("qemu_shim_test") {
  foreach(shim, legacy_shims) {
    zbi_test("${shim.name}-$target_name") {
      foreach(qemu, qemu_boot_formats) {
        if (qemu.name == shim.format) {
          qemu_kernel = ":${shim.name}(${qemu.environment})"
          forward_variables_from(qemu, [ "timeout" ])
        }
      }
      assert(defined(qemu_kernel), "$shim not in $qemu_boot_formats")

      device_types = [ "QEMU" ]

      forward_variables_from(invoker, "*")
    }
  }
}

group("tests") {
  testonly = true
  deps = [
    ":legacy-boot-shim-tests($host_toolchain)",
    ":legacy-mem-config-tests($host_toolchain)",
  ]
}

group("boot_tests") {
  testonly = true
  deps = [
    ":x86-boot-shim-tests",
    "depthcharge-tests:tests",
  ]
  foreach(shim, legacy_shims) {
    deps += [ ":${shim.name}" ]
    foreach(test, qemu_shim_tests) {
      deps += [ ":${shim.name}-$test" ]
    }
  }
}

qemu_shim_test("phys-unittests") {
  deps = [ "//zircon/kernel/phys/test:zbi-phys-unittests.zbi($phys_toolchain)" ]
}

qemu_shim_test("core-tests") {
  deps = [ "//zircon/system/utest/core:core-tests.zbi($default_toolchain)" ]

  # This runs the real kernel with full hardware reboot/shutdown support and it
  # isn't necessarily really quick, so don't impose the short timeout used for
  # raw phys tests.
  timeout = false
}
